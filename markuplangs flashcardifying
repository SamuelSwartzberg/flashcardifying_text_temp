# across languages

bold (no importance impl)|\textbf{} (though there are others)|&lt;b>|**text** or __text__
italic (no importance impl)|\textit{}|&lt;i>|*text* or _text_
emphasize (generally via italics)|\emph{}|&lt;em>|N/A
strongly emphasize||<strong>|N/A
underline|\underline{}|&lt;u>|N/A
strikethrough foo (whithout special semantics)|different ones in packages|&lt;s>foo&lt;s>|~foo~ or ~~foo~~ (most md flavors)
hyperlink link with title title|\href{link}{title}|&lt;a href="link">title&lt;/a>|[title](link)
hyperlink link with title link|\url{}|&lt;a href="link">link&lt;/a>|[link](link)
block quotation of foo|quote, quotation, or verse environment|&lt;blockquote>&lt;/blockquote>|<code>>foo</code> or <code>> foo</code> (space after > is optional)
Inline quotation of foo|\enqote{foo} (package csquotes)|&lt;q>foo&lt;/q>
inline source code||&lt;code>|``
create a newline|\\ or \newline|&lt;br>| two spaces or \&lt;newline character>
Heading (level one) "foo"|relevant section command|&lt;h1>foo&lt;/h1>|# foo or foo\n===(number doesn't matter)
Heading (level two) "foo"|relevant section command|&lt;h2>foo&lt;/h2>|## foo or foo\n---(number doesn't matter
Heading (level three) "foo"|relevant section command|&lt;h3>foo&lt;/h3>|### foo 
Heading (level six) "foo"|relevant section command|&lt;h6>foo&lt;/h6>|###### foo 
A code block foo||&lt;pre>&lt;code>foo&lt;/code>&lt;/pre>| originally a block indented by four spaces and separated by newlines, but most flavors now have fenced code blocks, which are done like ``` or ~~~(or more)\nfoo\n``` or ~~~
a paragraph foo|\par{foo}|&lt;p>foo&lt;\p>|\n\npar\n\n (uses blank lines)
image with url/source Asuka and alt text best girl|\includegrapics{Asuka} (no alt text possible)|&lt;img src="Asuka" alt="best girl">|![best girl](Reina)
horizontal line|\rule (or \hrule, but both take arguments)|&lt;hr>| three or more *** ___ --- 
superscript text foo|^{foo}|&lt;sup&gt;foo&lt;/sup&gt;
subscript text foo|_{foo}|&lt;sub&gt;foo&lt;/sub&gt;
indicate a variable semantically||<var>
keyboard input||<kbd>
sample output||<samp>
title of a cited work||<cite>
defining instance of a term||<dfn>

using \url{} or \href{} requires the package hyperref in Latex
package hyperref also does autolinking to things such as the TOC

strike is similar to <s>, but obsolete
<tt> used to indicate teletype text, but is now obsolete
<big> used to indicate big text, but is now obsolete; however <small> still works.
<center> used to indicate centered text but is now obsolete

most text markup languages (HTML, Latex, md) will ignore duplciate spaces.
most text markup languages (HTML, Latex, md) will transform newlines into a single space unless otherwise indicated.


i|italic|conventionally italic
em|italic|more important
b|bold|conventionally bold
strong|bold|super important
u|underline|has non-textual annotation of some kind
mark|yellow highlighter|highlighted ≈ area of interest
 

non-breaking space|\nonbreakspace or ~|&amp;nbsp;
ampersand||&amp;amp;
non-breaking hyphen|"~
soft hyphen|\- (only hyphtenates in indicated location) "- (allows hyphenation in other places in the word)|&amp;shy;
"=
if you want a word {{c3::with a hyphen}} to be {{c2::able to be split anywhere}} (using babel ngerman), use {{c1::"=}}

hyperref|create links automatically and \href, \url commands


nested blockquotes| <code>>></code> or <code>> > </code>(space after > to begin blockquotes is optional)

Pandoc md is a superset of most other markdown flavors
Pandoc md defaults to tilde-delimited code blocks.
In pandoc md, you can specify heading identifiers to contain things such as classes, ids, etc
pandoc-md-heading ::= #{#} <title> [\{{<class>|<id>|...}\}]

# SGML/XML/HTML

SGML stands for Standard Generalized Markup Language.
XML is a subset of SGML.
HTML was originally based on SGML, though the relationship has sometimes been fraught.
Since XML is a subset of SGML and HTML is based on it, HTML and XML share similarities in syntax.

SGML/XML/HTML <dfn>tags</dfn> are delimited by &lt;...&gt;
SGML/XML/HTML end tags additionally feature a / to look like &lt;.../&gt;
An SGML/XML/HTML <dfn>element</dfn> is everything from an elements start tag to an elments end tag.
An SGML/XML/HTML element has an <dfn>element name</dfn>.
An SGML/XML/HTML elements start and end tag feature its name: &lt;foo&gt; ... &lt;/foo&gt;.
SGML/XML/HTML elements are begun by a <dfn>start tag</dfn> and ended by an <dfn>end tag</dfn>, unless they are self-closing.
SGML/XML/HTML element consist of start tag, content, and end tag.
SGML/XML/HTML elements' <dfn>content</dfn> is either text or other elements ('child elements').
SGML/XML/HTML content goes between the start and the end tag.
<dfn>Empty elments</dfn> are created by (or a synonym to) self-closing tags.
Self-closing tags in SGML/XML/HTML only consist of a start tag.
Self-closing tags must end /&gt; in XML.
Self-closing tags may end /&gt; or merely &gt; in HTML.
Using a closing tag for self-closing tags is usually invalid.
Empty elements cannot have content, since there is nowhere to put it.
Some HTML elements that are not empty (not self-closing) nevertheless may omit their end tag, an end tag will instead be inserted automatically when necessary.

Whitespace within tags is usually ignored, as long as its not within a tag name or attribute
an HTML element name may only 

SGML/XML/HTML attributes are placed in the start tag.
SGML/XML/HTML attributes have the syntax key="value".
HTML attribute values may be unquoted if they do not feature whitespace and a few reserved characters.
HTML features boolean attributes: attributes which <em>may not</em> take a value, but whose presence or absence represnets true or false.
HTML also features enumerated attriubtes: attributes that take a fixed set of values.
Confusingly, some HTML attributes with boolean semantics are not boolean attributes, but instead enumerated attributes, mostly with the possible values "yes" and "no" or "true" and "false".

SGML/XML/HTML element names may be in any case.
in HTML, putting element names in all lower case is common.
XML element names may contain any unicode with the exception of some metacharacters.
HTML and SVG built-in element names only contain characters a-z.
HTML custom elements must start with a character a-z in lowercase, must contain at least a hyphen character, but otherwise may contain any unicode.

SGML/XML/HTML documents contain exactly one root element. All other elements are contained in the root element.
The SGML/XML/HTML root element has the same name as the relevant language (i.e. html for html, xml for xml, svg for svg)

The document prolog (if you use one) comes at the top of the document, before the root element. There are two parts (both optional): an XML declaration and a document type declaration.

## declaration

the {{c1::XML declaration}} {{c2::contains information about the coming xml document}}. 
the {{c19::XML declaration}}  is {{c3::optional}}, {{c3::but if it appears}}, it must appear in {{c4::the first line of the document}}. 
the {{c20::XML declaration}} takes {{c5::three}} parameters:
<div class="c1-5-scr c12-18-scr">
 <table>
  <tbody><tr>
    <td><code>{{c6::version}}</code></td>
    <td>{{c9::The XML version the document is using}}</td>
  </tr>
  <tr>
    <td><code>{{c7::encoding}}</code></td>
    <td>{{c10::The text encoding this is using, e.g. UTF-8 or Shift_JIS}}</td>
  </tr>
  <tr>
    <td><code>{{c8::standalone}}</code></td>
    <td>{{c11::Whether the document relies on an external source such as an external DTD}}</td>
  </tr>
  </tbody>
  </table>
</div>
<p class="c1-11-scr">Of these, <code>{{c12::version}}</code> is {{c13::mandatory}}. It's syntax is:</p>
<div class="c1-11-scr"><pre><code>{{c18::&lt;?xml}} {{c14::version=}}"1.0" {{c15::encoding=}}"UTF-8" {{c16::standalone=}}"no" {{c17::?&gt;}}
</code></pre></div>

## doctype

A document type declaration, or doctype, is an instruction that associates a particular XML or SGML document (for example, a webpage) with a document type definition (DTD).
A document type declaration must be the first thing in the page if HTML.
A document type declaration must be the first thing after the XML declaration if XML
The syntax of a doctype declaration is &lt;!DOCTYPE somestuff&gt;
In HTML 5, the doctype no longer actually references a DTD, but merely prevents the browser from switching into quirks mode.

## HTML

### General structure

An HTML document is started by the &lt;html&gt; tag and ended by the &lt;/html&gt; tag.
a &lt;html&gt; element consists of a &lt;head&gt; section and a &lt;body&gt;

### elements

#### <head>

The &lt;head&gt; in HTML contains metadata about the document.
it can contain:
the &lt;title&gt; element, which defines the documents title
the &lt;title&gt; element is mainly shown in the browsers tab name / title bar, as well as search engines.
the &lt;title&gt; element can only contain text, not tags.
the &lt;title&gt; element's content should change in response to major state changes.

##### <meta>

The <meta> HTML element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.
<meta> specifies the value in its content attribute

The type of metadata provided by the <meta> element can be one of the following:

If the name attribute is set, the <meta> element provides document-level metadata, applying to the whole page.
If the http-equiv attribute is set, the <meta> element is a pragma directive, providing information equivalent to what can be given by a similarly-named HTTP header.
If the charset attribute is set, the <meta> element is a charset declaration, giving the character encoding in which the document is encoded.
If the itemprop attribute is set, the <meta> element provides user-defined metadata.

meta name
author|document author
description|short blurb about website, may be used in search results
theme-color|indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. The content attribute contains a valid CSS <color>.

#### various inline text

The abbr HTML element represents an acronym or abbreviation.
There used to be an <acronym> element which was obsoleted in favor of <abbr>
The thing an abbr element is short for may either be explained in the text or specified in a title attribute.

#### Media

&lt;video&gt; and &lt;audio&gt; embed a video/audio media player.
Both HTMLVideoElement and HTMLAudioElement inherit from HTMLMediaElement.
The {{c1::HTMLMediaElement}} has a bunch of properties, amongs others

<table>
<tbody>
<tr>
<td>((c:2;::muted))</td>
<td>((c:7;::audio is muted/mute audio))</td>
<td>IDL & Content</td>
</tr>
<tr>
<td>((c:3;::paused))</td>
<td>((c:8;::is paused/pause))</td>
<td>IDL</td>
</tr>
<tr>
<td>((c:5;::loop))</td>
<td>((c:10;::will loop/loop))</td>
<td>IDL & Content</td>
</tr>
<tr>
<td>((c:5;::controls))</td>
<td>((c:10;::is showing controls/show controls))</td>
<td>IDL & Content</td>
</tr>
<tr>
<td>((c:5;::autoplay))</td>
<td>((c:10;::will autoplay/enable autoplay))</td>
<td>IDL & Content</td>
</tr>
<tr>
<td>((c:4;::ended))</td>
<td>((c:9;::Indicates whether it has finished playing))</td>
<td>IDL</td>
</tr>
<tr>
<td>((c:6;::playbackRate))</td>
<td>((c:11;::Represents the speed at which the thing is playing))</td>
<td>JS</td>
</tr>
</tbody>
</table>

You may define a single source for &lt;video&gt; or &lt;audio&gt; via a src element.
You may define multiple sources for &lt;video&gt; or &lt;audio&gt; via child &lt;source&gt; elements.
&lt;track&gt; defines text tracks for media elements (&lt;video&gt; and &lt;audio&gt;)

the poster attribute for video specifies a URL for an image to be shown while the video is downloading. 
If the poster attribute for <video> isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.

##### track

track has a default attribute to indicate that this is a default track
track has a kind attribute to indicate its purpose
track kinds: captions, chapters, descriptions, metadata, subtitles

#### img

<img> is used for including images

#### picture

The picture element contains 0 - ∞ source elements and one <img> element.
The <img> child of <picture> is there to act as a fallback and to give the picture its dimensions.

#### source

the type (a MIME type) of a &lt;source&gt; element is specified via the type attribute, or else the browser will check the MIME type in the HTTP header.
The lists of <source>s for <picture>, <video> and <audio> represents a priority hierarchy - the browser will take the first one that matches.
Conditions that <source>s may have are the type and media attributes
&lt;source&gt; elements for audio/video take their URL in a src attribute; &lt;source&gt; elements for picture take their URL in a srcset attribute

#### Headings

&lt;h1&gt; to &lt;h6&gt; define headings.
It is an antipattern to skip heading levels between &lt;h1&gt; and &lt;h6&gt;
There may only be one &lt;h1&gt; per page, which should describe the overall purpose of the page.
Skipping heading levels between &lt;h1&gt; and &lt;h6&gt; results in bad accessibility and SEO heading levels
Based on h1 to h6 (and nothing else, sadly), the browser generates a document outline 
There was a push to generate the document outline dynamically from nested semantic containers, but this was never implemented.

#### del and ins 

The &lt;del&gt; HTML element represents text that has been deleted from a document.
The &lt;ins&gt; HTML element represents text that has been added to the document.
The &lt;del&gt; and &lt;ins&gt; elements are often used for purposes such as tracking changes or source code diffs.

#### progress and meter

A progress bar shows the progress of a task via a bar that becomes fuller as the task nears completion.
In HTML, a progress bar can be indicated by &lt;progress&gt;
In HTML, meter generally displays as a bar of varying fullness.
In HTML, meter supposedly represents a scalar value within a known range.
In HTML, progress only accepts max and value as attributes, reflecting the semantics of the completion of a task.
The min and max attributes specify the minimum/maximum value and are allowed on certain types of <input>s as well as <meter> and max also on <progress>
The low, high and optimum attributes may only be specified on <meter>
In HTML both progress and meter support a fallback text value within their tags.

#### tables

table > tbody/thead/tfoot (optional level, but if used, any tr must be within it)
tbody/thead/tfoot > tr
tr > th/td

caption  optional child of table

to make a td/th occupy multiple columns/rows, use colspan/rowspan="<integer>"
HTML tables are for tabular data, not for layout

The <colgroup> HTML element defines a group of columns within a table, e.g. for styling.
The <colgroup> is made up of <col> elements
The <col> element takes a span attribute indicating how many columns are being targeted.
The <colgroup> element must be the first child of <table> (besides <caption>, if it is present)

#### canvas

The <canvas> element allows drawing graphics and animations via the canvas scripting API or the WebGL API
Sizing the canvas using CSS versus HTML

The displayed size of the canvas can be changed using CSS, but if you do this the image is scaled during rendering to fit the styled size, which can make the final graphics rendering end up being distorted.

It is better to specify your canvas dimensions by setting the width and height attributes directly on the <canvas> elements, either directly in the HTML or by using JavaScript.

#### map



#### links

The content between the tags should be descriptive of what the link does.

The <link> HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.

The rel attribute defines the relationship between a linked resource and the current document. Valid on <link>, <a>, <area>, and <form>, the supported values depend on the element on which the attribute is found.

rel=opener/noopener create a top-level browsing context that is/is not a auxiliary browsing context if the hyperlink would create either of those, to begin with (i.e., has an appropriatetargetattribute value).
rel=nofollow indicates that the current document's original author or publisher does not endorse the referenced document.
rel=noreferrer: No HTTP Referer header will be included. Additionally, has the same effect as noopener.	 

##### <link>

rel="icon"|specifies an icon representing the current document
rel="stylesheet"|indicates a stylesheet for the document

If rel="icon", the sizes attribute of link specifies which sizes are applicable.
link-sizes-values ::= any|(<size-spec>{ <size-spec>})
size-spec ::= <width>(x|X)<height>

the type attribute of <link> specifies the mime type of the resource; however this is generally omitted except for rel="icon"

##### hyperlinks

The two elements that create hyperlinks are <area> and <a>.
use the attribute href for <area> and <a> to specify an URL of the links target.
The target attribute of <area>/<a> specifies in which browsing context to open the link.
_self|current browsing context
_blank|new window/tab
_parent|parent browsing context
_top|root node browsing context
for <form>, the target attribute represents where to display the response after submitting the form  

###### a

the download attribute of <a> Prompts the user to save the linked URL instead of navigating to it. 
the download attribute of <a> Can be used with or without a value.
the download attribute of <a> used without a value will prompt the browser to suggest a file type.
the download attribute of <a> used with a value will prompt the browser to save it with the specfied name as a prefilled suggestion.

#### forms


Form-associated content is a subset of flow content comprising elements that have a form owner, exposed by a form attribute, and can be used everywhere flow content is expected. A form owner is either the containing <form> element or the element whose id is specified in the form attribute.

<button>
<fieldset>
<input>
<keygen>
<label>
<meter>
<object>
<output>
<progress>
<select>
<textarea>

Form-associated content does not necessarily always have to be within a form.

This category contains several sub-categories:

listed
Elements that are listed in the form.elements and fieldset.elements IDL collections. Contains <button>, <fieldset>, <input>, <keygen>, <object>, <output>, <select>, and <textarea>.

labelable
Elements that can be associated with <label> elements. Contains <button>, <input>, <keygen>, <meter>, <output>, <progress>, <select>, and <textarea>.

submittable
Elements that can be used for constructing the form data set when the form is submitted. Contains <button>, <input>, <keygen>, <object>, <select>, and <textarea>.

resettable
Elements that can be affected when a form is reset. Contains <input>, <keygen>, <output>,<select>, and <textarea>.

##### form itself

A <form> element represents a form.
the method attribute of form accepts post|get|dialog.
post/get|use the POST/GET methods
// for dialog see <dialog>
The action attribute for form specifies the URL to which the form should be submitted.
Forms may not be nested.

##### fieldset

A <fieldset> is an HTML element used to group multiple inputs (and their labels)
The first child of a fieldset may be a <legend> (this is the only place it may appear), which captions its parent fieldset

##### button

The <button> HTML element represents a clickable button
the type attribute for <button> represents the default functionality
submit|submit form data to server
reset|reset form data
button|no default behavior, must manually be implemented

##### textarea

textarea represents a multiline text input field
textarea is not an empty element, and in fact the content can be used to provide a default value.

##### label

A <label> provides a caption/label for a thing, most commonly an <input>
There are two ways of associating an <input> with a label, either nest the input within the label, or set the for attribute of the label to the id of the input.

##### input

specifying the value property of an input element in HTML sets its initial value.
As the state of <input>s changes, the value property in JS is updated.
The validation states of an input are contained in the ValidationState API and corresponding property./

###### types

type="color" for colors
type="hidden" does not show the control, but still submits the data.

####### radio & checkbox

A radio button is a graphical control element that allows the user to choose only one of a predefined set of mutually exclusive options. 
In HTML, a radio button is realized by <input type="radio">
In HTML, multiple radio buttons are linked by assigning them the same number.
radio and checkbox input accept the attribute checked to specfiy if they are checked


Bootstrap:

.form-check # set of radio buttons
.form-check-label   define a label for a checkbox/radio button
.form-check-input   define a checkbox/radio button

####### text

&lt;input type="text"&gt; is single-line only
There are a set of input types that act similarly text, but force a certain type of validation and change the soft keyboard/add input helpers, similar to inputmode:
time-related: date, datetime-local, month, time, week
number: number
other: email, password, tel, search, url
On any text-like input which is not time-related and not 'number' as well as on textarea, you may specify the minlength and maxlength attributes to contstrain the amount of UTF-16 code units.
On any non-time-related, non-number text-like input, you may specify the attribute pattern, providing a regex against which to match the input.
most text-only input fields may have the readonly attribute specfied, which shows the inital value but doesn't allow the user to modify it
the time-related and number text-like inputs plus range accept a step argument.

####### file

inputs of type file accept an attribute accept (lol) which takes a CSL of unique file type specifiers
an unique file type specfier is either a filename extension starting with a period, or a valid MIME type.
valid for the file input type only, the capture attribute defines which media—microphone, video, or camera—should be used to capture a new file for upload with file upload control in supporting scenarios.

####### image

Input type image supports the attributes <img> supports, in addition to the usual ones of input.
When clicked, input type="image" behaves like submit, but also sends the coordinates of the area being clicked.
The coordinates of an input type="image" will be submitted as <name>.x=<coord>&name.y=<coord>

####### submit

###### attributes

the boolean multiple attribute may be set on input type email/file and <select> elements.
When the multiple attribute is set for input type email, emails are separated with the comma.
Any input may have a form attribute to associate it with the id of its form owner.
The list attribute of most text-like input types plus range and color accepts an id of a <datalist>, which represents a list of predefined values.
The <datalist> HTML element contains a set of <option> to indicate a predefined value each.
For most input types, the value attribute merely indicates an initial default, for input type radio/checkbox/image, the value attribute specicifies the value that will be sent if that thing is checked
A checkbox or radio button with no value property will be sent as name=on.
Radio buttons/checkbox inputs are only sent if they are checked.
In a form, the name attribute becomes the key that the value being sent is associated with
If the name of a thing in a form is not specified, the value is not sent.
autofocus
A Boolean attribute which, if present, indicates that the input should automatically have focus when the page has finished loading (or when the <dialog> containing the element has been displayed).

#### option

The <option> HTML element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. 
The <optgroup> HTML element creates a grouping of options within a <select> element.
to set the default option, specify the selected attribute on the option.

#### script

to include an external script, set the src attribute of the <script> element to its URL
the <noscript> tag is for displaying content if the browser does not support JS

#### select 

The <select> HTML element represents a control that provides a menu of options:

#### Ruby 

ruby text/characters are small annotative glosses placed on the top or to the right of characters.
Ruby text/characters is called furigana in japanese.
In HTML, ruby text is delimited by the &lt;ruby&gt; tag
In HTML ruby annotation, the syntax is &lt;ruby&gt;lowertext&lt;rt&gt;uppertext&lt;/rt&gt;&lt;/ruby&gt;
In HTML, one may designate fallback delimiters for the upper text. 
Ruby fallback delimiters are enclosed in &lt;rp&gt; tags, and go before and after the &lt;rt&gt; delimited uppertext.

#### aside

An aside (there is no agreed-upon term, so I'm using the term that HTML uses) is a part of the main content thats only partially related to the main content, and often placed outside of the main flow. 
A pull quote is an aside that is a quote from the article.

#### figure

In general, figures are images/diagrams/similar with a caption.
In general, figures float (in the general sense).
In HTML, the <figure> element specifies its caption with <figcaption>

#### float

a float is across styling languages a thing that exists outside of the normal flow of text.

float places an element at one side of the container or next to another floating element, allowing text/inline elements to wrap around it.
float: left/right makes the element go to the left/right side of the container/the next float respectively.
A floating element is where the (computed) value of float is not none.
Float implies display: block, and converts it if required.
The clear CSS property sets whether an element must be moved below (cleared) floating elements that precede it. 
the clear property applies to clearing all floats if set to both, or to only clearing left/right floats if set to left or right.
If element contains only floated elements, its height will collapse to nothing.
To prevent and element containing only floated elements height collapsing to nothing, a technique called a clearfix is used.
The most common clearfix technique might be: ::after {
  content: "";
  display: block;
  clear: both;
}

<br>---<br>
  §§ In contrast to ((c:10;::CSS)), in ((c:10;::Latex)) ((c:11;::floats)) merely ((c:12;::move vertically and not horizontally)). §<br>
§§ If possible, latex places ((c:13;::floats)) ((c:14;::close to where they appear in the source text)). §<br>
§§ ((c:15;::Floats)) are relevant for ((c:9;::things that cannot be broken over a page (images, tables))). §<br>
§§ To ((c:16;::uniquely identify)) ((c:17;::floats)) no ((c:18;::matter where they end up)), they are ((c:19;::numbered)) by latex. §<br>
§§ By default, ((c:20;::table)) and ((c:21;::figure)) are the two ((c:22;::environments)) that are ((c:23;::floats)). §<br>
§§ The ((c:24;::table environment)) is ((c:25;::functionally equivalent to)) the ((c:26;::figure environment)), but ((c:27;::has a separate index of numbering)). §<br>
===<br>

<br>---<br>
  §§ The ((c:28;::[option])) for ((c:29;::table, figure)) says ((c:30;::where roughly you would like the table/figure to float.)) §<br>
§§ ((c:31;::the option for controlling where a floating element)) goes consists of ((c:32;::a list)) of specifiers, which are ((c:33;::single chars)) ((c:34;::one after the other)) without ((c:35;::separators)), indicating ((c:36;::relative preference)) §<br>
===<br>

<table class="cloze-group hide-if-inactive">
  <thead>
    <tr><th></th>
    <th></th>
  </tr></thead>
  <tbody class="cloze-group-children hide-if-inactive-children">
    <tr><td>((c:1;::h))</td> <td>((c:2;::place where it appeared in the source text as much asp possible))</td></tr>
<tr><td>((c:3;::H))</td> <td>((c:4;::force place where it appears (basically turn it into a nonfloat)))</td></tr>
<tr><td>((c:5;::p))</td> <td>((c:6;::special page for floats only))</td></tr>
<tr><td>((c:7;::t/b))</td> <td>((c:8;::place at top / bottom of page (respectively)))</td></tr>
  </tbody>
</table>

<br>---<br>
  §§ the ((c:37;::float)) package ((c:40;::improves)) ((c:38;::float handling)) and ((c:40;::defines)) ((c:39;::the float specifier H)) §<br>
===<br>

<br>---<br>
  §§ If you have ((c:41;::a table (tabular))) where you want to make sure it ((c:42;::flows well and does not cause awkward page breaks)), you should ((c:43;::float it (surround it in a table env) )), but if ((c:44;::you care exactly where it appears in relation to the source text)), you should ((c:43;::not float it (not surround it in a table env))) §<br>
===<br>

<br>---<br>
  §§ ((c:45;::\caption{foo))} is there to ((c:46;::add a caption foo)) to ((c:47;::floating environments)). §<br>
§§ ((c:48;::the optional argument [])) to ((c:49;::\caption)) takes ((c:50;::a short title)) for use ((c:51;::in the listoftables/figures)) §<br>
§§ to ((c:52;::\label)) a ((c:53;::table/figure)), the ((c:52;::\label)) must go ((c:54;::directly after \caption)) §<br>
===<br>

<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}</span>

#### data

<data> represents things that have a machine-readable translation
<time> represents a time/date/duration.

#### Lists

In HTML and Latex, ordered and unordered lists are surrounded with something different, but use the same list items.
Latex uses the same list items for description lists also, while HTML uses different elements for those.
by default, latex only allows the nesting of lists to a depth of four

ordered list|enumerate environment|&lt;ol>
unordered list|itemize environment|&lt;ul>
description list|description environment|&lt;dl>
list item|\item|&lt;li>
Term in a description list with title foo and description/explanation bar|\iten[foo]bar|&lt;dt>foo&lt;/dt>&lt;dd>bar&lt;/dd>

<br>---<br>
  §§ In markdown ((c:1;::Lists items)) are each ((c:3;::started by)) ((c:2;::one or more symbols)), while lists themselves are delimited by nothing more than any block-level item.. §<br>
§§ ((c:4;::ordered list items)) are started by ((c:5;::&lt;n&gt;. (e.g. 1. or 7.))). §<br>
§§ it does not matter ((c:6;::with which digit you number list items with (e.g. even if you do <code>21. foo\n2. bar)</code>))&nbsp;they will ((c:7;::always start one and go from there (or whatever you then change it to via css))). §<br>
§§ ((c:8;::unordered list items)) are started by ((c:9;::-)), ((c:9;::*)) or ((c:9;::+)), which can be ((c:10;::mixed and matched)). §<br>
===<br>
<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}</span>

#### containers

div and span are 'pure' container without any semantics.
the difference between div and span is that div is by default block-level (display: block flow) and that span is by default inline (display: inline flow)

##### dialog

The dialog element rerpesents a dialog box container semantically.
The dialog element has a boolean attribute open representing whether the dialog should be shown or not.
<form> elements can close a dialog if they have the attribute method="dialog". When such a form is submitted, the dialog closes with its returnValue property set to the value of the button that was used to submit the form.

##### semantic containers

Some HTML elements are functionally just containers with extra semantics attached (part of semantic html)
HTML element|semantic container for
header|heading-related content
footer|footer
main|
section|generic, but semantically meaningful section
article|self-contained information which could be independently reused
aside|content only indirectly related to main content
address|contact information|may not contain heading/sectioning content
nav|navigation section

#### inline nonhtml

&lt;style> allows including CSS inline, by including it as content
&lt;script> allows including JS or other scripting languages inline, by including it as content

#### deprecated elements

<menu> was supposed to be a semantic alternative to <ul>

### content categories

Most HTML elements are a member of one or more content categories — these categories group elements that share common characteristics. This is a loose grouping (it doesn't actually create a relationship among elements of these categories), but they help define and describe the categories' shared behavior and their associated rules.

Flow content
Flow content is a broad category that encompasses most elements that can go inside the &lt;body> element.

Heading content is a subset of flow content that includes h1-h6, and theoretically though not relevantly the never-implemented the-spec-is-lying-about-it hgroup
Sectoning content is a subset of flow content that was supposed to be relevant for the outline algorithm that was never implemented, and so is a somewhat-irrelevant category.

Phrasing content is a subset of flow content that defines the text and the markup it contains, and can be used everywhere flow content is expected. 

Content is palpable when it's neither empty or hidden; it is content that is rendered and is substantive. Elements whose model is flow content should have at least one node which is palpable.

#### embedded content

Embedded content is a subset of flow content that imports another resource or inserts content from another mark-up language or namespace into the document, and can be used everywhere flow content is expected.

embedded cotnetn cotnains the media elements video and audio, image-related elements img, picture, and svg, math, iframe, plus the obsolete elements applet

<applet> was used to embed java applets, but is now obsolete.

&lt;math> and &lt;svg> embed content in HTML from MathML and SVG respectively

### JS interface

any HTML element has a JS interface that is called HTMLSomeelementnameElement.

An IDL (Interface Description Language) is a generic language used to specified objects' interfaces apart from any specific programming language.

In HTML, most attributes have two faces: the content attribute and the IDL attribute.

The content attribute is the attribute as you set it from the content (the HTML code) and you can set it or get it via element.setAttribute() or element.getAttribute(). The content attribute is always a string even when the expected value should be of a different type.

the IDL attribute may be accessed from js like element.foo.

Any content attribute is also acessiable as an IDL attribute.

### Common attributes

the <code>datetime</code> attribute specifies the date and time associated with the element
<code>datetime</code> is an attribute taken by &lt;del&gt;, &lt;ins&gt;, and &lt;time&gt;

The <code>cite</code> attribute provides an URI that points to the source of a quote or change.
The <code>cite</code> attribute can be used on &lt;blockquote&gt;, &lt;q&gt;, &lt;ins&gt;, &lt;del&gt;

The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.
The autocomplete attribute can be used on inputs that take a text-like value, textarea elements, select elements and form elements.
The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted (if in a form).
The disabled attribute is supported by <button>, <command>, <fieldset>, <keygen>, <optgroup>, <option>, <select>, <textarea> and <input>.
The value attribute specifies the value of a thing.
If the value attribute of an element is pre-filled, it generally appears as a default.

content within <video>/<audio>/<canvas> is shown as a fallback for browsers that don't support the element.


#### Global attributes

Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.
Kinds of global attributes:
aria-*
the onevent event handlers
xml:lang/xml:base — these are inherited from the XHTML specifications and deprecated, but kept for compatibility purposes.

class, id
HTML Microdata properties: item*
translate: an enumerated attribute whether the element should be translated, e.g. by tools such as google translate.

tabindex:
The tabindex attriubte indicates if and how an element can be focused by the keyboard.
&nbsp;{{c1::tabindex}}{{c2::=0}} indicates that {{c3::an element can be focused}} (e.g.&nbsp;{{c4::by the tab key}})
&nbsp;{{c1::tabindex}}{{c2::=-1}} indicates that {{c3::an element can <b>not&nbsp;</b>be focused}} (e.g. by {{c4::the tab key}})
Values of tabindex larger than 0 specify the order in which things can be tabbed, use of this is highly discouraged.
CSS inline styling with style.
part and slot for the shadow DOM.
`is` for custom elements.
nonce
lang
hidden semantically indicates that the element is not relevant at the moment.
hidden in fact just sets display to none.
draggable is an enumerated attriubte w/ "true" and "false" which indicates whether the element can be dragged using the Drag and Drop API
data-* 
dir: enumerated attriubte ltr/rtl/auto
contenteditable|makes the content editable
the title attribute is *generally* shown as a tooltip, unless the element implements title differently.

##### text editing only

spellchek and inputmode attributes that are global attributes, but only can usefully be used where text can be inputed in html.
there are three places where text can be inputed in HTML: <input type="text">, <textarea> and anything w/ contenteditable
spellcheck: an enumerated attribute w/ "true" and "false" whether to check the spelling of the thing
inputmode: specify the kind of text input that is required, thus allowing mobile devices to show appropriate soft keyboards
inputmode is different from <input type="..."> in that it does not enforce any kind of validation, users *can* still input anything they want.
inputmode value|shows|equivalent <input> type, if extant
none|no virtual keyboard
text|default virtual keyboard
decimal|keyboard with digits and decimal separtors, perhaps a -
numeric|keyboard with digits only, perhaps a -
tel|a telephone keyboard: 0-9, *, and #|type="tel"
search|return key may be labelled search, perhaps other changes|type="search"
email|optimized for email entry, contains @ prominently|type="email"
url|optimized for url entry|type="url"

autofocus
autocapitalize: capitalization of user input
enterkeyhint: is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards. 

# environment

## browsing contexts

A browsing context is the environment in which a browser displays a Document. 
A browsing context may be a tab or a window as well as a frame (iframe/frame)
A browsing context has a corresponding WindowProxy object.
A WindowProxy object acts as a interface for the Window object of a browsing contexts active Document.
A browsing context has an opener browsing context, which is null or a browsing context. It is initially null.
A browsing context has a disowned boolean. It is initially false.
A browsing context has an is closing boolean. It is initially false.

It is possible to create new browsing contexts that are related to a top-level browsing context without being nested through an element. Such browsing contexts are called auxiliary browsing contexts. Auxiliary browsing contexts are always top-level browsing contexts.

An auxiliary browsing context has an opener browsing context, which is the browsing context from which the auxiliary browsing context was created, and it has a furthest ancestor browsing context, which is the top-level browsing context of the opener browsing context when the auxiliary browsing context was created.
The opener attribute of Window returns the WindowProxy object of the opener broswing context, if extant/available.

## session history

Each browsing context has a session history.
A session history conttains the Document objects that the browsing context has presented, is presenting, or will present. 

## window

the Window object has a few properties representing certain UI elements (all bars), all represented by a BarProp object with the single attribute 'visible'
BarProps: locationbar, personalbar, menubar, crollbars, statusbar, toolbar

# the DOM

<table>
  <tbody>
    <tr>
      <th colspan="2">EventTarget</th>
    </tr>
    <tr>
      <td>others...</td>
      <td>
        <table>
          <tbody>
            <tr>
              <th colspan="5"><span class="c9-cloze">Node</span></th>
            </tr>
            <tr>
              <td>others...</td>
              <td>
                <table>
                  <tbody>
                    <tr>
                      <th colspan="3"><span class="c12-cloze">Element</span></th>
                    </tr>
                    <tr>
                      <td>others...</td>
                      <td><span class="c10-cloze c12-scr">HTMLElement</span></td>
                      <td><span class="c11-cloze c12-scr">SVGElement</span></td>
                    </tr>
                  </tbody>
                </table>
              </td>
              <td>
                <table>
                  <tbody>
                    <tr>
                      <th colspan="2"><span class="c8-cloze">Document</span></th>
                    </tr>
                    <tr>
                      <td><span class="c6-cloze c8-scr">HTMLDocument</span></td>
                      <td><span class="c7-cloze c8-scr">XMLDocument</span></td>
                    </tr>
                  </tbody>
                </table>
              </td>
              <td><table><tbody><tr><th><span class="c5-cloze">DocumentFragment</span></th></tr></tbody></table></td>
              <td>
                <table>
                  <tbody><tr>
                    <th colspan="3"><span class="c1-cloze">CharacterData</span></th>
                  </tr>
                  <tr>
                    <td><span class="c2-cloze c1-scr">Text</span></td>
                    <td><span class="c3-cloze c1-scr">Comment</span></td>
                    <td><span class="c4-cloze c1-scr">ProcessingInstruction</span></td>
                  </tr>
                </tbody></table>
              </td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
  </tbody>
</table>
<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}</span>

# other stuff

ISO dates
The chrominum javascript engine is v8, d8 is the developer shell for v8
A bricked device is one that no longer can function at all (has become as useful as a brick)

# data

open data is data available to everyone freely.
linked data is data that is interlinked usefully.

## data models

A data model is a model that provides structure to data, and to their properties, how they relate amongst each other, and how they relate to RL.

In computing, a database is an organized collection of data stored and accessed electronically. 
A DBMS (database management system) is the software used to manage a database.

A (data)(base) query language is a language used to query data in databases/information systems.

Structured data is a data model used for describing web pages.
Structured data is used by search engines to provide more rich results.
Shema.org is a set of schemas for structured data.

### relational data model

https://upload.wikimedia.org/wikipedia/commons/7/7c/Relational_database_terms.svg

in a relational data model, a tuple is an ordered set (lol) of attribute values
in a relational data model, a relation is made up of a heading and body.
in a relational data model, a heading is a set of attributes.
The number of attributes constituting a heading is called the degree, which term also applies to tuples and relations. 
in a relational data model, a body is a set of n-tuples of the length of the degree of the heading.
The heading of the relation is also the heading of each of its tuples.
in a relational data model, an attribute is an ordered pair of attribute name and type.
A table is an accepted visual representation of a relation.
relation|table
tuple making up the body|collection of rows
n-tuple|row
attribute|column

a relational database is a database with a relational data model.
In a relationnship database each n-tuple/row has its own unique key known as the primary key.
A foreign key is a column used in a relational database to link tables/relations by referencing a primary key of a row in a different relation/table.
A child table uses a foreign key to reference a primary key in the parent table. (parent ← child)
Foreign keys can be used for one-to-one or one-to-many relationships

SQL is a language used to manage relational databases.
SQL, despite its name, consists of a data query language, data definition language, data control langauge, and data manipulation language.

### graph data models

A graph data model is one that organizes entities and their relationships as a graph.
A graph database is a database that uses a graph data model.

A ontology languages is a language that describes an ontology. 

The semantic web is sometimes known as web 3.0
The goal of the samntic web is to make internet data machine readable
A semantic query is a data query on the semantic web.
the social graph is a graph that represents social relationship between entities.
the open graph allows web pages to become objects in a social graph

#### RDF

RDF = resource description framework
RDF is a technology meant to realize the semantic web.
RDF implements a graph data model.
semantic triple = RDF triple 
semantic/rdf triple is sometimes shortened triple
a semantic triple is the atomic data unit in the RDF data model
a semantic triple has the three roles subject, predicate object
a semantic triple encodes the three roles subject predicate object as a directed graph, with the subject and object being nodes, and the relationship as an edge.
A named graph is a set of triples named by an URI

In rdf, a node can be a IRI, literal, or blank node

an RDF semantic triple indicating that art knows bob using the FOAF ontology might look like ex:art foaf:knows ex:bob

##### sparql

SPARQL = SPARQL Protocol and RDF Query Language
SPARQL is proounced sparkle
SPARQL is an RDF query language

##### JSON-LD

JSON-LD is an implementation of RDF
JSON-LD is included via a script tag 
Of the structured data formats, google prefers JSON-LD.

#### Other implementations of structured data

RDFa Lite is a minimal subset of RDFa that can be directly included in HTML.
Microdata is a format to include metadata, including but not limited to RDF data, directly included in HTML.

#### OWL

OWL short for web ontology langauge
OWL, RDFS and SHACL are ontology languages for RDF

#### applications

FOAF = friend of a friend
FOAF is an ontology for people, their properties and their relations using RDF/OWL 

##### open graph

The Open Graph protocol enables any web page to become a rich object in a social graph.
open graph is based on RDFa.
Open graph metadata is specified within meta tags.
There are four required properties for open graph, which are og:image, og:title, og:type and og:url.
The property of the open graph metadata is specified within the property property, and the value of the open graph metadata is specified within the content property.

# Modelling

UML  Unified Modeling Language
UML is a general modelling language most commonly used in the field of software engineering.

## class

An UML class diagram generally consists of three parts, a class name on top, member variables in the middle, and member methods at the bottom.
<img src="sm_220px-BankAccount1.svg.jpg">

## sequence

((h:all;::<img src="sm_paste-d8abaabcb6ec43ff8294b3567cb96b4fe4aa48f2.jpg">))

A sequencie diagram is an UML diagram showing object interactions as time flows.
In a sequene diagram, the lifelines go from the objects downwards.
In a sequence diagram, a thicker bar on the lifeline means the object is active.
In a sequence diagram, messages between objects are indicated by horizontal lines between the lifelines.
In a sequence diagram, the further down a message, the later it comes
non-filled arrowheads   Async messages
filled arrowheads   synchronous messages
request messages   solid line arrows
Answer messages   dashed arrows


## object

<img src="sm_paste-7a55c6f447e4be8da11b84f2d660fe36fa529dc8.jpg">
Objects in UML object diagrams at least contain a top field with the object name, the class name or both, often they also contain a field below that for instance varaibles

# UI

WIMP = Windows, icons, menus, pointer

## disclosure widgets

A disclosure widget has a collapsed state where it only shows a heading, and an expanded state which shows the heading and more content contained within.
With a disclosure widget, the content contained within is shown if the heading is interacted with.
With a disclosure widget, the heading often indicates that it can be expanded/shrunken either via ▼/▲ or via +/-
In html, a disclosure widget is defined via a details element.
In html, the header of a disclosure widget is defined by a summary element.
An accordion is a set of multiple disclosure widgets.
Most commonly, disclosure widgets start out in their collapsed state by default.
In html, you can force a disclosure widget to start in its open state by specifying the boolean attribute open.
<img src="disc.png"><img src="kfw-disclosure.jpg">((h:2;::<img src="sm_FAQ-Content-Style-Accordion.gif">))

## status bar

<div class="flex-container">((h:all;::<img src="sb-paint.png">))((h:all;::<img src="460px-Emacs_statusline.png">))((h:all;::<img src="Gedit_3.11.92.png">))((h:all;::<img src="StatusBar_Light.png">))((h:all;::<img src="lGPcKx09nzIAFtAjFbQ_6FoXc3hnT7y0oMOGVNI8tbFWziGJQdUAgar1TBMmIGP_2Sj0gvLJonpoydv5UyTrOl_WJnrDz45RPMkSM7s=w1064-v0.png">))</div>
<br>---<br>
  §§ On ((c:1;::desktop)), a ((c:2;::status bar)) is a ((c:3;::horizontal)) ((c:4;::bar)) generally at ((c:5;::the bottom of a window)). §<br>
  §§ A ((c:15;::status bar)) on desktop displays ((c:6;::various kinds of information)), often used when ((c:7;::editing documents ((n)vi(m), vscode, various office programs, etc.))). §<br>
  §§ On ((c:8;::mobile)), a ((c:9;::status bar)) is a ((c:10;::horizontal)) ((c:11;::bar)) at ((c:12;::the top of the screeen)). §<br>
  §§ A ((c:16;::status bar)) on mobile contains ((c:13;::notification)) and ((c:13;::system)) ((c:13;::icons)) ((h:gb;::(such as ((c:14;::power, networks, time))))) §<br>
===<br>
<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}</span>>

# the internet

On a basic level, the internet is a system of globally interconnected {{c1::computer}} {{c1::networks}}.
The internet runs on the internet protocol suite.

## models

The OSI model remains useful, but unimplemented.
In both the OSI and the TCP/IP Model of how computers communicate, the application layer is the {{c1::top}} layer.
Internet protocol suite = TCP/IP
The internet protocol suite is a protocol stack
Instead of the OSI model, the TCP/IP model is used to model the communication on the internet today.
One of the first networks to implement the {{c1::TCP/IP protocol suite}} and one of the precursors to {{c2::the internet}} was {{c3::ARPANET}}

<table>
<thead>
<tr>
<th>OSI Model</th>
<th>TCP/IP Model</th>
</tr>
</thead>
<tbody>
<tr>
<td>((c:1;::Application))</td>
<td rowspan="3">((c:10;::Application))</td>
</tr>
<tr>
<td>((c:2;::Presentation))</td>
</tr>
<tr>
<td>((c:3;::Session))</td>
</tr>
<tr>
<td>((c:4;::Transport))</td>
<td>((c:5;::Transport))</td>
</tr>
<tr>
<td>((c:6;::Network))</td>
<td>((c:7;::Network/Internet))</td>
</tr>
<tr>
<td>((c:8;::Data Link))</td>
<td rowspan="2">((c:11;::Link))</td>
</tr>
<tr>
<td>((c:9;::Physical))</td>
</tr>
</tbody>
</table>
<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}</span>

## layer 7

HTTP, SMTP, POP, SSH, telnet...

### URLS & Hyperlinks

#### URI

URN|Uniform Resource Name
URLs generally locate things on the internet, generally on the application layer.
URIs used to be subdivided into URLs and URNs.
Mainly historically, URLs were FOOBAR, and URNs were unique identifiers of a resource.
Today, URNs are merely another FOOBAR, urn:

#### domains

TLD
foo.bar.net  .net

#### hotlinks, deeplinks

hotlinking = inline linking
Hotlinking is embedding a resource from {{c1::another fqdn}}
A deep link may be a link that links to any other page than the site's home page, a link that links to content within an installed app instead of a webpage (polysemy).
A link to the homepage of a page is called a surface link

### telnet/ssh

SSH = secure shell
Telnet is a protocol that sends text plainly and immediately as 8-byte ASCII characters, with the high bit unset.
the SSH protocol, in contrast to the telnet protocol and the various rsh commands/protocols, is encrypted (via public-key cryptography).
SSH is a protocol whose main purpose is accessing the shell on other computers.
In accessing the shell on other computers, the SSH protocol has replaced rsh/telnet.
Besides accessing the shell on other computers, the SSH protocol allows for other network services, such as data transfer.
The berkeley r-commands are a suite of commands and associated protocols that are variants of well-known commands, but may be run remotely.
In doing various things on remote hosts, SSh has replaced the various berkeley r-command.
Specifically, to copy data between remote hosts, the scp command running over SSH has replaced rcp.
The berkeley r-commands, telnet and now SSH all have a client-server architecture.

### the web

WWW = World Wide Web
The WWW runs on the internet, using the protocol HTTP(S).
The WWW is only one of many technologies running on the internet.
A web browser is a program to access the WWW.
The WWW was developed in CERN in 1989 by Timothy Berners-Lee.
The first web browser was written in 1990, the WWW was released in 1991.
The main organization working on web standards is the W3C.
World Wide Web Consortium = W3C
A web site is a collection of web pages, generally one that share a domain name/FQDN

## layer 4

The ping utility uses the ICMP protocol's mandatory ECHO_REQUEST datagram to elicit an ICMP ECHO_RESPONSE from an IP.

# hardware

## circuits

A combinatorial logic circuit is one whose output only depends on its input.
A sequential logic circut is one whose output depends on its input, and the previous state.

## processors

### architecture

The harvard architecture separates instructions and data (= does not store them in the same way/treat them differently)
Modern CPUs are claimed to be stored-program computers, but since they separate data and instructions to a certain extent, they may be considered modified Harvard architecture to a certain extent.

In the VNA, the CPU, memory and IO are connected to/via the bus.
<img src="sm_tmp_xpihn7q.png">

### CPU

#### registers

A processor generally has between 10-100 registers.
There are many different kinds of registers:
register|contains
General Purpose Registers|mostly whatever you like
Register: Stack Pointer|stack pointer

#### ALU

ALU  Arithmetic logic unit
https://upload.wikimedia.org/wikipedia/commons/0/0f/ALU_block.gif
The ALU performs arithmetic and bitwise operations.
A basic ALU takes two imputs and returns an output, generally all of the word size of the encapsulating CPU.
A basic ALU, besides its two inputs and an output, has a status flag input and output as well as an opcode input.

##### Adders

An adder is a logic circuit (I think?) that chains logic gate to perform addition.
Adders are used within the ALU.
A half-adder adds two binary digits and outputs a sum and a carry.
A full adder is like a half-adder, but also takes a carry-in.
A half and a full-adder ouptuts an output of size 2 bit.
Chaining full adders allow us to do arbitrary large binary addition.

### CU

CU  Control Unit

### instruction set

An instruction set architecture defines the instruction set plus a bunch of other CPU features (such as registers, addressing, I/O) (however, the two terms are often also used interchangably)
The instruction set is the set of operations a processor supports, which bit sequences represent which instructions, and how the arguments are organized.
Depending on the instruction set, machine langauge instructions may all be the same length or not.
In a general sense, a word is how many bits a  PU may address at once.
The length of a word is the word size
In a very general sense, what is 32 bit in a 32-bit processor and 64 bit in a 64-bit processor is the {{c1::the word size}}

A Load-store architecture is a type of instruction set architecture which only has instructions that either do ALU operation {{c1::access (load/store) memory}}, never at the same time.
For a load-store architecture, all things being operated on must be in registers.

#### RISC CISC

RISC  Reduced instruction set computer
CISC  Complex instruction set computer

##### CISC

x86 is a family of instruction set architectures
x86 are the most common type of CISC architectures.
x86 architectures with 64-bit word size are called x86_64
x86_64 may also be called AMD64 or Intel 64

##### RISC

ARM is a family of instruction set architectures
ARM ISAs are the most common type of RISC arcchitectures.
While PowerPC was also a RISC ISA and was widely used in all sorts of products, RISC largely became mobile/embedded-only in the mid 2000s until 2021, with apple's switch to ARM RISC processors and their use in in e.g. the worlds most powerfull supercomputer 富岳.
RISC chips generally have far lower power consumption than CISC chips.
Most RISC ISAs are also load-store ISAs.
CPI = clocks/cycles per instruction
In general, a RISC ISA has 1 CPI, with fixed-length instructions.

### cache

CPU caches are used to speed up memory access, which is especially important since CPU memory is orders of magnitude slower than processing speed.
The cache levels that are common as of 2021 are L1, L2 and L3 cache, with L4 cache slowly becoming more common.
processor finds memory location in cache   cache hit
processor does not find memory location in cache   cache miss
When a cache miss occurs, the processor generally needs to wait while the data is being fetched
the {{c1::Cache replacement policy}} is the policy that decides what to 'evict' on having to add something new to the cache on a cache miss

### clocking

A clock signal {{c1::coordinates/synchronizes the circuits}} the circuits of the thing it's governing.
A clock signal is usually a square wave with a high and low state.
In relation to the clock signal's square wave the circuits activate on {{c1::on one (or both) of the (vertical-ish) edges}}, depending on the implementation
{{c1::A synchronous circuit}} is a circuit where the changes are synchronized by a clock signal.
DDR  Double data rate
{{c1::DDR (double data rate)}} is the technology that activates the circuit. both on the rising and the falling edge of the clock signal

## chipset

<img src="sm_chipset.svg">

## assembler

Why don't we just write programs in machine code/assembler?  extremely mühselig and error-prone
Today, assembler/machine code is almost always generated by compilers/interpreters/etc.

# topologies

A tree network may consist of star networks connected {{c1::via a bus network}}, or may be a tree just as a network.

# HCI

HCI = Human Computer 
The set of ways a human can interact with a computer   Interaction styles
WYSIWYG   What you see is what you get

## IO

Input devices are devices that move/transform data from  {{c1::the world ≈ the user to the computer}}
Output devices are devices that move/transform data from {{c1::the computer to the world ≈ the user}}
The most important input devices are probably mouse and keyboard, less common ones are gamepads, motion tracking devices, microphones, cameras, etc.
Examples of output devices are screens, speakers, etc.
A pointing device is an input device that allows a user to input spatial information.
Examples of pointing devices are mice, trackpads, trackballs, pointing sticks aka trackpoints.
Pointing devices are governed by fitts law
Fitts law says that the time required to rapidly move move to a target area, e.g. by a pointing device, is a function of the ratio between the distance to the target and teh widht of the target.

# data storage

## memory

Memory that retains information after power is removed   Non-volatile memory
Memory that requires power to retain stored information   Volatile memory
The difference between primary and secondary memory is that the CPU can address primary memory directly.

### addressing

Logical Address = Virtual Address
Virtual memory is addresed vy virtual addresses.
For primary memory, virtual addresses are mapped to physical addresses in the page table.
The MMU (Memory management unit) is a hardware device typically used to handle the page table/mapping of log to phys addr.
Virtual memory will appear to an application to be continuous, though the physical memory it occupies may be discontinous.
Today, modern OSs only expose virtual memory to user-level programs.

### rom

ROM  Read only memory
ROM is memory that is set once, and then cannot be changed anymore, or only using a special technique.
ROM was used to store games on game cartidges, for example.

### primary memory/storage

The terms primary storage/memory, internal storage/memory, and main storage/memory are often used interchangeably.
As I will use the term, primary memory consists of CPU Registers and Cache as well as main memory.
Both registers and cache are directly on the chip.
Nonvolatile RAM   NVRAM
SRAM  static random access memory
DRAM  dynamic random-access memory
RAM random-access memory
SRAM is faster than DRAM and is therefore used for the chace and internal registers.
RAM is sometimes used as a catch-all for any primary memory.
principle of locality = (Principle of) Temporal Locality &amp; Spatial Locality
principle of locality relates to memory access, specifically it predicts what memory will be accessed next.
principle of spatial locality = Memory that is close (to the currently accessed memory cell) will tend to be accessed again
principle of spatial locality = Memory that has recently been referenced will be referenced again soon.
Memory closer to the processor is faster but more expensive and smaller, memory further away from the processor is slower but cheaper and larger.
memory speed:
registers > cpu cache > main memory > secondary memory

### secondary memory

secondary meory is generally non-volatile memory

#### drives

##### HDD

a HDD is made up of clusters which are made up of sectors.
A sector used to be 512 byte large normally; today, that is usually 4096 Bytes (4KiB)
<img src="sm_hdd_w_labels.svg">

##### SSD

an SSD chip is made up of blocks which are made up of pages
To write new data on an SSD, first you need to erase the old data.

<div class="onion-box"><span>((c:;::SSD chip))</span><div class="onion-box"><span>((c:;::block))</span><div class="onion-box"><span>((c:;::page))</span></div><div class="onion-box"><span>((c:;::page))</span></div><div class="onion-box"><span>((c:;::page))</span></div><div class="onion-box"><span>((c:;::...))</span></div></div><div class="onion-box"><span>((c:;::block))</span></div><div class="onion-box"><span>((c:;::...))</span></div></div>

#### partitons

A secondary memory device is divided into n partitions.
How partitions are layed out on a secondary memory device is described by the partition table.
in the past, the MBR would have also included a partition table.
the MBR partition table was limited to 64 byte, which allowed for up to four partitions.
Today, partition tables are generally GPT, since MBR was limited to addressing 2 TiB drives.
GPT  GUID Partition Table
GUID in GUID Partition Table  globally unique identifier

#### file system

The file system is the method/system/whatever that controls/specifies how {{c1::data is organized within a partition}}
A flat file system is a file system with no {{c1::subdirectories}}
Most *nix file systems are case-sensitive, but the apple ones (AFS/HFS+) are not; furthermore, windows is not case-sensitive.
Even non-case-sensitive file systems are almost always case-preserving.

#### directory structure

{{c1::the directory structure}} is the way data is organized in a file system using directories

##### home dir

Generally one home directory per user.
On *nix, the home directory of a user generally contains all the stuff pertaining ot a user.
FHS: Home directories live in /home/


##### XDG Base Directory Specification

Spec governing the organization of files in your home directory   XDG Base DIrectory Specification

##### FHS

FHS  Filesystem Hierarchy Standard
FHS (Filesystem Hierarchy Standard) is the Linux spec for {{c1::directory structure}}\

###### /sys

/sys provides a window to the kernel

###### /proc

/proc contains information for each process and a lot of runtime system info.

###### /var

/var/mail/   MBOXes for each user
/var/spool/   data awaiting processing

###### /opt

/opt   software packages (complete and kind of foreign)

###### /usr

Data within /usr should be usable on any FHS-compliant host, ergo data specific to host or time should not go in /usr

###### bins

whatever/bin is generally for executables
Originally and still in some unixes, /bin would have contained system-essential binaries, while /usr/bin and /usr/local/bin would have contained non-system essential bins (and analogously for lib)
today, /bin often just is a symlink to /usr/bin (and analogously for lib)
whatever/lib generally conains libraries for whatever/bin
/sbin is for binaries needing superuser priviledges/for system administration

###### /tmp

/tmp is for temporary files.
/tmp is sometimes emptied on process exit or on boot.

###### /etc

/etc contains confi files for all the programs that run on your Linux/Unix system
hosts

###### /dev

/dev contains device files.
It makes sense to treat devices as just another file, as the operations they support (reading, writing or both) are the same as a file.
device files are files that are interfaces to device drivers (or more rarely other things).

####### not real devices

/dev/random and /dev/urandom are CSPRNGs of nix* systems
the difference between /dev/random and /dev/urandom is that the former blocks to wait for more entropy if necessary, the latter does not.
the man suggests one use /dev/random for long-lived GPG/SSL/SSH keys, and /dev/urandom for anything else.
/dev/full is  always full
/dev/zero returns as many 0x00 as you like.
anything written to /dev/null discards the data, whence its nicknames bit-bucket/black hole

####### block device files

The beginning of the device file name specifies the kernel's used driver subsystem to operate the block device.
Originally, the /dev/sd<char>[<number>] was only used for block devices using SCSI.
Because ATA/SATA/PATA devices suppoort a subset of the commands of SCSI, linux decided to also handle them by the kernel's SCSI driver subsystem, therefore their device files also use the  /dev/sd<char>[<number>] naming scheme.
For the devices handled by the kernel's SCSI subsystem and thus named  /dev/sd<char>[<number>], the character is assigned depending on which device is descovered first, starting from a. The number indicates the number of the partition.
/dev/fd/<n> are device files representing the file descriptors of the current process, however /dev/fd<n> (notice the difference!) indicates the nth floppy disk connected.
/dev/hd<n> are device files representing entire, raw hard disks (not commonly used today)
/dev/input contains device files for

####### character device files

/dev/stdin and /dev/stdout are symlinks to /dev/fd/0 and /dev/fd/1

##### Mac

((h:all;::<img src="sm_Screenshot%202020-07-09%20at%2014.36.21.jpg">))((c:2;::macOs))'s ((c:1;::/private)) folder contains ((c:3;::a few directories that would have been found in / on FHS-compliant devices)), namely ((s:1-3;::((c:4;::etc)), ((c:5;::tmp)), and ((c:6;::var))))
<span class="cloze-dump">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}</span>

## files

binary files are often contrasted with plaintext files

### principle types

folder (windows) = directory (*nix)

### binary

Binary files without a specification/documentation/parser are basically meaningless/unreadable.
What the binary files contents mean is defined by the file format.
Binary files are generally smaller and quicker to process than plaintext files

#### bitmaps

In the technical definition, a bitmap maps some domain to some bits.
In the technical definition, a pixmap is a bitmap mapping a pixel to a set of bits.
While in the technical definition, a pixmap is a hyponym of bitmap, they also may be treated synonymously, or sometimes a bitmap is seen as a hyponym of pixmap where one uses one bit per pixel.
The common file format for a pixmap image is BMP.
Pixmap images are very large, since they don't have any compression.

#### multimedia

(multi)media files are almost always binary files

##### images

### plaintext

Markup files are subset of plaintext files.
Markup files are written in markup languages.
markup languages consist of normal text and specific markup, which are intermingled.

#### m3u

m3u is a plain-text file format for playlists
m3u merely has a de-facto standard.
There are two variants of m3u, one which is very basic and extended m3u, which allows for directives.
Careless handling of m3u has often lead to security flaws.

m3u-file ::= {<entry>}
entry ::= [<path>|<URL>]<CRLF>

extended-m3u-file ::= #EXTM3U<CRLF>{<entry>}
entry ::= [<resource-entry>|<directive>]<CRLF>
resource-entry ::= (<path>|<URL>)[ #<string>]
directive :: #<directivename>[:<argument>]

#### JSON

JSON is a plaintext file format.
JSON has the same syntax as JS object literals, with a few exceptions.
In JSON but not JS object literals, keys must be quoted.
In JSON but not JS object literals, functions are forbidden.
In JSON, the top-level item can either be an object or an array.

#### ICAL/VCARD

ical|text/calendar|calendar information|RFC 5545|.ics
vcard|text/vcard|contact information|RFC 6350|.vcf
The iCalendar object is organized into individual lines of text, called content lines. 
Any content lines not acting as delimiters are called properties.
Rough general ENBF:
ical, vcard ::= {<contentline>}
contentline ::= <name>{;<param>}:<value><CRLF>
name ::= <iana-token>|<x-name>
param ::= <param-name>=<param-value>{,<param-value>}

The iana-tokens "BEGIN" and "END" signify the beginning and end of an icalendar or vcard object, or a component/subcomponent in the case of Ical.
There is currently only one subcomponent, VALARM
BEGIN and END take a value of VCALENDAR for an ical object and VCARD for an vcard object

ical-object ::= <ical-begin-line><version-line><prodid-line>{<ical-component>}<ical-end-line>
ical-begin-line ::= BEGIN:VCALENDAR<CRLF>
ical-end-line ::= END:VCALENDAR<CRLF>
version-line ::= VERSION:2.0<CRLF>
prodid-line ::= PRODID:<string><CRLF> # UID of creator
ical-component ::= <begin-line>{<contentline>|<ical-component>}<end-line>
begin-line ::= BEGIN:<component-name><CRLF>
end-line ::= END:<component-name><CRLF>

In vCard, properties are direct children of the {{c1::the vCard object}}
In general, an .ics contains one ical object, however a .vcf may contain multiple ical objects

vcard-object ::= <ical-begin-line><version-line>{<contentline>}<ical-end-line> # no prodid
cal-begin-line ::= BEGIN:VCARD<CRLF>
ical-end-line ::= END:VCARD<CRLF>
version-line ::= VERSION:4.0<CRLF>

icalendar lines may be a maximum of 75 octets long. If they are longer, they are broken up into multiple lines, where a leading space/tab on the new line indicates it is a continuation.

ical/vcard property names
ATTENDEE   the users attending/assigned a task
DTEND   end time
DTSTART   start time
ORGANIZER   the organizer of the event
RRULE   rules for repeating
SUMMARY   title/summary
VALARM   Alarm/Reminder
VEVENT   Event
VFREEBUSY   free/busy time
VJOURNAL   Journal entry
VTIMEZONE   timezone definition
VTODO   Task/Todo


### complex

epub is a format for ebooks that is in essence just a zip wrapper + scaffolding around web technologies such as HTML, CSS, JS, SVG, etc.

#### container

A container format is a file format that contains different parts.
The component parts of a container format may be called chunks, segments, streams, or something else.
In general, the component parts of a container format have some kind of header aand a body.
IFF is a chunk-based file format.
IFF chunks begin with a type ID, followed with a specifier of the length of the chunk.
RIFF and AIFF are file formats based on IFF, but TIFF (surprisingly) isn't 

### cross-cutting

#### email

Fundamentallly, all emails in an email account (generally associated with a single email address, but not necessarily) are stored in an an (email) mailbox
Message/mail delivery agents are programs that deliver emails to a mailbox.

##### mbox & imf

In the mbox format, an entire mail directory is held in a single file.
The mbox format consists of individual IMF messages.
The fileformat for emails is generally IMF.
The mbox format has problems with concurrency (safety and performance).
To prevent corruption, mbox files generally need to use file locking to prevent problems arising from concurrency.
mbox ::= <mbox-email>{<mbox-email>}
mbox-email ::= <from-line><IMF-message><LF>
from-line ::= From <sender-email> <utc-datetime><LF>
IMF-message ::= <headers><body><LF>
headers ::= {<key>: <value><LF>}
body ::= <LF><body-contents>

The IMF uses CRLF, however when stored in mbox, they use LF instead.

##### maildir

The maildir format is a format to store mailboxes and mail directories.
The maildir format has three subdirectories (at least) for any directory.
The three mandatory directories for any subdirectory in maildir are cur, new, and tmp.
Using maildir, an arriving message will be sorted into tmp until it is processed completely, then it is inserted into new.
Using maildir, once a mail in new has been read, it si sorted into cur.

# running the computer

## hardware interfaces

ACPI  advanced configuration and power interface
ACPI is a low-level interface to the power hardware of the computer, allowing for power management; it is currently the standard for that purpose.
ACPI executes the requests it gets as bytecode, acting like black box, and thus presenting a built-in security risk.
The ACPI exposes its interface as ACPI tables.
The Windows Platform Binary Table is an ACPI tible that allows software to persist even beyond reinstalls.
The Superfish vulnerability was enabled by the Windows Platform Binary Table.

## booting

Booting is initializing the computer.
The difficulty of booting is how do you get the computer into a state where it can execute stuff without being able to execute stuff.
has ended when the OS has reached a certain state.
When the user presses the power button, the computer, and especially the CPU gets power, and executes a hardcoded JUMP fo a place in ROM (or a specific place in normal secondary memory) where the BIOS/UEFI sits (though some non-x86 ISAs may do it differently)
All x86 processors start in real mode, which has the features the intel 8086 had, with 20 bit addresses addressing memory non-virtually - this allows for backwards compatibility.

### BIOS/UEFI

UEFI  Unified Extensible Firmware Interface
BIOS  Basic Input/Output System
The BIOS/UEFI comes preinstalled.
The BIOS stores its setting in nonvolatile BIOS Memory (also inaccurately called CMOS).
UEFI stores its settings in NVRAM.
Once the BIOS/UEFI is loaded, it typically performs a POST
POST = power-on self-test
POST tests for and initializes connected peripherals.
after BIOS/UEFI are finished, they load the first-stage boot loader.
BIOS loads the first-stage boot loader by looking for the boot sector on the boot device, from then on BIOS is no longer involved in booting.
BIOS is a simple de-facto standard, UEFI is a far more complex actual standard.
UEFI loads the boot loader directly, without using a boot sector.
UEFI has largely replaced BIOS as of 2020.
UEFI is controlled by a large set of industry stakeholders known as teh UEFI forum.
CSM (UEFI context)  Compatibility Support Mode
CSM is the mode of UEFI that makes it similar to BIOS by loading MBR or something from the first-stage boot loader.

#### SMBIOS

DMI  Desktop Management Interface
The original common inteface for managing components of a computer was teh DMI, but it was end-of-lifed in 2005
SMBIOS  System Management BIOS
Originally, the SMBIOS interacted with the DMi
The SMBIOS provides an interface for accessing BIOS/hardware info.
CLI command for interacting with SMBIOS (formerly with the DMI): dmidecode

### boot loader

MBR  Master boot record
The boot sector is typically one sector large
If boot sectors are still used, what sits in them is the first-stage boot loader.
The MBR is 512 byte large, which used to be the size of the boot sector into which the MBR needed to fit.
The main purpose of the first-stage boot loader is to load the second-stage bootloader.
MBR consists both of a first-stage bootloader and a partitioning table.
THe second-stage boot loader, perhaps after some user choosing, loads the kernel.
When using GRUB, all the boot sector contains is a pointer to the next boot stage.
When using GRUB, the boot menu that allows you to choose the os is loaded in the second stage of the bootloader.

## the OS

### the kernel

Monolithic kernels do more stuff in kernel space than micokernels.
Instead of doing stuff in kernel space, mircokernels provide servers that do things in userspace.
The daemon responsible for paging (swapper/sched) is the process with PID 0.

### the init process

In unix, the init process is the first processes that launches when a computer boots.
The init process is a daemon and has PID 1.
older *nixes|init
newer linuxes|systemd
macOs|launchd

# crypt

{{c1::a cipher}} is an algorithm for performing encryption/decryption
Ciphertext is the text that is the result of {{c1::using a cipher}}
A substitution cipher is a cipher where an unit of plaintext is replaced by an unit of cipher text
The caesar cipher is a kind of substitution cipher where the replacement is done by rotating the entire alphabet by some number.
A brute-force attack is an attack of something such as a password {{c1::By trying until successful}}

## random numbers

C(S)PRNG  Cryptographically (secure) pseudorandom number generator
PRNG  pseudorandom number generator
RNG  random number generator

# *nix

## GNU/Linux

GNU is the set of free software that accompanies the linux kernel in GNU/Linux.
GNU = GNU's not unix
The GPL was originally created for GNU
(GNU) GPL = GNU General Public License
Linux technically refers to the Linux kernel.
GNU software set + Linux kernel = GNU/Linux
Often, Linux alone is used (technically incorrectly) to refer to GNU/LInyx

### linux

#### distros

A Linux distribution is GNU/Linux plus a set of other stuff, which depends on the flavor.

#### input

On Linux, input devices are often handled on linux by the library libinput, which is also the name of the command used to interface with it. 
libinput is native in wayland, but optional in X, which can also manage input devices directly, whose implementation you can interface with via xinput.

#### X

#### systemd

within the relevant systemd folder (/var/systemd or /etc/systemd), system is the directory that contains the unit files

## files

Dotfiles are files that start with a dot, these are generally hidden by default.
linux: "Everything is a file"
Plan 9: "Really everything is a file"

### 7 types of files

In unix, there are 7 types of files.
Types of files in linux: {{c7::Regular file}} {{c6::Directory}} {{c5::Symlink}} {{c4::FIFO/named pipe}} {{c3::Socket}} {{c2::Device file (block)}} {{c1::Device file (character)}}

#### links

ln creates hardlinks by default, and symlinks with -/--symbolic.
symlink is short for symbolic link.
A symbolic link is a file that is a reference to another file in form of a path.
If the file a symbolic link points to is moved, the symbolic link now points to nothing.
since links exist, the file system isn't actually a tree, but a directed graph.
most programs treat symlinks transparently, however rm/mv/... edit the symlink file itself.
if using rm or mv on a symlink to a directory, if you don't include the trailing slash, they will act on the symlik like normal, if you do include the trailing slash, they will try to remove the directory itself.
A hard link is a reference to an inode.
A hard link only exists as a directory entry, in fact, all directory entries are hard links.
To use a hard link, the file must be on the same filesystem.
If a file moves, a hard link will still be pointing to it.

#### directories

dentry = directroy entry.
in the ext filesystem, a directory file is made up of a list of directory entries.
In the ext filesystem, a directory entry contains the inode number, file name and file name length.
Within the ext filesystem, the first entry in any directory file is the . entry.
Within the ext filesystem, the second entry in any directory file is the .. entry.
If there is an inode not referenced by any directory entry, it will be placed in lost+found.

#### device files

two of the seven types of files are device files.
Block device files grant random access.
Character device files grant sequential access.

A file descriptor is a reference to a file or file-like things



## command-line tools

mail or the older mailx are *nix builtins to manage mail.

### fs

#### search

##### grep

grep is a tool that takes a regex, applies it to a set of files, and prints the lines that match.
There are tons of grep variants:
agrep|grep with fuzzy matches

There are also many alternative variants of grep using more modern regexes, and also significantly faster:
speed: rg > ag > ack

#### file info

od|output files in octal, but also in other repreesentations
od -x|hex dump

#### changing

dd   copying (similar to cat/cp) with some low-level options
shred overwrites a file multiple times so it is difficult to recover, however this interacts badly with SSDs

### text manipulation

#### editors

a stream editor is a filter used to do text transformations
The most common stream editor is sed。
sed <options> <command> {<file>}
command ::= [<addr>]<command-char>[<options>]
addr ::= <int-or-regex>[,<int-w-op-or-regex>[!]]
int-or-regex ::= <int>|/<regex>/
int-w-op-or-regex ::= ([<operator>]<int>)|(<regex-delim-start><regex><regex-delim-end>)
regex-delim-start ::= /|\\<char>
regex-delim-emd ::= /|<char>

sed command-char|function|options
s|regex
y|char transliteration|/{<char>}/{<char>}/|replace any of the first chars with the corresponding char in the second set of chars| transliterate ‘a-j’ into ‘0-9’: 'y/abcdefghij/0123456789/'

For sed, specifying a regex within an addr selects lines that match the regex
For sed, using the \<char> syntax as a regex starting delimiter must then continue using <char> as a delimiter, allowing one not to have to escape \

original line editor for linux: ed

#### basic filters

lolcat   make output rainbowy
cowsay   make an ascii cow say the specific thing

#### format-specific filters

jq|process JSON
yq|process YAML & convert to/from JSON
yq -y/-Y roundtrip back to YAML
<code>yq {{c1::&lt;command&gt;}} {{c2::&lt;flags&gt;}} {{{c3::&lt;file&gt;}}}</code>
<code>yq {{c2::-t/--to-type}} {{c1::yaml}}/{{c1::json}}/...</code> {{c3::outputs the file as the specified file format}}

#### generation


### viewers

lynx|text-based browser

### UI

#### X

wmctrl   Manage an X window manager

### hardware info

lspci   list pci devices
lshw   list hardware config
lsblk   list block devices
lsusb   list USB devices

### sub management

podboat   podcast management for newsboat

### man

Most CLI commands have a manual page, which can be diplayd with man.
When we want a man entry for a composite command (e.g. git log, jekyll serve), the man entry headword (by convention) is the same, but hyphenated (git-log, jekyll-serve)
The numbers in parenthesis after the names of things (xterm(1), efence(3)) come from sections of the manual
The standard sections of the manual include:
1      User Commands
2      System Calls
3      C Library Functions
4      Devices and Special Files
5      File Formats and Conventions
6      Games et. Al.
7      Miscellanea
8      System Administration tools and Deamons

## processes

On unix systems, a process is an (instance of a) program that is {{c1::running}}

### file descriptors

A file descriptor is a positive integer that uniquely identifies a file (or file-like) things.
Each process has its own file descriptors.
The file descriptiors of a single process are stored in their own file descriptor table.
The kernel maps the file descriptors the file descriptor table of a single process to the file table.
The file table is a system-wide table of all open files.
The file table contains reference to the relevant inodes.
Each process has three file descriptors allocated automatically, namely for the standard streams.
stdin   0
stdout   1
stderr   2

### daemons

A daemon is a process running in the background, not under the direct control of a user.
In *nix, a daemon is generally a process which is a child of the init process.
A daemon is usually created either by a process forking a child process and then immediately exiting, thus causing init to adopt the child process, or by the init process directly launching the daemon. 
The names of daemons generally end with d.

### terminal system

physical teriminal: <img src="sm_screen1.png">
terminal emulator: <img src="sm_screen2.png"/>
<img src="sm_screen3.png" />

#### fg bg

the bg command takes a suspended command (e.g. one that was Ctrl-Z ed) and resumes its execution in the <b>background</b>

### process relationships

A session is a collection of process groups.

## users and groups

GID|group id
UID|user id
groups/users on nix are uniquely identified by their user or group ID.

# VCS



# communication

## serial and parallel

Serial communication sends its bits one after another over the channel.
Parallel communication sends multiple bits simultaneously over multiple subchannels.
One would expect parallel communication to be faster than serial communication, with the factor equivalent to the amount of channels/wires/whatever, however serial communication can often be clocked far higher to make up for it.
Serial communication is often far easier/simpler to implement and thus less error-prone, cheaper and thinner/lighter than parallel communication.

## connectors

Crosstalk is a signal transmitted on one circuit or channel causing an undesired effect {{c1:: on another circuit or channel}}

### PCI

PCI   Peripheral Component Interconnect
PCIe  Peripheral Component Interconnect Express
PCI is a parallel bus, PCIe is a serial bus
PCI, AGP (older), PCIe (today) are the protocols/connectors that were/are used to connect things on the motherbord, especially PC expansion cards but also some of the things soldered on.

### thunderbolt

Thunderbolt 1 and 2 are transmitted via the MiniDisplayPort connector.
Thunderbolt 3 and 4 are transmitted via the USB C connector.
Apple and Intel co-developed Thunderbolt around 2011.
Thunderbolt was designed to run over optic fiber cables, but actually generally runs over copper.

### DP

Mini and nonmini {{c4::DisplayPort}} is mainly for {{c1::video / audio}}, but can also carry {{c2::USB}} and {{c3::other data (e.g. thunderbolt)}}

### usb

USB   Universal serial bus
USB can transmit both data of various kinds as well as power.
The speed of USB depends on the version of USB, indicated with a number.
The role in the master/slave architecture of USB is indicated by a letter.
The connector type of USB depends on the letter indicating its role within the master/slave system, as well as the size specifier.

A|Master
B|Slave
AB|complicated
C|Either Master or Slave dynamically

Size specifiers: ø, mini, micro.

USB C only exists as a single size.

USB versions: 1.0, 1.1, 2.0, 2.0 revised, 3.0, 3.1, 3.2, 4.0

Within USB 3, usb 3.1 and 3.2 were renamed

<table class="yesno"><tbody><tr>
  <th>Standard
  </th>
  <th>USB 1.0
  </th>
  <th>USB 1.1
  </th>
  <th>USB 2.0
  </th>
  <th>USB 2.0 Revised
  </th>
  <th>USB 3.0
  </th>
  <th>USB 3.1
  </th>
  <th>USB 3.2
  </th>
  <th>USB4
  </th></tr>
  <tr>
  <th>Maximum transfer rate
  </th>
  <td colspan="2">12 Mbps
  </td>
  <td colspan="2">480 Mbps
  </td>
  <td>5 Gbps
  </td>
  <td>10 Gbps
  </td>
  <td>20 Gbps
  </td>
  <td>40 Gbps
  </td></tr>
  <tr>
  <th>Type A
  </th>
  <td colspan="4"><img src="https://upload.wikimedia.org/wikipedia/commons/7/7e/USB_Type-A_receptacle.svg" width="75" height="50">
  </td>
  <td colspan="2"><img src="https://upload.wikimedia.org/wikipedia/commons/f/f4/USB_3.0_Type-A_receptacle_blue.svg" width="75" height="67">
  </td>
  <td colspan="2" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Type B
  </th>
  <td colspan="4"><img src="https://upload.wikimedia.org/wikipedia/commons/2/28/USB_Type-B_receptacle.svg" width="50" height="60">
  </td>
  <td colspan="2"><img src="https://upload.wikimedia.org/wikipedia/commons/8/8c/USB_3.0_Type-B_receptacle_blue.svg" width="59" height="75">
  </td>
  <td colspan="2" class="no">Deprecated
  </td></tr>
  <tr>
  <th>USB-C
  </th>
  <td colspan="3" class="no">N/A
  </td>
  <td colspan="5"><img src="https://upload.wikimedia.org/wikipedia/commons/0/07/USB_Type-C_Receptacle_Pinout.svg" height="80">
  </td></tr>
  <tr>
  <th>Mini-A
  </th>
  <td class="no">N/A
  </td>
  <td colspan="3"><img src="https://upload.wikimedia.org/wikipedia/commons/e/eb/USB_Mini-A_receptacle.svg" width="75" height="50">
  </td>
  <td colspan="5" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Mini-B
  </th>
  <td class="no">N/A
  </td>
  <td colspan="3"><img src="https://upload.wikimedia.org/wikipedia/commons/e/ec/USB_Mini-B_receptacle.svg" width="67" height="50">
  </td>
  <td colspan="5" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Mini-AB
  </th>
  <td colspan="3" class="no">N/A
  </td>
  <td><img src="https://upload.wikimedia.org/wikipedia/commons/f/f3/USB_Mini-AB_receptacle.svg" width="60" height="40">
  </td>
  <td colspan="5" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Micro-A
  </th>
  <td colspan="3" class="no">N/A
  </td>
  <td><img src="https://upload.wikimedia.org/wikipedia/commons/8/86/USB_Micro-A.svg" width="75" height="50">
  </td>
  <td colspan="2"><img src="https://upload.wikimedia.org/wikipedia/commons/4/42/USB_3.0_Micro-A.svg" width="117" height="50">
  </td>
  <td colspan="2" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Micro-B
  </th>
  <td colspan="3" class="no">N/A
  </td>
  <td><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/USB_Micro-B_receptacle.svg" width="75" height="42">
  </td>
  <td colspan="2"><img src="https://upload.wikimedia.org/wikipedia/commons/a/a8/USB_3.0_Micro-B_receptacle.svg" width="117" height="50">
  </td>
  <td colspan="2" class="no">Deprecated
  </td></tr>
  <tr>
  <th>Micro-AB
  </th>
  <td colspan="3" class="no">N/A
  </td>
  <td><img src="https://upload.wikimedia.org/wikipedia/commons/6/6c/USB_Micro-AB_receptacle.svg" width="75" height="50">
  </td>
  <td colspan="2"><img src="https://upload.wikimedia.org/wikipedia/commons/7/7a/USB_micro_AB_SuperSpeed.png/117px-USB_micro_AB_SuperSpeed.png" width="117" height="69">
  </td>
  <td colspan="2" class="no">Deprecated
  </td></tr></tbody></table>

USB has a tree (bus + star) topology 


#### usb 4

USB 4 was released in 2019.
As of USB 4, the only connector type is USB C.

## protocols

Protocols are often {{c1::layered}} to produce a {{c2::protocol stack}}

### pushpullpoll

pulling is where the request initiates from the client, and is responded to by the server
pushing is where a request is initiated by a server.
polling is frequently checking whether a thing is in a certain state
polling may be used to simulate push protocols.

### OAuth

OAuth 2.0 (grant type: Authorization code)
<img src="tmp7t5et6aw.png" />

# webadmin

Images used {{c3::on the web}} are typically {{c2::specifically compressed}} beforehand, e.g. {{c1::by using programs such as imageoptim}}

# applications

{{c1::Photoscape X}} is notable for being a {{c2::GUI}} program that has {{c3::batch editing of photos}}

# principles

GIGO   Garbage In, Garbage Out
Garbage in, garbage out claims that if the input data is somehow bad {{c1::the output data will be too}}
Syntactic sugar is syntax that makes a programming language easier to use, but {{c1::doesn't expand it's functionality}}
"Anything that can go wrong will go wrong"   Murphy's law
{{c1::an anti-pattern}} is a pattern (intentional or not) that is ineffective/counter-productive 

# licenses

Copyleft is type of restriction that does not allow creators of thing B including thing A to restrict the access to thing B more than thing A.
GPL is a type of copyleft license.
Share-alike is a type of copyleft license.

# automation

The Amazon Mechanical Turk is a service that allows crowdsourcing menial tasks.
The Amazon Mechanical Turk pays way below the minimum wage.
The Amazon Mechanical Turk is sometimes used for study subjects.

# todo

add quick note about Web Audio APi