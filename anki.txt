"<div class='c1-f'> Why do round braces prevent this from being treated as a block statement with no return value? </div><br/><pre><code>var func = () =&gt; <span class="""">({</span> foo: 1 <span class="""">})</span>;</code></pre> <span class=""divider"">-></span> {{c1::Because round braces don't go around block statements, and so the parser concludes it must be an object literal.}}"	acad::js
"<br>---<br>   §§ A ((c:1;::gloss)) is ((c:2;::a brief explanation)), often ((c:3;::placed near the text)) ((c:2;::it is explaining)) §<br>   §§ An ((c:4;::interlinear gloss)) is ((c:5;::a gloss)) that is ((c:6;::placed between lines.)) §<br>   §§ In linguistics, ((c:7;::interlinear glossing)) follows the ((c:8;::Leipzig Glossing Rules)). §<br>   §§ In linguistics, ((c:9;::interlinear glossing following the Leipzig Glossing Rules)) is ((c:10;::morpheme))-by-((c:10;::morpheme)). §<br>   §§ However, since ((c:11;::the exact morphology)) is ((c:12;::not always clear)) or ((c:13;::may be at issue)), ((c:14;::interlinear glossing in linguistics)) is generally ((c:15;::for the readers understanding)), not ((c:16;::to state an analysis)). §<br> ===<br>  <section class=""cloze-group-children hide-if-inactive-children"">   Interlinear glossing according to ((c:17;::the Leipzig Glossing Rules)):   §§ Interlinear glosses are ((c:18;::aligned)) ((c:19;::word-by-word (not morpheme-by-morpheme!))), and in this way ((c:20;::left-aligned)). §<br>   §§ ((c:21;::Morphemes within the same word)) are ((c:22;::separated by hyphen)) both ((c:23;::within the object language)) and ((c:24;::in the gloss)). §<br>   §§ In Interlinear glosses, ((c:25;::grammatical morphemes)) can be rendered by ((c:26;::abbreviated lables (e.g. LOC))) or&nbsp; §<br>   §§ ((c:27;::by a word in the metalanguage (e.g. in))) §<br> In interlienar gloss, ((c:28;::the lables indicating grammatical morphemes)) are ((c:29;::written in caps)), most commonly ((c:30;::in small caps.))   §§ In interlinear gloss, the ((c:31;::most common)) of the abbreviated lables may be ((c:32;::further abbreviated)). §<br>   §§ ((c:33;::Clitic boundaries)) are marked by ((c:34;::an equals sign)). §<br>   §§ In interlinear gloss, if ((c:35;::one element in the object language)) is ((c:36;::rendered by several elements in the metalanguage)), those are ((c:37;::separated in the gloss by periods. (there are also optional further category separations here which use _ \ = ; &gt;)))  §<br>   §§ Things that are ((c:38;::contained in the gloss)) that are ((c:39;::not marked in the object language)) may either ((c:40;::be enclosed by [])) in ((c:40;::the metalanguage)), or ((c:41;::be indicated by ø)) in ((c:41;::the object language)) §<br> </section>  <table>   <thead>     <tr>       <th>Grammatical Item</th>       <th>Abbreviation</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children""> <tr><td>((c:47;::Article))</td> <td>((c:42;::ART))</td></tr> <tr><td>((c:43;::Demonstrative))</td> <td>((c:44;::DET))</td></tr> <tr><td>((c:45;::Honorific))</td> <td>((c:46;::HON))</td></tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}</span><br><div class=""sub""> <table class=""blank-canvas cloze-group hide-if-inactive"" style=""text-align: left"">   <tbody>     <tr><td>My</td><td>s</td><td>Marko</td><td>poexa-l-i</td><td>avtobus-om</td><td>v</td><td>Peredelkino.</td></tr>     <tr> <td>1PL</td><td>COM</td><td>Marko</td><td>go-PST-PL</td><td>bus-INS</td><td>All</td><td>Peredelkino.</td></tr>     <tr><td colspan=""7"">'Marko and I went to Perdelkino by bus.'</td></tr>   </tbody> </table>  <table style=""text-align: left"" class=""blank-canvas cloze-group hide-if-inactive"">   <tbody>     <tr> <td>puer</td> <td>or:</td> <td>puer-Ø</td> </tr> <tr> <td>boy[NOM.SG]</td> <td></td> <td>boy-NOM.SG</td> </tr> <tr> <td>‘boy’</td> <td></td> <td>‘boy’</td> </tr>   </tbody> </table>   </div>"	acad::ughhh
"<pre><code data-codetype=""text"">*the lady’s a book</code></pre> <span class=""divider"">-&gt;</span> {{c1::That possessive s is a determiner}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessor DPs cannot be replaced by pronouns}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Replace the posessor DP with a pronoun}} <pre><code data-codetype=""text"">The book's the bookmark.</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessive s is followed by NPs, not by DPs}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::DP}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::It attaches to DPs}} <pre><code data-codetype=""text"">the city’s destruction</code></pre> <span class=""divider"">-&gt;</span> {{c1::general ascription}} <pre><code data-codetype=""text"">the man’s hat</code></pre> <span class=""divider"">-&gt;</span> {{c1::posession&nbsp;}} <pre><code data-codetype=""text"">the owner of the car's mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::<pre><code data-codetype=""text""><mark>the owner of the car</mark>'s mother</code></pre>}} How does English possessive s differ from German genitive -s, in where it attaches? <span class=""divider"">-&gt;</span> {{c1::German genitive -s attaches to nouns, english possessive s to DPs (or NPs, depending on your theory)}} Prove that possessive s is a determiner by inserting other determiners! <span class=""divider"">-&gt;</span> {{c1::*the lady’s a book}} What can't posessor DPs do, but most other DPs can? <span class=""divider"">-&gt;</span> {{c1::Be replaced by a normal pronoun}} What does posessive s attach to? <span class=""divider"">-&gt;</span> {{c1::DPs}} What syntactic category does possessive s belong to? <span class=""divider"">-&gt;</span> {{c1::Determiner}} What type of constitutent is the thing after a posessive s? <span class=""divider"">-&gt;</span> {{c1::A NP (dp theory)}} What type of constitutent is the thing before a posessive s? <span class=""divider"">-&gt;</span> {{c1::A DP}} the children’s toys <span class=""divider"">-&gt;</span> {{c1::the toys of the children}}"	acad::ughhh::synt
"Which of the lateral sounds is the smallcaps one? <span class=""divider"">-&gt;</span> {{c1::the voiced velar lateral approximant}} What two pharyngeal sounds both feature IPA symbols containing an h/H? <span class=""divider"">-&gt;</span> {{c1::voiceless pharyngeal trill and fricative}} What two IPA symbols both using the glottal stop character are oriented with the head to the right? <span class=""divider"">-&gt;</span> {{c1::Voiceless pharyngeal and glottal stop/plosive}} What two IPA symbols both using the glottal stop character are oriented with the head to the left? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal trill and fricative}} What two IPA symbols both feature a glottal stop crossed out by a bar? <span class=""divider"">-&gt;</span> {{c1::Pharyngeal voiceless plosive and voiced trill}} What sound is the one whose character is supposedly the third one, besides a fricative and an approximant, that is based off the j, but is actually just a turned f? <span class=""divider"">-&gt;</span> {{c1::voiced palatal plosive}} What place of articulation would you expect ɣ to have, but which does it actually have? <span class=""divider"">-&gt;</span> {{c1::You'd expect it to be uvular (because of χ), but it's actually velar}} What is the order of the hooks (front to back) of n-based consonants? <span class=""divider"">-&gt;</span> {{c1::nɳɲŋ}} What is the only place of articulation for consonants that feature small horizontal bars crossing out symbols normally not so crossed?&nbsp; <span class=""divider"">-&gt;</span> {{c1::Pharyngeal}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Ignoring the voiced palatal plosive, which theoretically also is barred, but is actually a turned f </div> </div> What is the IPA voiced palatal plosive supposedly? <span class=""divider"">-&gt;</span> {{c1::a barred dotless j}} What is the IPA symbol for the voiced palatal plosive actually? <span class=""divider"">-&gt;</span> {{c1::an f turned by 180 degrees}} What do the symbols c, k, q describe in the IPA? <span class=""divider"">-&gt;</span> {{c1::a progression of voiceless plosives}} The voiced velar approximant kinda looks like a turned ___ combined with a turned ___ <span class=""divider"">-&gt;</span> {{c1::h, m}} The symbol for the palatal voiced fricative is just the symbol for what plus a curl? <span class=""divider"">-&gt;</span> {{c1::voiced palatal approximant}} The symbol for the palatal voiced fricative is just the symbol for the palatal voiced approximant plus a? <span class=""divider"">-&gt;</span> {{c1::curl}} Of the two n-like symbols with left-facing hooks, the one who has it further to the right is also the one... <span class=""divider"">-&gt;</span> {{c1::further back}} Of the two n-like symbols with left-facing hooks, the one who has it further to the left is also the one... <span class=""divider"">-&gt;</span> {{c1::further front}} Of the four pharyngeal/glottal voiced/unvoiced fricative symbols, which is the only one not based on h? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal fricative}} Name a portguese word in which the character for the palatal voiceless fricative is also contained! <span class=""divider"">-&gt;</span> {{c1::seleçao}} In how many aspects do barred consonants differ from their non-barred counterparts? <span class=""divider"">-&gt;</span> {{c1::exactly one (so voicedness, place, OR manner)}} For what manner and voicing are g/G only ever used in the IPA? <span class=""divider"">-&gt;</span> {{c1::voiced plosives}} For what kind of sounds is the l/L only ever used? <span class=""divider"">-&gt;</span> {{c1::lateral ones}} All three sounds (including the one that is actually a turned f) based in their IPA symbols off the j are ___ and ___ <span class=""divider"">-&gt;</span> {{c1::palatal and voiced}} All IPA symbols based of a modified version of the glottal stop are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::pharyngeal(epiglottal) or glottal}} <span class=""hide-5"">sounds written with a variant of the small h in the IPA all have what </span><b>manner</b> of articulation? <span class=""divider"">-&gt;</span> {{c1::fricative}} Why is  ɽ (voiced retroflex tap or flap) an exception, in how we would deduce what the alveolar voiced tap or flap is based on it? <span class=""divider"">-&gt;</span> {{c1::Since it's ɾ, but we would expect it to be r}} Which one of the nasals is the one that is spelled with an n, but has no hook? <span class=""divider"">-&gt;</span> {{c1::voiced alveolar etc. nasal}} What reason might one give why the voiced alveolar trill symbol is the one with two 'heads'? <span class=""divider"">-&gt;</span> {{c1::since the tongue hits multiple times}} What number does the voiced postalveolar fricative look kinda similar to? <span class=""divider"">-&gt;</span> {{c1::3}} What might one say the reason is for voiced alveolar etc. tap being the one with one head? <span class=""divider"">-&gt;</span> {{c1::since the tounge hits only once}} What latin letters are all nasal consonant symbols of the IPA similar to? <span class=""divider"">-&gt;</span> {{c1::m or n}} What latin letter are all voiced bilabial sounds besides the nasal similar to? <span class=""divider"">-&gt;</span> {{c1::b/B}} What kind of symbol are 3/5 of the IPA trill letters based on? <span class=""divider"">-&gt;</span> {{c1::smallcaps letters}} What kana does the voiced postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::ろ}} What is/are the exceptions for the ipa symbols of retroflex consonants being based on alveolar ones? <span class=""divider"">-&gt;</span> {{c1::ɽ (voiced retroflex tap or flap)}} What is the IPA voiced labiodental fricative v mostly spelled as in German? <span class=""divider"">-&gt;</span> {{c1::W}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> Wächter, wachs etc. </div> </div> What is the IPA voiced labiodental fricative v mostly spelled as in English? <span class=""divider"">-&gt;</span> {{c1::v}} What is the IPA symbol for the sound that crosslinguistically is often spelled f? <span class=""divider"">-&gt;</span> {{c1::f}} What does the voiced labiodental approximant look kinda similar to (which is also labiodental and voiced)? <span class=""divider"">-&gt;</span> {{c1::the labiodental fricative v}} What do the IPA spellings of the voiced alveolar etc. trill and tap or flap have in common, as regards their Orientation? <span class=""divider"">-&gt;</span> {{c1::they are both right-side up}} What do all symbols for retroflex consonants share in the ipa? <span class=""divider"">-&gt;</span> {{c1::A right-facing bottom hook such as ɭ or ʈ}} What do all IPA spellings of lateral approximants have in common? <span class=""divider"">-&gt;</span> {{c1::They are all spelled with representations of l (english or greek representations)}} What are both bilabilal fricatives written with in the IPA? <span class=""divider"">-&gt;</span> {{c1::Greek letters}} What IPA symbol is the voiced labiodental nasal ɱ based off of? <span class=""divider"">-&gt;</span> {{c1::the voiced bilabial nasal m}} What IPA symbol does the first sound of ふ correspond to? <span class=""divider"">-&gt;</span> {{c1::ɸ}} To which IPA symbol does written letter 'p' in english generally correspond? <span class=""divider"">-&gt;</span> {{c1::also p (voiceless bilabial plosive)}} The voiceless &amp; voiced alveolar fricative IPA symbols are both... <span class=""divider"">-&gt;</span> {{c1::latin letters}} The voiced labiodental nasal uses the same symbol as the voiced bilabial nasal, but with... <span class=""divider"">-&gt;</span> {{c1::a leftwards hook<br><br>}} The symbols for the labiodental fricatives are both? <span class=""divider"">-&gt;</span> {{c1::Latin leters}} The letters used for the retroflex sounds are the same as the ones used for which sounds? <span class=""divider"">-&gt;</span> {{c1::The alveolar ones}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> with the slight exception of ɽ </div> </div> The IPA spelling of the voiced alveolar etc. lateral fricative is like an l and which IPA sound glued together? <span class=""divider"">-&gt;</span> {{c1::Like an l-sound and the voiced postalveolar fricative ʒ}} The IPA spelling of both the voiceless and the voiced alveolar etc. lateral fricative contain in their 'design' what letter? <span class=""divider"">-&gt;</span> {{c1::l}} Since the voiced&nbsp; alveolar etc. approximant ɹ is turned 180°, the retroflex version... (related to orientation) <span class=""divider"">-&gt;</span> {{c1::is also turned 180°}} IPA symbols including variants of the small l are limited to what place? <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar and retroflex sounds}} IPA symbols for the nasals which use the letter m as their basis have which or which place of articulation? <span class=""divider"">-&gt;</span> {{c1::bilabial and labiodental}} How many retroflex consonant symbols have the right-facing hook? <span class=""divider"">-&gt;</span> {{c1::All of them}} How many of the letters for trills in the IPA are smallcaps letters? <span class=""divider"">-&gt;</span> {{c1::3/5}} How does the symbol of the voiced alveolar approximant relate to the symbol for the voiced alveolar trill r? <span class=""divider"">-&gt;</span> {{c1::it's the symbol for the alveolar trill, but turned 180°:&nbsp; ɹ        }} From what language' script is the symbol for the voiced dental fricative derived? <span class=""divider"">-&gt;</span> {{c1::old english / icelandic}} For both the sets of alveolar and postalveolar fricatives, the voiceless sound is spelled (in the IPA) more ___-like and the voiced sound is more ___-like <span class=""divider"">-&gt;</span> {{c1::the voiceless sound is spelled (in the IPA) more s-like and the voiced sound is more z-like}} Besides the voiced alveolar trill r, what other trill does not feature a smallcaps IPA letter? <span class=""divider"">-&gt;</span> {{c1::The voiced pharyngeal/epiglottal trill ʢ}} All sounds spelled with some variant of the small r are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar or retroflex}} <div>What greek letter does the voiceless dental fricative use?</div><span class=""divider"">-&gt;</span> {{c1::theta}} <div>The voiceless alveolar lateral fricative is an l with a...</div><span class=""divider"">-&gt;</span> {{c1::little curl}} ((h:1;::<img src=""sm_Suzuki_Violin_No.580.jpg"">))What part of an instrument does the voiceless postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::Those s-like things on a violin (called f-holes)}} What symbols are the retroflex right facing lower hooks generally attached to? <span class=""divider"">-&gt;</span> {{c1::The alveolar consonants}} What is the distinctive feature that most epiglottal=pharyngeal consonant symbols share? <span class=""divider"">-&gt;</span> {{c1::a horizontal bar through}}<table> <tbody class=""yesno""> <tr> <th>Place (active) →</th> <th colspan=""4"" scope=""col"">Labial</th> <th colspan=""8"" scope=""col"">Coronal</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Dorsal (rarely coronal)</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Radical/​Ary­epiglottal</th> <th colspan=""2"" scope=""col"">Ary­epiglottal</th> </tr> <tr> <th>Place (active + passive) →</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Bi­labial</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Labio­dental</th> <th colspan=""6"" rowspan=""2"" scope=""col"">Dental/​Alveolar/​Post­alveolar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Retro­flex</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Palatal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Velar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Uvular</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Pharyn­geal/​epi­glottal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Glottal</th> </tr>   <tr><th>Manner ↓</th>   </tr> <tr> <th scope=""row"">Plosive</th> <td>{{c1::p}}</td> <td>{{c2::b}}</td> <td></td> <td></td> <td colspan=""3"">{{c3::t}}</td> <td colspan=""3"">{{c4::d}}</td> <td>{{c5::ʈ}}</td> <td>{{c6::ɖ}}</td> <td>{{c7::c}}</td> <td>{{c8::ɟ}}</td> <td>{{c9::k}}</td> <td>{{c10::ɡ}}</td> <td>{{c11::q}}</td> <td>{{c12::ɢ}}</td> <td>{{c13::ʡ}}</td> <td class=""no""></td> <td>{{c14::ʔ}}</td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Nasal</th> <td></td> <td>{{c15::m}}</td> <td></td> <td>{{c16::ɱ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c17::n}}</td> <td></td> <td>{{c18::ɳ}}</td> <td></td> <td>{{c19::ɲ}}</td> <td></td> <td>{{c20::ŋ}}</td> <td></td> <td>{{c21::ɴ}}</td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Trill</th> <td></td> <td>{{c22::ʙ}}</td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c23::r}}</td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td>{{c24::ʀ}}</td> <td>{{c25::ʜ}}</td> <td>{{c26::ʢ}}</td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Tap/flap</th> <td></td> <td></td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c27::ɾ}}</td> <td></td> <td>{{c28::ɽ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral approximant</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3""></td> <td colspan=""3"">{{c58::l}}</td> <td></td> <td>{{c59::ɭ}}</td> <td></td> <td>{{c60::ʎ}}</td> <td></td> <td>{{c61::ʟ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral fricative</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3"">{{c51::ɬ}}</td> <td colspan=""3"">{{c52::ɮ}}</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Approximant</th> <td></td> <td></td> <td></td> <td>{{c53::ʋ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c54::ɹ}}</td> <td>{{c55::ɻ}}</td> <td></td> <td>{{c56::j}}</td> <td></td> <td>{{c57::ɰ}}</td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> </tr>   <tr><td colspan=""5"" class=""no""></td>       <th colspan=""2"">Dental</th> <th colspan=""2"">Alveolar</th> <th colspan=""2"">Post­alveolar</th>   </tr>   <tr> <th scope=""row"">Fricative</th> <td>{{c29::ɸ}}</td> <td>{{c30::β}}</td> <td>{{c31::f}}</td> <td>{{c32::v}}</td> <td>{{c33::θ}}</td> <td>{{c34::ð}}</td> <td>{{c35::s}}</td> <td>{{c36::z}}</td> <td>{{c37::ʃ}}</td> <td>{{c38::ʒ}}</td> <td>{{c39::ʂ}}</td> <td>{{c40::ʐ}}</td> <td>{{c41::ç}}</td> <td>{{c42::ʝ}}</td> <td>{{c43::x}}</td> <td>{{c44::ɣ}}</td> <td>{{c45::χ}}</td> <td>{{c46::ʁ}}</td> <td>{{c47::ħ}}</td> <td>{{c48::ʕ}}</td> <td>{{c49::h}}</td> <td>{{c50::ɦ}}</td> </tr>  </tbody></table> "	acad::ughhh::phon-both
"Which two features do both sounds spelled with the IPA with (a variant of) ɑ share? <span class=""divider"">-&gt;</span> {{c1::open and back}}    What feature do all vowels share that are written with ligatures in IPA?  They are all front vowels Also either open, near open or open mid What do the IPA vowels written with an i/ɪ all have in common, as it relates to height?  They are somewhere between close and near-close What do the IPA vowels written with an i/ɪ all have in common, as it relates to front-ness  They are somewhere between front and central (both inclusive) What do the IPA symbols for the rounded close-mid and open-mid central vowels have in common?  They are both 'closed' on the outside What do all IPA vowels written with a symbol based of an o (barred or not) (not ligatures) have in common? (two things)  they are all three close-mid and rounded The IPA symbol for the close central unrounded vowel is what, but barred?  close front unrounded The IPA symbol for the close central rounded vowel is what, but barred?  close back rounded How is the Symbol of the rounded version of the central open-mid vowel related to the unrounded version's symbol?  it's the same mirrored epsilon, but connected to form a pretzel How does the IPA symbol for the close central unrounded vowel relate to the IPA symbol for the close front unrounded vowel?  The same, just barred How does the IPA symbol for the close central rounded vowel relate to the IPA symbol for the close back rounded vowel?  The same, just barred How are the close&amp;open-mid front unrounded and close&amp;open-mid central unrounded vowels related to each other?  They are mirrored along the y-axis From the unrounded close-mid central vowel's symbol, how could you generate the rounded version's symbol?  merely close the 'gap' of the mirrored e For the close-mid&amp;open-mid front unrounded and close-mid&amp;open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the right?  the front ones For the close&amp;open-mid front unrounded and close&amp;open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the left?  the central ones For the IPA vowel chart, the unroundedversions of vowels are written where (as relates to the pair)?  on the left of the pair For the IPA vowel chart, the rounded versions of vowels are written where (as relates to the pair)?  on the right of the pair What design feature do the IPA symbols of both the unrounded and rounded open-mid back vowel share?  They are rotated 180° latin letters"	acad::ughhh::phon-both
"<div class=""cloze-group hide-if-inactive""><p>If an <span class=""c8-cloze"">argument</span> is <span class=""c2-cloze"">valid</span>, <span class=""c3-cloze"">the conclusion cannot be false</span> <span class=""c1-cloze"">if the premises are true</span>.</p> <p>For an <span class=""c7-cloze"">argument</span> to be <span class=""c4-cloze"">sound</span>, it must first <span class=""c5-cloze"">be valid</span>, in addition, <span class=""c6-cloze"">the premises must be true</span>.</p>   <p>An <span class=""c9-cloze"">argument</span> consists of <span class=""c10-cloze"">premises</span> and <span class=""c11-cloze"">conclusions</span>.</p>   <p>In an <span class=""c15-cloze"">argument</span>, the <span class=""c12-cloze"">truth of the premises</span> intends to <span class=""c13-cloze"">determine</span> <span class=""c14-cloze"">the truth of the conclusion</span>. </p>   <p>In a <span class=""c16-cloze"">deductive argument</span>, the t<span class=""c17-cloze"">ruth of the premises</span> <span class=""c18-cloze""><b>guarantees</b></span>&nbsp;<span class=""c19-cloze"">the truth of the conclusion</span>.</p> <p>An <span class=""c25-cloze"">argument</span> is the claim that given <span class=""c20-cloze"">every member of</span> <span class=""c21-cloze"">a certain premise set</span> <span class=""c22-cloze"">of formulae</span> is <span class=""c23-cloze"">true</span>, <span class=""c24-cloze"">so is the conclusion formula</span>.</p></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}</span>"	
"<div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c2-f""> Languages that are this are also... </div><div class=""c1-f""> Languages that are this are also... </div><br><img class=""c1-f c2-b"" src=""sm_paste-f8905a83ae65ccc1c0f94347a99ffd017cf2efee.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-4481fdfb6ba20a69bb29540e2b14cb74632e1211.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-f407ff4ff31634a63b3dff9684044951e1ae2379.jpg""><br><span class=""divider"">-&gt;</span> {{c1::(fully) left-branching}} <span class=""divider"">-&gt;</span> {{c1::(fully) right-branching}} <span class=""divider"">-&gt;</span> {{c1::mostly right-branching}} An example for what kind of branching is japanese? <span class=""divider"">-&gt;</span> {{c1::left-branching}} In left-branching/ languages, what will happen if we draw a syntax tree? <span class=""divider"">-&gt;</span> {{c1::It will branch/grow to the left}} What is one of the most rigidly left-branching language? <span class=""divider"">-&gt;</span> {{c1::japanese}} What's the problem with saying a language is left-branching/right-branching? <span class=""divider"">-&gt;</span> {{c1::It is more a tendency than it is a rule, mostly}} {{c1::left-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-final}} {{c1::right-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-initial}}"	acad::ughhh
"<div class=""c1-f""> Under the more wide definition, what is the predicate here? </div> <div class=""c1-f""> Under the more narrow definition, what is the predicate here? </div> <div class=""c1-f""> How are these often called in short? </div><br><pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard Fread.}} <pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard}} In grammar, a predicate either connects the subject to an idea ('what the subject is like'), or is...? <span class=""divider"">-&gt;</span> {{c1::something that says something about a subject}} In grammar, a predicate is either the thing that says something about the subject, or the thing that connects what to what? <span class=""divider"">-&gt;</span> {{c1::the subject to an idea ('what the subject is like')}} In grammar, a predicate is either the thing that says something about the subject, or what, in relation to the the subject and an idea ('what the subject is like')? <span class=""divider"">-&gt;</span> {{c1::It connects the subject to an idea ('what the subject is like')}} In grammar, either (a) something that says something about a subject or (b) something that links something a subject and what that subject is like is called... <span class=""divider"">-&gt;</span> {{c1::a predicate}} In grammar, what is the problem with the term predicate? <span class=""divider"">-&gt;</span> {{c1::It has two competing definitions}} In english, what are the non-lexical verbs that don't take objects? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs are required to use negation? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs go before the subject DP in question inversion? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} Why does auxiliary being equivalent to auxiliary verb not cause confusion? <span class=""divider"">-&gt;</span> {{c1::Because there are no other kinds of auxiliary words}} auxiliary verbs <span class=""divider"">-&gt;</span> {{c1::auxiliaries}} In the circumstances where do and have aren't auxiliaries (and also aren't lexical), what are they? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Light verbs are different from auxiliary verbs how? <span class=""divider"">-&gt;</span> {{c1::Can't do the syntactical stuff auxes can}} Light verbs are different from lexical verbs how? <span class=""divider"">-&gt;</span> {{c1::Little semantic content}} Verbs that have little semantic content but are not auxiliaries due to syntactic concerns are called what? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Relationship between auxiliaries and modals in set notation? <span class=""divider"">-&gt;</span> {{c1::modals ⊊ auxiliaries}} What property do modal verbs express? <span class=""divider"">-&gt;</span> {{c1::Modality}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> competing definitions </div> <div class=""sub c1-b c2-f""> Question inversion, negation etc. </div> <div class=""sub c1-b c2-f""> auxiliaries ⊋ modals </div> </div>"	acad::ughhh
At its most general, parsing is taking strings and extracting information. In programming, parsing is often used for extracting a bit of useful data out of a string. In natural and computer languages, parsing takes a series of tokens and transforms them into some kind of data structure. In natural and computer languages, parsing is also called syntax/syntactic analysis. The data structure that parsing results in dependss on the input data. Parsing a CSV file may result in a list of records. Parsing natural or programming/markup/whatever languages often results in a tree. This tree is called a parse tree for programming/markup/whatever languages and syntax tree for natural language. The tokens for parsing/syntactic analysis in the lexical analysis sense are generated by lexical analysis/tokenization. After parsing/syntactic analysis comes semantic analysis. a parse tree is the result of {{c1::a derivation}} of a context-free grammar. {{c1::a syntax tree}} is a form of parse tree most common in linguistics. AST|Abstract syntax tree {{c1::}} more on ASTs, parse trees	acad::inf
"Two languages descended from a common ancestor genetically are called what? <span class=""divider"">-></span> {{c1::sister languages}} Languages related through descent from a common ancestor are said to constitute what? <span class=""divider"">-></span> {{c1::A language family}} Languages descended from a ancestor are known as what, in relation to that ancestor?&nbsp; <span class=""divider"">-></span> {{c1::daughter languages}} Daughter languages are descended genetically from what? <span class=""divider"">-></span> {{c1::A parent/ancestor language}} <br>Sister languages are descended from a common ancestor how? <span class=""divider"">-></span> {{c1::genetically}}"	acad::ughhh
"According to the HMC,&nbsp; where can I only move? <span class=""divider"">-&gt;</span> {{c1::The position which has IP as its complement}} If english lexical verbs wanted to move to C in y/n questions, what would have to happen first? <span class=""divider"">-&gt;</span> {{c1::It would have to move to I}}"	acad::ughhh::synt
"What language I speak is a Topic-prominent language? <span class=""divider"">-></span> {{c1::Japanese}} Topic, comment, presupposition,&nbsp; focus etc., are part of which linguistic concept/subarea? <span class=""divider"">-></span> {{c1::Information structure}} The way information is packaged/structured within a sentence is known as what? <span class=""divider"">-></span> {{c1::Information structure}} Information structure as a part of linguistics is about what? <span class=""divider"">-></span> {{c1::How we structure information (esp. in relation to existing information)}} In information structure, the thing that is new or <b>contrastive</b> information is called what? <span class=""divider"">-></span> {{c1::focus}} In information structure, focus is what kind of information? <span class=""divider"">-></span> {{c1::new or contrastive information}} Terms used roughly synonymously: {{c1::comment}}, {{c2::rheme}} Semantically, what is the theme? <span class=""divider"">-></span> {{c1::'The point of departure' = the starting point of the sentence}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> Semantically, what is the rheme? <span class=""divider"">-></span> {{c1::'The destination' = the point where the sentence goes beyond the departure point}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> In information structure, a clause is divided into what? <span class=""divider"">-></span> {{c1::Theme and rheme (Topic and comment)}} How does topic - comment relate to syntactic relations and semantic roles? <span class=""divider"">-></span> {{c1::Distinct from both}} <div class='c2-f'> Other name for? </div><div class='c1-f'> Other name for? </div><br/>{{c1::Topic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Theme}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Topic/Theme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is being talked about}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Comment/Rheme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is said about the topic/theme}} <div class='c2-f'> Is called? </div><div class='c1-f'> Is? </div><br/>{{c1::A language that organizes its syntax so that sentences have a topic - comment (theme - rheme) structure&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Topic-prominent language}} What is the problem with distinguising focus, givenness, topic, rheme, etc.? <span class=""divider"">-></span> {{c1::Theory-ladenness/controversy}} Topicalization is moving something to the front of the sentence and thus doing what? <span class=""divider"">-></span> {{c1::Marking it as the topic}} Topicalization is making something the topic how? <span class=""divider"">-></span> {{c1::Moving something to the front of the sentence}} The opposite of focus is what? <span class=""divider"">-></span> {{c1::givenness}} The movement of a constituent to the front of the clause and concomittantly establishing it as the topic/theme is known as what? <span class=""divider"">-></span> {{c1::Topicalization}} Moving something to the beginning of a sentence is known as what? <span class=""divider"">-></span> {{c1::fronting}} Fronting is doing what (in syntax)? <span class=""divider"">-></span> {{c1::Moving a constituent to the beginning of the sentence}} <div class=""c2-f""> Are examples of? </div><div class=""c1-f""> What are examples of this? </div><br>{{c1::This is a <em>salad</em> salad; Do you <em>like</em>&nbsp;like him? I talked to him that week, but I didn't talk to him talk to him.}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Contrastive focus reduplication}}"	acad::ughhh
"a derivation is what (related to formal grammars) to arrive at a string? <span class=""divider"">-&gt;</span> {{c1::&nbsp;an application of the production rules&nbsp;}} a derivation is an application of the production rules of a formal grammar to what? <span class=""divider"">-&gt;</span> {{c1::arrive at a (well-formed) word}} With what tool is the syntax of a formal language often formally&nbsp;defined? <span class=""divider"">-&gt;</span> {{c1::formal grammar}} When have we finished derivation? <span class=""divider"">-&gt;</span> {{c1::When we've arrived at a string with no more nonterminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> When generating a string using a formal grammar, where do we start? <span class=""divider"">-&gt;</span> {{c1::at the start symbol}} What parts do production rules of formal grammars consist of, fundamentally? <span class=""divider"">-&gt;</span> {{c1::a left-hand and a right-hand side}} What languages do regular grammars generate? <span class=""divider"">-&gt;</span> {{c1::regular languages}} What kind of thing can an alphabet be, in the context of formal languages? <span class=""divider"">-&gt;</span> {{c1::any set}} What is the alphabet of formal languages most of the time? <span class=""divider"">-&gt;</span> {{c1::a character set of some sort}} What does a formal grammar produce in terms of a formal language? <span class=""divider"">-&gt;</span> {{c1::A formal grammar generates the formal language}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> well, precisely it generates the set of well-formed words that make up the formal language </div> </div> What do we do with nonterminals in the course of derivation? <span class=""divider"">-&gt;</span> {{c1::replace them with further production rules}} The {{c1::syntax}} of {{c2::formal languages}} is said to be {{c4::the structure}} of {{c4::well-formed words}} in a language (however it's not a {{c3::rigurously defined}} term), and contrasted with {{c5::semantics}}. It may be defined via {{c6::a formal grammar}}. The {{c7::grammar}} of a {{c2::formal language}} is {{c8::merely a synonym}} for {{c6::formal grammar}}. The syntax governing a meta-language {{c1::metasyntax}} The start symbol is a kind of what? <span class=""divider"">-&gt;</span> {{c1::nonterminal}} The semantics of a formal language expresses what? <span class=""divider"">-&gt;</span> {{c1::What the words mean}} The rules that formal grammars consist of are known as what? <span class=""divider"">-&gt;</span> {{c1::production rules}} The production rules of a formal language are made up of {{c1::nonterminal symbols}}, {{c2::terminal symbols}} and {{c3::a start symbol}} Something {{c1::well-formed}} {{c4::comforms to}} {{c2::the rules/grammar/syntax}} of a given {{c3::system/<b>formal</b> language}} In the production rules of formal languages, what appears on the left side? <span class=""divider"">-&gt;</span> {{c1::a non-terminal}}<br><div class=""sub""> <div class=""sub f""> Context-free and reuglar only </div> </div> In the production rules for regular grammars, what may appear on the right (right-regular only)? <span class=""divider"">-&gt;</span> {{c1::terminal nonterminal}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Both right-regular and left-regular can just have a terminal </div> </div> In the production rules for regular grammars, what may appear on the right (after the -&gt;) (left-regular only)? <span class=""divider"">-&gt;</span> {{c1::nonterminal terminal}} In the production rules for regular grammars, what may always appear on the right (both left- and right regular) ? <span class=""divider"">-&gt;</span> {{c1::a single terminal}} In the production rules for context-free grammars, what may appear on the right? <span class=""divider"">-&gt;</span> {{c1::any sequence of terminals and nonterminals}} In the production rules for context-free grammars, what may appear on the left? <span class=""divider"">-&gt;</span> {{c1::a single nonterminal}} In the case of a finite formal language, how can we theoretically specify the language? <span class=""divider"">-&gt;</span> {{c1::List all well-formed words}} In formal languages, what are well-formed words sometimes further assembled to? <span class=""divider"">-&gt;</span> {{c1::They are assembled to well-formed expressions}} In a formal language, what are words made of? <span class=""divider"">-&gt;</span> {{c1::characters/elements from its alphabet}} How large is the size of the alphabet of a formal language? <span class=""divider"">-&gt;</span> {{c1::finite}} Formal languages are separated by size in... <span class=""divider"">-&gt;</span> {{c1::finite and infinite langauges}} Any well-formed&nbsp;string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a well-formed word/formula}} Any string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a word}} A formal language consists of what? <span class=""divider"">-&gt;</span> {{c1::a set of well-formed words}} <div class=""c2-f""> What will be done with these, in the course of derivation? </div><div class=""c1-f""> Are called? </div><br>{{c1::nonterminal symbol}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(Things that)&nbsp;will be replaced by further production rules}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Synonym? </div><div class=""c1-f""> Synonym? </div><br>{{c1::syntactic varialble}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminal}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Symbolizes? </div><div class=""c1-f""> Is symbolized by? </div><br>{{c1::Σ}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The alphabet of a formal language}}<br><div class=""sub""> <div class=""sub f""> In formal languages </div> </div> <div class=""c2-f""> Symbolizes what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::S}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the start symbol}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::lowercase letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::terminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::Capital letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Is symbolized by? </div><div class=""c1-f""> Symbolizes? </div><br>{{c1::Empty word}}  <span class=""divider"">&lt;-&gt;</span> {{c2::e/ε}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Are? </div><div class=""c1-f""> Are called (besides and more specifically than letter/character/element)? </div><br>{{c1::terminal symbols}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the fundamental elements of the formal language (part of the alphabet)}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Are what, in relation to automatons? </div><div class=""c1-f""> Are what, in terms of chomsky's hierarchy? </div><br>{{c1::context-free languages}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The languages that can be recognized by a pushdown automaton}} <div class=""c1-f""> What is this? </div><br>Left -&gt; Right <span class=""divider"">-&gt;</span> {{c1::a production rule}}<br><div class=""sub""> <div class=""sub f""> formal grammars </div> </div> <div class=""c1-f""> Is? </div><br>Something that conforms to the grammar of the formal language of which it is a part <span class=""divider"">-&gt;</span> {{c1::Something that is well-formed}} <div class=""c1-f""> Is called? </div><br>An application of the production rules of a formal grammar to arrive at a string <span class=""divider"">-&gt;</span> {{c1::a derivation}}"	acad::ughhh
"Why would gramscians say we think the things are normal that we think are normal? <span class=""divider"">-&gt;</span> {{c1::Through manipulation of society by the ruling classes}} What school of thought was gramsci a part of? <span class=""divider"">-&gt;</span> {{c1::Marxism}} Cultural hegemony establishes the ruling classes norms, values and ideas as normal, inevitable, apolitical<br>Cultural hegomony achieves the normalizing of the ruling classes norms {{c1::through manipulation of the culture (what one might call propaganda)}}<br>Cultural hegemony was introduced by Antonio Gramsci<br>Linguistic hegemony is a form of / variation on&nbsp;{{c1::Cultural hegemony}}"	acad::ughhh
"for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is 𝛿? <span class=""divider"">-&gt;</span> {{c1::the state transition function&nbsp;}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is Σ? <span class=""divider"">-&gt;</span> {{c1::The input alphabet (same as for a formal language)}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is s0? <span class=""divider"">-&gt;</span> {{c1::the initial state}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is S? <span class=""divider"">-&gt;</span> {{c1::set of states}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is F? <span class=""divider"">-&gt;</span> {{c1::the set of final states}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> a finite state machine, if {{c3::it doesn't have a transition for an input}}, is {{c1::either said to fail}}&nbsp; or {{c2::goes to a failure state}} What kind of storage does a FSA have? <span class=""divider"">-&gt;</span> {{c1::no storage}} What is a deterministic FSA in relation to its corresponding non-deterministic FSA most often? <span class=""divider"">-&gt;</span> {{c1::more complex}} What can any non-deterministic FSA be transformed into? <span class=""divider"">-&gt;</span> {{c1::a deterministic FSA}} Nonterminals ∩ Terminals =  <span class=""divider"">-&gt;</span> {{c1::ø}} In a finite state machine, each transition merely depends on the {{c1::current state}} and the {{c2::input}} In a classic formalization, a formal grammar G consists of the 4-tuple ({{c1::Set of}} {{c2::nonterminals}}, {{c1::set of}} {{c3::terminals}}, {{c1::set of}} {{c4::production rules}}, {{c5::start symbol}}) A transducer is a FSA that accepts input (like an acceptor) and then... <span class=""divider"">-&gt;</span> {{c1::generates output}} A FSA that accepts input (like an acceptor) but then generates an output is known as what? <span class=""divider"">-&gt;</span> {{c1::a transducer}} <div class=""c2-f""> Rough synonym? </div><div class=""c1-f""> Rough synonym? </div><br>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Finite state automaton}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div><br>A -&gt; aB or A -&gt; Ba <span class=""divider"">-&gt;</span> {{c1::regular grammars / languages}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div><br>A -&gt; BbcCdCCBaA... <span class=""divider"">-&gt;</span> {{c1::context-free grammars / languages}} <div class=""c1-f""> Short for? </div><br>FSM/FSA <span class=""divider"">-&gt;</span> {{c1::Finite state machine / automaton}} What does a finite-state machine do in response to some inputs? <span class=""divider"">-&gt;</span> {{c1::transition}} The input is a well-formed word if what and the input is over&nbsp;&nbsp;(in a deterministic finite-state machine that is acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::we've reached a final state<br>}} The input is a well-formed word if we've reached a final state and what (in a deterministic finite-state machine that is a acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::the input is over&nbsp;<br><br>}} If we've reached a final state and the input is over in a deterministic finite-state machine that is a acceptors/detectors/recognizers, then what is the case?&nbsp; <span class=""divider"">-&gt;</span> {{c1::the input is contained in the language}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> the input is a well-formed word </div> </div> For a deterministic finite-state acceptor machine, what is the relationship between F (set of final states) and S (set of states)? <span class=""divider"">-&gt;</span> {{c1::F ⊆ S}} For a deterministic finite-state acceptor machine, the state transition function produces what? <span class=""divider"">-&gt;</span> {{c1::the transitions}} Definition of a deterministic finite-state machine = ({{c1::Σ}},  {{c2::S}},  {{c3::s0}},  {{c4::𝛿}},  {{c5::F}}) <sub>technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM</sub> At any given time, an automaton is what? <span class=""divider"">-&gt;</span> {{c1::In a given state}} At any given time, an automaton is in how many states? <span class=""divider"">-&gt;</span> {{c1::exactly one}} <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div><br>{{c1::non-deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::there is more than one}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> it is ambiguous </div> </div> <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div><br>{{c1::deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::It is unambiguous (the combination of input + state produces exactly one possible transition)}} <img class=""c1-f c2-b"" src=""sm_Turnstile_state_machine_colored.svg""><br>What are the transitions here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::all the arrows}} What are the states&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Locked and unlocked}} What are the inputs&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Push and Coin}} What are the arrows here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::transitions}} What are Push and Coin here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Inputs}} What are Locked and Unlocked here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::states}} <img class=""c1-f c2-b"" src=""sm_220px-DFAexample.svg.png""><br>What is S1 here probably? <span class=""divider"">-&gt;</span> {{c1::a final state}} <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Turing machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::recursively enumerable languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a turing machine is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Pushdown automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-free languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a pushdown automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Linear bounded automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-sensitive languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a linear bounded automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Regular languages}} <div class=""c1-f""> What does this define? </div><br>(Σ,  S,  s0,  𝛿,  F) <span class=""divider"">-&gt;</span> {{c1::a deterministic finite-state machine}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> ((h:1;::<img src=""sm_220px-DFAexample.svg.png"">))How are final states in FSM acceptors often designated? <span class=""divider"">-&gt;</span> {{c1::Double circle}}"	acad::inf
"In most contexts, what is the difference between 'program' and 'application'? <span class=""divider"">-></span> {{c1::They are synonyms}} If we're differentiating, a program that is directly used by an user is known as what? <span class=""divider"">-></span> {{c1::an application}} If we're differentiating between program and application, what is the difference (using set operators)? <span class=""divider"">-></span> {{c1::application ⊊ program}} If we're differentiating between program and application, an application is a program that... <span class=""divider"">-></span> {{c1::is aimed at (interfaced by) an user}}"	acad::inf
"flip-flops are a type of what? <span class=""divider"">-&gt;</span> {{c1::circuit}} What is a very simple ciruit for saving one bit? <span class=""divider"">-&gt;</span> {{c1::An (SR) flip-flop}} The most simple type of flip-flop is what flip-flop? <span class=""divider"">-&gt;</span> {{c1::SR flip-flop}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with two of which or which gates? <span class=""divider"">-&gt;</span> {{c1::NAND or NOR gates}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with how many NAND or NOR gates? <span class=""divider"">-&gt;</span> {{c1::two}} How much information can a flip-flop store? <span class=""divider"">-&gt;</span> {{c1::one bit}} How many stable states does a flip-flop have? <span class=""divider"">-&gt;</span> {{c1::two}} <div class=""c2-f""> Near-synyonym? </div><div class=""c1-f""> Near-synonym? </div><br>{{c1::Flip-flop}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Latch}}<br><div class=""sub""> <div class=""sub c2-f""> L... </div> </div> SR flip-flop <span class=""divider"">-&gt;</span> {{c1::Set-Reset Flipflop}} As what thing is a transistor often used? <span class=""divider"">-&gt;</span> {{c1::As a switch}}"	acad::inf
"since GPL forces you to license software built of this with the same rights, it has what attribute? <span class=""divider"">-></span> {{c1::copyleft}} What do you have to do with software using the GPL related to the source code? <span class=""divider"">-></span> {{c1::include it with it (or otherwise make it publicly available)}} What can you do related to redistributing GPL software? <span class=""divider"">-></span> {{c1::you can redistribute it}} What can you do related to changing GPL software? <span class=""divider"">-></span> {{c1::modify it however you like}} I write MyCoolTokenizer with a copyleft-including license. You use MyCoolTokenizer in MyCoolFrequencyAnalyzer. What do you have to do? <span class=""divider"">-&gt;</span> {{c1::Give the users of MyCoolFrequencyAnalyzer the same freedoms MyCoolTokenizer allows.}} How can you sell things licensed with the GPL, if you comply with the license terms? <span class=""divider"">-></span> {{c1::however you want}} If you modify GPL software, what do you have to do with those changes? <span class=""divider"">-&gt;</span> {{c1::make them available}}<br><div class=""sub""> <div class=""sub c1-f""> Unless only you use the changes </div> </div>"	acad::inf
grep [{{c1::OPTIONS}}] {{c2::PATTERN}} [{{c3::FILE...}}]	acad::inf
"The type of waiting that can be stopped by getting a signal is what? <span class=""divider"">-&gt;</span> {{c1::Interruptible waiting}} In unix, a process can be {{c1::running/runnable}}, {{c2::waiting}}, {{c3::stopped}}, or {{c4::zombie}}. A waiting process can either be what or whatß <span class=""divider"">-&gt;</span> {{c1::uninterruptible or interruptible}} A running process is either {{c1::the current process}} or {{c2::waiting to be assigned to one of the cpus}} A process that is either the current process or waiting to be assigned one of the CPUs is known as what? <span class=""divider"">-&gt;</span> {{c1::running}}"	acad::inf
"Women's language containing the injunction against strong language and the resulting double bind may even cause people to view her how (if she obeys the gender prescriptions)? (Lakoff 1975) <span class=""divider"">-&gt;</span> {{c1::as less of a person/individual}} (Following lakoff) What are some examples of masculinity being the standard even for equality, related to language? <span class=""divider"">-&gt;</span> {{c1::It is highly valued (at least relatively) for women to start speaking more powerful mens language, but not men women's language}} Whil Robin Lakoff's introspective/native-speaker intuition data in&nbsp; Language and Womans place limits the scope of analysis to white, educated, middle-class women, she claims what? <span class=""divider"">-&gt;</span> {{c1::that it will hold most of the time for most english speakers}} What is the stereotype re color lexicon size and gender? <span class=""divider"">-&gt;</span> {{c1::Women use more distinct color terms}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> via Lakoff 1975, but common </div> </div> Lakoff 1975's fundamental idea of the double bind starts with the insight that there are some forms of language use which do what? <span class=""divider"">-&gt;</span> {{c1::confer real-world advantages}} Lakoff 1975's fundamental idea of the double bind starts with the insight that being conferred advantages can be based on what? <span class=""divider"">-&gt;</span> {{c1::one's language use}} Lakoff 1975 says that if men overhear women talk about 'trivial' topics such as shades of color, what will their reaction be? <span class=""divider"">-&gt;</span> {{c1::amusement/contempt}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> even though it is of course the division into genderlects that have rendered it something 'women talk about' in the first place! </div> </div> Lakoff 1975 argues that women having larger (but supposedly useless) lexica of colors&nbsp; is emblematic of which trend? <span class=""divider"">-&gt;</span> {{c1::that women's areas of concern are (or are supposed to be) trivial}} Lakoff 1975 argues that as a part of the female genderlect being weaker,&nbsp; men relegate to the female genderlect which topics? <span class=""divider"">-&gt;</span> {{c1::topics that they consider trivial}} For Lakoff 1975, the male lect containing strong/useful forms, and the female lect less so sets up which situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} For Lakoff 1975, language use can create real-world benefits, which relate how to genderlects? <span class=""divider"">-&gt;</span> {{c1::the male lect gets the powerful/useful forms}} According to lakoff, women's language norms create what kind of unavoidable situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} The stereotype of women not being able to make decisions, be changeable, etc. comes from where, according to Lakoff (1975)?  discouragement of women to contradict men, and thus having to be extra careful Lakoff (1975) argues that women use what things (for example) to weaken the potential strength/conflict-proneness of their statement?  Tag questions, hedges, statements-as-questions-by-intonation Lakoff (1975) argues that women use things like tag questions, statements with the intonation of questions and hedges why?  to weaken the potential strength/conflict-proneness of their statement Since women's language contains the injunction against strong language, she will either be censured as unwomanly (as usual for this type of double bind), or she will (the other side of the double bind)?  (Lakoff 1975)  not be able to assert her opinions as strongly"	acad::ughhh
"to create a new thing using a constructor, use what? <span class=""divider"">-&gt;</span> {{c1::the <code>new</code> keyword}} the <code>__proto__</code> property refers to what? <span class=""divider"">-&gt;</span> {{c1::the prototype of the current object}} null sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::at the top}} if you want to use the constructor of a given object <q>someObject</q>, what do you call? <span class=""divider"">-&gt;</span> {{c1::<code>new someObject.constructor()</code>}} getPrototypeOf() gets what? <span class=""divider"">-&gt;</span> {{c1::the actual prototype (__proto__)}} __proto__ is nice to access the prototype, but is what...? <span class=""divider"">-&gt;</span> {{c1::non-standard}} Why do functions have properties, how is that even possible? <span class=""divider"">-&gt;</span> {{c1::functions are Objects}} Whose <code>prototype</code> property contains the constructor property? <span class=""divider"">-&gt;</span> {{c1::that of a constructor function}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> but isn't anything that has this property automatically a constructor??????? </div> </div> Which JS methods <b>will</b> be inherited by things that are instances of from the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the <code>prototype</code> property}} Which JS methods <b>will not</b>&nbsp;be inherited by things that instantiate the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the thing directly}} Where can you find the constructor that was used to create a given object? <span class=""divider"">-&gt;</span> {{c1::its constructor property (which it is actually on its __proto__, as you would expect)}} When will JS walk up the prototype chain to find a method? <span class=""divider"">-&gt;</span> {{c1::if the relevant Object does not have it}} What's the problem of declaring properties on the constructor prototype? <span class=""divider"">-&gt;</span> {{c1::<code>this</code> will not have the correct scope}} What sits at the top of the prototype chain? <span class=""divider"">-&gt;</span> {{c1::null}} What is super confusing abut the <code>prototype</code> property in JS? <span class=""divider"">-&gt;</span> {{c1::it does not refer to the actual prototype -.-}} What does the 2nd-to-top element of the prototype chain have as its prototype? <span class=""divider"">-&gt;</span> {{c1::<font face=""monospace"">null}} What does the  <code>prototype</code> property of a constructor function definitely contain? <span class=""divider"">-&gt;</span> {{c1::the constructor property}} What are JS functions actually, internally? <span class=""divider"">-&gt;</span> {{c1::Objects}} The whole class syntax is what, related to how JS inheritance and objects actually work? <span class=""divider"">-&gt;</span> {{c1::syntactic sugar}} The methods defined in the <code>prototype</code> property have what characteristic?  <span class=""divider"">-&gt;</span> {{c1::Will be inherited}} The fact that if an object has a property with a certain name, properties with the same name further up the prototype chain will not be visited is known as what? <span class=""divider"">-&gt;</span> {{c1::prototype shadowing}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> cf name shadowing </div> </div> The <code>prototype</code> does not refer to the prototype of an object, instead, what does? <span class=""divider"">-&gt;</span> {{c1::the <code>__proto__</code> property}} More standard way to access the actual prototype of the Object? <span class=""divider"">-&gt;</span> {{c1::getPrototypeOf()}} If you want to find out what the name of the constructor function that someObject was created with is, what would you do? <span class=""divider"">-&gt;</span> {{c1::<code>someObject.constructor.name</code>}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which is obv not defined on someObject itself, but further up the prototype chain </div> </div> If we wanted to delete a method from all instances of something, where would we remove it from? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function (or the __proto__ of any of the objects, since someObj.__proto__ == constructorOfObj.prototype)}} If we wanted all instances of something to gain a method, where would we add it? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function}} If we delete something from the prototype of the constructor, where is it deleted? <span class=""divider"">-&gt;</span> {{c1::from all instances}} If we call a method on something that doesn't have that method, what does JS do? <span class=""divider"">-&gt;</span> {{c1::walk up the prototype chain until it finds it}} If we add something to the prototype of the constructor, who can then access it? <span class=""divider"">-&gt;</span> {{c1::any instance}} <div class=""c2-f""> What does this sometimes also indicate? </div><div class=""c1-f""> How is this sometimes indicated, esp in ECMAScript design documents? </div><br>{{c1::[[Prototype]]}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the actual prototype}} having prototypes of prototypes in JS establishes what? <span class=""divider"">-&gt;</span> {{c1::the prototype chain}} What is the prototype chain? <span class=""divider"">-&gt;</span> {{c1::the prototypes of prototypes (__proto__) etc.}} The mechanism that handles JS inheritance is what? <span class=""divider"">-&gt;</span> {{c1::prototype}} if bar's <code>prototype</code> property is foo's prototype (__proto__), then... <span class=""divider"">-&gt;</span> {{c1::foo is an instance of bar}} When does a function become a constructor? <span class=""divider"">-&gt;</span> {{c1::When it is called with the new operator}} What is the performance impact of traversing the prototype chain? <span class=""divider"">-&gt;</span> {{c1::can be signifcant}} What do almost all JS objects inherit from? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} What do all functions inherit from? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}} What are almost all JS objects instances of? <span class=""divider"">-&gt;</span> {{c1::Object}} What are all arrays instances of (directly)? <span class=""divider"">-&gt;</span> {{c1::Array}} The first argument Object.create takes is... <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) it will have&nbsp;}} In JS, foo is an instance of bar if bar's what is foo's what? <span class=""divider"">-&gt;</span> {{c1::bar's <code>prototype</code> property is foo's prototype (__proto__)}} Function.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} For Object.create, the thing to use as prototype (__proto__) goes where? <span class=""divider"">-&gt;</span> {{c1::first argument}} Creating an object and specifying which prototype (__proto__) you want explicitly is done how? <span class=""divider"">-&gt;</span> {{c1::Object.create}} Any function that you call with the new operator is what, in JS? <span class=""divider"">-&gt;</span> {{c1::a constructor}} A constructor is what which you call with the new operator? <span class=""divider"">-&gt;</span> {{c1::a function}} <div class=""c2-f""> Object.prototype method for? </div><div class=""c1-f""> Object.prototype method for? </div><br>{{c1::hasOwnProperty}}  <span class=""divider"">&lt;-&gt;</span> {{c2::seeing if the property is not inherited or inherited}} <div class=""c1-f""> What will this be? </div><br>Object.create(Array.prototype).__proto__  <span class=""divider"">-&gt;</span> {{c1::Array.prototype including methods such as push...}} <div class=""c1-f""> What will Array.prototype be to the newly created object? </div><br>Object.create(Array.prototype) <span class=""divider"">-&gt;</span> {{c1::__proto__}}</font> Which kind of functions do not have a <code>prototype</code> property? <span class=""divider"">-&gt;</span> {{c1::arrow functions}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which is why they can't be used as constructors </div> </div> Which <b>kind of </b>functions <b>can</b> you call with <code>new</code> to create a new instance? <span class=""divider"">-&gt;</span> {{c1::any function that is not an arrow function}} When you create an object with object literal syntax in JS, what is its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} When you create an object with object literal syntax in JS, what constructor is used? <span class=""divider"">-&gt;</span> {{c1::the Object() constructor}} When functions are being used as constructors, where will the objects created by them have the things that were defined on constructor.prototype? <span class=""divider"">-&gt;</span> {{c1::their prototype (__proto__)}} When functions are being used as constructors, the prototype of the constructor function becomes what?  <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) of the new object }} When functions are being used as constructors, the prototype (__proto__) of the new object will be equal to what? <span class=""divider"">-&gt;</span> {{c1::the <code>prototype</code> of the constructor function}} What sits at the second position of the prototype chain, below null? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Object.prototype sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::one below the top (below null)}} If you don't {{c1::supply a constructor to a <code>class</code> declaration}}, <span class=""c4-5-scr"">the constructor will be {{c2::an empty constructor}} if it is a {{c3::base class}}</span>, and <span class=""c2-3-scr"">{{c4::one that just calls the constructor of the parent class}} if it is a {{c5::derived class}}</span>. Array.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Any given function has what as its prototype  (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> Any given array has what as its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Array.prototype}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> <div class=""c1-f""> Why doesn't this work? </div><br><pre><code>let temp = () =&gt; 5; new temp;</code></pre> <span class=""divider"">-&gt;</span> {{c1::arrow functions cannot be used as constructors}} The <code>typeof</code> things like <code>Array</code>, <code>Object</code>, <code>Function</code> is what? <span class=""divider"">-></span> {{c1::function}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > they are classes (in a sense) but classes are functions </div> </div>"	acad::js
"A table in latex is created by the tabular environment.  the tabular environment has a very specific syntax. Matrix syntax is similar to  {{c1::tabular syntax}} The call to \begin{tabular} takes an additional argument,  Defining {{c3::multiple columns}} within a {{c4::tabular}} argument: {{c5::*}} {{c6::{}} {{c1::amount}} {{c6::} }}{{c6::{}} {{c2::type}} {{c6::}&nbsp;}}&nbsp;<br><div class=""sub""> spacing is for anki clozes, not for latex </div> ((h:2;::<img src=""sm_147px-Multicolumn.svg.png"">))In comparison with normal columns, what do paragraph columns do?  wrap \multicolumn{ num_cols }{ alignment }{ contents } to wrap text within a table, what kind of columns should you use?  paaragraph columns cline{&lt;start&gt;-&lt;end&gt;}   generate a partial horizontal line from start to end multicolumn   create a collumn that is broader than one paragraph column of width width   p{width} tabular   a table<div class=""sub""> <div class=""sub c1-f""> syntax in html is what? (different from this) </div> <div class=""sub all-b""> the table environment is used for something different </div> </div> <div class=""c2-f""> Latex package for? </div><div class=""c1-f""> Latex package for? </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div><br>{{c1::longtable}}  <span class=""divider"">&lt;-&gt;</span> {{c2::allow tables to flow over page boundaries}}<br><div class=""sub""> <div class=""sub f""> package longtable </div> </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div> <div class=""c2-f""> Indicate what? </div><div class=""c1-f""> Are indicated how? </div><br>((h:2;::<img src=""sm_5da95a8e56e67d6b497a09183e429c5d961f7323.svg"">)){{c1::matrix (and derivatives, pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a matrix&nbsp;}} {{c1::the letters in front of the matrix environment (pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the braces surrounding a matrix}}<br><div class=""sub""> <div class=""sub all-b""> the table environment is used for something different </div> </div>"	acad::latex
Internally, a Promise has the properties {{c1::[[PromiseState]]}} and {{c2::[[PromiseResult]]}}	acad::js
"\{{c1::stackrel}}{{c2::{top}{bot} }} will {{c3::render the top text above the bottom text}} In Latex, there are a bunch of commands starting with \text (which I will call \textwhatever) that indicate different fontstyles: \textbf, \textit, \textrm (roman), \texttt (monospace), \textsc (smallcaps) If you try to type text in a math env as-is, it will look weird, as latex is formatting it for math. To insert text in a math environment, you can use any of \mathwhatever, \textwhatever, or just \text. It is generally advised that you use \text or \textwhatever within math environments when you want to write text, and \mathwhatever when you want to write math that just happens to be in roman letters. For many but not all \textwhatever font formatting commands, latex has corresponding \mathwhatever fonts (e.g. \mathrm, \math. The \mathwhatever fonts only work within a math environment. The \textwhatever fonts also work within a math environment. Within a math environment, there are some differences between \mathwhatever and \texthatever:  \mathwhatever uses the defined math font and \textwhatever uses the defined text font (which may be different) \mathwhatever does not preserve spaces within, but \textwhatever does. you can nest \textwhatevers but not \mathwhatevers. some text styles only exist as \mathwhatevers, e.g. mathfrak (Fraktur), mathbb (Blackboard bold)  In math environments, besides using \textbf or \mathbf, you can bold symbols by using \boldsymbol or \pmb 'poor man's bold' (which however only works by duplicating characters 3 times slightly offset)  frac{a}{b}   fraction (bruch)||<img src=""sm_JFBz6.png""> sqrt[root]{math}   square root (wurzel) \sum_lower^upper  There are also commands for math functions that are pure text (e.g. sin, lim), which have the advantage over just typing the characters that proper formatting is guaranteed  For commands (esp. math) that take something lower, it is often indicated {{c1::_{foo}}} For commands (esp. math) that take something upper, it is often indicated {{c1::^{foo}}}  \bar{foo}|ad a bar on top of letter <div class='c2-f'> What does this indicate? </div><div class='c1-f'> How do we indicate this in latex? </div><br/>{{c1::x^{n}}}  <span class=""divider"">&lt;-&gt;</span> {{c2::x<sup>n</sup>}}<br/><div class=""sub""> <div class=""sub c2-f c1-b"" > for single characters {} are optional </div> </div> <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_403-4037364_6848425-integral-symbol.png"">)) ((h:2;::<img src=""sm_1200px-Greek_uc_sigma.svg.png"">)){{c1::int}}  <span class=""divider"">&lt;-&gt;</span> {{c2::integral}} {{c1::sum}}  <span class=""divider"">&lt;-&gt;</span> {{c2::render a sum}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_uNgnp.png"">)){{c1::overbrace}}  <span class=""divider"">&lt;-&gt;</span> {{c2::horizontal curly brace on top}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_binomial-coefficient-formula.png"">)){{c1::binom}}  <span class=""divider"">&lt;-&gt;</span> {{c2::binomial coefficient}}"	acad::latex
"Instead of writing key: function(... for methods, what can you write, in ES6? <span class=""divider"">-></span> {{c1::key(...}}"	acad::js
"<img src=""sm_tmp0ejxsp3b.png""> 1|Untracked 2|Unmodified 3|Modified 4|staged 5|add the file 6|edit the file  7|stage the file 8|remove the file 9|commit"	acad::inf
"To get latex citations etc to work (when compiling), first...  pdf make (<code>pdflatex</code>) To get latex citations etc to work, first run the pdf maker (pdflatex), then run the citation processor, then...  run the pdf maker twice To get latex citations etc to work, first run the pdf maker, then  run the citation processor Latex' convention of naming everything to do with citation bibliography&lt;whatever&gt; reflects what usage of the word bibliography?  the wide sense (synonym to works cited / references) \usepackage[style=foo]{biblatex}   (biblatex) set the citation style to foo printbibliography   (biblatex) add a works cited/references section BibTeX is a {{c1::file format (.bib)}} as well as {{c2::a latex citation processor}} Common packages for citation management in latex are {{c1::biblatex}} and {{c2::natbib}} Common processors for .bib files for latex are {{c1::BibTeX}} and {{c2::biber}} In latex, what generally glues our latex file and our citations (in the .bib file) together?  a certain (citation) processor In latex, where do we generally save our citations?  a separate (.bib) file The confusing thing about BibTeX being two things is that even if you do what, you still use BibTeX the file format?  use a different processor The confusing thing about BibTeX being two things is that even if you use a different processor, you still?  use the .bib format biblatex is <b>most commonly </b>used with what as the processing program?  biber biblatex requires what as the processing program?  nothing in particular natbib requires what as the processing program?  BibTeX addbibresource   (biblatex) command to specify the location for your .bib file<div class=""sub""> <div class=""sub c1-b c2-f""> (well, biber does also support other formats) <br><img src=""sm_tmprbsz3kbb.jpg""><br></div> </div> <div class=""c1-f""> What's the problem? </div>What happens if you try to use e.g. biber with a file with file ending?  it'll not work (try to find files that don't exit) biber foo.tex  Call biber without extension (biber foo) if you call biber, the argument you call it with has what characteristic?  don't include file extension <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div>footnote{foo}   create a footnote containing foo<div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div><br> cite{foo}   cite a specific work with label foo footcite{foo}   cite a specific work with label foo in as a foot note nocite{foo}   add a specific work with label foo into the references/works cited section without referring to it in the text parencite{foo}   cite a specific work with label foo in parentheses textcite{foo}   cite a specific work with label foo in-text with parenthesees areound <b>a specific part</b> <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div><br>appendix   generate an appendix"	acad::latex
"Why will a tab freeze if you run code that takes very long?  because JS is single threaded and thus has to process the message to comopletion Why is the timeout we give setTimeout only a minimum time?  because its put at the end of the message queue and thus might take longer Why are we guaranteed that the things we are using from our function will not change 'behind our backs' while the function is running?  because we will always finish processing the curreent message (and thus the current stack contents) before we do anything else When the event loop processes a message in the message queue, what does it do?  calls the corresponding function What runs on JS's single thread hosts the event loop. The event loop processes the message queue Once the event loop has called the function of a message, when is it done?  when the call stack is empty Once the event loop has called the function of a message, what will it do with subsequent function calls within?  new stack frame on the stack In JS, stack frames are called execution contexts.  Each execution context contains a scope chain, which is a lists of lexical scopes from inner to outer. A lexical environment is a structure that holds identifiers and the variables/functions they refer to. What does setTimeout do with its function argument? (JS-internal view)  adds a new message with this function at the end of the message queue What does each  message in the message queue have associated with it?  a function Until the stack is empty, what can't we do?  start processing a new message In browsers generally each tab has  its own heap, stack and message queue If there's something on the stack, then what are we doing?  processing a message in the message queue How is JS threaded?  single-theaded Besides the heap and call stack, what does JS also have, as a core part of the implementation?  the message queue"	acad::js
"to add something to the evenet queue of another runtime, what method can one use? <span class=""divider"">-></span> {{c1::window.postMessage()}}"	acad::js
CORS|Cross-Origin Resource Sharing	acad::js
"the little secondary queue that will (probably) run after the current function finishes? <span class=""divider"">-></span> {{c1::Promise job/microtask queue}}"	acad::js
"the promise job/microtask queue (also has other names) is a secondary queue that will run when? <span class=""divider"">-></span> {{c1::as soon as the current message is processed (or otherwise soon, the specs aren't in agreement/clear)}}"	acad::js
precedence of <b>nodejs</b> queues: {{c1::process.nextTick}} queue &gt; {{c2::promises microtask}} queue &gt; {{c3::setTimeout (with a timeout of 0)}} queue ≈ {{c4::setImmediate}} queue	acad::js
"Function to add things to be executed at the end of the current message? <span class=""divider"">-&gt;</span> {{c1::process.nextTick(callback)}}"	acad::js
"process.nextTick(callback) adds things to be executed when? <span class=""divider"">-></span> {{c1::at the end of the current message}}"	acad::js
"what do we pass to process.nextTick() to be executed at the end of the current message? <span class=""divider"">-></span> {{c1::a callback}}"	acad::js
setImmediate() is similar to {{c2::process.nextTick()}} but {{c1::runs later (with lower priority)}}	acad::js
the callback provided to http.createServer (that reacts to request events) is provided two objects when called, a {{c1::http.IncomingMessage}} object, and a {{c2::http.ServerResponse}}	acad::js
"<div class='c1-f'> Is an API for what? </div><br/>{{c1::JS api for form validation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Constraint validation API}}"	acad::js
"the {{c1::define()}} method of window.customElements takes the arguments 1) {{c2::what the name of the element will be}}, 2) the {{c3::class}} that will {{c4::define its behavior}}, 3) (optional) an {{c5::object}} {{c6::specifying what it extends}} The two types of custom elements are customized built-in elements and... <span class=""divider"">-&gt;</span> {{c1::autonomous custom elements}} The two types of custom elements are autonomous custom elements and... <span class=""divider"">-&gt;</span> {{c1::customized built-in elements}} In general, regardless of what, the class defining a custom element should at least extend something like HTMLElement? <span class=""divider"">-&gt;</span> {{c1::the extends parameter (3rd arg to define)}} In general, regardless of the extends parameter (3rd arg to define), the class defining a custom element should do what? <span class=""divider"">-&gt;</span> {{c1::(at least) extend something like e.g. HTMLElement}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div><br>{{c1::customized built in elements, e.g. foo-bar that extends p}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;p is=""foo-bar""&gt;&lt;/p&gt;}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div><br>{{c1::autonomous custom elements, e.g. foo-bar}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;foo-bar ...&gt;&lt;/foo-bar&gt;}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div><br>{{c1::if you<b>&nbsp;do not</b> specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::an autonomous custom element}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div><br>{{c1::if you specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a customized built-in element}} <div class=""c2-f""> Function of window.customElements for? </div><div class=""c1-f""> Function of window.customElements for? </div><br>{{c1::define()}}  <span class=""divider"">&lt;-&gt;</span> {{c2::definining a new custom element}} <div class=""c1-f""> what's the problem with this custom element? </div><br>&lt;wordcount&gt; <span class=""divider"">-&gt;</span> {{c1::must include at least a -&nbsp;}} <div class=""c1-f""> have what restriction in their name? </div><br>custom elements <span class=""divider"">-&gt;</span> {{c1::must include at least one -}}"	acad::js
"Function to set an attribute (e.g. href) on an <code>Element</code>? <span class=""divider"">-></span> {{c1::setAttribute}} Function to remove an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::removeAttribute}} Function to get an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::getAttribute}}"	acad::js
"<div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div><br/>{{c1::whenDefined(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get a promise that resolves when foo is defined}} <div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div><br/>{{c1::get(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get the constructor of the custom element named foo}}"	acad::js
"{{c3::&lt;template&gt;}} contains HTML that won't {{c1::be rendered immediately}}, but {{c2::can be used from JS (often multiple times)}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::part(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::element within shadow tree that has part=""foo""}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow hosts}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host-context(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which has a <b>ancestor!!!!</b> some-selector}}<br><div class=""sub""> <div class=""sub all-b""> :host-context(.mine) matches <pre><code>&lt;h1 class=""mine""&gt;   ...     &lt;some-shadow-host&gt;</code></pre> </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which matches some-selector}}<br><div class=""sub""> <div class=""sub all-b""> :host(.mine) matches &lt;some-shadow-host class=""mine""&gt; </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::defined}}  <span class=""divider"">&lt;-&gt;</span> {{c2::custom elements that are already defined}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> useful for showing placeholder stuff </div> </div> <div class=""c2-f""> is selected how? </div><div class=""c1-f""> selects what? </div><br>{{c1::part=""foo""}}  <span class=""divider"">&lt;-&gt;</span> {{c2:::part(foo)}} <div class=""c2-f""> Solves what problem? </div><div class=""c1-f""> Is solved by what? </div><br>{{c1::the part property&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::targeting things within shadow DOMs (mostly components}} interestingly, what can you do with custom elements before you define them? <span class=""divider"">-&gt;</span> {{c1::already use them in the html}} Within a custom element, what can we have, that makes it particularly useful? <span class=""divider"">-&gt;</span> {{c1::child elements}} Where are the lifecycle callbacks for custom elements defined? <span class=""divider"">-&gt;</span> {{c1::in the class that defines the custom elements}} To what do you most commonly attach a shadow root? <span class=""divider"">-&gt;</span> {{c1::a custom element}} In the constructor for a custom element, what should you do, first thing? <span class=""divider"">-&gt;</span> {{c1::call super(props) (to make sure that the correct prototype chain is established)}} <div class=""c2-f""> are called when? </div><div class=""c1-f""> What is called then? </div><br>{{c1::lifecycle callbacks}}  <span class=""divider"">&lt;-&gt;</span> {{c2::when the custom element changes in relation to the DOM (e.g. connected or disconnected from the DOM)}}<br><div class=""sub""> <div class=""sub f""> Fot custom elements </div><div class=""sub c2-f""> be a little specific </div> </div> <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div><br>{{c1::connected/disconnectedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::connected to/ disconnected from the DOM}} <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div><br>{{c1::adoptedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moved to a new document}} <b>custom elements</b> have are four {{c1::lifecycle callbacks}}, {{c2::connectedCallback}}, {{c3::disconnectedCallback}}, {{c4::adoptedCallback}}, {{c5::attributeChangedCallback}}   3.2.2. Selecting Shadow Hosts from within a Shadow Tree A shadow host is outside of the shadow tree it hosts, and so would ordinarily be untargettable by any selectors evaluated in the context of the shadow tree (as selectors are limited to a single tree), but it is sometimes useful to be able to style it from inside the shadow tree context.  For the purpose of Selectors, a shadow host also appears in its shadow tree, with the contents of the shadow tree treated as its children. (In other words, the shadow host is treated as replacing the shadow root node.)  When considered within its own shadow trees, the shadow host is featureless. Only the :host, :host(), and :host-context() pseudo-classes are allowed to match it.  Why is the shadow host so weird? The shadow host lives outside the shadow tree, and its markup is in control of the page author, not the component author.  It would not be very good if a component used a particular class name internally in a shadow tree stylesheet, and the page author using the component accidentally also used the same class name and put it on the shadow host. Such a situation would result in accidental styling that is impossible for the component author to predict, and confusing for the page author to debug.  However, there are still some reasonable use-cases for letting a stylesheet in a shadow tree style its shadow host. (For example, the component might want to be laid out as a flexbox, requiring the shadow host to be set to display: flex.) So, to allow this situation but prevent accidental styling, the shadow host appears but is completely featureless and unselectable except through :host and its related functional forms, which make it very explicit when you’re trying to match against markup provided by the page author. How can you prevent FOUC with custom elements? <span class=""divider"">-&gt;</span> {{c1:::defined (and specifically :not(:defined))}} {{c1::custom elements}} are HTML elements that have their own {{c2::name}} and {{c3::custom functionality}}. The {{c1::Web Components::w...}} suite consists of {{c2::Custom elements}}, {{c3::Shadow DOM}} and {{c4::HTML templates}} <div class=""c2-f""> returns something of the type? </div><div class=""c1-f""> The most common and relevant element of this type is? </div><br>{{c1::window.customElements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::CustomElementRegistry}} <div class=""c1-f""> When can you already use this? </div><br><pre><code>&lt;share-buttons&gt;   &lt;social-button type=""twitter""&gt;&lt;a href=""...""&gt;Twitter&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""fb""&gt;&lt;a href=""...""&gt;Facebook&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""plus""&gt;&lt;a href=""...""&gt;G+&lt;/a&gt;&lt;/social-button&gt; &lt;/share-buttons&gt; </code></pre> <span class=""divider"">-&gt;</span> {{c1::even before these custom elements are defined}}"	acad::inf
"What do we do with the content templates in JS, so we can use it elswhere (without fucking the template up)? <span class=""divider"">-></span> {{c1::call cloneNode on it}}"	acad::js
"often, it makes sense to use templates as what? <span class=""divider"">-></span> {{c1::the shadow dom of custom elements}} attachShadow takes an argument which is what? <span class=""divider"">-></span> {{c1::an options object}}<br/><div class=""sub""> <div class=""sub all-b""> yes, it doesn't take an argument of a shadow tree to directly attach, you have to do that later </div> </div> attachShadow takes an argument which is an options object with the key(s)? <span class=""divider"">-></span> {{c1::mode}} You can access the {{c3::shadow root}} of an element via {{c2::the shadowRoot property (of any given element)}}, but only if {{c1::its mode = ""open""}} When rendering, what happens to the shadow tree? <span class=""divider"">-></span> {{c1::it's attached at the shadow host}} What kind of elements already use the shadow DOM in the background? <span class=""divider"">-></span> {{c1::things like &lt;video&gt; (e.g. its controls)}} To what can you attach a shadow root? <span class=""divider"">-></span> {{c1::any <code>Element</code>}} Once you've created a shadow root, how do you add children etc? <span class=""divider"">-></span> {{c1::just as you would for any normal DOM element}} Method of any <code>Element</code> to attach a shadow root? <span class=""divider"">-></span> {{c1::attachShadow}} <div class='c2-f'> What would you use? </div><div class='c1-f'> Allows us to do what? </div><br/>{{c1::To encapsulate part of the DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the root node of the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow root}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the point where the regular DOM ends ant the shadow DOM begins}}  <span class=""divider"">&lt;-&gt;</span> {{c2::shadow boundary}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the dom node that a shadow DOM is attached to}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow host}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the DOM tree inside the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow tree}} <div class='c2-f'> Does what? </div><div class='c1-f'> How do we do this, for a given shadow root? </div><br/>{{c1::the mode option&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specifies if JS written in the main page can access it}}<br/><div class=""sub""> <div class='sub f'> of the options object of attachShadow </div> </div> Why might you want to use web components without the shadow DOM, for example? <span class=""divider"">-></span> {{c1::e.g. you <i>want</i>&nbsp;styles to propagate}} The {{c1::normal DOM}}, when {{c2::in contrast to the shadow DOM}}, is sometimes called {{c3::the light DOM}}? During composition, things with {{c1::slot=""foo""}} replace {{c3::slots}} with {{c2::name=""foo""}} in the {{c4::shadow DOM}}. <div class='c2-f'> go where? </div><div class='c1-f'> What things related to slots are here? </div><br/>{{c1::&lt;slot&gt; elements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::somewhere within the shadow DOM}} <div class='c2-f'> Are problems that what solves? </div><div class='c1-f'> What are some exampls of problems that this solves? </div><br/>{{c1::competing styles, multiple IDs}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} If there are multiple elements in light DOM {{c1::with the same slot name}}, they are {{c2::appended into the slot, one after another}}. <div class='c2-f'> go/are in(to) which DOM? </div><div class='c1-f'> What things related to slots are here? </div><br/>{{c1::elements with slot=""something""}}  <span class=""divider"">&lt;-&gt;</span> {{c2::are in the light DOM}}"	acad::js
"Lakoff 1975 says that women's language involves what, related to swearing? <span class=""divider"">-&gt;</span> {{c1::swearing is not womanly}} If the point about 'woman's domain being the trivial' holds, then the double bind is that she can either either participate in men's areas of interest and be censured, or talk about what (which causes what)? <span class=""divider"">-&gt;</span> {{c1::talk about women's things (which are 'trivial' and will be laughed at and ignored)}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either use the male forms and face censure for acting outside her gender norms, or? <span class=""divider"">-&gt;</span> {{c1::face the disadvantages of using a lect with less power}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either face the disadvantages of using a lect with less power, or? <span class=""divider"">-&gt;</span> {{c1::use the male forms and face censure for acting outside her gender norms}} For Lakoff 1975, language use can create real-world benefits, of which the male lect gets the powerful/useful forms, and the female lect? <span class=""divider"">-&gt;</span> {{c1::gets the weak forms}}"	acad::ughhh
"The most common type of {{c5::test doubles}} (arranged alphabetically) are {{c1::dummys}}, {{c2::fakes}}, {{c3::mocks}}, and {{c4::stubs}} As test doubles, {{c3::stubs}} use {{c4::predefined answers}} to {{c5::simulate what a method would actually do&nbsp;}}<br/><div class=""sub""> <div class=""sub all-b"">dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly</div> </div> As test doubles, {{c3::mocks}} make sure that {{c2::the method was actually called}} on {{c1::the mock}}&nbsp;in the way {{c4::it shoud}}<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::fakes}} have {{c2::working implementations}} but {{c2::use some kind of shortcut}} (e.g. {{c1::database in memory}})<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::dummys}} are {{c2::passed}} but {{c2::never used}} (e.g. {{c1::used to fill param lists}})<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div>"	acad::inf
"foo.{{c3::tagName}} (or .{{c3::nodeName}}) will get the {{c2::name of the html tag}} {{c1::in allcaps}} foo.{{c1::tagName}} and foo.{{c1::nodeName}} are the same, except that {{c1::nodeName}} will return {{c2::#text for text nodes}} Why have I never heard of the capturing phase until today (19.07.2021)? <span class=""divider"">-&gt;</span> {{c1::Because by default, events are registered for the bubbling phase}} The on&lt;event&gt; prop can't do what, what other methods of adding event handlers can? <span class=""divider"">-&gt;</span> {{c1::add multiple event handlers}} Inverse of addEventListener? <span class=""divider"">-&gt;</span> {{c1::removeEventListener}} Generally, DOM Events have three phases: The {{c1::capturing phase}}, the {{c2::target phase}}, and the {{c3::bubbling phase}} Function that allows adding multiple events: element.{{c1::addEventListener}}({{c2::event}}, {{c3::handler}}, {{c4::options}}) Event delegation only works due to what? <span class=""divider"">-&gt;</span> {{c1::event bubbling}} By default, which events bubble? <span class=""divider"">-&gt;</span> {{c1::most but not all (e.g. focus)}} By default, events become what kind of events? <span class=""divider"">-&gt;</span> {{c1::events that trigger during the bubbling phase}} Behavior pattern for {{c5::event delegation}}: Add {{c3::custom attribute}} to element that {{c4::describes behavior}}, add event listener on {{c1::document (or other high elem)}} that {{c2::tests for attribute}} (and then handles the changes) {{c1::If we pass an object/class as an event handler}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the handleEvent() function}} {{c1::stop further event bubbling&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.stopPropagation()}} {{c1::stop default browser actions for event (e.g. going to link when clicking on it)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.preventDefault()}}  {{c1::make an event trigger during the capturing phase}}  <span class=""divider"">&lt;-&gt;</span> {{c2::3rd arg of addEventListener {capture: true}}}"	acad::inf
"<div class='c2-f'> method for? </div><div class='c1-f'> does what? </div><br/>{{c1::Object.entries(someObj)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get array of [key, value] pairs}}"	acad::js
for await of allows you to iterate over an {{c2::async iterable object}}, to use it, insert {{c1::an await between for and the rest of the iteration statement}}	acad::js
{{c1::Object.fromEntries}} takes an argument that is an {{c2::iterator}} of {{c3::[key, value]}} and {{c4::transforms it into an object&nbsp;}}	acad::js
"Why can't you misformat something using prettier? <span class=""divider"">-&gt;</span> {{c1::since it formats your code automatically}} Which languages does prettier support? <span class=""divider"">-&gt;</span> {{c1::a lot of different web-related ones (JS, Angular, Vue, JSX, CSS, SCSS, JSON, YAML etc. etc.)}} What does prettier do with the stuff you give it? <span class=""divider"">-&gt;</span> {{c1::formats it according to its rules}}"	acad::js
"the {{c3::deviceorientation}} event contains four values, {{c1::absolute}}, {{c2::alpha}}, {{c4::beta}}, and {{c5::gamma}} for the deviceorientation events, the things they can be relative to is the {{c1::screen}} on your mobile device, and the {{c2::keyboard}} on your laptop (generally) Why might your laptop have acceleration sensors? <span class=""divider"">-></span> {{c1::protect HDD when fallign}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""sm_beta2.png"">)){{c1::beta (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the x axis&nbsp;}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""sm_alpha.png"">)){{c1::alpha (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the z axis}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""gamma.png"">)){{c1::gamma (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the y axis&nbsp;}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div><br/>{{c1::deviceorientation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Device orientation changes (in alpha, beta, gamma)}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div><br/>{{c1::devicemotion}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moving your device (accelerometer changes)}}"	acad::js
"the parameters taken by {{c1::fetch()}} and the {{c2::Request constructor}} are {{c3::identical}} (except that you can pass a {{c2::Request}} object to {{c1::fetch}} {{c4::instead of the 'proper' parameters}}) <div class='c2-f'> fetch()/new Request() key for? </div><div class='c1-f'> fetch()/new Request() key for? </div><br/>{{c1::method}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the HTTP method to use}} <div class='c2-f'> fetch() options object/new Request() key for? </div><div class='c1-f'> fetch() options object/new Request() key for? </div><br/>{{c1::headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the headers to use}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.status}}  <span class=""divider"">&lt;-&gt;</span> {{c2::HTTP status code}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.ok}}  <span class=""divider"">&lt;-&gt;</span> {{c2::whether the status code was ok (200-299)}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The HTTP headers returned}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.body}}  <span class=""divider"">&lt;-&gt;</span> {{c2::body returned}}"	acad::js
"WebAssembly and JS are meant to... <span class=""divider"">-></span> {{c1::work together}} One of main problematic implications of {{c3::WebAssembly}} is that it allows running code on your computer which is {{c2::not easily inspectable}} because {{c1::compiled}}, thus potentially hiding {{c4::malware}}, preventing {{c5::adblockers etc.}} from applying, and in a notable case, being used for {{c6::crypto mining}} JS can access WebAssembly via... <span class=""divider"">-></span> {{c1::the WebAssembly JavaScript API}}"	acad::inf
"Using JSX with React is... <span class=""divider"">-&gt;</span> {{c1::optional}}"	acad::react
"How mutable are React elements? <span class=""divider"">-&gt;</span> {{c1::immutable}}"	acad::react
When React sees an {{c1::element representing a user-defined component}}, it passes JSX {{c2::attributes}} and {{c3::children}} to it as {{c4::a single object}}. We call this object “{{c5::props}}”.	acad::react
the only time we can assign to {{c1::this.state}} is in the the {{c2::constructor}}	acad::react
In the react {{c2::component constructor}}, we always need to call {{c1::super(props)}} first	acad::react
{{c2::outputting}} the {{c3::virtual representation of a component}} into the {{c4::final UI representation}} (most often the {{c4::actual DOM}}) is known as {{c1::mounting}}	acad::react
Within the component class, besides {{c1::lifecycle}} methods, constructors etc., we can add {{c2::custom}} methods	acad::react
within class components, {{c2::outside of the constructor}}, you can {{c3::only change state}} via {{c1::setState()}}	acad::react
both {{c2::this}}.{{c1::props}} and {{c2::this}}.{{c1::state}} may be updated {{c3::asynchronously}}, if you want to make sure that {{c4::things are updated in the correct order}}, pass a {{c5::callback}}	acad::react
if you use {{c1::setState}}, but only {{c2::specify some of the keys}}, they will be {{c3::merged in to the previous state object}}	acad::react
If we take a function, e.g. {{c1::a method}} of {{c1::an object}}, and {{c2::assign it to e.g. a variable}} (or {{c2::pass it as a param}}), and then {{c4::call it later}}, it will use {{c3::whatever <code>this</code> is in scope}}, instead of {{c3::the <code>this</code>}}&nbsp;of {{c1::the object}} or similar	acad::js
To make sure react {{c5::event handlers}} {{c1::get the correct <code>this</code>}}, you need to {{c2::<code>bind</code> them in the constructor}}, or use {{c3::public class fields}}/{{c4::arrow functions}} (which have their own downsides)	acad::react
To {{c3::pass arguments}} to React {{c4::event handlers}}, use {{c1::anonymous functions}} or {{c2::bind}}	acad::react
To {{c2::conditionally render things}}, use {{c1::native JS constructs such as if, ternary, log-op}}	acad::react
For easy list generation, it is often idiomatic in react to {{c1::return JSX}} from a {{c2::map function}}	acad::react
In react, a {{c1::controlled component}} has react as {{c2::the only thing managing its behavior}}, making its content {{c3::reflect the react state}}, and having {{c4::react update it}} based on {{c5::events}} (e.g. {{c5::onchange}})	acad::react
"what would you set to this.state.somekey to have a input type=""text"" be a controlled component? <span class=""divider"">-></span> {{c1::value}}"	acad::react
In React, the content of a {{c1::textarea}} does not live {{c2::between its tags}}, but instead {{c3::in a value attribute}}	acad::react
In React, which <code>{{c1::&lt;option&gt;}}</code> is selected is not specified by {{c2::a <code>selected</code> attr}}&nbsp;on {{c2::the <code>&lt;option&gt;</code>}}, but by {{c3::a <code>value</code> attr}}&nbsp;on {{c3::the <code>&lt;select&gt;</code> tag}}	acad::react
{{c1::formik}} and {{c2::react-hook-form}} are the most popular {{c3::react form libraries}}	acad::react
{{c1::Lifting state up}} is putting {{c2::state}} that {{c3::needs to be shared}} in {{c4::the closest common ancestor}} When lifting state up, the {{c1::state changes}} are then {{c2::passed back down}} as {{c3::props}} To {{c1::lift state up}} in react, {{c2::child components}} {{c4::should not}} depend on {{c3::state}} anymore, but on {{c3::props}} If child components have to {{c2::handle events}} when {{c1::lifting state up}}, the {{c3::event handlers}} should be {{c4::passed in}}, so they can {{c5::change the correct state}}	acad::react
{{c1::react-devtools}} are specific devtools that should make {{c2::inspecting react a lot easier}}	acad::react
In sharing information, react prefers {{c1::composition}} over {{c1::inheritance}}	acad::react
Whatever you {{c2::put in between}}&nbsp; {{c3::JSX component opening&amp;closing tags}} gets {{c4::passed on to the component}} as {{c1::props.children}}	acad::react
"<div class='c1-f'> What provides the props.children here? </div><br/><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::html content within &lt;FancyBorder&gt; tags}}"	acad::react
"<div class=""c1-f""> What does the content between &lt;FancyBorder&gt; tags do? </div><br><pre><code>function WelcomeDialog() {   return (     &lt;FancyBorder color=blue&gt;       &lt;h1 className=Dialog-title&gt;         Welcome       &lt;/h1&gt;       &lt;p className=Dialog-message&gt;         Thank you for visiting our spacecraft!       &lt;/p&gt;     &lt;/FancyBorder&gt;   ); } </code></pre> <span class=""divider"">-&gt;</span> {{c1::becomes accessible as props.children}}"	acad::react
"In react, {{c1::inheritance}}-like behavior is achieved by {{c2::the more general component}} {{c3::recieving props from}} {{c2::the more specific component}}<br/><div class=""sub""> <div class=""sub all-b""><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre></div> </div>"	acad::react
The steps react recommends to building an react app: {{c1::create a mockup of your site -}}&gt; {{c2::iidentify components}} -&gt; {{c3::build a static verion in react}} -&gt; {{c4::find out all the things that need state}} -&gt; {{c5::find out who should own the state}} -&gt; {{c6::add a way for handling changes}}<br>	acad::react
"<span class=""line"">The shape that a specific character/grapheme takes in a specific typeface/writing style/writing system is known as a {{c1::letterform}}.</span> "	acad::ughhh
In contrast to {{c3::most HTML attributes in react}}, {{c2::aria attributes}} are written in {{c1::kebab-case}}	acad::react
"In react, you can use {{c2::Context}} to {{c3::store global data}}, but you should {{c1::think if there isn't a better way to do it first}}"	acad::react
"In react, to create a Context object, call {{c1::React.}}{{c2::createContext}}{{c3::(defaultValue)}}<br/><div class=""sub""> <pre><code>const ThemeContext = React.createContext('light'); </code></pre> </div>"	acad::react
In react, everything {{c2::nested within}} a {{c1::context provider}} has acces to {{c3::the Context}} with {{c3::the specified value}}	acad::react
To instantiate a context provider of context Foo within JSX, use {{c1::&lt;}}{{c2::Foo.Provider}}{{c3:: value={somevalue} }}{{c1::&gt;&nbsp;}}	acad::react
In react, a component with a {{c1::render prop}} takes a {{c2::function}} that {{c2::returns}} a {{c3::react element}} and {{c3::calls it (the function)}} instead of {{c4::implementing its own render logic}}	acad::react
"While it's ideomatic to call a {{c1::render prop}} {{c2::<code>render</code>}}, any prop that {{c3::is a function}} and {{c4::another component uses to know what to render}} is a {{c1::render prop}}"	acad::react
"<div class='c1-f'> What are we doing here? </div><br/><pre><code>class MouseTracker extends React.Component {   render() {     return (       &lt;div&gt;         <mark>&lt;Mouse render={mouse =&gt; (           &lt;Cat mouse={mouse} /&gt;         )}/&gt;</mark>       &lt;/div&gt;     );   } } </code></pre> <span class=""divider"">-></span> {{c1::creating a render prop}}"	acad::react
"You're not limited to putting {{c2::other elements}} within {{c3::the component tags}} to pass it as props.children, you can also {{c1::insert arbitray {someJS} }} in here."	acad::react
"within {{c1::&lt;SomeContext.}}{{c2::Consumer&gt;}} tags, you can {{c3::specify a function}} that takes {{c4::the value of the closest provider}} and returns {{c5::react elements/JSX to render}}<br/><div class=""sub""> <pre><code>&lt;MyContext.Consumer&gt;   {value =&gt; /* render something based on the context value */} &lt;/MyContext.Consumer&gt; </code></pre> </div>"	acad::react
the {{c1::useState}} function returns an {{c2::array of length 2}}, {{c2::[0]}} being {{c3::the current state}}, and {{c2::[1]}} being {{c3::the function to change the state}}	acad::react
"<pre><code>function Example() {   // Declare a new state variable, which we'll call count   const {{c1::[count, setCount]}} = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre>"	acad::react
"<div class='c1-f'> What are we using here to manage state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::hooks}}"	acad::react
"<div class='c1-f'> What is count doing here, related to state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::representing the current state}}"	acad::react
"<div class='c1-f'> What is setCount doing here, related to state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::changing it}}"	acad::react
Before {{c2::hooks}}, if you were writing a {{c1::function component}} and needed {{c3::e.g. state}}, we would have to have {{c4::converted it to a class component}}	acad::react
"the hook {{c1::useState}} takes an argument of {{c2::the inital value}}<br/><div class=""sub""> <div class=""sub all-b"">both useEffect and useContext take different arguments</div> </div>"	acad::react
the values of variables that we {{c2::assign the useState() return values to}} are preserved even {{c1::after the function exits}}	acad::react
{{c3::the useState function}} is a {{c2::Hook}} called the {{c1::State}} {{c2::Hook}}	acad::react
{{c1::useEffect}} takes {{c2::a callback}} to specify the side effect {{c1::useEffect}} runs {{c2::asynchronously}}, if you need a {{c2::blocking}} version, use {{c3::useLayoutEffect}} instead {{c1::useEffect}} is called when? {{c2::after every render}} (by default) {{c1::useEffect}} is a {{c2::Hook}} that allows you to do {{c3::side effects}} such as {{c3::changing the DOM}} from a {{c4::function component}}	acad::react
if you {{c1::return a callback from}} {{c2::useEffect}}, React will run it {{c3::before any new render (and before finally dismounting)}}	acad::react
to {{c1::clean up}} useEffect stuff, <b>return</b> {{c2::a callback from it}}	acad::react
"since you can {{c1::call useEffect multiple times}}, it's recommended to call it based on {{c2::separate concerns}}, not just {{c3::cram everything the component should do into the same useEffect}}"	acad::react
The {{c1::optional}} {{c2::second argument}} to useEffect is {{c3::an array of states}} - useEffect will only be called if {{c4::one of the values}} in {{c3::the array}} changed,&nbsp;	acad::react
When {{c2::specifying the array optional secondary arg}} for useEffect, you need to include {{c1::any states you will use in the array,}} or it will {{c3::use outdated values}}	acad::react
While you can {{c2::pass an empty array}} to useEffect as the second arg, causing it to {{c3::only run once on mount}} (and {{c3::the return value once on unmount}}), it is {{c1::generally discouraged}}	acad::react
You can only call {{c2::hooks}} from React {{c3::function components}} (not {{c3::plain JS functions}}, even if {{c3::called from react components}}), or from {{c1::custom Hooks}}	acad::react
You can only call {{c2::hooks}} {{c3::at the top level,}} that is not in {{c3::loops,}} {{c3::conditions}}, or {{c3::nested functions}}, because React {{c1::relies on the order in which the Hooks are called to determine which state is what}}	acad::react
"<div class='c1-f'> What's the problem here? </div><br/><pre><code>     if (name !== '') {     useEffect(function persistForm() {       localStorage.setItem('formData', name);     });   }</code></pre> <span class=""divider"">-></span> {{c1::call hooks only at toplevel}}"	acad::react
a {{c3::custom hook}} is a JS {{c4::function}} whose name {{c2::starts with use}} and which may {{c1::call other hooks}}	acad::react
in contrast to {{c2::built-in hooks}}, {{c2::custom hooks}} can {{c1::take any arguments}} and {{c1::return anything}}	acad::react
"{{c4::custom hooks}} are meant for {{c3::reusing logic}}, which you can't just {{c1::do via a normal function}}, since {{c2::normal functions can't call the built-in hooks}}"	acad::react
conventionally, {{c1::the first value returned}} from {{c3::useState}} is called {{c4::e.g. foo}}, and {{c1::the second value}} is then called {{c2::setFoo}}	acad::react
"when we're generalizing over all {{c2::foos}} and {{c2::setFoos}} we might {{c3::get from useState}}, we call them {{c1::state}} and {{c1::setState}}"	acad::react
{{c4::setState}} may take a value, or a {{c1::callback}} which {{c2::recieves the previous value}} and {{c3::returns the next value}}	acad::react
if you want to specify {{c1::an inital state}} that is {{c2::complicated}}, instead of {{c3::passing useState a value}}, you may also {{c3::pass it a callback}}	acad::react
within {{c1::the render function}}&nbsp;≈ {{c2::the main body of a function component}} (≈ outside of&nbsp;{{c2:: useEffect and similar}})&nbsp;respectively, you may not do things {{c3::that cause side effects&nbsp;}}	acad::react
{{c1::useContext}} is a {{c2::hook}} that {{c3::takes SomeContext}} and {{c3::returns the value for that SomeContext}} (the one determined by {{c4::the nearest SomeContext.Provider}})	acad::react
"SInce in react-bootstrap {{c1::.key-value often becomes key=""value""}}, to {{c2::add new key=""value"" pairs}}, {{c3::add new .key-value classes}}"	acad::react
"{{c1::until which breakpoint on the container will follow the 100% plus padding thing}} is set in react-bootstrap by {{c2::the fluid=""breakpoint"" prop}}"	acad::react
{{c1::Next.js}} is a {{c2::framework}} for {{c3::react}}	acad::nextjs
In next.js, any {{c1::react component}} {{c3::exported}} from a {{c2::.js}}({{c2::x}}) or {{c2::.ts}}({{c2::x}}) file in {{c4::the pages directory}} is {{c5::a page}}	acad::nextjs
By default, {{c1::next.js}} {{c2::pre-renders}} ({{c2::generates the HTML of in advance}}) {{c3::every page}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getStaticPaths}} claim to only run {{c2::during build time}}, but {{c3::actually also can run during runtime}} if using {{c4::Incremental Static Regeneration}}	acad::nextjs
the three functions (which are all a{{c2::sync}}) for {{c1::fetching data}} in next.js are {{c3::getStaticProps}}, {{c4::getStaticPaths}}, {{c5::getServerSideProps}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getServerSideProps}} will both pass the value {{c4::in the props key}} of {{c5::the return value}} to the {{c2::react component}} {{c3::defining the page}}	acad::nextjs
to {{c1::add custom stylesheets}} you <code>{{c2::import}}</code> them in {{c3::pages/_app.js}} ({{c4::and only there!}}) {{c6::stylesheets from npm modules}} can be {{c2::imported}} {{c5::anywhere}}	acad::nextjs
no matter what {{c1::optional chaining}} you use, if you {{c2::call}} a thing as {{c2::a method}} that is {{c2::in fact a property}} you will always get {{c3::a TypeError}}	acad::js
"JSON Schema: <pre><code>  ...   ""type"": {{c1::""object""}},   {{c2::""properties""}}: {     ""productId"": {       ""description"": ""The unique identifier for a product"",       ""type"": ""integer""     }   },</code></pre> JSON Schema toplevel:  <pre><code>{   {{c1::""$schema""}}: ""https://json-schema.org/draft/2020-12/schema"",   {{c2::""$id""}}: ""https://example.com/product.schema.json"",   {{c3::""title""}}: ""Product"",   {{c4::""description""}}: ""A product in the catalog"",   {{c5::""type""}}: ... }</code></pre>"	acad::js
"to {{c1::only allow unique items in arrays (to make it a set, I guess)}} in json schema, specify <code>{{c2::""uniqueItems"": true}}</code> to specify that a JSON Schema value {{c1::has children}}, use {{c2::the <code>properties</code> key}} the {{c3::top-level}} {{c1::type}} key provides a {{c2::type for the top-level object}} the {{c2::top-level object}} in a {{c3::JSON schema document}} has a few {{c1::metadata/general description}} keys the JSON schema keys {{c1::min/maxItems}} say {{c2::how many items an item of type array can have}} the JSON schema keys <code>{{c2::(exclusive)}}{{c1::m/Minimum}}</code> and <code>{{c2::(exclusive)}}{{c1::m/Maximum}}</code> describe {{c3::the relevant kind of minimum/maximums of the values}} the JSON schema key {{c2::type}} tells us {{c1::what datatype the value should be}} the JSON schema key {{c2::<code>required</code>}} is an {{c3::array}} saying {{c1::which children must be present}} the JSON schema key {{c2::<code>description</code>}} provides {{c1::a short description of the value}}  the {{c1::dependentRequired}} key in json schema takes an {{c2::object}} where for every given {{c2::key}} there is {{c3::an array}} of other propetries which are {{c4::then also required}} if the {{c4::key is specified}} To express a more detailed conditional relationship in JSON schema, you can use the {{c1::""if""}}, {{c2::""then""}}, and {{c3::""else""}} keywords If {{c1::credit_card is present}}, {{c1::billing_address is also required}} (JSON Schema): <pre><code>{   ""properties"": {     ""name"": { ""type"": ""string"" },     ""credit_card"": { ""type"": ""number"" },     ""billing_address"": { ""type"": ""string"" }   },    ""required"": [""name""],    {{c2::""dependentRequired""}}: {     {{c3::""credit_card""}}: {{c4::[""billing_address""]}}   } }</code></pre>"	acad::inf
"<div class='c1-f'> For next.js, what will About become? </div><br/><pre><code>function About() {   return &lt;div&gt;About&lt;/div&gt; }  export default About</code></pre> <span class=""divider"">-></span> {{c1::a page}}"	acad::nextjs
"By default, what decides the route of a next.js page? <span class=""divider"">-></span> {{c1::the filename}}"	acad::nextjs
Converting {{c2::static HTML websites}} (either from {{c2::SSR}} or {{c2::statically generated}}) into {{c3::dynamic web pages}} via {{c4::client-side JS}} is known as {{c1::hydration}}.	acad::nextjs
The functions for getting data, getServerSideProps/getStaticPaths/getStaticProps are functions that are {{c1::written}} and {{c2::exported}} by {{c3::you}} for {{c4::any page that needs them}}	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} recieve {{c2::a single argument}} <code>{{c3::context}}</code>	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} return a {{c2::props object}} that {{c3::the react component}} implementing the page will recieve	acad::nextjs
Next.js itself is built on top of {{c1::node.js}}	acad::nextjs
Nextjs supports {{c2::modern browsers}} + {{c1::IE11}} by default	acad::nextjs
create-next-app supports using {{c1::typescript}} with the {{c2::--ts}}/{{c2::--typescript}} flag	acad::nextjs
the getStatic/ServersSide... functions have {{c1::TS types}} that are {{c2::the same but capitalized (UpperCamelCase)}}	acad::nextjs
"<div class='c1-f'> What will every page now have? </div><br/><pre><code>import Layout from '../components/layout'  export default function MyApp({ Component, pageProps }) {   return (     &lt;Layout&gt;       &lt;Component {...pageProps} /&gt;     &lt;/Layout&gt;   ) } </code></pre> <span class=""divider"">-></span> {{c1::the same global layout}}"	acad::nextjs
"If you want to have some stuff that every page of your next.js website will have, what should you do? <span class=""divider"">-></span> {{c1::override the global App component}}"	acad::nextjs
If you want to have {{c5::different layouts}} for {{c5::different pages}}, you need to attach a <code>{{c1::getLayout}}</code> {{c1::method}} to the {{c2::function implementing your page}}, which takes an argument of {{c3::the page}}, and returns {{c4::the page with whatever modifications}}.	acad::nextjs
"<div class='c1-f'> What are we doing here? </div><br/><pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> <span class=""divider"">-></span> {{c1::defining a layout for this page specifically}}"	acad::nextjs
Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... {{c1::Page}}.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... Page.{{c1::getLayout}} = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {{c1::{page} surrounded by some other stuff}} </code></pre>	acad::nextjs
"What's the benefit of specifying layouts for individual pages, instead of just also returning this from the main component? <span class=""divider"">-&gt;</span> {{c1::react will be able to tell what changed and thus enable more SPA-like operation}}"	acad::nextjs
"Next.js {{c1::auto-optimizes your images}} if you specify them using the {{c2::<code>Image</code> component}}&nbsp;in {{c3::next/image}} <div class='c1-f'> What would we have to do to use this? </div><br/><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>import Image from 'next/image' </code></pre>}} <div class='c1-f'> What is the advantage of specifying images like this in next.js? </div><br/><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::uses built-in compression, lazy-loading etc}} <div class='c1-f'> Allows us to do what? </div><br/><pre><code>module.exports = {   images: {     domains: ['example.com'],   }, }</code></pre> <span class=""divider"">-></span> {{c1::use next.js image component with external images}} (next.js) For production, it is recommended that you install the npm package <code>{{c1::sharp}}</code> for {{c2::<code>Image</code> component minification}}"	acad::nextjs
By default, next.js only allows images {{c1::in the project itself}} to be used {{c2::for the Image component}}, if you want to use others, specify the {{c3::domain}} in {{c4::{images:}} {{c5::{domains:}} [...	acad::nextjs
to change how next.js {{c1::image optimization}} works, specify {{c2::{images:}} {{c3::{loader:}} 	acad::nextjs
Next.js auto {{c2::inlines}} {{c1::font}} css	acad::nextjs
{{c1::next/head}} contains a component for {{c2::appending things to the &lt;head&gt;}}.	acad::nextjs
The {{c1::first contentful paint}} is when the {{c2::first piece of DOM content}} (which elements are exactly considered is more complicated) loaded, relative to {{c3::when the page first started loading}}	acad::js
"<div class='c1-f'> How do we react to the service worker being created? </div><br/><pre><code> navigator.serviceWorker.register('/example/sw.js')</code></pre> <span class=""divider"">-></span> {{c1::via a then() (or any other way we can respond to a promise)}}"	acad::js
"To do stuff in the service worker once {{c2::it's been installed}}, add an event listener for the {{c1::<code>install</code>}} event.<br/><div class=""sub""> <div class=""sub all-b""><pre><code>self.addEventListener('install', function(event) {   // Perform install steps });</code></pre></div> </div>"	acad::js
To {{c1::add something to the microtask queue}}, use {{c2::queueMicrotask()}}.	acad::js
the <code>{{c1::install}}</code> and <code>{{c1::activate}}</code> events of service workers are/conform to the interface <code>{{c2::ExtendableEvent}}</code>	acad::js
"the {{c1::ExtendableEvent}} interface has a method {{c2::waitUntil}}(), which prevents the service worker from being treated as {{c4::successfully installed}} until {{c3::the passed promise resolves successfully}}<br/><div class=""sub"">  This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated. </div>"	acad::js
the {{c1::ExtendableEvent.waitUntil}}() method is mainly used so that the service worker is not {{c2::considered installed}} until {{c3::all the caches it needs are populated}}.	acad::js
"{{c1::CacheStorage (normally as <code>caches</code>).open(somename)}}&nbsp;returns {{c4::a Promise}} that resolves to {{c5::the Cache object}} matching {{c2::the name passed}}, or {{c3::creates it if it does not exist}} {{c1::CacheStorage (normally as <code>caches</code>).match(someRequest)}} is a convenience method that looks if {{c2::the someRequest is cached}} in {{c3::any of the caches}} the <code>{{c1::Cache}}</code> interface is meant to store <code>{{c2::Request}}</code> / <code>{{c2::Response}}</code> pairs since there can be more than one <code>Cache</code>, you {{c1::get a specific <code>Cache</code>}}&nbsp;via the <code>{{c2::CacheStorage}}</code> interface, which can be accessed via {{c3::the global <code>caches</code> property}} for the Cache API, the {{c1::retrieval}} functions are {{c2::match}} for a {{c4::single item}} and {{c2::match}}{{c3::All}} for {{c4::an array}}. Arguments are ({{c5::request}}, {{c5::options}}) for the Cache API, the {{c1::add}}/{{c1::addAll}} methods take a {{c2::request object}}, {{c3::fetch the response}}, and then {{c4::add the response to the cache}}. for the Cache API, if something {{c2::returns something}}, it does so in the form of {{c1::a promise}} What is the Cache API/interface distinct from? <span class=""divider"">-></span> {{c1::HTTP caching}} By whom is the <code>Cache</code> managed? <span class=""divider"">-></span> {{c1::primarily by you, the dev}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > the one that stores Request / Response object pairs </div> </div>"	acad::js
the primary use of the {{c1::activate}} event of service workers is to {{c2::clean up}} from {{c3::a previous service worker}} If your service worker has {{c1::previously been installed}}, and then a {{c2::new version}} of the worker is available on {{c3::refresh or page load}}, the new version is {{c4::installed in the background}}, but not {{c5::yet activated}}. After a service worker is {{c1::active}} and the user {{c2::navigates to a different page}} or {{c2::refreshes}}, the {{c3::service worker}} will begin to receive {{c4::fetch}} events	acad::js
"If you add a new service worker, what might you do with the <code>Cache</code> used? <span class=""divider"">-></span> {{c1::use a new <code>Cache</code>}}<br/><div class=""sub""> <div class=""sub c1-f"" > esp. if they are incompatible </div> </div>"	acad::js
"What should you definitely do when reacting to the activate event in service workers? <span class=""divider"">-></span> {{c1::remove old caches}}"	acad::js
"{{c1::web app manifests}} are usually called {{c2::manifest}}.{{c3::webmanifest}}/.{{c3::json}} {{c1::Progressive web app}} is not {{c2::an official term}}, but refers to creating {{c3::a flexible, adaptable app}} using {{c4::web technologies}} (though {{c5:: there have been a few technologies that have become very intertwined with it (service workers, web app manifests, etc.)}}) within a web app manifest,&nbsp; the <code>{{c1::scope}}</code> property manages {{c2::which URLs are considered to be within your app}} within a web app manifest, you must provide {{c2::at least one}} of {{c1::<code>short_name</code>}} or {{c1::<code>name</code>}}, which appear {{c3::in the installation screen}} and {{c3::most other places where space is limited}}, respectively within a web app manifest, the <code>{{c1::start_url}}</code> property is used to determine {{c2::from where the app starts}} within a web app manifest, the <code>{{c1::icons}}</code> property is an {{c2::array}} of {{c2::objects}}, each representing {{c3::an icon for launchers, etc.}} within a web app manifest, the <code>{{c1::display}}</code> property is used to determine {{c2::how the apps start (e.g. in fullscreen / back buttons, etc.)}} within a web app manifest, the <code>{{c1::background_color}}</code> property is mainly used for {{c2::the startup splash screen}} within a web app manifest, for the <code>{{c1::display}}</code> property <code>{{c2::fullscreen}}</code> shows {{c6::no UI}}, <code>{{c3::standalone}}</code> shows {{c6::only the OS UI (works as a normal app would)}}, <code>{{c4::minimal-ui}}</code> {{c7::additionally shows some nav elements (back/reload) but no address bar}}, and <code>{{c5::browser}}</code> {{c7::gives you a standard browser experience}} within a web app manifest, each object within the array of&nbsp;<code>{{c1::icons}}</code> property can have the keys {{c2::sizes}}, {{c3::src}}, {{c4::type}}, and {{c5::purpose (esp. used for adapting e.g. to monochrome or maskable icons)}} The {{c1::web app manifest}} is a {{c2::JSON}} file that tells the browser about your {{c3::Progressive Web App}} and how it {{c4::should behave}}&nbsp;when {{c5::installed on the user's desktop or mobile device.}}"	acad::js
"((h:all;::<img src=""8mkBdT3O0FZLo0PUppvv.png"">))within a web app manifest,&nbsp; the <code>{{c1::theme_color}}</code> property manages {{c2::the color of the bars/notification shade, etc.}}"	acad::js
"to define {{c1::app shortcuts}}, use the {{c2::shortcuts}} property in the web manifest ((h:all;::<img src=""F4TsJNfRJNJSt2ZpqVAy.png"">))"	acad::js
"((h:all;::<img src=""appshell.png"">))An {{c1::app shell}} is a way to build a {{c2::PWA}} and involves {{c4::aggressively caching}}&nbsp; {{c3::the common UI}} and {{c4::dynamically loading}} {{c3::the content}} using JS"	acad::js
The {{c1::Push}} API&nbsp;allows web apps to get messages {{c2::pushed from a server}}, whether or not the web app is {{c3::in the foreground / even currently loaded}}	acad::js
"<div class='c1-f'> When should the parentheses be here? </div><br/><pre><code>const layout = (props) =&gt; {   return (     &lt;Aux&gt;     ...     &lt;/Aux&gt;   ) }</code></pre> <span class=""divider"">-></span> {{c1::if the JSX returned is more than one line}}"	acad::react
Normally you can only return {{c1::one element}} as a react component, but you may want to return {{c1::multiple elements}} without {{c2::a wrapper.}} for this, you can use {{c3::&lt;React.Fragment&gt;}}...{{c3::&lt;/React.Fragment&gt;}} or the short syntax {{c4::&lt;&gt;}}...{{c4::&lt;/&gt;}}	acad::react
"<div class='c1-f'> This is shorthand for? </div><br/><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>render() {   return (     &lt;React.Fragment&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/React.Fragment&gt;   ); } </code></pre>}}"	acad::react
"<div class='c1-f'> What would happen if we didn't include the &lt;&gt;...&lt;/&gt;? </div><br/><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::it wouldn't work}}"	acad::react
"<div class='c1-f'> What's missing here? </div><br/><pre><code>render() {   return (     &lt;ChildA /&gt;     &lt;ChildB /&gt;     &lt;ChildC /&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::the children should be wrapped in a fragment}}"	acad::react
For Chakra UI to {{c3::work correctly}}, you need to set up the {{c1::ChakraProvider}} at {{c2::the root of your application}}.	acad::chakra-ui
create-react-app&nbsp; Custom Templates are always named in the format {{c1::cra-template-[template-name]}}, however you only need to provide the {{c2::template-name}} to the {{c3::creation command}}.	acad::react
set create-react-app {{c2::templates}} by using {{c1::--template foo}}	acad::chakra-ui
"Customizing the {{c2::chakra}} {{c1::theme}} <pre><code>{{c3::import}} {{c4::{ extendTheme } }} {{c3::from}} {{c5::""@chakra-ui/react""}}  //... const/let theme {{c6::= extendTheme}}(/* things to change (is an {{c7::object}}) */) //... {{c8::&lt;ChakraProvider}} {{c9::theme={theme}&gt;}}</code></pre>"	acad::chakra-ui
"the {{c1::resetCSS}} prop of {{c2::ChakraProvider}} automatically includes a {{c3::&lt;CSSReset /&gt;}} the {{c1::portalZIndex}} prop of {{c2::ChakraProvider}} is a {{c3::common z-index to use for <code>Portal</code>}} the {{c1::colorModeManager}} prop of {{c2::ChakraProvider}} is a {{c3::container to persist a users' color mode preference in}}"	acad::chakra-ui
"The {{c1::<code>as</code>}} prop is a feature of chakra components that allows you to pass {{c2::an HTML tag}} or {{c3::component}}, which allows you to {{c4::use all of that things props}}<br><div class=""sub""> <div class=""sub all-b""><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre></div> </div>"	acad::chakra-ui
"<div class='c1-f'> What does the 'as' here allow you to do? </div><br/><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::act as an &lt;a&gt; as well}}"	acad::chakra-ui
"<div class='c1-f'> Why does e.g. href here work? </div><br/><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::the as=""a"" allows it to work as an &lt;a&gt; as well}}"	acad::chakra-ui
chakra does most of {{c2::its config}} in the the {{c1::<code>config</code> property of <code>theme</code>}}	acad::chakra-ui
 Chakra stores the color mode in the browser in {{c1::localStorage}}	acad::chakra-ui
{{c1::Color mode}} is chakras way for managing {{c2::light and dark mode}}. It accepts the values {{c3::light}}, {{c3::dark}}, and {{c3::system}}	acad::chakra-ui
the {{c5::<code>config</code> property of <code>theme</code>}} takes {{c1::<code>initialColorMode</code>}} to tell the app {{c2::in which color mode to start}}, and {{c3::<code>useSystemColorMode</code>}} {{c4::whether to respond to the color theme system preference}}	acad::chakra-ui
{{c1::&lt;ColorModeScript&gt;}} is necessary {{c2::for color mode in chakra to work}}, and needs to be {{c3::one of the first things in the &lt;body&gt;}}	acad::chakra-ui
{{c1::useColorMode}} is a React {{c2::hook}} that gives you access to {{c3::colorMode}}, {{c3::toggleColorMode}}	acad::chakra-ui
{{c1::useColorModeValue}} is a React hook used to {{c2::change any value or style based on the color mode}}. It {{c4::takes 2 arguments}}: {{c3::the value in light mode}}, and {{c3::the value in dark mode}}.	acad::chakra-ui
In some occasions, you might want Chakra components to {{c1::look the same in both light and dark modes}}. To achieve this, {{c3::wrap the component}} in a {{c2::LightMode}} or {{c2::DarkMode}} component. 	acad::chakra-ui
if using {{c2::SSR/Static generation}} with {{c4::Nextjs}} and {{c4::Chakra}} {{c3::color mode}} together, {{c1::some additional boilerplate}} is required	acad::chakra-ui
{{c3::Chakra UI}}&nbsp; converts {{c2::theme tokens (colors, font sizes, stc)}} to {{c1::CSS variables}}.	acad::chakra-ui
"Chakra's {{c1::css variables}} are prefixed with {{c2::chakra-}}"	acad::chakra-ui
"<div class='c2-f'> This might generate CSS such as? </div><div class='c1-f'> How might this have been generated with Chakra? </div><br/>{{c1::<pre><code>&lt;Box color=""gray.100"" /&gt;</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code>.css-box {    color: ""var(--chakra-colors-gray-100)"" }</code></pre>}}"	acad::chakra-ui
(based off the System UI Theme Specification) to have a style prop change based on {{c1::breakpoints}}, you can either pass an {{c2::array}}, with each value being {{c3::the one for that breakpoint}} (starting from {{c4::the unnamed smallest one}}) and {{c5::pass null}} to {{c6::skip breakpoints}} and thus avoid {{c6::generating unnecessary css}}, or pass an {{c2::object}} with keys with {{c7::the breakpoint names}} and the values as the relevant values	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (object syntax)? </div><br/>{{c1::<pre><code>&lt;Text fontSize={{ base: ""24px"", md: ""40px"", lg: ""56px"" }}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the font size at 24 px , have the md breakpoint be 40 px, and the lg and above be 56px}}"	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (array syntax)? </div><br/>{{c1::<pre><code>&lt;Box bg=""red.200"" w={[300, 400, 500]}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the width at 300 px , have the sm breakpoint be 400 px, and the md and above be 500px}}"	acad::chakra-ui
if you want {{c1::base html elements}} (e.g. {{c1::button}}) to {{c2::accept style props styling}}, use {{c3::&lt;chakra.&lt;element&gt;}} (e.g. {{c3::&lt;chakra.button}})	acad::chakra-ui
the chakra {{c1::factory}} function <code>chakra()</code> takes {{c2::a react component}} (or {{c2::html tag}}) and optionally an argument of {{c3::props}}, and makes it into a {{c4::chakra style-props aware component}}. Since it uses <code>{{c5::emotion}}</code> under the hood, {{c2::the react component}} needs to {{c6::accept className as props}} or it will not work	acad::chakra-ui
"By using {{c1::ChakraProvider}} at the root of your application, we automatically render a {{c2::GlobalStyle}} component, which reads the styles defined in {{c3::theme.styles.global}} and {{c4::passes them}} to {{c5::emotion's Global component}} which is used to handle global style injection."	acad::chakra-ui
to set {{c3::global styles}} for things in chakra, use {{c4::theme.styles.global}}. There, every key is {{c1::a selector}}, and every property is a {{c2::set of declarations}}	acad::chakra-ui
The {{c1::layerStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
The {{c1::textStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles for text}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
{{c1::Themera}} is a web app to {{c2::generate chakra UI color schemes}} (there are also many others tho)	acad::chakra-ui
"{{c1::Chakra}}'s {{c3::default}} {{c2::theme}} (and {{c3::any other}} {{c2::theme}}) includes defaults for all the {{c4::System UI Theme Specification scales}}"	acad::chakra-ui
to customize styles (in a&nbsp;<b>consistent</b>&nbsp;way) in chakra, you broadly have three options: Customize the {{c1::theme tokens}}, {{c2::component styles}}, or {{c3::global styles}}	acad::chakra-ui
"the {{c1::colorScheme}} property of a {{c2::component}} takes a {{c3::color name}} (of the ones that define {{c4::palettes}}, in {{c5::<code>theme.colors</code>}}), it then uses {{c6::different weights}} for {{c7::different parts of itself}}<br/><div class=""sub""> <div class=""sub all-b"">If you give a Button component, for example, a colorScheme of ""red"", it uses the different palette ranges for its color and hover, disabled, active pseudo-classes.</div> </div>"	acad::chakra-ui
"chakra has {{c1::single}}-{{c2::part}} {{c3::components}} and {{c1::multi}}-{{c2::part}} {{c3::components}} (e.g. bootstrap has too, but doesn't call them that)"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div><br/>{{c1::<pre><code>&lt;Button&gt;My button&lt;/Button&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a single-part component}}"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div><br/>{{c1::<pre><code>&lt;Tabs&gt;   &lt;TabList&gt;     &lt;Tab&gt;Tab 1&lt;/Tab&gt;     &lt;Tab&gt;Tab 2&lt;/Tab&gt;   &lt;/TabList&gt;   &lt;TabPanels&gt;     &lt;TabPanel&gt;Tab 1&lt;/TabPanel&gt;     &lt;TabPanel&gt;Tab 2&lt;/TabPanel&gt;   &lt;/TabPanels&gt; &lt;/Tabs&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a multi-part component}}"	acad::chakra-ui
chakra {{c5::components}} have a <code>{{c1::baseStyle}}</code> which can be varied based on different things, of which you define the <code>{{c3::sizes}}</code> and <code>{{c4::variants}}</code> {{c2::within the component itself}}	acad::chakra-ui
"to set a default <code>{{c1::size}}</code> or <code>{{c1::variant}}</code> of a component, use the <code>{{c2::defaultProps}}</code> key of theme.components.ComponentName<br/><div class=""sub""> <pre><code>const ComponentStyle = {   // style object for base or default style   baseStyle: {},   // styles for different sizes (""sm"", ""md"", ""lg"")   sizes: {},   // styles for different visual variants (""outline"", ""solid"")   variants: {},   // default values for `size` and `variant`   defaultProps: {     size: """",     variant: """",   }, }</code></pre> </div>"	acad::chakra-ui
"you customize components {{c1::globally}} by editing {{c2::the relevant component}} within <code>{{c3::theme.component}}</code><br/><div class=""sub""> <div class=""sub all-b""><pre><code>const theme = extendTheme({   components: {     Button: {       // 1. We can update the base styles       baseStyle: {         fontWeight: ""bold"", // Normally, it is ""semibold""       },       // 2. We can add a new button size or extend existing       sizes: {       //...</code></pre> </div> </div>"	acad::chakra-ui
"chakra highly suggest that instead of using a {{c1::single theme.js/ts file}}, you create {{c2::a /theme folder}} in its place.&nbsp;<br/><div class=""sub""> <pre><code>📁 theme   📄 index.js  # my main theme entrypoint   📄 styles.js  # all my global style overrides   📁 foundations     📄 borders.js  # all my border overrides   📁 components     📄 button.js  # all my button overrides</code></pre> <pre><code>/ theme/index.js import { extendTheme } from ""@chakra-ui/react"" // Global style overrides import styles from ""./styles"" // Foundational style overrides import borders from ""./foundations/borders"" // Component style overrides import Button from ""./components/button"" const overrides = {   styles,   borders,   // Other foundational style overrides go here   components: {     Button,     // Other components go here   }, } export default extendTheme(overrides)</code></pre> </div>"	acad::chakra-ui
"the {{c1::extendTheme}} function can take {{c2::multiple overrides}}, each {{c3::overriding the previous one}}. The {{c4::final}} arg may be {{c5::a base theme}}, otherwise {{c6::the default Chakra UI one is assumed}}<br><div class=""sub""> <div class=""sub all-b""><pre><code>const someTheme = extendTheme({    colors: {      brand: null   } } /* whoops, since we wrote that in permanent marker, let's just override that */, {   colors: {     brand: baseTheme.colors.red   } }/*, optionally some base theme */)</code></pre></div> </div>"	acad::chakra-ui
the <code>{{c1::withDefault}}{{c2::ColorScheme}}/{{c2::Size}}/{{c2::Variant}}/{{c2::Props}}</code> are passed to <code>extendTheme</code>, take an {{c4::object}} as an arg and apply a {{c3::default}} {{c3::colorScheme}}/{{c3::size}}/{{c3::variant}}/{{c3::some props}} to {{c5::all components}} or {{c6::those provided in the <code>components</code> array}}&nbsp;of the {{c4::object}}	acad::chakra-ui
the same mechanism that allows you to {{c1::customize built-in chakra components}} (i.e. setting things such as {{c2::baseStyle}}, {{c2::variant}}, {{c2::defaultProps}} etc. in {{c3::theme.component.somename}}) allows you to {{c4::create new chakra components}}, but you also need to {{c5::implement the react component}}	acad::chakra-ui
the <code>{{c1::__css}}</code> prop has {{c2::the same API}} as the <code>{{c3::sx}}</code> prop, but {{c4::lower priority}} -&gt; good to be {{c4::overridden&nbsp;}}	acad::chakra-ui
"Implementing a {{c12::custom chakra component}}: <pre><code>// all necessary imports function ComponentName(props) {   const { {{c1::size}}, {{c1::variant}}, {{c1::colorScheme}} /* all only if used */, {{c2::children}}, {{c3::...rest}} } = {{c4::props}};   const styles = {{c5::useStyleConfig}}(""ComponentName"" /* must be the same name as in {{c6::theme.components}} */, { {{c7::size}}, {{c7::variant}}, {{c7::colorScheme}} /* all only if used */}   return (     &lt;Box /* or something else */ {{c8::__css}}={{c9::{styles} }}  {{c10::{...rest}}}&gt;       // If {{c11::children}}, include them here somewhere //...</code></pre> "	acad::chakra-ui
for {{c1::multipart}} components, you need to specify the <code>{{c2::part}}</code> property when creating the <code>{{c3::theme.components}}</code> entry as well	acad::chakra-ui
for {{c1::multipart}} components, if we want to {{c2::pass on styles to <code>children</code>}}, we need to put them in a {{c3::&lt;StylesProvider value=}}, which we then retrieve via {{c4::the useStyles hook}} in {{c5::the children}}	acad::chakra-ui
the command-line interface for chakra is {{c1::chakra-cli}}, for now the {{c2::only thing}} it can do is {{c3::generate typescript typings for a theme}} via the {{c4::tokens}} subcommand	acad::chakra-ui
{{c1::baseStyle}}, {{c1::sizes}} and {{c1::variants}} of your {{c2::theme.components}} entry can also take a {{c3::function}} so you can {{c3::generate}} them based on the current {{c4::theme}}, {{c4::colorMode}} or {{c4::colorScheme}}	acad::chakra-ui
the {{c2::&lt;AspectRatio&gt;}} chakra component takes a {{c1::ratio}} prop to set the {{c3::aspect ratio}}	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-08-42-screenshot.png"">))((h:all;::<img src=""sm_2021-09-18--23-08-35-screenshot.png"">))the {{c2::&lt;Center&gt;}} chakra component {{c3::centers its child}}, given {{c4::a width}} and/or {{c4::height}}. it can also e.g. be used to {{c1::create a frame around something}}"	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-15-08-screenshot.png"">))&lt;{{c1::Circle}}&gt; and &lt;{{c1::Square}}&gt; are wrappers around &lt;{{c2::Center}}&gt; that only take {{c3::size}}"	acad::chakra-ui
{{c1::&lt;Container&gt;}}s by default {{c2::constrain the size of the content}} to {{c3::60ch}}, but can take the {{c4::maxW}} prop with the value {{c5::container.&lt;breakpoint&gt;}} to {{c2::constraine the content}} to that breakpoint instead. It can also center its content via the {{c6::centerContent}} property.	acad::chakra-ui
"a further {{c1::microinvalidation::one of the three types}} that {{c2::I'm suggesting}} is ""{{c3::denial of lived experience}}"" ({{c3::of x-ism}}) {{c1::Microaggressions}} are {{c2::brief}}, {{c2::everyday}} moments that {{c3::send denigrating messages}} to {{c4::stigmatized/marginalized group (the -value group of an ism)}}. While not explicitly one of the {{c1::8 themes}} of {{c2::microagressions}}, a further {{c3::microinvalidation}} that has been suggested is ""{{c4::denial of y-ism}}"", where {{c5::people deny the reality of the discrimination}} {{c1::DH Sue}} ({{c2::2007}}) laid out {{c3::8}} different {{c4::themes}} of {{c5::microagressions}}, which have {{c6::somewhat widely}} been used {{c1::DH Sue}} was mainly concerned with {{c2::race}}, but his {{c3::characterizations of microagressions}} have been also {{c4::been adopted in other discriminated-against(-value) communities}} {{c1::DW Sue}} ({{c2::2007}}), perhaps {{c3::the seminal work}} on {{c4::microagressions}}, describes {{c5::three typees}} of {{c4::microagressions}}: {{c6::Microinsult}}, which {{c9::demeans a person  (based on their marginalized indentity)}}, {{c7::Microassault}}, which {{c10::are designed to hurt the victim}}, and {{c8::Microinvalidations}}, which {{c11::nullify/negate the lived reality of a person}} One of the {{c1::8 microagressions}}, a type of {{c2::microinsult}} is ""{{c3::assumption of criminal status}}"", the presumption {{c4::that a person of the identity is criminal/dangerous/deviant}}. This is salient for {{c5::racism}}, but also strongly for {{c5::sanism/mentalism}}, and to a certain extent to {{c5::homophobia}} (and probably many others) One of the {{c1::8 themes}} of {{c2::microagressions}}, categorized as a {{c3::microinvalidation}}, are claims to be {{c4::color-blind}} ≈ ""{{c5::denial of individual racism}}"", claiming in essence {{c6::that there might be racism, but I'm not doing it}}. Analogously, we might define {{c4::x-blind}} ({{c4::gender-blind, etc.}}) ≈ ""{{c5::denial of individual y-ism}}"" claiming {{c6::that there might be y-ism, but I'm not doing it}}."	acad::ughhh
In general, {{c3::most terms from discussions of discrimination}} are {{c2::coined off of / inspired by terms pioneered}} in {{c1::a given discriminated-against group}}	acad::ughhh
"UNRESOLVED: First-order logic—also known as {{c1::predicate logic}}, quantificational logic, and first-order predicate calculus  the logical form of an argument is called argument form.  Proplog<br/><p class=""cloze-group hide-if-inactive""><span class=""c1-cloze"">Propositional logic</span> may also be called <span class=""c2-cloze c3-scr"">propositional calculus</span> or, based <span class=""c3-cloze c4-scr"">on its relationship to 1st order logic</span>, <span class=""c4-cloze c3-scr"">zeroth-order logic</span> (other rare terms include <span class=""c5-cloze c4-scr c3-scr"">statement logic, sentential calculus/logic.</span> </p>  <p class=""cloze-group-children hide-if-inactive-children"">   <span class=""line""><span class=""c6-cloze"">propositions</span> are the things that <span class=""c7-cloze"">bear truth value</span>.</span>   <span class=""line""><span class=""c8-cloze"">A propositional variable</span> (e.g. <span class=""c8-cloze"">p, q, r</span>) <span class=""c13-cloze"">represents</span> <span class=""c9-cloze"">any possible atomic proposition</span>.</span>   <span class=""line""><span class=""c10-cloze"">a propositional formula</span> (e.g. <span class=""c10-cloze"">p AND q</span>) (also called <span class=""c14-cloze c10-scr c11-scr c12-scr"">sentence (tho only in proplog)</span>) is a <span class=""c11-cloze"">well-formed formula</span> that <span class=""c12-cloze"">consists of elements of the alphabet of a propositional logic</span> (that is <span class=""c12-cloze"">propositional variables, constants, and logical connectives</span>).</span>   <span class=""line""><span class=""c15-cloze"">a proposition</span> <span class=""c16-cloze"">expressed by</span> <span class=""c17-cloze"">a propositional constant</span> is <span class=""c18-cloze"">an atomic proposition</span>.</span>   <span class=""line""><span class=""c19-cloze"">a propositional constant</span> <span class=""c20-cloze"">expresses</span> <span class=""c21-cloze"">an atomic proposition</span>.</span></p>    <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">The <span class=""c22-cloze"">elements of the alphabet</span> of <span class=""c23-cloze"">a propositional logic</span> are the <span class=""c24-cloze"">propositional constants</span>, <span class=""c25-cloze"">propositional variables</span>, and <span class=""c26-cloze"">logical connectives</span>. </span>     <span class=""line""><span class=""c27-cloze"">propositional constants, variables and formulas all</span> <span class=""c28-cloze"">express/denote propositions</span>.</span>     <span class=""line""><span class=""c29-cloze"">Propositional constants, variables and formulas</span> as well as <span class=""c29-cloze"">logical connectives</span> are all <span class=""c30-cloze"">truth-functional.</span></span></p>      <p class=""cloze-group-children hide-if-inactive-children""><span class=""line""><span class=""c31-cloze"">Atomic propositions</span> might be things such as <span class=""c32-cloze"">""Grass is green""</span></span>&nbsp;<span class=""line""><span class=""c33-cloze"">propositional constants</span> might be things such as&nbsp;</span><span class=""line""><span class=""c34-cloze""><span class=""line"">p, q</span></span> <span class=""c35-cloze"">A propositional formula</span> might look something like <span class=""c36-cloze"">(p AND NOT q) IMPLIES (p OR q).</span></span></p>        <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">If <span class=""c37-cloze"">""Sam is awesome."" and ""Sam is cute.""</span> are <span class=""c38-cloze"">atomic propositions</span> <span class=""c39-cloze"">expressed by e.g. p and q</span>, then <span class=""c40-cloze"">p ∧ q</span> would be a <span class=""c41-cloze"">propositional formula</span> expressing the <span class=""c42-cloze"">non-atomic proposition</span> <span class=""c43-cloze"">""Sam is awesome and cute.""</span>         </span><span class=""line""><span class=""c44-cloze"">""Sam is awesome and cute.""</span> could be a proposition expressed by <span class=""c45-cloze"">a propositional variable or a propositional constant, w/o knowing the logic it's impossible to know.</span></span>         <span class=""line"">If ""Sam is awesome."" and ""Sam is cute."" are <span class=""c46-cloze"">all possible atomic propositions</span> , <span class=""c47-cloze"">a propositional varialble</span> would <span class=""c48-cloze"">range over all of them.</span></span></p>  <table class=""cloze-group-children hide-if-inactive-children"">   <thead>     <tr>       <th>Name</th>       <th>Convention</th>       <th>Location</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c49-cloze"">propositional constants</span></td>       <td><span class=""c50-cloze"">written in lowercase letters starting at p</span></td>     </tr>         <tr>       <td><span class=""c51-cloze"">propositional variables</span></td>       <td><span class=""c52-cloze""> written in uppercase letters starting at A</span></td>           <td><span class=""c53-cloze""> DE</span></td>     </tr>     <tr>       <td><span class=""c54-cloze"">propositional variables</span></td>       <td><span class=""c55-cloze""> written in lowercase letters starting at ϕ</span></td>       <td><span class=""c56-cloze""> EN</span></td>     </tr>   </tbody> </table>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}</span><br/><div class=""sub""> All only for the most classical of logics </div>  For something to be {{c1::truth-functional}} if {{c2::the truth of the resulting formula}} is {{c3::dependent only}} on {{c4::the truth of the constituent parts.}}  <p class=""cloze-group hide-if-inactive"">A <span class=""c1-cloze"">logic</span> is a <span class=""c2-cloze"">formal system.</span> </p><div class=""cloze-group hide-if-inactive""><span class=""c3-cloze"">Formal systems</span> have roughly the following structure: <pre><code><span class=""c4-cloze"">A formal language</span> <span class=""c5-cloze"">An inference system</span>   <span class=""c6-cloze"">A set of axioms</span>   <span class=""c7-cloze"">A set of inference rules</span> <span class=""c8-cloze"">A semantics</span></code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>  <div class=""cloze-group-children hide-if-inactive-children""><p>A <span class=""c1-cloze"">rule of inference/inference rule</span> is a <span class=""c2-cloze"">Schlussregel</span> in german.</p> <p>A <span class=""c3-cloze"">rule of inference/inference rule</span>&nbsp;is something that <span class=""c4-cloze c5-scr"">takes premises</span> and <span class=""c5-cloze c4-scr"">returns a conclusion</span>. More generally, it is a function from sets of formulae to other formulae. It is sometimes restricted to valid inference rules, and sometimes not.</p></div> The conclusion in a rule of inference/inference rule or argument is often indicated by {{c1::∴}}. <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}</span>"	acad::ughhh
"# !Who Lives, Who Dies, Who Tells Your Story (extract of beginning)  ＞ !⟮c1;sb;Let me tell you what I wish I’d known ⟯ ＞ !⟮c+;sb;When I was young and dreamed of glory ⟯ ＞ !⟮c+;sb;You have no control:⟯ ＞ !⟮c+;sb;Who lives ⟯ ＞ !⟮c+;sb;Who dies ⟯ ＞ !⟮c+;sb;Who tells your story?⟯  # !Non-Stop (extract)  ＞ !⟮c7;sb;Alexander joins forces with James Madison and John Jay to write a series⟯ ＞ !⟮c+;sb;us-;of essays defending the new United States Constitution,⟯ ＞ !⟮c+;sb;entitled The Federalist Papers.⟯ ＞ !⟮c+;sb;The plan was to write a total of twenty-five essays,⟯ ＞ !⟮c+;sb;the work divided evenly among the three men. In the end,⟯ ＞ !⟮c+;sb;they wrote eighty-five essays,⟯ ＞ !⟮c+;sb;in the span of six months. John Jay got sick after writing five.⟯ ＞ !⟮c+;sb;James Madison wrote twenty-nine. Hamilton wrote the other fifty-one!⟯  # !Alexander Hamilton  !AARON BURR ＞ !⟮c15;sb;How does a bastard, orphan, son of a whore and a⟯ ＞ !⟮c+;sb;Scotsman, dropped in the middle of a forgotten⟯ ＞ !⟮c+;sb;Spot in the Caribbean by Providence, impoverished, in squalor⟯ ＞ !⟮c+;sb;Grow up to be a hero and a scholar?⟯  !JOHN LAURENS ＞ !⟮c+;sb;The ten-dollar Founding Father without a father⟯ ＞ !⟮c+;sb;Got a lot farther by workin’ a lot harder⟯ ＞ !⟮c+;sb;By bein’ a lot smarter⟯ ＞ !⟮c+;sb;By bein’ a self-starter⟯ ＞ !⟮c+;sb;By fourteen, they placed him in charge of a trading charter⟯  !THOMAS JEFFERSON ＞ !⟮c+;sb;And every day while slaves were being slaughtered and carted⟯ ＞ !⟮c+;sb;Away across the waves, he struggled and kept his guard up⟯ ＞ !⟮c+;sb;Inside, he was longing for something to be a part of⟯ ＞ !⟮c+;sb;The brother was ready to beg, steal, borrow, or barter⟯  !JAMES MADISON ＞ !⟮c+;sb;Then a hurricane came, and devastation reigned⟯ ＞ !⟮c+;sb;Our man saw his future drip, drippin’ down the drain⟯ ＞ !⟮c+;sb;Put a pencil to his temple, connected it to his brain⟯ ＞ !⟮c+;sb;And he wrote his first refrain, a testament to his pain⟯  !BURR ＞ !⟮c+;sb;Well the word got around, they said, “This kid is insane, man!”⟯ ＞ !⟮c+;sb;Took up a collection just to send him to the mainland⟯ ＞ !⟮c+;sb;“Get your education, don’t forget from whence you came, and⟯ ＞ !⟮c+;sb;The world’s gonna know your name! What’s your name, man?""⟯  !ALEXANDER HAMILTON ＞ !⟮c+;sb;Alexander Hamilton⟯ ＞ !⟮c+;sb;My name is Alexander Hamilton⟯ ＞ !⟮c+;sb;And there’s a million things I haven’t done⟯ ＞ !⟮c+;sb;But just you wait, just you wait⟯  !ELIZA HAMILTON ＞ !⟮c+;sb;When he was ten, his father split, full of it, debt-ridden⟯ ＞ !⟮c+;sb;Two years later, see Alex and his mother, bed-ridden⟯ ＞ !⟮c+;sb;Half-dead, sittin’ in their own sick⟯ ＞ !⟮c+;sb;The scent thick⟯  !COMPANY ＞ !⟮c+;sb;And Alex got better but his mother went quick⟯  !GEORGE WASHINGTON and (COMPANY) ＞ !⟮c+;sb;Moved in with a cousin, the cousin committed suicide⟯ ＞ !⟮c+;sb;Left him with nothin’ but ruined pride, somethin’ new inside⟯ ＞ !⟮c+;sb;A voice saying ""(Alex) you gotta fend for yourself""⟯ ＞ !⟮c+;sb;He started retreatin’ and readin’ every treatise on the shelf⟯  !BURR and (COMPANY) ＞ !⟮c+;sb;There would’ve been nothin’ left to do⟯ ＞ !⟮c+;sb;For someone less astute⟯ ＞ !⟮c+;sb;He would’ve been dead or destitute⟯ ＞ !⟮c+;sb;Without a cent of restitution⟯ ＞ !⟮c+;sb;Started workin’, clerkin’ for his late mother’s landlord⟯ ＞ !⟮c+;sb;Tradin’ sugar cane and rum and other things he can’t afford⟯ ＞ !⟮c+;sb;(Scammin’) for every book he can get his hands on⟯ ＞ !⟮c+;sb;(Plannin’) for the future, see him now as he stands on (oooh⟯) ＞ !⟮c+;sb;The bow of a ship headed for a new land⟯ ＞ !⟮c+;sb;In New York you can be a new man⟯  !COMPANY and (HAMILTON) ＞ !⟮c+;sb;In New York you can be a new man (Just you wait⟯) ＞ !⟮c+;sb;In New York you can be a new man (Just you wait⟯) ＞ !⟮c+;sb;In New York you can be a new man⟯  !WOMEN ＞ !⟮c+;sb;In New York⟯  !MEN ＞ !⟮c+;sb;New York⟯  !HAMILTON ＞ !⟮c+;sb;Just you wait⟯  !COMPANY and (COMPANY) ＞ !⟮c+;sb;Alexander Hamilton (Alexander Hamilton⟯) ＞ !⟮c+;sb;We are waiting in the wings for you (waiting in the wings for you⟯) ＞ !⟮c+;sb;You could never back down⟯ ＞ !⟮c+;sb;You never learned to take your time⟯ ＞ !⟮c+;sb;Oh, Alexander Hamilton (Alexander Hamilton⟯) ＞ !⟮c+;sb;When America sings for you⟯ ＞ !⟮c+;sb;Will they know what you overcame?⟯ ＞ !⟮c+;sb;Will they know you rewrote the game?⟯ ＞ !⟮c+;sb;The world will never be the same, oh⟯  !BURR and (COMPANY) ＞ !⟮c+;sb;The ship is in the harbor now, see if you can spot him(Just you wait⟯) ＞ !⟮c+;sb;Another immigrant comin’ up from the bottom(Just you wait⟯) ＞ !⟮c+;sb;His enemies destroyed his rep, America forgot him⟯  !MULLIGAN/MADISON AND LAFAYETTE/JEFFERSON ＞ !⟮c+;sb;We fought with him⟯  !LAURENS/PHILLIP ＞ !⟮c+;sb;Me? I died for him⟯  !WASHINGTON ＞ !⟮c+;sb;Me? I trusted him⟯  !ANGELICA SCHUYLER, ELIZA, MARIA REYNOLDS ＞ !⟮c+;sb;Me? I loved him⟯  !BURR ＞ !⟮c+;sb;And me? I’m the damn fool that shot him⟯  !COMPANY ＞ !⟮c+;sb;There’s a million things I haven’t done⟯ ＞ !⟮c+;sb;But just you wait⟯  !BURR ＞ !⟮c+;sb;What’s your name, man?⟯  !HAMILTON &amp; COMPANY ＞ !⟮c+;sb;Alexander Hamilton!⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}</span>"	misc::text-by-heart::hamilton
"# !To be or not to be  ＞ !⟮c1;sb;To be, or not to be, that is the question:⟯ ＞ !⟮c+;sb;Whether 'tis nobler in the mind to suffer⟯ ＞ !⟮c+;sb;The slings and arrows of outrageous fortune,⟯ ＞ !⟮c+;sb;Or to take Arms against a Sea of troubles,⟯ ＞ !⟮c+;sb;And by opposing end them: to die, to sleep⟯ ＞ !⟮c+;sb;No more; and by a sleep, to say we end⟯ ＞ !⟮c+;sb;The heart-ache, and the thousand natural shocks⟯ ＞ !⟮c+;sb;That Flesh is heir to? 'Tis a consummation⟯ ＞ !⟮c+;sb;Devoutly to be wished. To die, to sleep,⟯ ＞ !⟮c+;sb;To sleep, perchance to Dream; aye, there's the rub,⟯ ＞ !⟮c+;sb;For in that sleep of death, what dreams may come,⟯ ＞ !⟮c+;sb;When we have shuffled off this mortal coil,⟯ ＞ !⟮c+;sb;Must give us pause. There's the respect⟯ ＞ !⟮c+;sb;That makes Calamity of so long life:⟯ ＞ !⟮c+;sb;For who would bear the Whips and Scorns of time,⟯ ＞ !⟮c+;sb;The Oppressor's wrong, the proud man's Contumely,⟯ ＞ !⟮c+;sb;The pangs of dispised Love, the Law’s delay,⟯ ＞ !⟮c+;sb;The insolence of Office, and the spurns⟯ ＞ !⟮c+;sb;That patient merit of th'unworthy takes,⟯ ＞ !⟮c+;sb;When he himself might his Quietus make⟯ ＞ !⟮c+;sb;With a bare Bodkin? Who would Fardels bear, [F: these Fardels]⟯ ＞ !⟮c+;sb;To grunt and sweat under a weary life,⟯ ＞ !⟮c+;sb;But that the dread of something after death,⟯ ＞ !⟮c+;sb;The undiscovered country, from whose bourn⟯ ＞ !⟮c+;sb;No traveller returns, puzzles the will,⟯ ＞ !⟮c+;sb;And makes us rather bear those ills we have,⟯ ＞ !⟮c+;sb;Than fly to others that we know not of?⟯ ＞ !⟮c+;sb;Thus conscience does make cowards of us all,⟯ ＞ !⟮c+;sb;And thus the native hue of Resolution⟯ ＞ !⟮c+;sb;Is sicklied o'er, with the pale cast of Thought,⟯ ＞ !⟮c+;sb;And enterprises of great pitch and moment, [F: pith]⟯ ＞ !⟮c+;sb;With this regard their Currents turn awry, [F: away]⟯ ＞ !⟮c+;sb;And lose the name of Action.⟯  # !Thou knowst the mask of night...  ＞ !⟮c34;sb;Thou know’st the mask of night is on my face,⟯ ＞ !⟮c+;sb;Else would a maiden blush bepaint my cheek⟯ ＞ !⟮c+;sb;For that which thou hast heard me speak tonight.⟯ ＞ !⟮c+;sb;Fain would I dwell on form. Fain, fain deny⟯ ＞ !⟮c+;sb;What I have spoke. But farewell compliment!⟯ ＞ !⟮c+;sb;Dost thou love me? I know thou wilt say “ay,”⟯ ＞ !⟮c+;sb;And I will take thy word. Yet if thou swear’st⟯ ＞ !⟮c+;sb;Thou mayst prove false. At lovers' perjuries,⟯ ＞ !⟮c+;sb;They say, Jove laughs. O gentle Romeo,⟯ ＞ !⟮c+;sb;If thou dost love, pronounce it faithfully.⟯ ＞ !⟮c+;sb;Or if thou think’st I am too quickly won,⟯ ＞ !⟮c+;sb;I’ll frown and be perverse and say thee nay,⟯ ＞ !⟮c+;sb;So thou wilt woo. But else, not for the world.⟯ ＞ !⟮c+;sb;In truth, fair Montague, I am too fond,⟯ ＞ !⟮c+;sb;And therefore thou mayst think my 'havior light.⟯ ＞ !⟮c+;sb;But trust me, gentleman, I’ll prove more true⟯ ＞ !⟮c+;sb;Than those that have more coying to be strange.⟯ ＞ !⟮c+;sb;I should have been more strange, I must confess,⟯ ＞ !⟮c+;sb;But that thou overheard’st, ere I was 'ware,⟯ ＞ !⟮c+;sb;My true love’s passion. Therefore pardon me,⟯ ＞ !⟮c+;sb;105And not impute this yielding to light love,⟯ ＞ !⟮c+;sb;Which the dark night hath so discovered.⟯  # !The Merchant of Venice: Act III, Scene 1, Shylock Monologue  ＞ !⟮c56;sb;To bait fish withal: if it will feed nothing else,⟯ ＞ !⟮c+;sb;it will feed my revenge. He hath disgraced me, ⟯ ＞ !⟮c+;sb;and hindered me half a million; laughed at my losses,⟯ ＞ !⟮c+;sb;mocked at my gains, scorned my nation, ⟯ ＞ !⟮c+;sb;thwarted my bargains, cooled my friends, ⟯ ＞ !⟮c+;sb;heated mine enemies; and what's his reason? ⟯ ＞ !⟮c+;sb;I am a Jew. Hath not a Jew eyes? ⟯ ＞ !⟮c+;sb;hath not a Jew hands, organs, dimensions, senses, affections, passions? ⟯ ＞ !⟮c+;sb;fed with the same food, hurt with the same weapons, ⟯ ＞ !⟮c+;sb;subject to the same diseases, healed by the same means,⟯ ＞ !⟮c+;sb;warmed and cooled by the same winter and summer, as⟯ ＞ !⟮c+;sb;a Christian is? If you prick us, do we not bleed?⟯ ＞ !⟮c+;sb;if you tickle us, do we not laugh? ⟯ ＞ !⟮c+;sb;if you poison us, do we not die? ⟯ ＞ !⟮c+;sb;and if you wrong us, shall we not revenge? ⟯ ＞ !⟮c+;sb;If we are like you in the rest, we will resemble you in that. ⟯ ＞ !⟮c+;sb;If a Jew wrong a Christian, what is his humility? Revenge. ⟯ ＞ !⟮c+;sb;If a Christian wrong a Jew, what should his sufferance be, ⟯ ＞ !⟮c+;sb;by Christian example? Why, revenge. ⟯ ＞ !⟮c+;sb;The villany you teach me, I will execute, ⟯ ＞ !⟮c+;sb;and it shall go hard but I will better the instruction.⟯  # !The Merchant of Venice, Act 1 Scene 3, Shylocks Monologue  ＞ !⟮c77;sb;Signior Antonio, many a time and oft⟯ ＞ !⟮c+;sb;In the Rialto you have rated me⟯ ＞ !⟮c+;sb;About my moneys and my usances:⟯ ＞ !⟮c+;sb;Still have I borne it with a patient shrug,⟯ ＞ !⟮c+;sb;For sufferance is the badge of all our tribe.⟯ ＞ !⟮c+;sb;You call me misbeliever, cut-throat dog,⟯ ＞ !⟮c+;sb;And spit upon my Jewish gaberdine,⟯ ＞ !⟮c+;sb;And all for use of that which is mine own.⟯ ＞ !⟮c+;sb;Well then, it now appears you need my help:⟯ ＞ !⟮c+;sb;Go to, then; you come to me, and you say⟯ ＞ !⟮c+;sb;'Shylock, we would have moneys:' you say so;⟯ ＞ !⟮c+;sb;You, that did void your rheum upon my beard⟯ ＞ !⟮c+;sb;And foot me as you spurn a stranger cur⟯ ＞ !⟮c+;sb;Over your threshold: moneys is your suit⟯ ＞ !⟮c+;sb;What should I say to you? Should I not say⟯ ＞ !⟮c+;sb;'Hath a dog money? is it possible⟯ ＞ !⟮c+;sb;A cur can lend three thousand ducats?' Or⟯ ＞ !⟮c+;sb;Shall I bend low and in a bondman's key,⟯ ＞ !⟮c+;sb;With bated breath and whispering humbleness, Say this;⟯ ＞ !⟮c+;sb;'Fair sir, you spit on me on Wednesday last;⟯ ＞ !⟮c+;sb;You spurn'd me such a day; another time⟯ ＞ !⟮c+;sb;You call'd me dog; and for these courtesies⟯ ＞ !⟮c+;sb;I'll lend you thus much moneys'?⟯  # !Tomorrow, and tomorrow, and tomorrow (from Macbeth, spoken by Macbeth)  ＞ !⟮c100;sb;Tomorrow, and tomorrow, and tomorrow,⟯ ＞ !⟮c+;sb;Creeps in this petty pace from day to day,⟯ ＞ !⟮c+;sb;To the last syllable of recorded time;⟯ ＞ !⟮c+;sb;And all our yesterdays have lighted fools⟯ ＞ !⟮c+;sb;The way to dusty death. Out, out, brief candle!⟯ ＞ !⟮c+;sb;Life's but a walking shadow, a poor player,⟯ ＞ !⟮c+;sb;That struts and frets his hour upon the stage,⟯ ＞ !⟮c+;sb;And then is heard no more. It is a tale⟯ ＞ !⟮c+;sb;Told by an idiot, full of sound and fury,⟯ ＞ !⟮c+;sb;Signifying nothing.⟯  # !Once more unto the breach!  ＞ !⟮c110;sb;Once more unto the breach, dear friends, once more;⟯ ＞ !⟮c+;sb;Or close the wall up with our English dead.⟯ ＞ !⟮c+;sb;In peace there's nothing so becomes a man⟯ ＞ !⟮c+;sb;As modest stillness and humility:⟯ ＞ !⟮c+;sb;But when the blast of war blows in our ears,⟯ ＞ !⟮c+;sb;Then imitate the action of the tiger;⟯ ＞ !⟮c+;sb;Stiffen the sinews, summon up the blood,⟯ ＞ !⟮c+;sb;Disguise fair nature with hard-favour'd rage;⟯ ＞ !⟮c+;sb;Then lend the eye a terrible aspect;⟯ ＞ !⟮c+;sb;Let pry through the portage of the head⟯ ＞ !⟮c+;sb;Like the brass cannon; let the brow o'erwhelm it⟯ ＞ !⟮c+;sb;As fearfully as doth a galled rock⟯ ＞ !⟮c+;sb;O'erhang and jutty his confounded base,⟯ ＞ !⟮c+;sb;Swill'd with the wild and wasteful ocean.⟯ ＞ !⟮c+;sb;Now set the teeth and stretch the nostril wide,⟯ ＞ !⟮c+;sb;Hold hard the breath and bend up every spirit⟯ ＞ !⟮c+;sb;To his full height. On, on, you noblest English.⟯ ＞ !⟮c+;sb;Whose blood is fet from fathers of war-proof!⟯ ＞ !⟮c+;sb;Fathers that, like so many Alexanders,⟯ ＞ !⟮c+;sb;Have in these parts from morn till even fought⟯ ＞ !⟮c+;sb;And sheathed their swords for lack of argument:⟯ ＞ !⟮c+;sb;Dishonour not your mothers; now attest⟯ ＞ !⟮c+;sb;That those whom you call'd fathers did beget you.⟯ ＞ !⟮c+;sb;Be copy now to men of grosser blood,⟯ ＞ !⟮c+;sb;And teach them how to war. And you, good yeoman,⟯ ＞ !⟮c+;sb;Whose limbs were made in England, show us here⟯ ＞ !⟮c+;sb;The mettle of your pasture; let us swear⟯ ＞ !⟮c+;sb;That you are worth your breeding; which I doubt not;⟯ ＞ !⟮c+;sb;For there is none of you so mean and base,⟯ ＞ !⟮c+;sb;That hath not noble lustre in your eyes.⟯ ＞ !⟮c+;sb;I see you stand like greyhounds in the slips,⟯ ＞ !⟮c+;sb;Straining upon the start. The game's afoot:⟯ ＞ !⟮c+;sb;Follow your spirit, and upon this charge⟯ ＞ !⟮c+;sb;Cry 'God for Harry, England, and Saint George!'⟯  # !Do Not Go Gentle into that Good Night  ＞ !⟮c144;sb;Do not go gentle into that good night⟯ ＞ !⟮c+;sb;Old age should burn and rave at close of day;⟯ ＞ !⟮c+;sb;Rage, rage against the dying of the light.⟯ ＞ !⟮c+;sb;Though wise men at their end know dark is right,⟯ ＞ !⟮c+;sb;Because their words had forked no lightning they⟯ ＞ !⟮c+;sb;Do not go gentle into that good night.⟯ ＞ !⟮c+;sb;Good men, the last wave by, crying how bright⟯ ＞ !⟮c+;sb;Their frail deeds might have danced in a green bay,⟯ ＞ !⟮c+;sb;Rage, rage against the dying of the light.⟯ ＞ !⟮c+;sb;Wild men who caught and sang the sun in flight,⟯ ＞ !⟮c+;sb;And learn, too late, they grieved it on its way,⟯ ＞ !⟮c+;sb;Do not go gentle into that good night.⟯ ＞ !⟮c+;sb;Grave men, near death, who see with blinding sight⟯ ＞ !⟮c+;sb;Blind eyes could blaze like meteors and be gay,⟯ ＞ !⟮c+;sb;Rage, rage against the dying of the light.⟯ ＞ !⟮c+;sb;And you, my father, there on the sad height,⟯ ＞ !⟮c+;sb;Curse, bless, me now with your fierce tears, I pray.⟯ ＞ !⟮c+;sb;Do not go gentle into that good night.⟯ ＞ !⟮c+;sb;Rage, rage against the dying of the light.⟯  # !Friends, Romans, Countrymen  ＞ !⟮c163;sb;Friends, Romans, countrymen, lend me your ears;⟯ ＞ !⟮c+;sb;I come to bury Caesar, not to praise him.⟯ ＞ !⟮c+;sb;The evil that men do lives after them;⟯ ＞ !⟮c+;sb;The good is oft interred with their bones;⟯ ＞ !⟮c+;sb;So let it be with Caesar. The noble Brutus⟯ ＞ !⟮c+;sb;Hath told you Caesar was ambitious:⟯ ＞ !⟮c+;sb;If it were so, it was a grievous fault,⟯ ＞ !⟮c+;sb;And grievously hath Caesar answer’d it.⟯ ＞ !⟮c+;sb;Here, under leave of Brutus and the rest–⟯ ＞ !⟮c+;sb;For Brutus is an honourable man;⟯ ＞ !⟮c+;sb;So are they all, all honourable men–⟯ ＞ !⟮c+;sb;Come I to speak in Caesar’s funeral.⟯ ＞ !⟮c+;sb;He was my friend, faithful and just to me:⟯ ＞ !⟮c+;sb;But Brutus says he was ambitious;⟯ ＞ !⟮c+;sb;And Brutus is an honourable man.⟯ ＞ !⟮c+;sb;He hath brought many captives home to Rome⟯ ＞ !⟮c+;sb;Whose ransoms did the general coffers fill:⟯ ＞ !⟮c+;sb;Did this in Caesar seem ambitious?⟯ ＞ !⟮c+;sb;When that the poor have cried, Caesar hath wept:⟯ ＞ !⟮c+;sb;Ambition should be made of sterner stuff:⟯ ＞ !⟮c+;sb;Yet Brutus says he was ambitious;⟯ ＞ !⟮c+;sb;And Brutus is an honourable man.⟯ ＞ !⟮c+;sb;You all did see that on the Lupercal⟯ ＞ !⟮c+;sb;I thrice presented him a kingly crown,⟯ ＞ !⟮c+;sb;Which he did thrice refuse: was this ambition?⟯ ＞ !⟮c+;sb;Yet Brutus says he was ambitious;⟯ ＞ !⟮c+;sb;And, sure, he is an honourable man.⟯ ＞ !⟮c+;sb;I speak not to disprove what Brutus spoke,⟯ ＞ !⟮c+;sb;But here I am to speak what I do know.⟯ ＞ !⟮c+;sb;You all did love him once, not without cause:⟯ ＞ !⟮c+;sb;What cause withholds you then, to mourn for him?⟯ ＞ !⟮c+;sb;O judgment! thou art fled to brutish beasts,⟯ ＞ !⟮c+;sb;And men have lost their reason. Bear with me;⟯ ＞ !⟮c+;sb;My heart is in the coffin there with Caesar,⟯ ＞ !⟮c+;sb;And I must pause till it come back to me.⟯  # !tidbits  ＞ !⟮c198;It is too rash, too unadvised, too sudden,⟯ ⟮c+;Too like the lightning, which doth cease to be⟯ ⟮c+;Ere one can say “It lightens.”⟯    ＞ !⟮c+;My bounty is as boundless as the sea,⟯  ⟮c+;My love as deep. The more I give to thee,⟯ ⟮c+;The more I have, for both are infinite.⟯    ＞ !Marc Anthony after Caesars murder: Cry... ⟮c+;'Havoc!,' and let slip the dogs of war.⟯    ＞ !⟮c+;It was the nightingale, and not the lark⟯, ⟮c+;that pierced the fearful hollow of thine ear;⟯    ＞ !⟮c+;There are more things in heaven and earth, Horatio,⟯ ⟮c+;than are dreamt of in your philosophy⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}</span>"	misc::text-by-heart::shakespeare
"# !de  ## !Prometheus (Goethe)  ＞ !⟮c1;sb;Bedecke deinen Himmel, Zeus,⟯ ＞ !⟮c+;sb;Mit Wolkendunst,⟯ ＞ !⟮c+;sb;Und übe, dem Knaben gleich,⟯ ＞ !⟮c+;sb;Der Disteln köpft,⟯ ＞ !⟮c+;sb;An Eichen dich und Bergeshöhn;⟯ ＞ !⟮c+;sb;Musst mir meine Erde⟯ ＞ !⟮c+;sb;Doch lassen stehn⟯ ＞ !⟮c+;sb;Und meine Hütte, die du nicht gebaut,⟯ ＞ !⟮c+;sb;Und meinen Herd,⟯ ＞ !⟮c+;sb;Um dessen Glut⟯ ＞ !⟮c+;sb;Du mich beneidest.⟯  ＞ !⟮c+;sb;Ich kenne nichts Ärmeres⟯ ＞ !⟮c+;sb;Unter der Sonn' als euch, Götter!⟯ ＞ !⟮c+;sb;Ihr nähret kümmerlich⟯ ＞ !⟮c+;sb;Von Opfersteuern⟯ ＞ !⟮c+;sb;Und Gebetshauch⟯ ＞ !⟮c+;sb;Eure Majestät,⟯ ＞ !⟮c+;sb;Und darbtet, wären⟯ ＞ !⟮c+;sb;Nicht Kinder und Bettler⟯ ＞ !⟮c+;sb;Hoffnungsvolle Toren.⟯  ＞ !⟮c+;sb;Da ich ein Kind war,⟯ ＞ !⟮c+;sb;Nicht wusste wo aus noch ein,⟯ ＞ !⟮c+;sb;Kehrt' ich mein verirrtes Auge⟯ ＞ !⟮c+;sb;Zur Sonne, als wenn drüber wär'⟯ ＞ !⟮c+;sb;Ein Ohr, zu hören meine Klage,⟯ ＞ !⟮c+;sb;Ein Herz, wie mein's,⟯ ＞ !⟮c+;sb;Sich des Bedrängten zu erbarmen.⟯  ＞ !⟮c+;sb;Wer half mir⟯ ＞ !⟮c+;sb;Wider der Titanen Übermut?⟯ ＞ !⟮c+;sb;Wer rettete vom Tode mich,⟯ ＞ !⟮c+;sb;Von Sklaverei?⟯ ＞ !⟮c+;sb;Hast du nicht alles selbst vollendet,⟯ ＞ !⟮c+;sb;Heilig glühend Herz?⟯ ＞ !⟮c+;sb;Und glühtest jung und gut,⟯ ＞ !⟮c+;sb;Betrogen, Rettungsdank⟯ ＞ !⟮c+;sb;Dem Schlafenden da droben?⟯  ＞ !⟮c+;sb;Ich dich ehren? Wofür?⟯ ＞ !⟮c+;sb;Hast du die Schmerzen gelindert⟯ ＞ !⟮c+;sb;Je des Beladenen?⟯ ＞ !⟮c+;sb;Hast du die Tränen gestillet⟯ ＞ !⟮c+;sb;Je des Geängsteten?⟯ ＞ !⟮c+;sb;Hat nicht mich zum Manne geschmiedet⟯ ＞ !⟮c+;sb;Die allmächtige Zeit⟯ ＞ !⟮c+;sb;Und das ewige Schicksal,⟯ ＞ !⟮c+;sb;Meine Herrn und deine?⟯  ＞ !⟮c+;sb;Wähntest du etwa,⟯ ＞ !⟮c+;sb;Ich sollte das Leben hassen,⟯ ＞ !⟮c+;sb;In Wüsten fliehen,⟯ ＞ !⟮c+;sb;Weil nicht alle⟯ ＞ !⟮c+;sb;Blütenträume reiften?⟯  ＞ !⟮c+;sb;Hier sitz' ich, forme Menschen⟯ ＞ !⟮c+;sb;Nach meinem Bilde,⟯ ＞ !⟮c+;sb;Ein Geschlecht, das mir gleich sei,⟯ ＞ !⟮c+;sb;Zu leiden, zu weinen,⟯ ＞ !⟮sb;Zu ⟮c+;genießen⟯ ⟮c+;und zu freuen sich,⟯⟯ ＞ !⟮c+;sb;Und dein nicht zu achten,⟯ ＞ !⟮c+;sb;Wie ich!⟯  # !ja  ## !Man'yōshū vol. 11, verse 2514 - 2513  ＞ !⟮c59;sb;A faint clap of thunder⟯ ＞ !⟮c+;sb;Clouded skies⟯ ＞ !⟮c+;sb;Perhaps rain comes⟯ ＞ !⟮c+;sb;If so, will you stay here with me?⟯  ＞ !⟮c+;sb;A faint clap of thunder⟯ ＞ !⟮c+;sb;Even if rain comes not⟯ ＞ !⟮c+;sb;I will stay here⟯ ＞ !⟮c+;sb;Together with you⟯  # !en  ## !Warming Her Pearls (by Carol Ann Duffy)  ＞ !⟮c67;sb;Next to my own skin, her pearls. My mistress⟯ ＞ !⟮c+;sb;bids me wear them, warm them, until evening⟯ ＞ !⟮c+;sb;when I'll brush her hair. At six, I place them⟯ ＞ !⟮c+;sb;round her cool, white throat. All day I think of her,⟯  ＞ !⟮c+;sb;resting in the Yellow Room, contemplating silk⟯ ＞ !⟮c+;sb;or taffeta, which gown tonight? She fans herself⟯ ＞ !⟮c+;sb;whilst I work willingly, my slow heat entering⟯ ＞ !⟮c+;sb;each pearl. Slack on my neck, her rope.⟯  ＞ !⟮c+;sb;She's beautiful. I dream about her⟯ ＞ !⟮c+;sb;in my attic bed; picture her dancing⟯ ＞ !⟮c+;sb;with tall men, puzzled by my faint, persistent scent⟯ ＞ !⟮c+;sb;beneath her French perfume, her milky stones.⟯  ＞ !⟮c+;sb;I dust her shoulders with a rabbit's foot,⟯ ＞ !⟮c+;sb;watch the soft blush seep through her skin⟯ ＞ !⟮c+;sb;like an indolent sigh. In her looking-glass⟯ ＞ !⟮c+;sb;my red lips part as though I want to speak.⟯  ＞ !⟮c+;sb;Full moon. Her carriage brings her home. I see⟯ ＞ !⟮c+;sb;her every movement in my head.... Undressing,⟯ ＞ !⟮c+;sb;taking off her jewels, her slim hand reaching⟯ ＞ !⟮c+;sb;for the case, slipping naked into bed, the way⟯  ＞ !⟮c+;sb;she always does.... And I lie here awake,⟯ ＞ !⟮c+;sb;knowing the pearls are cooling even now⟯ ＞ !⟮c+;sb;in the room where my mistress sleeps. All night⟯ ＞ !⟮c+;sb;I feel their absence and I burn.⟯  ## !『 Not Waving but Drowning 』 Stevie Smith 1972  ＞ !⟮c91;sb;Nobody heard him, the dead man,   ⟯ ＞ !⟮c+;sb;But still he lay moaning:⟯ ＞ !⟮c+;sb;I was much further out than you thought   ⟯ ＞ !⟮c+;sb;And not waving but drowning.⟯  ＞ !⟮c+;sb;Poor chap, he always loved larking⟯ ＞ !⟮c+;sb;And now he’s dead⟯ ＞ !⟮c+;sb;It must have been too cold for him his heart gave way,   ⟯ ＞ !⟮c+;sb;They said.⟯  ＞ !⟮c+;sb;Oh, no no no, it was too cold always   ⟯ ＞ !⟮c+;sb;(Still the dead one lay moaning)   ⟯ ＞ !⟮c+;sb;I was much too far out all my life   ⟯ ＞ !⟮c+;sb;And not waving but drowning.⟯  ## !Helen of Troy Does Countertop Dancing (by Margaret Atwood)  ＞ !⟮c103;sb;The world is full of women⟯ ＞ !⟮c+;sb;who'd tell me I should be ashamed of myself⟯ ＞ !⟮c+;sb;if they had the chance. Quit dancing.⟯ ＞ !⟮c+;sb;Get some self-respect⟯ ＞ !⟮c+;sb;and a day job.⟯ ＞ !⟮c+;sb;Right. And minimum wage,⟯ ＞ !⟮c+;sb;and varicose veins, just standing⟯ ＞ !⟮c+;sb;in one place for eight hours⟯ ＞ !⟮c+;sb;behind a glass counter⟯ ＞ !⟮c+;sb;bundled up to the neck, instead of⟯ ＞ !⟮c+;sb;naked as a meat sandwich.⟯ ＞ !⟮c+;sb;Selling gloves, or something.⟯ ＞ !⟮c+;sb;Instead of what I do sell.⟯ ＞ !⟮c+;sb;You have to have talent⟯ ＞ !⟮c+;sb;to peddle a thing so nebulous⟯ ＞ !⟮c+;sb;and without material form.⟯ ＞ !⟮c+;sb;Exploited, they'd say. Yes, any way⟯ ＞ !⟮c+;sb;you cut it, but I've a choice⟯ ＞ !⟮c+;sb;of how, and I'll take the money.⟯  ＞ !⟮c+;sb;I do give value.⟯ ＞ !⟮c+;sb;Like preachers, I sell vision,⟯ ＞ !⟮c+;sb;like perfume ads, desire⟯ ＞ !⟮c+;sb;or its facsimile. Like jokes⟯ ＞ !⟮c+;sb;or war, it's all in the timing.⟯ ＞ !⟮c+;sb;I sell men back their worse suspicions:⟯ ＞ !⟮c+;sb;that everything's for sale,⟯ ＞ !⟮c+;sb;and piecemeal. They gaze at me and see⟯ ＞ !⟮c+;sb;a chain-saw murder just before it happens,⟯ ＞ !⟮c+;sb;when thigh, ass, inkblot, crevice, tit, and nipple⟯ ＞ !⟮c+;sb;are still connected.⟯ ＞ !⟮c+;sb;Such hatred leaps in them,⟯ ＞ !⟮c+;sb;my beery worshippers! That, or a bleary⟯ ＞ !⟮c+;sb;hopeless love. Seeing the rows of heads⟯ ＞ !⟮c+;sb;and upturned eyes, imploring⟯ ＞ !⟮c+;sb;but ready to snap at my ankles,⟯ ＞ !⟮c+;sb;I understand floods and earthquakes, and the urge⟯ ＞ !⟮c+;sb;to step on ants. I keep the beat,⟯ ＞ !⟮c+;sb;and dance for them because⟯ ＞ !⟮c+;sb;they can't. The music smells like foxes,⟯ ＞ !⟮c+;sb;crisp as heated metal⟯ ＞ !⟮c+;sb;searing the nostrils⟯ ＞ !⟮c+;sb;or humid as August, hazy and languorous⟯ ＞ !⟮c+;sb;as a looted city the day after,⟯ ＞ !⟮c+;sb;when all the rape's been done⟯ ＞ !⟮c+;sb;already, and the killing,⟯ ＞ !⟮c+;sb;and the survivors wander around⟯ ＞ !⟮c+;sb;looking for garbage⟯ ＞ !⟮c+;sb;to eat, and there's only a bleak exhaustion.⟯ ＞ !⟮c+;sb;Speaking of which, it's the smiling⟯ ＞ !⟮c+;sb;tires me out the most.⟯ ＞ !⟮c+;sb;This, and the pretence⟯ ＞ !⟮c+;sb;that I can't hear them.⟯ ＞ !⟮c+;sb;And I can't, because I'm after all⟯ ＞ !⟮c+;sb;a foreigner to them.⟯ ＞ !⟮c+;sb;The speech here is all warty gutturals,⟯ ＞ !⟮c+;sb;obvious as a slab of ham,⟯ ＞ !⟮c+;sb;but I come from the province of the gods⟯ ＞ !⟮c+;sb;where meanings are lilting and oblique.⟯ ＞ !⟮c+;sb;I don't let on to everyone,⟯ ＞ !⟮c+;sb;but lean close, and I'll whisper:⟯ ＞ !⟮c+;sb;My mother was raped by a holy swan.⟯ ＞ !⟮c+;sb;You believe that? You can take me out to dinner.⟯ ＞ !⟮c+;sb;That's what we tell all the husbands.⟯ ＞ !⟮c+;sb;There sure are a lot of dangerous birds around.⟯  ＞ !⟮c+;sb;Not that anyone here⟯ ＞ !⟮c+;sb;but you would understand.⟯ ＞ !⟮c+;sb;The rest of them would like to watch me⟯ ＞ !⟮c+;sb;and feel nothing. Reduce me to components⟯ ＞ !⟮c+;sb;as in a clock factory or abattoir.⟯ ＞ !⟮c+;sb;Crush out the mystery.⟯ ＞ !⟮c+;sb;Wall me up alive⟯ ＞ !⟮c+;sb;in my own body.⟯ ＞ !⟮c+;sb;They'd like to see through me,⟯ ＞ !⟮c+;sb;but nothing is more opaque⟯ ＞ !⟮c+;sb;than absolute transparency.⟯ ＞ !⟮c+;sb;Look--my feet don't hit the marble!⟯ ＞ !⟮c+;sb;Like breath or a balloon, I'm rising,⟯ ＞ !⟮c+;sb;I hover six inches in the air⟯ ＞ !⟮c+;sb;in my blazing swan-egg of light.⟯ ＞ !⟮c+;sb;You think I'm not a goddess?⟯ ＞ !⟮c+;sb;Try me.⟯ ＞ !⟮c+;sb;This is a torch song.⟯ ＞ !⟮c+;sb;Touch me and you'll burn.⟯  ## !Extract from Meditations in an Emergency  ＞ !⟮c186;sb;I can't even enjoy a blade of grass ⟯ ＞ !⟮c+;sb;unless I know there's a subway handy,⟯ ＞ !⟮c+;sb;or a record store ⟯ ＞ !⟮c+;sb;or some other sign that people do not totally regret life.⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}</span>"	misc::text-by-heart::poetry
"foo  # !The Serenity Prayer  ＞ !⟮c1;sb;God, grant me the serenity to accept the things I cannot change,⟯ ＞ !⟮c+;sb;courage to change the things I can,⟯ ＞ !⟮c+;sb;and wisdom to know the difference.⟯  # !Símon Bolivar's conclusion about the americas  Simon Bolivars Letter near the end of his life: 1. ⟮c4;sb;America is ungovernable.⟯ 2. ⟮c+;sb;He who serves revolution plows the sea.⟯ 3. ⟮c+;sb;The only thing one can do in America is emigrate.⟯ 4. ⟮c+;sb;This country will first fall into the hands of the unbridled crowd and then pass imperceptibly to tyrants of all colors and races.⟯ 5. ⟮c+;sb;Devoured by all crimes and extinguished by ferocity, the Europeans will not even deign to conquer us.⟯ 6. ⟮c+;sb;If it is possible for one part of the world to return to primitive chaos, it is America.⟯  # !John Chivington, 1864, about indians  ＞ !⟮c10;sb;I have come to kill Indians,⟯ ＞ !⟮c+;sb;and believe it is right and honorable to use⟯ ＞ !⟮c+;sb;any means under God's heaven to kill Indians.⟯ ＞ !⟮c+;sb;Kill and scalp all, big and little; nits make lice!⟯  # !Gettysburg Address (1863)  ＞ !⟮c14;sb;Four score and seven years ago our fathers brought forth on this continent,⟯ ＞ !⟮c+;sb;a new nation, conceived in Liberty⟯,  ＞ !⟮c+;sb;and dedicated to the proposition that all men are created equal.⟯  ＞ !⟮c+;sb;Now we are engaged in a great civil war,⟯ ＞ !⟮c+;sb;testing whether that nation,⟯ ＞ !⟮c+;sb;or any nation so conceived and so dedicated,⟯ ＞ !⟮c+;sb;can long endure.⟯ ＞ !⟮c+;sb;We are met on a great battle-field of that war.⟯ ＞ !⟮c+;sb;We have come to dedicate a portion of that field, as a final resting place⟯ ＞ !⟮c+;sb;for those who here gave their lives that that nation might live.⟯ ＞ !⟮c+;sb;It is altogether fitting and proper that we should do this. ⟯  ＞ !⟮c+;sb;But, in a larger sense,⟯ ＞ !⟮c+;sb;we can not dedicate—⟯ ＞ !⟮c+;sb;we can not consecrate—⟯ ＞ !⟮c+;sb;we can not hallow—this ground. ⟯ ＞ !⟮c+;sb;The brave men, living and dead, ⟯ ＞ !⟮c+;sb;who struggled here, have consecrated it, ⟯ ＞ !⟮c+;sb;far above our poor power to add or detract. ⟯ ＞ !⟮c+;sb;The world will little note, nor long remember what we say here, ⟯ ＞ !⟮c+;sb;but it can never forget what they did here. ⟯ ＞ !⟮c+;sb;It is for us, the living, rather, ⟯ ＞ !⟮c+;sb;to be dedicated here to the unfinished work ⟯ ＞ !⟮c+;sb;which they who fought here have thus far so nobly advanced.⟯ ＞ !⟮c+;sb;It is rather for us to be here dedicated to the great task remaining before us—⟯ ＞ !⟮c+;sb;that from these honored dead we take increased devotion⟯ ＞ !⟮c+;sb;to that cause for which they gave the last full measure of devotion—⟯ ＞ !⟮c+;sb;that we here highly resolve that these dead shall not have died in vain—⟯ ＞ !⟮c+;sb;that this nation, under God,⟯ ＞ !⟮c+;sb;shall have a new birth of freedom—⟯ ＞ !⟮c+;sb;and that government of the people,⟯ ＞ !⟮c+;sb;by the people,⟯ ＞ !⟮c+;sb;for the people,⟯ ＞ !⟮c+;sb;shall not perish from the earth.⟯ ^there are multiple versions, this is the 'canonical' one, although probably not the one he actually delivered  # !misc  ＞ !the papal legate after the first conquest during the crusade against the cathars: ⟮c47;Kill them all, let God sort them out.⟯ / ⟮c48;Kill them all. God will know his own.⟯   ＞ !Antonio José de Sucre to Simón Bolívar, after his exile: ⟮c+;Goodbye, my general. Take as a measure of my fondness these flowing tears.⟯   ＞ !After his trial, ⟮c+;Gallileo⟯ supposedly said: ⟮c+;And yet it moves!⟯   ＞ !⟮c+;Tell me, what is it you plan to do⟯ ⟮c+;with your one wild and precious life?⟯   ＞ !⟮c+;I was supposed to be the one⟯ ⟮c+;to fill your dark soul with light⟯!   ＞ !The personal motto of ⟮c+;Cesare Borgia⟯ (supposedly, though finding a source is hard) was: (in Latin) ⟮c+;Aut Caesar, aut nihil.⟯ / (in English)⟮c+;(Either) Caesar or nothing.⟯   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}</span>"	misc::text-by-heart::prayers,-speeches,-quotes
"# !Braiding  ## !Three-Strand Braiding  1. !⟮c1;hb;<img src=""sm__3strandbraid1.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm__3strandbraid2.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm__3strandbraid3.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm__3strandbraid4.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm__3strandbraid5.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm__3strandbraid6.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm__3strandbraid7.jpg"">⟯ 8. !⟮c+;hb;<img src=""sm__3strandbraid8.jpg"">⟯ 9. !⟮c+;hb;<img src=""sm__3strandbraid9.jpg"">⟯ 10. !⟮c+;hb;<img src=""sm__3strandbraid10.jpg"">⟯  # !around appendages  ## !any  ### !Lark's Head Single Collumn Tie  1. !⟮c11;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.05.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.10.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.34.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.03.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.08.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.20.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.31.jpg"">⟯  ### !⟮c18;Loop-chain leash⟯  1. !⟮c+;hb;<img src=""sm_Neck-Lead-02.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Neck-Lead-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Neck-Lead-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Neck-Lead-05.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Neck-Lead-06.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Neck-Lead-07.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Neck-Lead-08.jpg"">⟯ 8. !⟮c+;hb;<img src=""sm_Neck-Lead-09.jpg"">⟯ 9. !⟮c+;hb;<img src=""sm_Neck-Lead-10.jpg"">⟯ 10. !⟮c+;hb;<img src=""sm_Neck-Lead-11.jpg"">⟯ 11. !⟮c+;hb;<img src=""sm_Neck-Lead-12.jpg"">⟯  ## !hair  ### !⟮c30;Hair tie⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-05.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-06.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-07.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-08.jpg"">⟯  # !two ends together  ## !⟮c35;Square Knot⟯  1. !⟮c+;hb;<img src=""sm_Square-Knot-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Square-Knot-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Square-Knot-03.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Square-Knot-04.jpg"">⟯  ## !⟮c40;Surgeons Knot⟯  1. !⟮c+;hb;<img src=""sm_Surgeons-Knot-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Surgeons-Knot-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Surgeons-Knot-03.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Surgeons-Knot-04.jpg"">⟯  ## !Double Coin Knot  1. !⟮c45;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.14.png"">⟯ 2. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.26.png"">⟯ 3. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.30.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.33.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.36.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.41.jpg"">⟯  # !Prusik  ## !⟮c51;Prusik shackle⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Shackle-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Shackle-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Shackle-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Shackle-05.jpg"">⟯  ## !⟮c56;Prusik Cuffs⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-06.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-08.jpg"">⟯  ## !⟮c61;Prusic head⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Head-1-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Head-1-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Head-1-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Head-1-05.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Prusik-Head-1-06.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯  # !misc  flex-container:<img src=""sm_Screenshot 2020-06-30 at 21.28.32.jpg""><img src=""sm_Screenshot 2019-08-19 at 01.13.22.jpg"">   For the '⟮c69;many wrap⟯' technique for shortening cables, you start with ⟮c+;an overhand knot⟯ and then ⟮c+;Just continue wrapping⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}</span>"	misc::knots
"# !improv  ## !fundamentals  ### EKL  ⟮c1;Die Struktur声⟯ einer ⟮Impro-szene (und ggf. anderer dinge, aber hauptsächlich)⟯ ist ⟮EKL⟯.  ⟮EKL⟯ steht für ⟮Etablieren, Konflikt, Lösung⟯.  In einer ⟮(Impro)szene⟯ ⟮einigt man sich (idealerweise)⟯ ⟮nach dem Etablieren：wann?⟯ ⟮auf genau einen Konflikt⟯.   #### !Etablieren  ##### !Fragen  - !⟮Wer bin ich?⟯ - !⟮Wo bin ich?⟯ - !⟮Wann bin ich?⟯ - !⟮Wie stehe ich zum Gegenüber?⟯  ## !exercises  ### !Das Totale Chaos  ⟮c14;alle im kreis⟯, außer ⟮eine person in der mitte⟯.  ⟮Die Person in der Mitte⟯ ⟮sagt eine Wahrheit über sich⟯.  Falls ⟮die Wahrheit auf einen zutrifft⟯, ⟮muss man sich eine neue Position im Kreis suchen⟯. ⟮sb;Die ⟮Person die keinen mehr findet⟯, ist ⟮die neue Person in der Mitte⟯.⟯  ### !Hey Baby  ⟮Alle Leute stehen im Kreis⟯. ⟮Eine Person geht in die Mitte⟯.  ⟮Die person in der mitte geht zu jemandem hin⟯ ⟮sb;⟮und sagt ""Hey Baby, willst du mitkommen?""⟯ ⟮Falls eine person lacht oder lächelt⟯, muss ⟮die Person in die mitte⟯, ⟮Falls nicht⟯, muss ⟮die Person (in der mitte) weitermachen bis es passiert⟯⟯  ### !Mirroring  ⟮One person does something⟯ and ⟮the other person imitates them like a mirror (as well as possible).⟯  setup: ⟮2 participants⟯ ⟮facing each other⟯  generally ⟮slow⟯ movements are ⟮easiest⟯  The ⟮easier⟯ variant has ⟮one person lead, and one follow⟯  The ⟮harder⟯ variant has ⟮both people lead and both follow⟯   ### !3-satz-geschichte  ⟮jeder spieler⟯ ⟮sagt einen satz⟯, entweder ⟮E, K oder L⟯ (natürlich in ⟮der reihenfolge⟯)  mit ⟮3 sätzen⟯ entsteht ⟮eine komplette EKL geschichte⟯  mindestens ⟮2⟯ ⟮spieler*innen ⟯  ### !Ich bin der könig der  Eine Person ⟮sagt: Ich bin der König von...⟯ und ⟮alle anderen müssen das Ding darstellen⟯ bis ⟮sich jemand anders zum König der $whatevers erklärt⟯.  Die ⟮improfabrik⟯ hat das (sinvollerweise, finde ich) ⟮auf Tiere limitiert⟯   ### !Feind*in und Beschützer*in  flex-container:<img src=""sm_your-drawing.png"">   ⟮Jede*r Spieler*in⟯ sucht sich ⟮eine*n Feind*in⟯ und ⟮eine*n Beschützer*in⟯. ⟮Jede*r Spieler*in⟯ versucht, ⟮seinen/ihren Beschützer*in zwischen sich und der*dem Feind*in zu behalten.⟯   ### !assoziationsketten  ⟮Someone says something⟯, and then ⟮the next person says the first thing that comes to mind⟯ and ⟮sb;then  the next person says the first thing that comes to mind and so on⟯  Important to avoid ⟮thinking, self-censorship⟯ to learn to  ⟮let go, feel free⟯, e.g. to make ⟮weird associations like ""boss-napalm""⟯ etc.   ### !walking with speed levels  ⟮one person⟯ ⟮names speed levels⟯  ⟮everyone who isn't saying the levels⟯ ⟮walks at that speed (relative to the min/max⟯)  sometimes, in ⟮the beginning⟯ one ⟮goes through all the levels once to establish⟯  normally the levels are such that ⟮1⟯ is the ⟮slowest possible⟯, ⟮10⟯ is the ⟮fastest possible speed⟯   ### raumläufe  »⟮Raumläufe⟯« sind Übungen, bei denen man ⟮durch den Raum herumgeht⟯.   #### emotionaler gang  »⟮Emotionaler Gang⟯« ist ein ⟮Raumlauf⟯ wo ⟮eine besondere person⟯ ⟮immer mal wieder⟯ ⟮emotionen vorgibt⟯ und ⟮man sich dann in darin bewegt.⟯  ### samurai  flex-container:<img src=""sm_your-drawing (1).png""><img src=""sm_your-drawing (2).png""><img src=""sm_your-drawing (3).png"">   »⟮Samurai⟯«: The attacker ⟮raises their sword⟯ and ⟮hb; ⟮cuts downwards⟯ while ⟮hb;⟮emitting a sound (which one varies)⟯ and ⟮hb;⟮points at their target⟯. Their ⟮target⟯ ⟮cuts upwards⟯ while ⟮emitting a different sound.⟯ The ⟮hb;⟮left and right neighbors⟯ ⟮cut from the side⟯ while ⟮emitting a third sound⟯.⟯⟯⟯⟯ In the game »Samurai«, the ⟮sword⟯ is formed by ⟮palms together⟯, ⟮arms straight⟯.   # !acting  ## !families/schools/traditions  ### viewpoints  Broadly, ⟮c96;Viewpoints⟯ ⟮cares less⟯ about the ⟮psychology of characters⟯ and ⟮c-;more⟯ about the ⟮sensory reality/space/perception/exeriences⟯  The main book on ⟮Viewpoints⟯ is ⟮The Viewpoints Book⟯ by ⟮Anne Bogart⟯ and ⟮c_;Tina Landau.⟯  ⟮Viewpoints⟯ as a technique originates from ⟮dance⟯   #### soft focus  ＿⟮Soft focus⟯＿ is a technique from ⟮Viewpoints⟯  ＿⟮Soft focus⟯＿ asks that we ⟮soften our focus, looking at nothing in particular⟯  When we're in ＿⟮soft focus⟯＿, we able to ⟮percieve  everything we can see⟯  When we're in ＿⟮soft focus⟯＿, rather than ⟮seeking out information⟯, ⟮information seeks us out ('penetrates' our sensiblities⟯)  ＿⟮Soft focus⟯＿ is contrasted with ⟮the normal way of looking⟯, which is ⟮staring at one particular thing (focus+saccades  or smooth pursuit movement⟯)   ### meisner  The ＿⟮c117;meisner technique⟯＿ says  ⟮you should do something⟯ only if ⟮something happens to make you do it⟯  The ＿⟮meisner technique⟯＿ says ⟮what you do⟯ ⟮depends on the other fellow⟯  The ＿meisner technique＿ emphasizes ⟮instinctive, honest, authentic⟯ reactions  Perhaps the most famous exercise of the ＿⟮meisner technique⟯＿ is ＿⟮the repetition⟯＿  #### pinch and ouch  At its most literal, »⟮a pinch and ouch⟯« in the ⟮meisner⟯ technique is ⟮someone pinching you, you react to that pain⟯  In the meisner ＿pinch and ouch＿, the ⟮pinch⟯ generally is ⟮Something that makes you feel a way⟯  In the meisner ＿pinch and ouch＿, the ⟮ouch⟯ is ⟮Your honest reaction⟯   # !techniques  ## gromolo  »⟮c133;gibberish/gromolo⟯« is ⟮speech using meaningless sounds⟯  ⟮Gibberish⟯ in theatre is a synonym for ⟮gromolo⟯.  ⟮Gromolo⟯ sometimes uses ⟮some of a languages most distinctive phonological qualities⟯ to ⟮imitate a fictive version of a real language⟯  ⟮Sim gülük dürülu milli-ü⟯ is an example for using ⟮gromolo/gibberish⟯ to ⟮imitate a language⟯ ⟮Many improv games⟯ can be varied by doing them in ⟮gromolo/gibberish⟯   ## der sprechbereite mund  ""⟮der sprechbereite mund⟯"" involves ⟮keeping your mouth open slightly all the time (during improv sessions etc.)⟯ ⟮to be able to react quickly⟯  The problem with sourcing ""⟮der sprechbereite mund⟯"" is that ⟮I can't find it on google⟯.    ## yes, and  ⟮""Yes, and...""⟯ originates from ⟮improv⟯. ⟮""Yes, and...""⟯, is both ⟮a phrase that can be said/used⟯, as well the ⟮the underlying rule-of-thumb⟯ that says that ⟮a participant should accept what another participant has stated⟯ (""⟮c_;yes⟯"") and ⟮then expand on that line of thinking⟯ (""⟮c_;and⟯""). ⟮""Yes, and...""⟯ is sometimes also expanded to ⟮a principle⟯ for ⟮communication⟯ or for ⟮c_;life⟯.  ## breathing  Telling someone to ⟮breathe their belly into the ground/their feet⟯ will make them  ⟮breathe more deeply⟯, compared to just telling them ⟮to breathe in their belly⟯, due to it ⟮priming your mind / acting as a metaphr⟯   # acroyoga  In general, ⟮c164;acroyoga⟯ can be used for ⟮acrobatics⟯, ⟮exercise (or similar, stretching etc.⟯), and ⟮relaxating/therapeutics (incl thai massage⟯) In general, ⟮acroyoga⟯ includes the three roles ⟮base⟯, ⟮flyer⟯ and ⟮spotter⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}</span>"	misc::theatre
"#  !money  ##  digital concurrency  ###  flaws  ####  double spending  »⟮Double-spending⟯« is ⟮a potential flaw⟯ in a ⟮digital cash scheme⟯ in which ⟮the same single digital token⟯ can ⟮be spent more than once⟯.   #  !assets  An »⟮asset⟯« is ⟮a resource⟯ ⟮owned by a business entity⟯.  ##  !stocks  ###  !stock exchanges  ####  !stock indices  table:Country|Main stock index ⟮Japan⟯|⟮Nikkei 225⟯   #  !taxes  ##  !income  ###  marginal  The »⟮marginal tax rate⟯« is ⟮the income tax rate⟯ ⟮you (would) pay on the next dollar of income⟯  ###  ehegattensplitting  ⟮Across many tax systems⟯, ⟮the way income taxes are calculated⟯ within a ⟮marriage⟯ often causes ⟮the partner earning less⟯ to be ⟮taxed with the maximum marginal tax rate immediately⟯, thus ⟮disincentivizing working⟯.  Beim ⟮Ehegattensplitting⟯ wird ⟮ein Ehepaar⟯ ⟮steuerlich⟯ als ⟮ein*e Steuerpflichtige*r⟯ behandelt  Things like the ⟮Ehegattensplitting⟯ result in a situation where ⟮nonequally divided taxburden⟯ results in ⟮better taxation⟯ than ⟮more equally distributed income⟯ because ⟮the tax rate of the smaller income⟯ has ⟮an influence on half of the income⟯, and not ⟮just the disproportionately smaller size of the smaller income⟯   ####  !ehegattensplitting formula in germany  - !⟮Einkommen des Paars wird zusammengerechnet⟯ - !⟮c+;s_-;Beitrag wird halbiert⟯ - !⟮c+;s_-2:_-;Einkommenssteuer fuer diese Haelfte wird berechnet⟯ - !⟮c+;s_-3:_-;Errechnete einkommenssteuer wird verdoppelt⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}</span>"	misc::econ::finance
"# microeconomics  »⟮Microeconomics⟯« is the study of ⟮the behavior and interactions of individual economic actors⟯ ⟮within single markets⟯.  ## production  »⟮Production⟯« is ⟮the combination of various inputs⟯ ⟮into an output⟯. »⟮A production function⟯« gives ⟮the relation⟯ between ⟮quantities⟯ ⟮of ＿inputs⟯＿ and ⟮c-;quantities⟯ ⟮of ＿outputs＿.⟯  ### inputs  The ⟮»factors of production«/»inputs«⟯ are ⟮what are necessary⟯ to ⟮produce the ＿output＿(s)⟯ in ＿⟮production⟯＿. ⟮factor of production⟯ ≈ ⟮input⟯  #### rent  »⟮Rent⟯« in economics is ⟮payment⟯ to ⟮a owner of⟯ ⟮a ＿factor of production/input＿⟯ in ⟮excess of⟯ what it costs ⟮c_-3;the owner⟯ to ⟮bring⟯ ⟮c_-4;the ＿factor of production/input＿⟯ ⟮into the ＿production＿ process⟯. More specifically, economic »⟮rent⟯« can be thought of ⟮any payment⟯ for ⟮a ＿factor of production/input＿⟯ that ⟮is itself not produced⟯, such as ⟮land or assets formed by creating official privilege over natural opportunities (e.g., patents)⟯.  ##### rent-seeking  »⟮Rent-seeking⟯« is the atttempt to ⟮grow/maximize⟯ ⟮economic ＿rent＿⟯. Since ⟮charging of rent does not increase productivity⟯, ⟮＿rent-seeking＿⟯ has the effect of ⟮increasing one's share of wealth⟯ without ⟮contributing to productivity⟯.  ## costs and benefits  ### costs  A »⟮cost⟯« is ⟮the value of money⟯ that ⟮has been used for something⟯, and thus ⟮is not available for use anymore⟯.  #### opportunity  When doing a certain thing, that thing's ⟮»opportunity cost«⟯ is ⟮the loss of value/benefit⟯ from ⟮anything one could do instead (and has to forgo)⟯  #### related to the current situation  Related to the current situation, there may be ⟮＿sunk costs＿⟯ and ⟮c_;＿prospective costs＿⟯. A ⟮»sunk cost«⟯ is a ＿cost＿ that ⟮has already been incurred and cannot be recovered⟯. a ⟮»prospective cost«⟯ is a ＿cost＿ that ⟮can be avoided if action is taken⟯  #### related to production  flex-container:✫240px-CVP-TC-FC-VC.svg.png✫✫Marginal_cost1a.png✫   ⟮»Fixed costs«⟯ are ＿costs＿ that ⟮are not dependent on the quantity of ＿output⟯＿. ⟮»variable costs«⟯ ⟮increase in proportion to the ＿output⟯＿. Together, ⟮＿fixed costs＿⟯ and ⟮c_;＿variable costs＿⟯ make up ⟮＿total cost＿⟯ ⟮»total cost«⟯ is the ＿cost＿ of ⟮producing some quantity of ＿output＿⟯. The ⟮»marginal cost«⟯ of something is the ＿cost＿ of ⟮producing additional ＿output⟯＿ ⟮＿Marginal cost＿⟯ is either measured in ⟮one extra unit⟯, or in ⟮a graph for infinitesimal amounts⟯ The ⟮＿marginal cost＿⟯ is calculated by ⟮dividing⟯ ⟮Δ ＿total cost＿⟯ ⟮c-;by⟯ ⟮Δ total quantity⟯ The ⟮»average cost«⟯ of something is ⟮the ＿total cost＿⟯ ⟮divided by⟯ ⟮the number of goods produced.⟯  ### externalities  An »⟮externality⟯« is a ⟮＿cost＿⟯ or ⟮c_;benefit⟯ ⟮caused by a producer⟯ that is ⟮not incurred or received by that producer⟯ A ⟮»negative externality«⟯ is an ＿externality＿ that is ⟮a ＿cost＿⟯. A ⟮»positive externality«⟯ is an ＿externality＿ that is ⟮a benefit⟯.  ## markets  A »⟮market⟯« is ⟮a set of systems/institutions/procedures/relationships⟯ whereby ⟮business entities⟯ engage in ⟮exchange⟯.  ### market structure  »⟮Market structure⟯« is the way ⟮a ＿market＿⟯ can be in ⟮imperfect competition⟯.  #### integration  »⟮Horizontal integration⟯« is the process of ⟮one company⟯ ⟮controlling more of⟯ ⟮a specific part of the supply chain⟯ »⟮Vertical integration⟯« is the process of ⟮one company⟯ ⟮controlling more⟯ ⟮levels of the supply chain⟯  ## business entities  ### corporations  #### Fortune 500  The »⟮Fortune 500⟯« contains the ⟮500 largest⟯ ⟮US corporations⟯ by ⟮total revenue⟯  ### employees  #### employment  ##### remuneration  A »⟮salary buddy⟯« (newly coined concept by someone on twitter) is a person (presumably ⟮in the same profession⟯) with whom ⟮you regular exchange information on your remuneration⟯ to make sure that ⟮you're both getting fairly paid⟯  ## goods and services  ### goods vs services  »⟮Goods and services⟯« are ⟮consumed⟯ to ⟮provide ＿utility＿⟯. A »⟮good⟯« is ⟮a tangible item⟯ that ⟮provides ＿utility＿⟯. A »⟮service⟯« is ⟮an action⟯ that ⟮provides ＿utility＿⟯. ⟮＿Goods and services＿⟯ can also be seen as ⟮a continuum⟯.  ### utility  »⟮Utility⟯« is ⟮the happiness/benefit/value⟯ that ⟮a ＿consumer＿⟯ gets from ⟮a ＿good or service＿⟯. A »⟮consumer⟯« is ⟮a person or group⟯ that ⟮purchases or uses⟯ ⟮a ＿good or service＿⟯.  ### price  A »⟮price⟯« is ⟮the quantity of payment⟯ given ⟮by one party⟯ ⟮to another⟯ for ⟮a ＿good or service＿.⟯  #### asset price bubble  ⟮＿Economic bubbles＿⟯ are about ⟮asset prices⟯. In ⟮an »economic bubble«⟯, ⟮an asset price⟯ ⟮far exeeds⟯ ⟮it's 'real' value⟯. An ⟮＿economic bubble＿⟯ ⟮bursts⟯ when ⟮the asset price crashes.⟯ Both ⟮the growth⟯ and ⟮c_;subsequent decline⟯ in ⟮asset prices⟯ in ⟮c_;an ＿economic bubble＿⟯ is usually ⟮quite fast⟯.  ### goods  #### commodities  ⟮＿Commodity＿⟯ is a term with ⟮three competing definitions⟯:   table:name|field|definitio »⟮commodity⟯«|⟮economics⟯|⟮＿good＿ with full/high degree of ＿fungibility＿⟯, e.g. ⟮c+;s∞;wheat, petroleum, copper, rice, but not handmade bracelets⟯ »⟮commodity⟯«|⟮marxism⟯|⟮something with both ＿use value＿ and ＿exchange value＿⟯ »⟮commodity⟯«|⟮casual usage⟯|⟮any kind of ＿good＿⟯   »⟮commodification/commoditization⟯« may refer to ⟮any of the three definitions of commodity (economics, marxism, casual usage⟯)  #### fungibility  »⟮Fungibility⟯« is the property of a ＿good＿ meaning it is ⟮readily interchanged with others of its kind⟯ without ⟮that making much of a difference⟯. ⟮Money, natural resources of the same grade, stocks of the same company⟯ all are examples for things with a high degree of ⟮＿fungibility＿⟯.  #### distribution  ##### positional goods  a »⟮positional good⟯« is a ＿good＿ that is ⟮only valued⟯ by ⟮how it is distributed in a population⟯. ⟮＿Positional good＿⟯ is a term similar to ⟮status symbol.⟯ »⟮Conspicuous comsumption⟯« is consumption to ⟮enhance social status/prestige⟯, that is, consumption ⟮of ＿goods＿⟯ as ⟮＿positional goods＿⟯  #### durability  A ⟮durable/hard good⟯ is a ＿good＿ that ⟮yields ＿utility＿ over time rather than being completely consumed in one use⟯  Examples of ⟮＿durable goods＿⟯: ⟮a bicycle, washing machine, or ring⟯ A »⟮non-durable/soft good⟯« may be defined (more narrowly) as a ＿good＿ that ⟮is consumed in one use⟯  Examples of ⟮＿non-durable goods＿⟯ (narrow): ⟮food, drinks, tissues⟯ A »⟮non-durable/soft good⟯« may be defined (more broeadly) as a ＿good＿ that ⟮has a lifespan of less than three years⟯  Examples of ⟮＿non-durable goods＿⟯ (broad): ⟮cosmetics, medication, clothing⟯ ⟮＿Durable goods＿⟯ are also called ⟮「hard goods」⟯. ⟮＿Nondurable goods＿⟯ are also called ⟮「soft goods」⟯.  #### excludability and rivalrousness  While ⟮＿excludability＿⟯ and ⟮c_;＿rivalrousness＿⟯ are often treated as ⟮discrete values⟯, they in fact ⟮c_;exist on a scale⟯.  ##### excludability  ⟮excludability⟯ is the property of some ＿goods or services＿ to ⟮be able to limit its use to certain people⟯.  Examples of ⟮＿excludable＿⟯ ＿goods or services＿: ⟮cinemas, food⟯ Examples of ⟮＿non-excludable＿⟯ ＿goods or services＿: ⟮air, public roads⟯.  ##### rivalrousness  »⟮Rivalrousness⟯« is the behavior of ＿goods or services＿ in the face of ⟮consumption by another actor⟯. ⟮rivalrous, non-rivalrous or anti-rivalrous⟯ may also be ⟮shortened to rival, non-rival or anti-rival⟯. A ＿good or service＿ is »⟮rivalrous⟯« if consumption by another ⟮prevents consumption by the original party⟯ Examples for ⟮＿rivalrous＿⟯ goods or services include ⟮an item of food, a hammer, a domain name⟯. A ＿good or service＿ is »⟮non-rivalrous⟯« if consumption by another ⟮induces no additional cost⟯ Examples for ⟮＿non-rivalrous＿⟯ goods or services ⟮a television broadcast, a scenic view, clean air⟯. A ＿good or srvice＿ is »⟮anti-rivalrous⟯« if consumption by another ⟮provides benefits to other consumers⟯, generally via ⟮＿network effects＿⟯. Examples of ⟮＿anti-rivalrous＿⟯ goods or services include ⟮FOSS software, social media, a specific language⟯  ###### network effects  A »⟮network effect⟯« is when ⟮the value of a good/service⟯ ⟮increases with the amount of users⟯.  Examples of ⟮＿network effects＿⟯: ⟮Social networks, the phone or the internet⟯. The ⟮precise value⟯ of a ⟮＿network effect＿⟯ is often stated in terms of ⟮＿Metcalfe's law＿⟯ »⟮Metcalfe's law⟯«: ⟮value of network⟯ = ⟮(amount of users)⎴2⎴⟯.  ⟮＿Metcalfe's law＿⟯ law has since recieved some ⟮empirical validation⟯ for e.g. ⟮facebook, bitcoin⟯  ##### goods with properties  table:|excludable|non-excludable rivalrous|c+;s∞;private good⟯|⟮c+;s∞;common(-pool) good⟯ non-rivalrous|⟮c+;s∞;club/toll good⟯|⟮c+;s∞;public good⟯  ###### common pool resources  A »⟮common-pool resource⟯« is a good or service that is ⟮＿non-excludable＿⟯ and ⟮＿rivalrous＿⟯ Examples of ⟮＿common-pool resources＿⟯: ⟮pasture⟯. A ⟮＿common-pool resource＿⟯ may be subject to ⟮the ＿tragedy of the commons＿⟯ (however, not necessarily)  ####### tragedy of the commons  In ⟮»the tragedy of the commons«⟯, ⟮any individual⟯ has ⟮an incentive to⟯ (over)exploit the common-pool resource. In the ⟮＿tragedy of the commons＿⟯, the common-pool resource can't easily ⟮be prevented from overexploitation⟯ since it's ⟮some degree of non-excludable⟯. In ⟮the ＿tragedy of the commons⟯＿, ⟮exploitation is problematic⟯ since ⟮the common-pool resource is rivalrous⟯. In ⟮the ＿tragedy of the commons＿⟯, the common-pool resource is ⟮depleted⟯ ⟮due to the overexploitation. As proven by ⟮Elinor Ostrom⟯ in the work that won her ⟮the 2009 economics nobel prize⟯, ⟮commons/common-pool resources⟯ can ⟮effectively be managed by their communities⟯ if ⟮certain rules/principles are followed⟯, preventing ⟮the tragedy of the commons⟯  ###### public goods  »⟮public good⟯« is a good or service that is ⟮＿non-excludable＿⟯ and ⟮＿non-rivalrous＿⟯ Examples of ⟮＿public goods＿⟯ are ⟮National security, lighthouses, knowledge⟯ ⟮＿public goods＿⟯ are subject to ⟮＿free rider problems＿⟯  ####### free rider problem  »⟮Free riders⟯« are people who ⟮use a good or service⟯ but ⟮don't adequately contribute to the cost of its production.⟯ In »⟮free rider problems⟯«, ⟮＿free riders＿⟯ result in ⟮the good being under-produced or overused and degraded⟯. Examples of public goods subject to ⟮＿free rider problems＿⟯: ⟮Herd immunity, grades of group-graded projects⟯  ###### excludable goods  A ⟮»club good«⟯ is a good or service that is ⟮＿excludable＿⟯ and ⟮＿non-rivalrous＿⟯ Example for ⟮＿club goods＿⟯: ⟮toll roads⟯ A ⟮»private good«⟯ is a good or service that is ⟮＿excludable＿⟯ and ⟮＿rivalrous＿⟯ Example for ⟮＿private goods＿⟯: ⟮cheese⟯  ## assumptions about behavior   ### behavioral economics  »⟮Behavioral economics⟯« studies the effects of ⟮psychological, cognitive, emotional, cultural and social factors⟯ on ⟮decisions⟯. In particular, ⟮＿behavioral economics＿⟯ studies how these factors make decisions ⟮depart from⟯ those ⟮predicted by classical economics/rational choice theory⟯.  #### econs  »⟮Econ⟯« is a term from ⟮＿behavioral economics＿⟯ which describes ⟮the beings⟯ that ⟮classical economics/rational choice⟯ ends up describing ⟮＿Econ＿s⟯ are ⟮contrasted with⟯ ⟮actual humans⟯ An ⟮＿econ＿⟯ would always ⟮make the best decision given a set of alternatives⟯ and thus ⟮never fall prey to biases⟯.  #### nudge theory  »⟮Nudge theory⟯« proposes using ⟮＿nudges＿⟯ to ⟮influence the decision-making⟯ of groups/individuals to ⟮increase compliance with a goal⟯. A »⟮nudge⟯« is a ⟮minor, non-disruptive⟯ ⟮intervention⟯ (especially one that ⟮does not forbid or impose harsh sanctions⟯) that produces ⟮predictable changes in people's behavior⟯. A ⟮fly at the bottom of an urinal⟯ to ⟮improve aim and reduce cleaning costs⟯ is a prime example of a ⟮＿nudge＿⟯.  #### bias  »⟮Bias⟯« is the ⟮inclination toward⟯ or ⟮c_;weighting of⟯ something in a way that is ⟮unfair⟯ and/or ⟮c_;disproportionate/wrong⟯.  ⟮»cognitive bias«⟯ is ⟮the disproportionate weighting⟯ / irrelevant inclusion⟯ of factors in a way that ⟮the resulting judgement departs from rationality⟯ ⟮bias⟯ in ⟮statistics⟯ is the tendency of ⟮a ＿statistic＿ (a truth about a sample), more specifically an ＿estimator＿ ⟯ to ⟮misestimate⟯ a ⟮＿parameter＿ (a truth about the population)⟯ ⟮»implicit bias«⟯ are ⟮pre-reflective (or impossible-to-reflect-away) attitudes⟯ about ⟮a social group⟯  ##### cognitive bias  ###### status quo bias  ⟮»Status quo bias«⟯ is a form of ⟮＿cognitive bias＿⟯ towards ⟮The current state of affairs⟯   ###### halo effect  The »⟮halo effect⟯« is the ⟮＿cognitive bias＿⟯ where ⟮positive impressions of something in one area⟯  ⟮positively influences⟯ ⟮one's opinion about that thing in a different (generally unrelated) area⟯  ###### magical thinking  ⟮»magical thinking«⟯ is the ⟮＿cognitive bias＿⟯ that posits ⟮that two events are causally connected⟯, ⟮even though there is no plausible causal link⟯. An example of ⟮＿magical thinking＿⟯ would be ⟮Knocking on wood will prevent misfortune.⟯  ⟮Magical thinking⟯ is often ⟮a symptom of OCD⟯ (however, ⟮the cause of most magical thinking⟯ in the world is ⟮not OCD⟯)  ###### mean world syndrome  »⟮Mean world syndrome⟯« is a ⟮＿cognitive bias＿⟯ wherein people  ⟮not particularly in danger of violence⟯  perceive the world ⟮to be more dangerous than it actually is⟯, due to ⟮long-term exposure to violence-related content on mass media⟯.  ###### decoy effect  An option C is »⟮asymmetrical dominated⟯« when it is ⟮inferior in all respects⟯ to ⟮one option A⟯ and a⟮ mix of inferior and superior⟯ to ⟮another option B⟯. In the »⟮decoy effect⟯«, there are ⟮three options A, B, and C⟯, where C is ⟮＿assymerically dominated＿⟯. In the ⟮＿decoy effect＿⟯, the »⟮decoy⟯« is the one that ⟮is ＿asymetrically dominated＿⟯. In the ⟮＿decoy effect＿⟯, people ⟮will choose⟯ ⟮the dominating option A⟯ ⟮more⟯ than ⟮if the decoy C was not present⟯.  ##### statistical bias  ###### selection bias  »⟮Selection bias⟯« is the bias ⟮where the ＿estimator＿ misestimates the ＿parameter＿⟯ due to ⟮problems in the selection of a sample⟯.  ####### WEIRD  ⟮＿WEIRD＿⟯ is short for ⟮western⟯, ⟮educated⟯, ⟮industrialized⟯, ⟮rich⟯, and ⟮democratic⟯.  ⟮»WEIRD«⟯ is ⟮the set of traits⟯ which describes ⟮more than 90%⟯ of ⟮study participants⟯, especially in ⟮psychology⟯. ⟮＿WEIRD＿⟯ is ⟮a ＿selection bias＿⟯.  #### unintended consequences  ##### godharts law  flex-container:✫https://miro.medium.com/max/1400/0*u1dfHFPj2LZ41cAL.jpg✫  »⟮Goodhart’s Law⟯« is expressed simply as: “⟮When a measure becomes a target⟯, ⟮it ceases to be a good measure.⟯” ⟮＿Goodhart's law＿⟯ means that ⟮when we set one specific goal⟯, people will tend to ⟮optimize for that objective⟯ ⟮regardless of the consequences⟯.  ##### inefficiency  ###### parkinson's law  ⟮»Parkinson's law«⟯ is the idea that ""⟮work expands so as to fill the time available for its completion.⟯""  Over the times, ⟮corollaries⟯ to ⟮＿parkinson's law＿⟯ such as ""Data ⟮expands to fill the space available⟯"" have also been proposed.   ### rational choice theory  ⟮»Rational choice theory«⟯ is the ⟮framework⟯ that arises from the assumption that ⟮an individual will⟯ ⟮perform a cost-benefit analysis (e.g. use an utility maximization function)⟯ ⟮to choose an action⟯.   #### whatever markets  the idea of »⟮x markets⟯« involves ⟮seeing x⟯ ⟮through the lens/metaphor of a capitalist market⟯, most commonly one based on ⟮rational choice theory.⟯  e.g. religious market, dating market  ## misc  ### SKUs  A »⟮SKU⟯« is a ⟮＿unique identifier＿⟯ for a ⟮distinct salable item⟯. ⟮＿SKU＿s⟯ have ⟮no specification or standard⟯, they are ⟮arbitrarily specified by the seller.⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}{{c209::}}{{c210::}}{{c211::}}{{c212::}}{{c213::}}{{c214::}}{{c215::}}{{c216::}}{{c217::}}{{c218::}}{{c219::}}{{c220::}}{{c221::}}{{c222::}}{{c223::}}{{c224::}}{{c225::}}{{c226::}}{{c227::}}{{c228::}}{{c229::}}{{c230::}}{{c231::}}{{c232::}}{{c233::}}{{c234::}}{{c235::}}{{c236::}}{{c237::}}{{c238::}}{{c239::}}{{c240::}}{{c241::}}{{c242::}}{{c243::}}{{c244::}}{{c245::}}{{c246::}}{{c247::}}{{c248::}}{{c249::}}{{c250::}}{{c251::}}{{c252::}}{{c253::}}{{c254::}}{{c255::}}{{c256::}}{{c257::}}{{c258::}}{{c259::}}{{c260::}}{{c261::}}{{c262::}}{{c263::}}{{c264::}}{{c265::}}{{c266::}}{{c267::}}{{c268::}}{{c269::}}{{c270::}}{{c271::}}{{c272::}}{{c273::}}{{c274::}}{{c275::}}{{c276::}}{{c277::}}{{c278::}}{{c279::}}{{c280::}}{{c281::}}{{c282::}}{{c283::}}{{c284::}}{{c285::}}{{c286::}}{{c287::}}{{c288::}}{{c289::}}{{c290::}}{{c291::}}{{c292::}}{{c293::}}{{c294::}}{{c295::}}{{c296::}}{{c297::}}{{c298::}}{{c299::}}{{c300::}}{{c301::}}{{c302::}}{{c303::}}{{c304::}}{{c305::}}{{c306::}}{{c307::}}{{c308::}}{{c309::}}{{c310::}}{{c311::}}{{c312::}}{{c313::}}{{c314::}}{{c315::}}{{c316::}}{{c317::}}{{c318::}}{{c319::}}{{c320::}}{{c321::}}{{c322::}}{{c323::}}{{c324::}}{{c325::}}{{c326::}}{{c327::}}{{c328::}}{{c329::}}{{c330::}}{{c331::}}{{c332::}}{{c333::}}{{c334::}}{{c335::}}{{c336::}}{{c337::}}{{c338::}}{{c339::}}{{c340::}}{{c341::}}{{c342::}}{{c343::}}{{c344::}}{{c345::}}{{c346::}}{{c347::}}{{c348::}}{{c349::}}{{c350::}}{{c351::}}{{c352::}}{{c353::}}{{c354::}}{{c355::}}{{c356::}}{{c357::}}{{c358::}}{{c359::}}{{c360::}}{{c361::}}{{c362::}}{{c363::}}{{c364::}}{{c365::}}{{c366::}}{{c367::}}{{c368::}}{{c369::}}{{c370::}}{{c371::}}{{c372::}}{{c373::}}{{c374::}}{{c375::}}{{c376::}}{{c377::}}{{c378::}}{{c379::}}{{c380::}}{{c381::}}{{c382::}}{{c383::}}{{c384::}}{{c385::}}{{c386::}}{{c387::}}{{c388::}}{{c389::}}{{c390::}}{{c391::}}{{c392::}}{{c393::}}{{c394::}}{{c395::}}{{c396::}}{{c397::}}{{c398::}}{{c399::}}{{c400::}}</span>"	misc::econ
"# macroeconomics  »⟮Macroeconomics⟯« is the study of ⟮entire economies⟯ (most often of ⟮nation-states⟯).  ## economies  ### economic sectors  #### three-sector model  The »⟮three-sector model«⟯ ⟮divides economic activity⟯ into ⟮three sectors⟯. The three sectors of the ⟮＿three sector model＿⟯ are ⟮primary⟯, ⟮c_;secondary⟯, and ⟮c_;tertiary⟯ According to ⟮the three-sector model⟯ of economics, economies develop ⟮Agrarian⟯ → ⟮c_;Industrial⟯ → ⟮c_;Postindustrial⟯  ##### the sectors  table:sector|consists of ⟮Primary sector⟯|⟮Resource extraction = extraction of raw materials⟯ ⟮Secondary sector⟯|⟮c+;Manufacturing = Raw materials → finished goods⟯ ⟮Tertiary sector⟯|⟮Production of services⟯ ⟮Quarternar sector⟯|⟮Production of knowledge⟯|not part of official model  ##### societies and sectors  table:characteristic|society ⟮A society dominated in economic output by the primary sector⟯|⟮Pre-industrial/agrarian (more rarely agricultural) society⟯ ⟮A society dominated in economic output by the (primary sector and) secondary sector⟯|⟮Industrial society⟯ ⟮A society dominated in economic output by the tertiary sector⟯|⟮Post-industrial society⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}</span>"	misc::econ
"# applied economics  ## real estate  ### condominium  A »⟮condominium⟯« is a ⟮building⟯ where ⟮each unit⟯ is ⟮owned spearately⟯, and ⟮c-;the grounds/structure⟯ are ⟮owned jointly⟯  ⟮＿Condominium⟯＿ may also refer to ⟮a unit in a condominium⟯. ⟮＿Condominium＿⟯ is often shortened to ⟮「condo」⟯  ## agricultural  ### crops  A »⟮crop⟯« is a plant that is ⟮deliberately⟯ grown to be ⟮harvested⟯ for ⟮human use⟯. ⟮＿Crops＿⟯ may be ⟮＿cash crops＿⟯ or ⟮＿subsistence crops＿⟯  #### cash crops  ⟮a »cash crop«⟯ is a ＿crop＿ that is ⟮grown for sale → profit⟯ ⟮＿Cash crop＿⟯ are sometimes also called ⟮「profit crop」⟯.  ## related concerns  ### law  In law, the ⟮»disposition«⟯ of a case is ⟮its final settlement/decision⟯   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}</span>"	misc::econ
"# political spectrum  ## overton window  flex-container:✫sm_paste-d320cd7f7b28b6755889aacc46fa08635d6a2262.jpg✫   »⟮The overton window⟯« is the concept that there is ⟮a range of ideas/policies⟯ that are ⟮acceptable⟯ at ⟮any given time⟯, which then ⟮determines the acceptability/radicalness of other ideas⟯ ⟮in relation to it⟯.  In the ⟮＿overton window＿⟯ cocnept, everything ⟮inside the window⟯ is considered to be ⟮acceptable/reasonable/sensible⟯  In the ⟮＿overton window＿⟯ concept, everything ⟮outside the window⟯ is considered to be ⟮radical/unthinkable⟯  ⟮Introducing radical ideas⟯ ⟮shifts the overton windon⟯ ⟮in that direction⟯.  To make something ⟮viable/actual policy⟯, first ⟮the overton window⟯ needs to be ⟮shifted in that direction.⟯   ## horseshoe theory  flex-container:✫polspechorse.svg✫  »⟮horseshoe theory⟯« claims that the ⟮extreme left⟯ and the ⟮extreme right⟯ are ⟮closer to each other than either is to the political center.⟯   ⟮＿Horseshoe theory＿⟯ is probably mostly ridiculous, since it's generally ⟮centrists⟯ who ⟮easily become swayed to support the rise of fascism⟯   # international relations  ## diplomacy  ### checkbook diplomacy  »⟮Checkbook diplomacy⟯« is ⟮using economic aid and investment⟯ for ⟮diplomatic favor⟯.  ## irredentism ＆ revanchism  ⟮＿Revanchism＿⟯ and ⟮c_;＿irredentism＿⟯ are both about ⟮reclaiming (or supposedly reclaiming)⟯ ⟮territory⟯. ⟮»Irredentism«⟯ is claiming territory based on ⟮ethno-historico-nationalist⟯ claims, especially that ⟮the territory is 'properly' part of the nation⟯. »⟮Revanchism⟯« is claiming territory ⟮lost to another⟯ due to ⟮past events⟯.  An ⟮＿irredentist＿⟯ claim is often expressed as a claim for ⟮Greater X (Greater Serbia etc.)⟯  ### irredentist claims  France ⟮claiming alsace-lorraine/wanting it back⟯ was ⟮both a ＿irredentist＿ and a ＿revanchist⟯＿ claim.  the ⟮Megali Idea (Great Idea⟯) was an ＿⟮irredentist＿ (though probably not revanchist)⟯ claim by ⟮greece⟯  The term ⟮＿irredentism＿⟯ comes from ⟮italia irredenta⟯. ⟮Italia irredenta⟯ was ⟮＿irredentism＿⟯ related ⟮to italians in dalmatia, corsica, etc.⟯ The etymological roots of ⟮＿irredentism＿⟯ is that the territory is ⟮not redeemed⟯   # political power  ## political influence  ### -industrial complex  »⟮x-industrial complex⟯« is a ⟮snowclone⟯ attributing ⟮bad effects⟯ to ⟮the entrenched political influence⟯ of ⟮the econmic interests of x⟯.  #### !various -industrial complexes  table:name|due to the political influence of economic interests related to ⟮military⟯|⟮defense industry⟯ ⟮prison⟯|⟮for-profit prisons⟯  ## sovereignty  ### statism  »⟮Statism⟯« is the idea that having ⟮political authority⟯ ⟮rest in the state⟯ is ⟮in some way legitimate⟯. ⟮＿Statism＿⟯ in a weak sense is the political authority of the state is ⟮legimate to some degree⟯. ⟮＿Statism＿⟯ in a strong sense is the political authority of the state is ⟮the best place for poltical authority to be⟯.  ## transfer of power  ### elections  #### electoral district  ##### gerrymandering  »⟮Gerrymandering⟯« is ⟮drawing the borders of electoral districts⟯ so as to ⟮favor a particular party or group⟯   # political communication  ## medium  ### pamphlet war  A »⟮pamphlet⟯« is a ⟮short⟯ ⟮book/printed work⟯, often un⟮bound⟯, generally ⟮political⟯ in nature   A »⟮Pamphlet war⟯« was a ⟮protracted argument or discussion⟯ through ⟮printed media⟯, especially via ⟮pamphlets⟯ ⟮＿Pamphlet wars＿⟯ were common between the time ⟮the printing press became common⟯, and the ⟮beginning of the 1800s⟯   ## structure  flex-container:✫sm_2021-06-27--09-51-54-screenshot.jpg✫   A »⟮conversion⟯« is ⟮someone doing something⟯ defined as ⟮the intended result⟯ of ⟮an ad or similar⟯ . ⟮A purchase, a click on a certain thing, subscribing to a newsletter⟯ might all be ⟮＿conversions＿⟯  The »⟮conversion rate⟯« measures ⟮conversions⟯ per ⟮site visitor (or similar)⟯ A »⟮sales/conversion funnel⟯« is the process where you repeatedly ⟮reduce the users options⟯ until ⟮a conversion⟯.  A »⟮call to action (CTA)⟯« is something that is ⟮designed to⟯ ⟮prompt a move to the next step of a ＿sales/conversion funnel＿ (or an outright ＿conversion＿)⟯.  For it to be effective, ⟮the CTA⟯ should be the thing with ⟮the most visual focus⟯.  In web design, ⟮a ＿call to action＿⟯ is most often ⟮some kind of button⟯.   ## manner  ### astroturfing  »⟮Astroturfing⟯« is the practice of making ⟮advertisment of a product or message⟯ appear as though ⟮it originates from and is supported by grassroots participants⟯.   ### brigading  »⟮Brigading⟯« is when ⟮a large number of users⟯ ⟮coordinate⟯ to ⟮do a publically visible action⟯. Examples of ⟮＿brigading＿⟯ might be to ⟮give a rating to something⟯, or ⟮to vote in an online poll,⟯ or similar.  The goal of ＿⟮brigading＿⟯ is often either ⟮to harm the thing in question⟯, or ⟮to give the idea of the genuine opinion of something being different than it actually is⟯.   ### decieving  #### sockpuppet  Originally ⟮＿sockpupped＿ ⟯referred to an account used to ⟮talk about or to oneself⟯ while ⟮pretending to be another person⟯. Then ⟮＿sockpuppet＿⟯ expanded to ⟮all uses of a second account⟯ ⟮pretending to be another person⟯. Today, a »⟮sockpuppet⟯« is ⟮an alternative account⟯ used to ⟮decieve or mislead in some way⟯.  ## message  ### misleading, hiding, deciebing  #### dogwhistle  A »⟮dog whistle⟯« as a physical thing is ⟮a whistle that can be heard by dogs but not humans⟯.  By extension, a »⟮dog whistle⟯« in politics is (the use of) ⟮coded language⟯ which ⟮sounds innocent to most people⟯ (or ⟮at least allows plausible deniability⟯) but ⟮is meant to communicate a specific thing to an intended audience⟯.  Examples for ⟮＿dog whistles＿⟯ are ⟮""international bankers""⟯ to mean ⟮jews⟯, or ⟮c-;states' rights⟯ as code for ⟮segregation/racism/pro-slavery⟯   #### weasel words  A »⟮weasel word/phrase⟯« is a word or phrase used to ⟮create the impression⟯ that ⟮a strong claim has been made⟯, when ⟮c-;in fact⟯ ⟮only a vague and thus weak claim has been made⟯. Most commonly ⟮＿weasel words/phrases＿⟯ are created via ⟮vague or weakening quantifiers⟯, ⟮unclarity about referents⟯ or ⟮use of the passive voice⟯.  Examples of weasel words: - A growing body of evidence suggests (Unclarity about referents - what evidence?) - People are saying/Critics claim/... (Unclarity about referents - who?) - It is recommended that (Passive voice - who is recommending?) - [It is] officially known as (Passive voice - what is the official body here?) - Often, x may (Vague or weaking quantifier - in which circumstances?)  #### bothsidesism  »⟮Bothsidesing⟯« is a term where you ⟮present both sides of an argument with equal weight/fault⟯, eventhough ⟮one does actually merits more weight or has more fault⟯  ⟮＿Bothsidesing＿⟯ as a term is generally used as ⟮a criticsim⟯, especially ⟮of the media.⟯   #### washing  »⟮xwashing⟯« is a ⟮snowclone⟯ indicating ⟮manipulation of appearances/public opinion⟯ that ⟮a certain thing (mostly product)⟯ is ⟮x-supportive⟯ ⟮＿xwashing⟯＿ implies that ⟮the support for the issue symbolized by x⟯ is only ⟮surface-deep/calculated for profit⟯. examples of ⟮＿x-washing＿⟯: ⟮greenwashing (environmentalism), pinkwashing (LGBTQ)⟯ ⟮＿xwashing＿⟯ as a term stems from ⟮＿whitewashing＿⟯.  ##### whitewashing  »⟮whitewashing⟯« originally meant ⟮the application of whitewash (a lime and water mixture)⟯ to ⟮paint walls and fences bright white⟯. »⟮whitewashing⟯« was then extended to mean ⟮papering over unfavorable elements⟯. Finally, »⟮whitewashing⟯« has come to mean ⟮making something more palletable to white people⟯, esp. by ⟮casting POC as white people⟯.  ## freedom of speech  ### suppression of speech  #### impressumspflicht  An »⟮impressum⟯« is a section containing ⟮the contact information⟯ of ⟮the person responsible for the content.⟯  »⟮Impressumspflicht⟯« is ⟮the legal requirement⟯ for ⟮an impressum⟯. ⟮＿Impressumspflicht＿⟯ is generally only a thing in ⟮german-speaking countries⟯ The main law ⟮enforcing impressumspflicht⟯ in the internet is ⟮the Telemediengesetz⟯, if ⟮you are offering services⟯, also ⟮the Dienstleistungs-Informationspflichten-Verordnung⟯  An ⟮impressum⟯ must be ""⟮leicht erkennbar⟯, ⟮unmittelbar erreichbar⟯, ⟮ständig verfügbar⟯""  ^Historically, the German impressum requirement has its roots in the censorship laws of 19th century and earlier monarchies, and has been criticized as illiberal and contrary to the principle of free speech; in most other countries there is no comparable requirement.  #### chilling effect  A »⟮chilling effect⟯« is an effect that ⟮reduces or supresses⟯ ⟮certain actions⟯ by causing ⟮self-policing⟯.  ### paradox of tolerance  The »⟮paradox of tolerance⟯« states that ⟮if a society is tolerant without limit⟯, ⟮its ability to be tolerant⟯ is eventually ⟮seized or destroyed⟯ by ⟮the intolerant⟯. The ⟮＿paradox of tolerance＿⟯ was introduced by ⟮Karl Popper⟯ in ⟮a note ⟯to his ⟮1945⟯ 『the open society and its enemies』.  # political systems  ## types  ### monarchy  #### queens  Queens (and theoretically kings) may be ⟮＿queens/kings regnant＿⟯ or ⟮＿queens/kings consort＿⟯. »⟮Queens/kings regnant⟯« hold ⟮the power to govern the realm⟯.  »⟮Queens/kings consort⟯« hold ⟮no formal power, their title consisting merely in being married to the king/queen⟯.    <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}</span>"	misc::political-science
"# community  ## third place  The idea of a third place comes from first and second places. One's ⟮first place⟯ is one's ⟮home⟯. One's ⟮second place⟯ is one's ⟮workplace⟯.  A »⟮third place⟯« is ⟮the main place⟯ ⟮in a humans life⟯ outside of ⟮the first/second place⟯. The idea of ⟮third places⟯ was coined by ⟮Ray Oldenburg⟯. Ray Oldenburg argues that ⟮third places⟯ are ⟮important⟯ for ⟮individuals, communities and democractic/civic society.⟯  ### characteristics of a third place according to theorists  At least for regulars, ⟮＿third places＿⟯ are ⟮not particularly restricted in access⟯, nor do people have much ⟮obligation to be there⟯. ⟮＿Third places＿⟯ must feel ⟮warm, accomodating and accepting of different people⟯, with ⟮little distinction and snobbery⟯. ⟮＿Third places＿⟯ have ⟮a certain set of regulars⟯, though ⟮those are not necessarily the only people in the space⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}</span>"	misc::urban-studies
"# start to end  ## approaching  It is often said that you should ⟮approach and depart from the other persons skin⟯ for the ⟮massage (or other treatment)⟯ ⟮slowly⟯ The reason ⟮to approach/depart slowly⟯ for massage/physical treatment is said to be so they can ⟮get used to you coming / leaving⟯  # modalities  ## oil  ⟮Massage⟯ can be performed ⟮with or without⟯ ⟮oil⟯.  Using ⟮oil⟯ during a massage makes it ⟮glide more easily⟯ if you don't ⟮use oil⟯ during a massage ⟮quick / pressureful / both movements⟯ might ⟮irritate the skin⟯.⟯   # techniques  ## tapotement  flex-container:✫sm_closeup-female-therapist-striking-back-260nw-752265973.jpg✫⟯✫sm_paste-4f1df98c4d967c25dae794e311343511614ff90a.jpg✫✫sm_paste-95e0db190d40d6d11342f1c2c3afa7f36a7aab38.jpg✫✫sm_2021-06-23--02-10-23-screenshot.jpg✫   »⟮Tapotement⟯« is massage with about ⟮3-10 strokes per second⟯ performed ⟮rythmically⟯  For most forms of ⟮＿tapotement＿⟯, the ⟮wrist⟯ is ⟮loose⟯. What you do during ⟮tapotement⟯ depends on ⟮what variety you are using⟯   ### variants   table:Name of tapotement|Side of hand|the hand is... ⟮Pounding/beating/pumelling⟯|⟮ulnar⟯|⟮loose fist⟯ ⟮Hacking⟯|⟮ulnar⟯|⟮fairly straight⟯ ⟮Cupping⟯|⟮palmar⟯|⟮cupped/slightly gathered⟯  # concepts  ## trigger points and myofascial release  »⟮Trigger points⟯« are (at the very least) ⟮spots that feel painful⟯.  ⟮How much of a physiological reality⟯ ⟮＿trigger points＿⟯ have is ⟮a subject of ongoing controversy⟯ One of the main points of contention around ⟮＿trigger points＿⟯ is whether ⟮they are or are not nodules⟯⟯.  ⟮＿Trigger points＿⟯ may also be referred to as ⟮「muscle knots」⟯ ⟮hb;(however, ⟮they are definitley not knots in a muscle)⟯.  Often other things ⟮will be mistaken for⟯ ⟮＿trigger points＿⟯, such as ⟮tendons or tensed-up muscles⟯.  ⟮Myofascial release⟯ ≈ ⟮trigger point therapy⟯ »⟮Myofascial release/trigger point therapy⟯« is mainly concerned with ⟮＿trigger points＿⟯.   In ⟮＿myofascial release/TPT＿⟯, you ⟮never⟯ use ⟮lubricants⟯. In ⟮＿myofascial release/TPT＿⟯, you ⟮compress a ＿trigger point＿⟯ for ⟮typically a minute or a few minutes⟯.  ⟮＿Trigger points＿⟯ may ⟮twitch⟯ and ⟮refer pain⟯ when ⟮compressed⟯.  There is ⟮not much evidence⟯ for ⟮＿myofascial release/TPT＿⟯ ⟮providing any long-term medical benefits⟯, but ⟮it does feel quite good/acts as pain relief⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}</span>"	misc::massage
"# fiction  ## demons  ### concubi  »⟮concubi⟯« are ⟮demons⟯ that are ⟮very sexual⟯.  ⟮in/con/succubus⟯ all originate from the ⟮latin⟯ root ⟮cubare⟯, which means ⟮to lie down⟯.  ⟮in/succubus⟯ got ⟮gendered⟯ via ⟮the position the initial morpheme describes.⟯   #### types   table:gender|name|meaning of initial morpheme ⟮Male⟯|⟮Incubus⟯|⟮c+;s∞;In = on/in⟯ ⟮Female⟯|⟮Succubus⟯|⟮c+;s∞;Sub = under⟯  # safety  ## principles  ### BDSM  ⟮SSC⟯ is short for ⟮safe, sane and consensual⟯ ⟮SSC⟯ is the most well-known ⟮set of safety principles⟯ for ⟮BDSM⟯.  ⟮RACK⟯ is short for ⟮risk-aware consensual kink⟯ the alternative to ⟮SSC⟯ is ⟮RACK⟯  # sexual roles  ## mapping  Sexual roles exist on 5 distinctions: active/passive, penetrator/penetrated, having/surrendering power/control, giving/recieving pain, being more 'masculine'/'feminine'.   table:name|distinction ⟮top/bottom⟯|⟮active/passive⟯ ⟮top/bottom⟯|⟮penetrator/penetrated⟯ ⟮dom/sub⟯|⟮having/surrendering power/control⟯ ⟮sadist/masochist⟯|⟮giving/recieving pain⟯ ⟮masc/fem⟯|⟮being more 'masculine'/'feminine'⟯ (generally in ⟮gay⟯ contexts) ⟮butch/femme (or lipstick lesbian)⟯|⟮being more 'masculine'/'feminine'⟯ (generally in ⟮lesbian⟯ contexts)  ## attributes  Henceforth, I will ⟮abbreviate top/bottom, dom/sub, sadist/masochist, fem(me)/masc⟯ as »⟮TBDSSMFM⟯«. ⟮Any part of TBDSSMFM⟯ may be seen to have a certain ⟮＿scope＿⟯, ⟮＿duration＿⟯, and ⟮＿relation to the self＿⟯. A part of TBDSSMFM's »⟮scope⟯« may be ⟮limited to sex⟯, or ⟮c_;encompass a larger part of their life⟯. A part of TBDSSMFM's »⟮duration⟯« may be anywhere from ⟮a short while⟯ to ⟮c_;ones whole life⟯. A part of TBDSSMFM's »⟮relation to the self⟯« may be an ⟮identity⟯, ⟮a preference⟯, ⟮a role in the relationship⟯ or ⟮a role in a specific encounter/scene⟯ (or any combination). Any TBDSSMFM-part's ⟮relation to the self⟯ may be seen as ⟮chosen or inborn⟯.  ## changing  ⟮a switch⟯ is a ⟮person who will adopt either of the relevant binary roles of TBDSSMFM⟯. For ⟮penentration⟯, ⟮a versatile⟯ is ⟮a person who will adopt either of the roles⟯.  ## distinctness/superidentity  The ⟮distinction between the different parts of TBDSSMFM⟯ is ⟮most clear⟯ in ⟮the BDSM community⟯ the ⟮distinction between parts of TBDSSMFM⟯ ⟮may be more vague⟯ ⟮in other communities⟯, especially in ⟮queer and fandom communities⟯. As of 2021, ⟮all the TBDSSMFM identities⟯ are often ⟮conflated into a giant superidentity⟯,  ⟮The giant TBDSSMFM superidentity⟯ is most often just called ⟮top/bottom⟯ or ⟮masc(or butch)/femme⟯. ⟮The giant TBDSSMFM superidentity⟯ is also seen as having ⟮a scope⟯ of ⟮many/all aspects of ones life⟯. ⟮The giant TBDSSMFM superidentity⟯ is also seen as having ⟮a duration⟯ of ⟮one's whole life⟯. ⟮The giant TBDSSMFM superidentity⟯ is also seen as being an ⟮inborn⟯ ⟮identity⟯. ⟮The giant TBDSSMFM superidentity⟯ is basically like ⟮the hegemonic (= mainstream) idea of masculinity⟯. ⟮The giant TBDSSMFM superidentity being like hegemonic masculinity⟯ is also supported by the fact that ⟮people⟯ (or ⟮c_;fictional characters⟯) who ⟮subscribe to the superidentity⟯ also ⟮then engage in misogynist/sexist practices/beliefs/etc.⟯  ## details  often in ⟮dominance and submission⟯, the ⟮dominants⟯ ⟮name⟯, ⟮c_;pronouns⟯ or ⟮c_;the relevant letter⟯ will be ⟮capitalized⟯, while the ⟮c-2;submissives⟯ ⟮name⟯, ⟮c_;pronouns⟯ or ⟮c_;the relevant letter⟯ will be ⟮written in lower case⟯ A ⟮pillow princess⟯ is a ⟮lesbian⟯ who is ⟮very bottom,⟯ to the point of ⟮c_;not reciprocating⟯ a ⟮power bottom⟯ is most commonly ⟮just a misnomer for a dominant bottom⟯, but ⟮is also used for all kinds of things, including the absolute opposite⟯  ""⟮Topping from the bottom⟯"" using the ⟮literal sense⟯ ⟮doesn't make sense⟯. ""⟮Topping from the bottom⟯"" may refer to ""⟮being a dom and a bottom AT THE SAME TIME :OOOOOOOOOOO⟯"" or ""⟮Being a sub in theory but a dom in practice⟯"".  ""⟮Topping from the bottom⟯"" is also often just used for ""⟮My sub is doing something and ＊I don't like it＊⟯"" In general, as of 2021, it seems that more ""⟮masc⟯"" gay identities are ⟮more highly valued⟯ ⟮TBDSSMFM⟯ may be used as ⟮any of the 'big' word types (lexical categories), i.e. noun, verb, adjective, adverb, etc.⟯  # crushes  ## types  table:name|meaning »⟮Friend crush⟯«|⟮Wanting to be someone's friend very badly⟯ »⟮Smush⟯«|⟮Sexual crush⟯ »⟮Squish⟯«|⟮Non-romantic/platonic crush⟯ »⟮Swish⟯«|⟮Aesthetic crush⟯  # a-spec  terms ending »⟮-sexual⟯« refer to ⟮sexual attraction⟯ that is ⟮somehow different⟯ terms ending »⟮-romantic⟯« refer to ⟮romantic attraction⟯ that is ⟮somehow different⟯ terms ⟮beginning a- (»asexual«, »aromantic«)⟯ may either indicate ⟮a complete lack of the relevant attraction⟯, or ⟮being on the relevant (aromantic/asexual) spectrum⟯ The »⟮asexual/aromantic spectrum⟯« consists of identities that ⟮experience sexual/romantic attraction⟯ ⟮more similarly to⟯ ⟮asexual/aromantic⟯ ⟮c-;than⟯ to ⟮allosexual/alloromantic people⟯. terms ⟮beginning allo- (»allosexual«, »alloromantic«)⟯ indicate ⟮the presence of the relevant (sexual/romantic) attraction⟯ terms ⟮beginning grey- (»greysexual«, »greyromantic«)⟯ may inidcate ⟮the subset of the relevant spectrum that isn't fully a(sexual/romantic)⟯, or more specifically ⟮an identity between allo- and a-⟯, ⟮aromantic/asexual⟯ are often shortened to ⟮aro/ace⟯ ⟮a-spec⟯ = ⟮ace-spec + aro-spec⟯ ⟮»fictosexual/romantic«⟯ = ⟮sexual/romantic attraction⟯ to ⟮fictional characters⟯ ⟮exclusively⟯ or ⟮c_;differently to one's normal sexual/romantic attraction⟯.  ⟮»lithosexual/romantic«⟯ = ⟮sexual/romantic attraction⟯ ⟮only if not reciprocated⟯.   ## relationships  A »⟮queerplatonic relationship⟯« is one that is ⟮more intense and intimate⟯ than ⟮traditional/current understandings of friendship allows⟯, but ⟮different somehow from a traditional coupled relationship⟯. A ⟮＿queerplatonic relationship⟯＿ does not require ⟮the participants to be queer in the sense of sexuality⟯. ⟮People engaged in a ＿queerplatonic relationships＿⟯ are called »⟮zucchinis⟯«, the term was chosen ⟮arbitrarily⟯. ＞ ""Are you guys dating!?"" ""No, we're zucchinis.""  # monogamy and non-monogamy  ## the relationship escalator  The »⟮relationship escalator⟯« consists of ⟮a set of steps⟯ in ⟮a relationship⟯ that are claimed to constitute ⟮progress⟯.  As of 2021, mainstream society sees ⟮＿the relationship escalator＿⟯ as ⟮the essence of⟯ ⟮a romantic relationship⟯.  ""⟮Is this relationship going anywhere?⟯"" presupposes the idea of ⟮＿the relationship escalator＿⟯  ⟮Getting to know each other → dating → becoming a couple 'officially' → committing  ＆ future planning → merging lives → getting married → house, children etc.⟯ might be roughly the steps the west sees the ⟮＿relationship escalator＿⟯ consisting of   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}</span>"	misc::sexuality-&-attraction
"# perspectives  ## high modernism  ⟮High Modernism⟯ was coined by ⟮James C. Scott⟯ in ""⟮Seeing Like a State⟯"".  ⟮High Modernism⟯, is said to be ⟮a subperiod of⟯ ⟮modernity/modernism⟯ ⟮High Modernism⟯ is said to have lasted from ⟮the late 1950s⟯ to the ⟮c_;late 1970s⟯ ⟮High modernism⟯ is said to have been ⟮characterized by⟯ ⟮strong confidence⟯ in ⟮science⟯ and ⟮c_;technology⟯, The confidence of high modernism in science and technology was to the point of ⟮using science and technology⟯ to ⟮master⟯/⟮c_;shape⟯ ⟮society/humanity⟯ and ⟮c_;nature⟯  # sociocultural anthropology  »⟮Sociocultural anthropology⟯« is ⟮the combination of⟯ ⟮social anthropology and cultural anthropology⟯.  ## social institutions  ### religion  #### totem  ⟮A »totem«⟯ as an object is a ⟮thing⟯, ⟮being⟯, or ⟮symbol⟯ that ⟮serves as an emblem of a group of people.⟯ A totem may also be a clan whose kinship is defined in relation to a totem-as-object.  ## social relationships  ### employment  #### presenteeism  »⟮Presenteeism⟯« is commonly ⟮being at work although sick⟯  Hofbacher uses »⟮presenteeism⟯« in its more uncommon definition of ⟮presence at work qua presence at work (without economic benefit⟯)   #### boreout  »⟮Boreout⟯« is a term for the symptoms similar to ⟮burnout⟯ that are caused by ⟮lack of challenge⟯, ⟮c_;pointless work⟯, and ⟮c_;disinterest in work⟯  ### ethnicity  #### endo/exonyms  table:term|definition|example ⟮c+;s_+;endonym⟯|⟮c+;s_-;autonym⟯|⟮name used by a group named by the name⟯|⟮s_-;Deutsche, 日本人 (not: Germans, Japanese⟯) ⟮c+;s_+;exonym⟯|⟮c+;s_-;xenonym⟯|⟮name used by foreginers, not people belonging to the group named⟯|⟮s_-;Germans instead of Deutsche, Japanese instead of 日本人⟯  ### kinship  »⟮kinship⟯« is ⟮a web of social relationships⟯ which ⟮form an important part⟯ of the lives of ⟮all humans⟯ in ⟮all societies⟯. most commonly, ⟮＿kinship＿⟯ is said to be ⟮established by⟯ ⟮descent/'blood'⟯, ⟮marriage⟯, or ⟮socialization (most often adoption)⟯. The ⟮definition⟯ of ⟮kinship⟯ is ⟮hotly contested⟯ and ⟮c_;depends on the anthropological theory being used⟯. ⟮kinship relationships⟯ (not an official term) are ⟮the individual relationships⟯ that ⟮make up kinship⟯. ⟮kinship terminology⟯ is the terminology used to ⟮describe kinship relationships⟯  #### marriage  ##### choice of partner  ⟮Endogamy⟯|⟮The social norm/custom of⟯ ⟮marrying within one's social group (whatever we define this as)⟯ ⟮Exogamy⟯|⟮The social norm/custom of⟯ ⟮marrying outside of one's social group (whatever we define this as)⟯  ##### location of residence  Terms such as ⟮matri/uxori/patri/viri/neolocal⟯ describe ⟮where⟯ ⟮a newly married couple⟯ ⟮c-;resides⟯.   table:Name|Name (using marriage-related terms)|Description ⟮c+;s_+;Matrilocal⟯|⟮c+;s_-;Uxorilocal⟯|Newly married couple resides ⟮with or near⟯ ⟮the wifes parents⟯ ⟮c+;s_+;Patrilocal⟯|⟮c+;s_-;Virilocal⟯|Newly married couple resides ⟮with or near⟯ ⟮the wifes parents⟯ ⟮Neolocal⟯||Newly married couple resides ⟮apart from⟯ ⟮either family⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}</span>"	misc::anthropology
"# tools  ## GIS  ⟮GIS⟯ is short for ⟮geographic information system⟯. A ⟮GIS⟯ is ⟮software⟯ that ⟮handles/analyzes of geographic data digitally⟯   # branches  ⟮geography⟯ as a field is often divided into ⟮＿physical＿ and ＿human geography＿⟯, with ⟮＿integrated geography＿⟯ mediating.  ## physical geography  »⟮Physical geography⟯« is the ⟮branch of⟯ ⟮geography⟯ that deals with ⟮the natural environment.⟯  ### landform  A »⟮landform⟯« is ⟮a feature⟯ of ⟮the surface⟯ of ⟮a planet⟯. The »⟮topography⟯« of an area is ⟮the structure⟯ ⟮of landforms⟯ of that area.  ## integrated geography  »⟮Integrated geography⟯« is ⟮the branch⟯ ⟮of geography⟯ ⟮at the intersection between⟯ ⟮＿physical geography＿ and ＿human geography＿⟯.  ## human geography  »⟮Human geography⟯« is ⟮the branch⟯ ⟮of geography⟯ that deals with ⟮humans' relationships to their environment⟯.  ### political geography  »⟮Political geography⟯« is ⟮the branch⟯ ⟮of ＿human geography＿⟯ concerned with ⟮the political organization of space.⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>"	misc::geography
"# general phenomena  ## reactions  ### basic terminology  A »⟮reagent⟯« is a substance ⟮added⟯ ⟮to a system⟯ to ⟮cause a chemical reaction⟯. ⟮A »reactant«⟯ is ⟮a ＿reagent＿⟯ that ⟮is consumed⟯ ⟮in a chemical reaction⟯. »⟮Products⟯« are ⟮the things⟯ ⟮created in a chemical reaction⟯. The »⟮substrate⟯« is ⟮the medium in which⟯ ⟮a chemical reaction takes place⟯. The »⟮substrate⟯« is also ⟮the substance that is⟯ ⟮transformed in a reaction⟯. In biology, an ⟮»enzym substrate«⟯ is a ⟮＿substrate＿⟯ that is ⟮organic material⟯ »⟮Synthesis⟯« in chemistry is ⟮performing one or more chemical reactions⟯ with the aim of ⟮converting⟯ ⟮any number of ＿reagents/reactants＿⟯ into ⟮any number of ＿products＿⟯. In general, ⟮＿synthesis＿⟯ produces ⟮more complex compounds⟯ as ⟮＿products＿ (than its reagents/reactants⟯) »⟮Biosynthesis⟯« is ⟮»synthesis«⟯ ⟮within an organism⟯, using ⟮enzyms as catalysts⟯.  ## bonds  There are two general types of ⟮bonds⟯, ⟮intramolecular⟯ and ⟮intermolecular⟯.  ### intramolecular  #### covalent   A ⟮»covalent« bond⟯ is a ⟮intra-molecular bond⟯ that involves the ⟮sharing⟯ of ⟮electron pairs⟯ ⟮between atoms⟯.  # things  ## molecules  A »⟮molecule⟯« is a ⟮group of two or more⟯ ⟮atoms⟯ ⟮held together⟯ by ⟮intramolecular bonds⟯.  Sometimes the constraint is added to ⟮molecules⟯ that they must be ⟮electrically neutral⟯, to distinguish them from ⟮ions⟯  ### moiety  a »⟮moiety⟯« is ⟮a part of a ＿molecule＿⟯ that is ⟮given a name⟯ because it is ⟮identified as a part of other molecules as well⟯.  ### functional groups  a »⟮functional group⟯« is a part of a ⟮＿molecule＿⟯ that causes the ⟮molecule⟯'s ⟮characteristic chemical reactions⟯ The ⟮same⟯ ⟮＿functional group＿⟯ will undergo the ⟮same or similar⟯ ⟮chemical reactions⟯ regardless of ⟮the rest of the molecule's composition⟯.  ## atom  ### elements  #### groups  ##### noble gases  The ⟮noble gases⟯ are a group of elements whose ⟮outer shell of valence electrons⟯ is considered to be ⟮""full""⟯,  Because the ⟮noble gases'⟯⟮ outer shell of valence electrons is full⟯, they have little tendency to ⟮participate in chemical reactions⟯  ### electrons  #### shells  an ⟮»electron shell«⟯ may be thought of as ⟮an orbit⟯ of ⟮electrons⟯ ⟮c-1;around⟯ an atom's ⟮nucleus⟯. Each ⟮shell⟯ is composed of ⟮subshells⟯ Each ⟮subshell⟯ is composed of ⟮atomic orbitals⟯.   ##### shell numbers ↔ letters  table:Shell Number|Shell Letter ⟮1⟯|⟮K⟯ ⟮2⟯|⟮L⟯ ⟮3⟯|⟮M⟯ etc...|etc...  ##### electron contents per shell  The ⟮closer the shell to the nucleus⟯, the ⟮smaller its number / earlier to the alphabet its letter⟯ identifier the ⟮nth⟯ ⟮shell⟯ can in principle hold up to ⟮2(n⎴2⎴)⟯ ⟮electrons⟯.   table:Shell|Can hold this many electrons ⟮1 / K⟯|⟮2⟯ ⟮2 / L⟯|⟮8 (2 + 6)⟯ ⟮3 / M⟯|⟮18 (2 + 6 + 10)⟯ etc...|etc...  #### valence electrons  A ⟮valence electron⟯ is an electron ⟮in the outer shell of an atom⟯  ## more than one category  ### radicals  A ⟮free radical⟯ is often just called a ⟮radical⟯. A »⟮(free) radical⟯« is a(n) ⟮atom/molecule/ion⟯ that has ⟮an unpaired valence electron = unfilled valence shell⟯ ⟮Having an unpaired valence electron / unfilled valence shell⟯ makes a ⟮＿free radical＿⟯ ⟮highly reactive⟯.  ### ions  An ⟮ion⟯ is a ⟮particle, atom or molecule⟯ with a ⟮net electrical charge⟯. A ⟮cation⟯ is a ⟮positively⟯ charged ⟮ion⟯. A ⟮anion⟯ is a ⟮negatively⟯ charged ⟮ion⟯. ⟮cations/anions⟯ are charged by having ⟮less/more⟯ ⟮electrons⟯ ⟮c-;than⟯ ⟮protons⟯ Because of ⟮their opposite electric charges⟯, ⟮cations⟯ and ⟮c-;anions⟯ ⟮attract each other⟯ and readily form ⟮ionic compounds⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}</span>"	misc::chemistry
"# theories ＆ approaches  ## positivism  »⟮Positivism⟯« as ⟮a sociological theory⟯ holds that ⟮society is governed⟯ ⟮according to general laws⟯  # social models  ## Social-Ecological Models  ⟮»Social-ecolocgical models«⟯ ⟮separate⟯ ⟮things that can affect an individual⟯ ⟮c-;into categories⟯.  The categories that ⟮social-ecological models separate things into⟯ are ⟮not always identical, though some are common.⟯  ### !The categories that social-ecological models separate things   onion-box: ⟮c+;s∞;Societal (Policy) ⟯   ⟮c+;s∞;Community⟯      ⟮c+;s∞;Organizational (more frequently left out) ⟯       ⟮c+;s∞;Relationship⟯          ⟮c+;s∞;Individual⟯  # units  ## community  ### community of practice  ⟮a »community of practice«⟯ is ⟮a set of people⟯ who ⟮come together⟯ via ⟮mutual engagement⟯ ⟮in a common endeavor⟯  In ⟮their engagement in their endeavor⟯, what emerges ⟮in a ＿community of practice＿⟯ are ⟮Ways of doing things, ways of talking, beliefs, values, power relations - in short, practices⟯   # demographics  »⟮Demography⟯« is the statistical study of ⟮populations and poplulation change⟯   ## generations  table:Generation|Start|End|Nicknames ⟮Baby boomers⟯|⟮c+;s+;~1945⟯|⟮c+;s-;~1965⟯ ⟮Generation X⟯|⟮c+;s+;~1965⟯|⟮c+;s-;~1980⟯ ⟮Millenials⟯|⟮c+;s+;~1980⟯|⟮c+;s-;~1995⟯|⟮c+;s∞;Generation Y⟯ ⟮Generation Z⟯|⟮c+;s+;~1995⟯|⟮c+;s-;~2010⟯|⟮c+;s∞;Zoomers⟯ ⟮Generation α⟯|⟮c+;s+;~2010⟯|⟮c+;s-;???⟯  ## population pyramid  flex-container:✫sm_world_population_2017.jpg✫   A ⟮population pyramid⟯ indicates ⟮age brackets⟯ on ⟮the y axis⟯ a ⟮population pyramid⟯ indicates ⟮amount of pepople⟯ on ⟮the x axis⟯ A⟮ population pyramid⟯'s indication of population is generally ⟮split into sex⟯  ## birth rate/fertility  The ⟮different fertility rates are⟯ sometimes presented ⟮as-is (as a percentage)⟯, or ⟮multiplied by 1000 to ⟮present a number/index⟯   ### crude birth rate  What we often call ⟮birth rate⟯ is ⟮more properly⟯ called the ⟮＿crude birth rate＿⟯,  The birth rade is ⟮more properly called ＿crude birth rate＿⟯ because ⟮it isn't directly based on anything related to childbirth⟯  The »⟮crude birth rate⟯« is ⟮the number of live births⟯ ⟮per person⟯  To get ⟮the ＿crude birth rate＿⟯ in practice, we ⟮divide⟯ ⟮the number of live births⟯ ⟮c-;through⟯ ⟮the population size⟯  ### general fertility rate  The »⟮general fertility rate⟯« is ⟮the amount of live births⟯ ⟮per women aged 15 to 44 (women of childbearing age)⟯   ### ASFR  The »⟮age-specific fertility rate⟯« is ⟮the number of births⟯ ⟮to women in a given age group⟯ ⟮divided by the number of women in a given age group⟯  The ⟮ASFR⟯ is often ⟮grouped in groups of⟯ ⟮1⟯ or ⟮c_;5⟯ ⟮years⟯.  In plain language, the ⟮ASFR⟯ e.g. for ⟮age 21⟯ is ⟮the amount of children an average 21 y/o has in a year⟯   ### TFR  The ⟮TFR⟯ measures ⟮babies per woman (in her lifetime)⟯ (*)  Mathematically, the ⟮total fertility rate⟯ is ⟮the sum of all⟯ ⟮current age-specific fertility rates⟯  In plain language, the ⟮TFR⟯ is ⟮the sum of⟯ ⟮the amount of chilren⟯ ⟮a women will have⟯ ⟮in any given year of her life⟯  The thing the ⟮total fertility rate⟯ is ⟮trying to estimate⟯ is ⟮the amount of children a woman is expected to have in her lifetime (subject to some theoretical assumptions)⟯  #### caveats  The ⟮＿total fertility rate＿⟯ assumes that ⟮the woman will survive until the end of her reproductive life⟯ and that ⟮she will to experience the exact current age-specific fertility rates (ASFRs) through her lifetime⟯  If a ⟮woman dies before her reproductive period ends (lets say at 30),⟯ she ⟮will not impact ASFRs beyond 30⟯. This is not a problem until ⟮we add them together to the TFR⟯ - since we are using the ASFRs to ⟮estimate how many children a woman will have in her life⟯, ⟮the ASFRs⟯ ⟮should be impacted b⟯⟮y the woman who died before the end of the reproductive period (the dead women should count as 0⟯). Therefore, ⟮maternal mortality distorts the TFR⟯.   #### replacement rate  The »⟮replacement rate / replacement-level fertility⟯« is ⟮the TFR⟯ ⟮needed to sustain population levels⟯  »⟮Sub-replacement fertility⟯« is ⟮a TFR⟯ ⟮below replacement rate⟯. Beyond ⟮the distorting factors for the TFR⟯, ⟮the ＿replacement rate＿⟯ is additionally distorted by ⟮child mortality⟯.  ⟮The ＿replacement rate＿⟯ for countries ⟮with low child and maternal mortality⟯ is ⟮about 2.1⟯.   #### current TFRs  table:Country|TFR ⟮Japan⟯|⟮~1.4⟯ ⟮Korea⟯|⟮~0.9⟯  ## dependency  ### definition of dependent  In demographics/economics, a »⟮dependent⟯« is someone ⟮who relies on someone else for financial support.⟯ For statistical purposes, it is generally assumed that ⟮those aged 15-64⟯ are ⟮non-dependents⟯ For statistical purposes, it is generally assumed that ⟮those aged 0-14 and 65-⟯ are ⟮dependents⟯.  ### dependency ratio  The »⟮dependency ratio⟯« is the ratio of of ⟮dependents per non-dependent⟯. The ⟮dependency ratio⟯ is used as ⟮a proxy for⟯ ⟮pressure on the productive population⟯, A ⟮lower⟯ ⟮dependency ratio⟯ is generally better because it often results in ⟮economic growth⟯.  #### demographic dividend/burdern  A »⟮demographic dividend⟯« is when a ⟮change to a lower dependency ratio⟯ ⟮leads to economic growth⟯ Low dependency ratios (and thus demographic dividends) often happen when there is a ⟮high fertility rate⟯, resulting in ⟮a bunch of young people⟯, followed by ⟮a decrease in fertility⟯, and often ⟮augmented by an increase in life expectancy⟯. ⟮China's rapid economic growth⟯ is often explained via the ⟮demographic dividend⟯. in ⟮2010⟯ China had an unprecedented ⟮dependency ratio⟯ of ⟮35%⟯, at the a time where the world average was ⟮53%⟯. A »⟮demographic burden/tax⟯« is when a ⟮change to a higher dependency ratio⟯ ⟮leads to economic stagnation⟯ ⟮The age group responsible for a low dependency ratio⟯ ⟮aging out⟯ results in ⟮a sudden high dependency ratio⟯. ⟮Japan⟯ is the first country to really feel ⟮the demographic tax/burden⟯. ⟮Other countries⟯ such as ⟮c＿；china⟯ ⟮will soon begin feeling⟯ ⟮the demographic tax/burden⟯.  ## sex/gender  ### missing women  The term ⟮missing women⟯ was coined by ⟮Amartya Sen⟯. »⟮missing women⟯« is ⟮the shortfall⟯ in ⟮the number of women⟯ relative to ⟮c_;the expected number of women⟯ in ⟮a region or country⟯.  ⟮＿missing women＿⟯ are often measured/discovered through ⟮male-to-female sex ratios⟯, specifically via ⟮the deviance from⟯ the ⟮natural roughly 1:1 m:f ratio (in fact, in the west it is generally 0.98:1)⟯  ⟮Sen⟯ argued that there were about ⟮100 million⟯ ⟮＿missing women＿⟯ in ⟮Asia⟯.  The phenomenon of ⟮＿missing women＿⟯ and is theorized to be caused by ⟮sex-selective abortions⟯, ⟮female infanticide⟯, and ⟮inadequate healthcare and nutrition for female children⟯.  The fact of the existence of missing women is caused by ⟮sexism⟯, and may be seen as a pretty direct expression of ⟮their -value status.⟯   ## in ‹place›  ### japan  flex-container:✫821361.png✫  In japan, ⟮extramarital birth⟯ is ⟮extremely rare⟯  In japan, marriages as of 2020 occurr ⟮Less and later⟯    table:Year|Average age for marriage (Japan)|Average age for birth of first child (Japan) ⟮1990⟯|⟮c+;s3;26⟯|⟮c+;s2;27⟯ ⟮2008⟯|⟮c+;s6;30⟯|⟮c+;s5;30⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}</span>"	misc::sociology
"# sociolinguistics as a discipline  »⟮Socioloinguistics⟯« is the study of ⟮the interaction between⟯ ⟮society and language⟯. ⟮＿dialectology＿⟯ is ⟮a subfield of⟯ ⟮sociolinguistics⟯. »⟮Dialectology⟯« is the study of ⟮varieties⟯.  # variation  A »⟮variant⟯« is ⟮a different ＿lingueme＿⟯ expressing ⟮the same ＿sememe＿/＿pragmeme＿⟯.  A »⟮sociolinguistic variable⟯« is ⟮the set of⟯ ⟮＿variants＿⟯ that ⟮mean the same thing⟯. »⟮Variation⟯« is ⟮the fact of⟯ ⟮multiple variants existing (either in general, or for a specific situation)⟯ ⟮Exchanging⟯ ⟮a ＿variant＿⟯ ⟮c-;for another⟯ of ⟮the same ＿sociolinguistic variable⟯＿ ⟮changes⟯ ⟮the social meaning⟯, but ⟮c-;not⟯ ⟮the meaning meaning⟯.  ⟮variationist sociolinguistics⟯ is ⟮the subfield of⟯ ⟮sociolinguistics⟯ that ⟮studies sociolinguistiv variables specifically⟯.  # varieties  ⟮Lect⟯ = ⟮variety⟯ A »⟮variety⟯« is ⟮a version of⟯ ⟮a language⟯. A ⟮＿variety＿⟯ ⟮limits⟯ ⟮the ＿variants＿ of ＿sociolinguistic variables＿⟯. ^though it's not like any variant has exactly one variant for any sociolinguistic variable.  ## language  ⟮Language⟯ in common discourse means ⟮standard variety⟯. ⟮Language⟯ in sociolinguistics means something like ⟮set of all relevant varietie⟯s.  ## Languoid  »⟮Languoid⟯« is ⟮a cover term⟯ for ⟮language⟯ and ⟮＿variety＿⟯.  ## speech communities and varieties  A ⟮＿variety＿⟯ is generally spoken by ⟮a certain ＿speech community＿⟯. There are ⟮specific terms⟯ for ⟮＿varieties＿⟯ ⟮spoken by ＿certain speech communities＿⟯.   table:type of variety|spoken by speech community defined by »⟮register/style⟯«|⟮particular communicative setting⟯ »⟮ideolect⟯«|⟮a specific person⟯ »⟮sociolect⟯«|⟮a social group⟯ »⟮c+;s∞;us+3;regiolect⟯«, »⟮c+;s∞;us+2;geolect⟯«, »⟮c+;s∞;us+;topolect⟯«|⟮a specific area⟯ »⟮ethnolect⟯«|⟮ethnic group⟯   ⟮register⟯ and ⟮style⟯ are synonyms. Since ⟮＿registers/style＿⟯s are ⟮defined by a situation⟯, not ⟮c_;a specific group⟯, these are also known as ⟮functional varieties⟯.  ## specific varieties  ### slang, jargon, cant, argot ...  ⟮slang⟯, ⟮jargon⟯, ⟮cant⟯, and ⟮argots⟯ are all ⟮varieties⟯. ⟮slang, jargon, cant, and argots⟯ are all defined mainly by ⟮word choice⟯ ⟮＿variants＿⟯. ⟮The variants⟯ that make up ⟮a certain⟯ ⟮slang, jargon, cant or argot register⟯ are words that have in common that ⟮they are othwerise not in common usage⟯. It is hard to distinguish ⟮slang, jargon, argot, cant, etc.⟯ because they are ⟮often used interchangeably⟯ »⟮Slang⟯« is typically a ⟮＿register＿⟯ that is ⟮informal⟯ and used in ⟮an in-group setting⟯. »⟮Jargon⟯« is typically the ⟮＿register＿⟯ of ⟮a certain field⟯. ⟮Cant⟯ ≈ ⟮argot⟯ »⟮Cant/argot⟯« is ⟮＿jargon＿⟯ with the purpose to ⟮exclude or mislead people outside the field.⟯  ### AAVE  ⟮AAVE⟯ = ⟮African American Vernacular English⟯  # what is being varied?  ⟮Pretty much any feature⟯ can be ⟮＿varied＿⟯ to ⟮c_;create ＿variants＿⟯ of ⟮c_;a ＿sociolinguistic variable＿⟯.  ## pronunciation  ### accent  An »⟮accent⟯« is ⟮pronunciation⟯ ⟮as a ＿sociolinguistic variable＿⟯.  ## ways of speaking  ### sprechbund  A »⟮spr⁑e⁑chbund⟯« is a ⟮＿speech community＿⟯ which has ⟮a shared way of speaking⟯ ⟮going beyond language boundaries⟯ ⟮as a ＿variant＿⟯.  note that unlike a ⟮sprachbund⟯, a ⟮c_;spechbund⟯ doesn't have to be ⟮geographically contiguous⟯, and refers to ⟮speech communities⟯, not ⟮c_;languages⟯, and is generally not ⟮about vocabulary or grammar per se⟯, but ⟮c_;more about a more abstract manner⟯ A ⟮＿sprechbund＿⟯ might e.g. be ⟮hip-hop with the characteristics of rapping, rhyme, and human beatboxing⟯.  # variation in different situations  ## accomodation  Speech Acommodation Theory = Communication Accomodation Theory »⟮Speech/Communication Accommodation Theory⟯« studies ⟮＿acommodation＿⟯ and thus ⟮c_;＿convergence/divergence＿⟯. »⟮Accomodation⟯« is the process where ⟮participants⟯ ⟮change their way of speaking⟯ according to ⟮c-;the way of speaking⟯ of ⟮other participants in the conversation⟯ ⟮＿Acommodation＿ (CAT)⟯ may be ⟮＿convergence＿⟯ or ⟮c_;＿divergence＿⟯. »⟮divergence⟯« is ⟮＿accomodation＿⟯ by ⟮making your speech more ⁑dis⁑similar to the conversational partner's⟯ »⟮convergence⟯« is ⟮＿accomodation＿⟯ by ⟮making your speech more similar to the conversational partner's⟯  ## code switching  ⟮Code-switching⟯ = ⟮language alternation⟯ »whatever-switching« is ⟮changing between⟯ ⟮2+⟯ ⟮languoids⟯ ⟮in a single conversation⟯   table:-switching|changing between 2+... »⟮Code-switching⟯«|⟮any languoids⟯ »⟮Style-shifting⟯«|⟮＿styles/registers＿⟯  # which groups adopt the lect  ## speech community  A »⟮speech community⟯« is ⟮a group of people⟯ who ⟮share a ＿common languoid＿.⟯ The term »⟮speech community⟯« may more specifically used for ⟮a speech community (broad sense)⟯ whose memebers ⟮share a very specific lect⟯ A ⟮＿speech community＿⟯ may be ⟮＿focused＿⟯ or ⟮c_;＿diffuse＿⟯. A »⟮focused speech community⟯« is one where ⟮there is agreement⟯ about ⟮the shared languoid's features⟯ A »⟮diffuse speech community⟯« is one where ⟮there is less/little agreement⟯ about ⟮the shared languoid's features⟯ ⟮Each person⟯ belongs to ⟮many⟯ ⟮＿speech communities＿⟯.  ## diglossia   »⟮Diglossia⟯« is the situation where ⟮a speech community⟯ uses ⟮two (or more)⟯ ⟮＿languoids＿⟯ ⟮for separate purposes⟯. ⟮vernacular variety⟯ = ⟮L variety⟯ ⟮high/formal/literary variety⟯ = ⟮H variety⟯ For ⟮＿diglossia＿⟯ usually ⟮a L variety⟯ and ⟮a H variety⟯ exist   table:variety|used in|native speakers ⟮L⟯|⟮everyday situations⟯|⟮native speakers⟯ ⟮H⟯|⟮formal situations, literature⟯|⟮no native speakers⟯   ⟮　文語（ぶんご） (classical japanese)⟯ was ⟮a H variety⟯ during ⟮＿diglossia＿⟯.  # the sociolinguistic situation of certain groups  ## language and gender  ### history  The study of ⟮language and gender⟯ is said to ⟮have stared with⟯ 『⟮Language and Women's Place⟯』 『⟮Language and Women's Place⟯』 was written by ⟮Robin Lakoff⟯ in ⟮1973 or 1975, its unclear to me⟯. ⟮Robin Lakoff⟯ was ⟮married to⟯ ⟮the (arguably) more famous Lakoff (of Metaphors We Live By fame)⟯ ⟮Deborah Tannen⟯ was ⟮a student of⟯ ⟮Robin Lakoff⟯  ⟮Deborah Tannen⟯ wrote 『⟮You Just Don't Understand⟯』 in ⟮1990⟯. 『⟮You Just Don't Understand⟯』 ⟮initiated the difference approach⟯ to language and gender.  ### approaches  There are broadly ⟮three⟯ approaches to ⟮explain differences between⟯ ⟮male and female language⟯. ⟮The three approaches to explain the differences between male and female language⟯ are the ⟮＿dominance＿⟯, ⟮＿deficit＿⟯ and ⟮＿difference＿⟯ approach. The ⟮＿deficit＿⟯ and ⟮c_;＿dominance＿⟯ approach ⟮have in common⟯ that they ⟮assert that women's language is weaker than men's language⟯. The »⟮deficit approach⟯« argues that ⟮women's language being weaker⟯ ⟮causes/perpetuates⟯ ⟮women's oppression⟯. The »⟮dominance approach⟯« argues that ⟮women's language being weaker⟯ ⟮is a reflection of⟯ ⟮women's oppression⟯. The »⟮difference approach⟯« asserts that ⟮women's language⟯ ⟮is not weaker or worse⟯, instead ⟮c_;just different from⟯ ⟮c-;men's language⟯.  ### gender in words  ⟮Words may have gender⟯ in roughly ⟮four⟯ ways. ⟮The four ways in which words may have gender⟯ are ⟮lexical gender⟯, ⟮grammatical gender⟯, ⟮referential gender⟯, ⟮social gender⟯. ⟮lexical, grammatical, referential and social gender⟯ may ⟮contradict⟯ each other.  »⟮lexical gender⟯« is gender ⟮as inherent in the reference of words⟯. ⟮＿lexical gender＿⟯ is ⟮most common⟯ in ⟮kinship terms⟯ Examples for ⟮＿lexically gendered＿⟯ words: ⟮Mother, aunt, son, father⟯ »⟮social gender⟯« is words being gendered ⟮via their gender connotations⟯ Examples for ⟮＿social gendered＿⟯ words: ⟮surgeon, lawyer is pronominalized by he even when gender is unknown⟯ »⟮referential gender⟯« is words being gendered ⟮via the gender of their deictic referent⟯  #### Mädchen für alles  !If a male person is called a ""Mädchen für alles"", Mädchen has...   table:gender|value ⟮lexical gender⟯|⟮female (girl)⟯ ⟮grammatical gender⟯|⟮neuter (das Mädchen)⟯ ⟮referential gender⟯|⟮male (the deictic referent.)⟯  # how does variation interact with other forces?  ## standartization  ⟮Standard variety⟯ ≈ ⟮standard language⟯. !A »⟮standard variety⟯« is ⟮a certain ＿variety＿⟯ of a language with two properties: - !⟮standartized to a certain extent⟯ - !⟮thought to be/promoted as correct⟯  ### how many standard varieties?  »⟮Monocentric/pluricentric⟯« is about ⟮how many⟯ ⟮＿standard varieties＿⟯ ⟮a language has⟯   table:language|how many standard varieties ⟮monocentric language⟯|⟮1⟯ ⟮pluricentric language⟯|⟮&gt;1⟯   #### examples  table:centric|language I speak ⟮Monocentric language⟯|⟮Japanese⟯ ⟮Pluricentric language⟯|⟮English, German, Spanish ⟯   ⟮English⟯ is a ⟮pluricentric language⟯ since it ⟮has BE and AE as well as many other standard forms.⟯ Some of the the different ⟮standard varieties⟯ of german are ⟮Standard german german, standard swiss german, standard austrian german⟯  ### auto/heteronomity   ⟮＿auto/heteronomous＿⟯ is whether a languoid is ⟮considered to be a ＿variety＿⟯ of ⟮another ＿standard variety＿⟯.  »⟮heteronomous⟯« = ⟮c+;is a⟯ ⟮c+;variety of another standard variety⟯ »⟮autonomous⟯« = ⟮c+;is not a⟯ ⟮c+;variety of another standard variety⟯.  ⟮Baviarian⟯ is ⟮heteronomous⟯ in relation to ⟮standard german⟯. A ⟮heteronomous⟯ language will tend to ⟮change towards⟯ the ⟮standard variety⟯.   ## prestige  »⟮Prestige⟯« is ⟮the level of regard given⟯ within ⟮a given ＿speech community＿⟯ ⟮＿Prestige＿⟯ can apply to ⟮＿variants＿⟯ or ⟮＿varieties＿⟯. »⟮A prestige variety⟯« is a ⟮＿variety＿⟯ with ⟮high ＿prestige＿⟯. Most commonly, ⟮＿standard varieties＿⟯ are ⟮＿prestige varieties＿⟯. »⟮Covert prestige⟯« is the situation in which ⟮a non-standard variety⟯ ⟮has high prestige⟯.  ## linguistic prescriptivism  »⟮Linguistic prescription⟯« is ⟮establishing rules⟯ for ⟮the correct or good use⟯ of a language.  ### language academies  »⟮Language academies⟯« are institutions ⟮regulating⟯ ⟮standard varieties⟯ ⟮Language academies⟯ generally follow ⟮linguistic prescriptivism⟯  ⟮RAE⟯ is short for ⟮Real Academia Española⟯ The »⟮RAE⟯« is the ⟮spanish⟯ ⟮language academy⟯, generally ⟮quite conservative⟯ in outlook   ### dialect  ⟮Dialect⟯ as a term often ⟮implies negative value ('mere dialect')⟯. People very confused may use ⟮dialect⟯ to mean ⟮＿accent＿⟯. In regions such as I⟮taly, France and the Philippines⟯ ⟮separate⟯ but ⟮c_;non-standard⟯ ⟮sister languages⟯ to the standard variety are ⟮called⟯ and ⟮c_;(falsely) considered to be⟯ ⟮dialects⟯. In ⟮an academic setting⟯, a ⟮dialect⟯ is ⟮a synonym⟯ of either ⟮variety⟯ or ⟮regiolect⟯.  ## language dominance  »⟮Language dominance⟯« is either ⟮the more frequent/ready use of⟯ or ⟮proficiency in⟯ ⟮one language more than another⟯. ⟮＿Language dominance＿⟯ may either be ⟮within a given speaker⟯ or ⟮within a ＿speech community＿⟯.  ## power  »⟮Linguistic hegemony⟯« is when ⟮a dominant group⟯ has ⟮created a certain idea⟯ about ⟮their language norms⟯. Under ⟮linguistic hegemony⟯, ⟮the dominant grous's language norms⟯ are ⟮seen as correct⟯. Under ⟮linguistic hegemonic⟯, speech that⟮ doesn't conform to the language norms of the dominant group⟯ is ⟮a failure (being wrong)⟯.  In a critical view, ⟮english⟯ as ⟮c_;the standard language⟯ in science may be an example of ⟮linguistic hegemony⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}{{c209::}}{{c210::}}{{c211::}}{{c212::}}{{c213::}}{{c214::}}{{c215::}}{{c216::}}{{c217::}}{{c218::}}{{c219::}}{{c220::}}{{c221::}}{{c222::}}{{c223::}}{{c224::}}{{c225::}}{{c226::}}{{c227::}}{{c228::}}{{c229::}}{{c230::}}{{c231::}}{{c232::}}{{c233::}}{{c234::}}{{c235::}}{{c236::}}{{c237::}}{{c238::}}{{c239::}}{{c240::}}{{c241::}}{{c242::}}{{c243::}}{{c244::}}{{c245::}}{{c246::}}{{c247::}}{{c248::}}{{c249::}}{{c250::}}{{c251::}}{{c252::}}{{c253::}}{{c254::}}{{c255::}}{{c256::}}{{c257::}}{{c258::}}{{c259::}}{{c260::}}{{c261::}}{{c262::}}{{c263::}}{{c264::}}{{c265::}}{{c266::}}{{c267::}}{{c268::}}{{c269::}}{{c270::}}{{c271::}}{{c272::}}{{c273::}}{{c274::}}{{c275::}}{{c276::}}{{c277::}}{{c278::}}{{c279::}}{{c280::}}{{c281::}}{{c282::}}{{c283::}}{{c284::}}{{c285::}}{{c286::}}{{c287::}}{{c288::}}{{c289::}}{{c290::}}{{c291::}}{{c292::}}{{c293::}}{{c294::}}{{c295::}}{{c296::}}{{c297::}}{{c298::}}{{c299::}}{{c300::}}{{c301::}}{{c302::}}{{c303::}}{{c304::}}{{c305::}}{{c306::}}{{c307::}}{{c308::}}{{c309::}}{{c310::}}{{c311::}}{{c312::}}{{c313::}}{{c314::}}{{c315::}}{{c316::}}{{c317::}}{{c318::}}{{c319::}}{{c320::}}{{c321::}}{{c322::}}{{c323::}}{{c324::}}{{c325::}}{{c326::}}{{c327::}}{{c328::}}{{c329::}}{{c330::}}{{c331::}}{{c332::}}{{c333::}}{{c334::}}{{c335::}}{{c336::}}{{c337::}}{{c338::}}{{c339::}}{{c340::}}{{c341::}}{{c342::}}{{c343::}}</span>"	linguistics::sociolinguistics
"# typography  »⟮Typography⟯« is the field concerned with ⟮the properties/use of⟯ ⟮type and text (in a wide sense)⟯ ⟮＿Typography＿⟯ is divided into ⟮＿microtypography＿⟯ and ⟮c_;＿macrotypography＿⟯.  »⟮Microtypography⟯« is typography on the level of ⟮letters/words⟯ Examples of ⟮＿microtypographic＿⟯ properties/concerns are ⟮letter spacing, word spacing, ligatures, features of letters⟯ »⟮Macrotypography⟯« is typography on the level of ⟮the collumn/grid/page⟯ Examples of ⟮＿macrotypographic＿⟯ properties/concerns are ⟮Typographic hierarchy, typographic grid, page layout⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}</span>"	linguistics::graphemics::typography
"# microtypography  flex-container:✫sm_tmprdkiv_z1.jpg✫  ## fonts and font families  A synonym of ⟮typeface⟯ is ⟮font family⟯.  A »⟮typeface⟯« is ⟮a set of glyphs⟯ ⟮with a certain unified look⟯.  ⟮a »font«⟯ is ⟮a ＿typeface＿⟯ ⟮with certain characteristcs⟯.  Ergo, there are ⟮many ＿fonts＿⟯ of ⟮a given ＿typeface＿.⟯  Properties that are ⟮varied⟯ to ⟮produce different ＿fonts＿⟯ of ⟮the same ＿typeface＿⟯ are most commonly ⟮＿weight＿⟯, ⟮size⟯, and ⟮slope⟯, though ⟮other things can also be varied⟯.   ## fonts  ### weight  The »⟮weight⟯« of ⟮a particular ＿font＿⟯ is ⟮the thickness of the characters⟯ ⟮relative to their height⟯.  ⟮＿font weights⟯＿ are often given on ⟮a scale⟯ ⟮from 100 through 900⟯ The ⟮TrueType⟯ font format introduced the ⟮100-900 scale⟯ for font weights The ⟮100-900 scale⟯ for font weights is also used in ⟮CSS⟯ and ⟮OpenType⟯,  in the 100 to 900 scale, ⟮400⟯ is ⟮regular⟯  in the 100 to 900 scale, ⟮700⟯ is ⟮bold⟯  Originally, any font-weight ⟮in the 100 - 900 scale⟯ that was ⟮not a multiple of 100⟯ was ⟮meaningless⟯ in ⟮variable-weight fonts⟯, a ⟮font weight⟯ may be ⟮any number between 1 and 1000⟯.   ### keming ＆ letter-spacing  flex-container:✫sm_paste-f07c2c687494aa635cc4e1bac28fd932457a1b35.jpg✫✫sm_220px-Metal_type_kerning.svg.png✫   ⟮Letter-spacing⟯ = ⟮tracking⟯ »⟮Letter-spacing/tracking⟯« and »⟮c_;kerning⟯« are both ⟮the adjustment of⟯ ⟮the horizontal distance⟯ ⟮between glyphs⟯ »⟮Letter-spacing/tracking⟯« is the ⟮adjustment of the (horizontal) distance between glyphs⟯ ⟮for all glyphs equally⟯.  »⟮Kerning⟯« is the ⟮adjustment of the (horizontal) distance between glyphs⟯ ⟮between two specific glyphs⟯.  ⟮＿Kerning＿⟯ is generally to ⟮achieve a similar amount of whitespace⟯ between glyphs.  Original, the »⟮kern⟯« of ⟮a glyph or its sort⟯ was ⟮the part that overhangs its sort⟯.  ⟮＿kerning＿⟯ generally involves ⟮intruding into⟯ ⟮the box of another glyph's sort⟯.  ⟮＿Kerning＿⟯ is only relevant for ⟮proportional/variable-width⟯ fonts.   ## font families  ### type, sort  flex-container:⟮h∞;✫sm_220px-Metal_movable_type.jpg✫⟯   ⟮»A type «(countable)⟯ is ⟮a block⟯ ⟮with a glyph on it⟯ used ⟮for printing⟯. ⟮»Type« (uncountable)⟯ is ⟮types collectively⟯. ⟮A type⟯ may thus also be called ⟮a piece/block of type⟯. In most printing processes, ⟮type⟯ was made of ⟮metal⟯. »⟮A sort⟯« is ⟮a type⟯ for ⟮a single character with certain characteristics (weight, size, etc.)⟯. ⟮type⟯ and ⟮sort⟯ only apply to ⟮movable type⟯.  ### font size  The »⟮font size⟯« specifies the ⟮＿body height＿⟯.  Thus, if using ⟮movable type⟯, ⟮the ＿font size＿⟯ specifes ⟮the physical height of the ＿sort＿.⟯  Thus, if using ⟮digital type⟯, ⟮＿font size＿⟯ is ⟮the height that the ＿em square＿ is scaled to⟯.  Stated differently, in ⟮digital type⟯, ⟮setting a specific ＿font size＿⟯ ⟮scales up the ＿em square＿⟯.  ⟮The ＿font size＿⟯ is called ⟮「point size」⟯ if ⟮specified in point⟯, or ⟮sometimes also if not⟯.  »⟮em⟯« is a unit ⟮relative to⟯ ⟮the current ＿font size＿⟯. Ergo, the ⟮＿font size＿⟯ is equal to ⟮1em (by definition)⟯. Following the general definition of the font size, in css ⟮the em⟯ is ⟮equivalent to⟯ ⟮the current font-size.⟯   ### units  #### ems and ens  flex-container:✫220px-M_versus_em.svg.png✫   ⟮the sort⟯ of ⟮uppercase Ms⟯ used to be ⟮as wide as tall (i.e. square)⟯, ⟮em⟯ is sometimes also defined as ⟮the width⟯ of an ⟮uppercase (or more rarely lowercase)⟯ ⟮M⟯. Defining an em as ⟮the width of an uppercase m⟯ is ⟮equivalent to⟯ ⟮the usual definition⟯ since ⟮the sort of uppercase Ms used to be square.⟯ !The »⟮en⟯« is either - !⟮half the width⟯ of ⟮an em⟯.  - !⟮the width⟯ of ⟮an uppercase or lowercase⟯ ⟮n⟯.  The »⟮en/em space/dash⟯« are ⟮a space and dash⟯ that are defined as ⟮one en/em⟯ ⟮wide⟯. The ⟮en/em space⟯ and ⟮c_;en/em dash⟯ are ⟮one en/em⟯ ⟮wide⟯.  Due to ⟮the confusion about definitions of en/ems⟯, sometimes ⟮variant definitions⟯ for ⟮en/em dashes/spaces⟯ are used.   #### point  In typography, the »⟮point⟯« is ⟮the smallest⟯ ⟮unit of measure⟯.  ⟮the exact size⟯ of ⟮the ＿point＿⟯ ⟮has varied⟯. ⟮＿point＿⟯ is often abbreviated ⟮pt⟯ or ⟮c_;just p⟯.  »⟮A pica⟯« is ⟮12 point (whatever point you're using)⟯.  ##### DTP point  ⟮DTP point⟯ = ⟮DeskTop Publishing point⟯. the ⟮＿DTP point＿⟯ ⟮came into existence⟯ ⟮with digital printing⟯. The ⟮＿DTP point＿⟯ has become a sort of ⟮standard ＿point＿⟯. the »⟮DTP point⟯« is defined as ⟮1/72 inch⟯. If using ⟮the ＿DTP point＿⟯, ⟮＿a pica＿⟯ is ⟮1/6 inch⟯.  ##### css  ⟮CSS⟯ uses ⟮the DTP⟯ ⟮＿point＿⟯. In ⟮CSS⟯, ⟮`pt`⟯ is the unit name for ⟮＿point＿⟯. In ⟮CSS⟯, ⟮`pc`⟯ is the unit name for ⟮＿pica＿⟯.  ##### tex  ⟮TeX's⟯ ⟮bp⟯ is ⟮equivalent to the DTP point⟯. ⟮TeX's⟯ ⟮pt⟯ is ⟮very slightly smaller than the DTP point⟯.   ### type anatomy  flex-container:⟮h∞;✫1280px-Typography_Line_Terms.svg.png✫✫decender.png✫✫1280px-Thank_You_(13824254433).jpg✫⟯  #### body  »⟮the body height⟯« is ⟮the distance between⟯ ⟮the ＿ascender＿ and ＿descender line＿⟯.  The ⟮＿body height＿⟯ when talking about ⟮movable type⟯ is ⟮the height of the sort⟯.   #### baseline, mean line  The »⟮baseline⟯« is ⟮the imaginary line⟯ ⟮on which most letters sit⟯. The »⟮mean line⟯« is ⟮the imaginary line⟯ ⟮up to which most lowercase letters extend⟯.  #### x-height  ⟮x-height⟯ = ⟮corpus size⟯ The »⟮x-height⟯« is ⟮the distance between⟯ ⟮＿baseline＿ and ＿mean line＿⟯. ⟮the height of the x-height⟯ typically ⟮corresponds to the height of the x⟯, ⟮hence the name⟯.   #### overshoot  »⟮Overshoot⟯« is when letters ⟮extend a little⟯ ⟮above or below⟯ ⟮the lines meant to constrain them⟯. If downwards, ⟮＿overshoot＿⟯ is extending beyond the ⟮＿baseline＿⟯. If upwards, ⟮＿overshoot＿⟯ is extending beyond the ⟮＿x-height＿ or ＿cap height＿⟯. ⟮＿Overshoot＿⟯ is used due to ⟮quirks with our perception⟯, where otherwise ⟮the non-overshot letters would look slightly too small⟯. ⟮＿Overshoot＿⟯ is generally used for ⟮round⟯ or ⟮c_;pointy⟯ leters.  #### ascenders, descenders, line spacing  A »⟮descender⟯« is ⟮the portion of a letter⟯ which ⟮extends below the ＿baseline＿⟯.  Letters such as ⟮lowercase y, g, and j⟯ typically have ⟮＿descenders＿⟯.  »⟮the descender depth⟯« is the ⟮distance⟯ ⟮the ＿descender＿ reaches below the ＿baseline＿⟯  A »⟮ascender⟯« is ⟮the portion of a letter⟯ which ⟮extends above the ＿baseline＿⟯.  Letters such as ⟮lowercase f, h and uppercase letters (if we want to count them⟯) typically have ⟮＿ascenders＿⟯.  The »⟮ascender height⟯« is the ⟮distance⟯ that ⟮＿ascenders＿ reach above the ＿baseline＿⟯.  The ⟮＿ascender height＿⟯ is generally ⟮higher than⟯ ⟮the ＿cap-height＿⟯  ⟮ascender line⟯ = ⟮topline⟯ The »⟮ascender/descender line⟯« is ⟮the imaginary line⟯ ⟮defined by⟯ ⟮the ＿ascender height/descender depth＿⟯  ⟮Line spacing⟯ = ⟮leading⟯ »⟮Line spacing⟯« is ⟮the distance between⟯ ⟮the ＿descender line＿⟯ and ⟮the next ＿ascender line＿⟯   #### super/subscript  ⟮＿Subscript＿ and ＿superscipt＿⟯ text is usually ⟮smaller than⟯ regular text.  »⟮Superscript⟯« text is text whose ⟮＿baseline＿⟯ ⟮sits somewhat above⟯ ⟮c-;the general ＿baseline＿⟯.  »⟮Subscript⟯« text may ⟮sit at the general ＿baseline＿⟯ and ⟮just be smaller⟯ or ⟮have a ＿baseline＿⟯ ⟮somewhat below⟯ ⟮c-;the general ＿baseline＿⟯.   #### em square ＆ relative sizing  flex-container:✫220px-Metal_type.svg.png✫  The »⟮em square⟯« is ⟮an imaginary square⟯ ⟮around which parts of letters are sized⟯. The ⟮＿em square＿⟯ is used in ⟮digital typography⟯. The ⟮＿em square＿⟯ is ⟮1em⟯ ⟮wide and high⟯. Using ⟮＿the em sqare＿⟯ allows us to ⟮give the size⟯ of ⟮any other part of the font (e.g. ascender height, x-height, cap height, etc. etc.)⟯ ⟮in em⟯. The size relationship ⟮between parts of letters⟯ ofc. depends on ⟮the typeface⟯.  ##### average relative sizing  table:type property|size ⟮cap height⟯|⟮0.7em⟯ ⟮x-height⟯|⟮0.5em⟯  ### font properties  #### serifs  Serifs are these little bits sticking out of some letters. One major axis along which font families are distinguished is if they have serifs or not.  #### monospace  A monospaced font where all characters occupy the same horizontal space. A font that is not monospaced is proportional-width.  ### installation  ⟮installing custom font families⟯ is possible on ⟮most desktop os⟯, but not on ⟮android⟯ (and ofc not on ⟮ios⟯)  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}{{c209::}}{{c210::}}{{c211::}}{{c212::}}{{c213::}}{{c214::}}{{c215::}}{{c216::}}{{c217::}}{{c218::}}{{c219::}}{{c220::}}{{c221::}}{{c222::}}{{c223::}}{{c224::}}{{c225::}}{{c226::}}{{c227::}}{{c228::}}{{c229::}}{{c230::}}{{c231::}}{{c232::}}{{c233::}}{{c234::}}{{c235::}}{{c236::}}{{c237::}}{{c238::}}{{c239::}}{{c240::}}{{c241::}}{{c242::}}{{c243::}}{{c244::}}{{c245::}}{{c246::}}{{c247::}}{{c248::}}{{c249::}}{{c250::}}</span>"	linguistics::graphemics::typography
"# macrotypography  ## columns  A »⟮column⟯« is ⟮(a) vertical block(s) of content⟯ ⟮positioned on a page⟯. ⟮＿Columnns＿⟯ and ⟮c_;rows⟯ are ⟮separated by⟯ ⟮＿gutters＿⟯. »⟮Gutters⟯« are ⟮whitespace⟯ ⟮between⟯ ⟮two rows or columns⟯.  ## page  ### page layout  #### spacing  ##### margins  flex-container:✫220px-Margins.svg.png✫   the ⟮margin⟯ is ⟮the area between⟯ ⟮the main content of a page⟯ and ⟮its edges⟯.  ##### alignment ＆ indentation  flex-container:✫https://barbarakristaponis.files.wordpress.com/2015/11/dividequote1-e1447790290375.png?w=400✫   »⟮x-aligned⟯« text is where ⟮a line⟯ w⟮ill always start⟯ at ⟮the x side (or at a certain offset)⟯ »⟮A rag⟯« is an ⟮uneven⟯ ⟮margin⟯. ⟮＿x-aligned＿⟯ text will have ⟮＿rags＿⟯ on ＿the opposite side＿. Text being »⟮flush (with) x⟯« is when the text ⟮touches the x side⟯. »⟮Indentation⟯« is ⟮empty space⟯ at ⟮the beginning of the line⟯ so ⟮it is no longer flush⟯ »⟮A hanging indent⟯« is one way in which a paragraph might be ⟮x-aligned⟯ but not ⟮completely flush x⟯. Using a ⟮＿hanging indent＿⟯, ⟮the first line⟯ is ⟮flush x⟯ and ⟮c-;subsequented lines⟯ are ⟮indented⟯. Using a ⟮＿hanging indent＿⟯ is also called »⟮flush and hang style⟯«.  »⟮Justified⟯« text is ⟮both⟯ ⟮flush left⟯ ⟮c-;and⟯ ⟮right⟯. ⟮＿Justified＿⟯ text manages to be ⟮both flush left and right⟯ by ⟮squishing and stretching letter-spacing⟯.  ##### rivers  »⟮rivers⟯« are ⟮gaps of white space⟯ ⟮running across multiple lines⟯. ⟮rivers⟯ may happen due to e.g. ⟮＿justification＿⟯.  ### things that may be placed on pages  #### notes  »⟮A note proper⟯« is ⟮a string⟯ placed ⟮in a different place⟯ ⟮than the place it semantically belongs to⟯. ⟮＿notes proper＿⟯ most commonly include ⟮citation information⟯ or ⟮comments of some kind⟯ ⟮＿Notes proper＿⟯ are generally ⟮gathered⟯ ⟮in a section just for them⟯. I will call ⟮the section for notes proper⟯ a »⟮note section⟯«. A »⟮note indicator⟯« (my term) is ⟮a string⟯ or ⟮c_;symbol⟯. The string/symbol making up ⟮＿a note indicator＿⟯ is most commonly a ⟮supercripted numeral⟯ with or without ⟮square brackets⟯ ^e.g. ⎴n⎴ or ⎴[n]⎴. A »⟮in-text note indicator⟯« (my term) is ⟮＿a note indicator＿⟯ placed ⟮＿in-text＿⟯. A »⟮note-proper-attached note indicator⟯« (my term) is ⟮＿a note indicator＿⟯ ⟮attached to a note proper⟯. A »⟮note indicator pair⟯« (my term) consists of ⟮＿a in-text note indicator＿⟯ and ⟮＿a note-proper-attached-note indicator＿⟯ ⟮using the same string/symbol⟯. »⟮A note⟯« consists of ⟮＿the note proper＿⟯ plus ⟮＿a note indicator pair＿⟯. The ⟮＿in-text note indicator＿⟯ goes ⟮after⟯ ⟮any punctuation mark⟯. The ⟮＿note section＿⟯ may be placed ⟮at the end of the page⟯ or ⟮the end of the chapter/paper/whatever⟯. If ⟮the note seciton is placed at the end of the page⟯, ⟮＿the notes＿⟯ are known as »⟮footnotes⟯«. If ⟮the note seciton is placed at the end of the chapter/paper/whatever⟯, ⟮＿the notes＿⟯ are known as »⟮endnotes⟯«.  ## multiple pages  ### division  #### pagination  ⟮pagination⟯ = ⟮paging⟯ »⟮pagination⟯« is ⟮dividing⟯ ⟮a given document⟯ ⟮c_-;into⟯ ⟮discrete pages⟯.  ### relationships between pages  #### orphans and widows  flex-container:✫sm_BdflVyb4vu7o0q5hCeBkmu09nMn21opE.jpg✫   »⟮Widows/orphans⟯« refer to ⟮stranded things⟯ at ⟮the beginning/end of⟯ ⟮other things⟯.   !»⟮Widows/orphans⟯« may either refer to - !stranded ⟮words⟯ at the beginning/end of ⟮c_;paragraphs⟯ - !stranded ⟮lines⟯ at the beginning/end of ⟮c_;pages⟯.   There is ⟮no agreement⟯ on ⟮which of widows or orphans⟯ refers to the things occurring at ⟮the beginnings or ends⟯ of other things. that is, ⟮one persons orphan⟯ is ⟮another persons widow⟯.   ### alternating pages  #### verso and recto  »⟮verso and recto⟯« refer to ⟮the sides⟯ of ⟮a page⟯ ⟮recto⟯ is ⟮the front⟯ of the page ⟮verso⟯ is ⟮the back⟯ of the page.  ⟮Recto⟯ is ⟮the front of the page⟯ since ⟮you will see it first if reading the book normally⟯ ⟮verso⟯ is ⟮the back of the page⟯ since ⟮you will only see it once turning the page if reading the book normally⟯.   ##### LtR pages  table:span=2;✫verso_recto.svg✫ ⟮c+;s2;verso⟯|⟮c+;s1;recto⟯  ##### RtL pages  table:span=2;✫recto_verso.svg✫ ⟮c+;s3;recto⟯|⟮c+;s4;verso⟯  #### left and right  Pages are »⟮left and right⟯« pages depending on whether they ⟮will appear⟯ on the ⟮left or right⟯ ⟮c_-;first⟯ when r⟮eading the book in a normal direction⟯. In ⟮all books⟯, the ⟮first page⟯ is ⟮the cover⟯. in ⟮LtR media⟯, the ⟮second page⟯ will be ⟮a left page⟯ Since in ⟮LtR media⟯, ⟮the second page will be a left page⟯, ⟮the cover is a right page⟯ in ⟮RtL media⟯, the ⟮second page⟯ will be ⟮a right page⟯ Since in ⟮RtL media⟯, ⟮the second page will be a right page⟯, ⟮the cover is a left page⟯  ##### twosided  In a book, ⟮left and right pages⟯ are ⟮not formatted identical⟯, but instead ⟮have different e.g. margins⟯ to ⟮account for binding⟯ etc. ⟮The state of left and right pages not being identical⟯ may be called »⟮two-sided⟯«. In latex, to ⟮optimize a document for being two-sided⟯ , include ⟮`twoside`⟯ in ⟮the optional argument [] of documentclass⟯  ##### start on...  In latex, to ⟮make chapters etc. always open on a left/right page⟯  include ⟮`openleft/right`⟯ in ⟮the optional argument [] of documentclass⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}</span>"	linguistics::graphemics::typography
"# types of graphemes  typically, ⟮whatevergraph⟯ and ⟮whatevergram⟯ are ⟮synonyms⟯.  ## graphs with phonological realization ≈ representing basic linguistic unit  ### logograms vs phonograms  the two types of ⟮grapheme⟯ ⟮representing a basic linguistic unit⟯ are ⟮＿logograms＿⟯ and ⟮＿phonograms＿⟯ »⟮a logogram ⟯«is a ⟮graph/grapheme⟯ representing ⟮a morpheme/word⟯ »⟮a phonogram⟯« is a ⟮graph/grapheme⟯ representing ⟮one or more phonemes⟯  ### logograms  Well-known ⟮＿logographic＿⟯ writing systems are ⟮kanji/hanzi/hanja/han tu (though there are exceptions); hieroglyphs⟯ Depending on their composition, ⟮＿logograms＿⟯ may be ⟮＿non-compound＿⟯ or ⟮＿compound＿⟯. »⟮Compound logograms⟯« are ⟮＿logograms＿⟯ ⟮consisting of multiple other logograms⟯. »Non-compound logograms« are ⟮＿logograms＿⟯ ⟮consisting of no other logograms⟯.  #### non-compound logograms  ⟮＿Non-compound logograms＿⟯ may be ⟮＿pictograms＿⟯ or ⟮＿ideograms＿⟯. »⟮A pictogram⟯« ⟮depicts the thing⟯ it ⟮references⟯, or ⟮once did⟯. Examples of ⟮＿pictogram＿⟯ kanji: ⟮日, 月, 山, 木, 口 etc.⟯ »⟮An ideogram⟯« ⟮attempts to visualize⟯ ⟮the abstract concept⟯ it ⟮represents⟯. Many ⟮＿ideograms＿⟯ are ⟮derived from⟯ ⟮＿pictograms＿⟯.  #### compound logograms  some ⟮compound logograms⟯ may ⟮function similar to ideograms or pictograms⟯, but are ⟮rarely called such⟯ due to the differences.  ### phonograms  ⟮＿phonograpms＿⟯ are divided into ⟮＿syllabograms＿⟯ and ⟮＿letters＿⟯. »⟮A syllabogram⟯« is ⟮＿a graph/grapheme＿⟯ that (ideally) ⟮represents a syllable or mora⟯. »⟮A letter⟯« is ⟮＿a graph/grapheme＿⟯ that (ideally) ⟮represents a single phoneme⟯. A »⟮syllabary⟯« is ⟮＿a writing system＿⟯ that consists of ⟮＿syllabograms＿⟯. An »⟮alphabet⟯« is ⟮＿a writing system＿⟯ that consists of ⟮＿letters＿⟯.  #### hybrids  I will call the ⟮characters of an abugida⟯ ⟮＿abugidogram＿⟯, though ⟮this is a term no one uses⟯. »⟮An abugidogram⟯« is ⟮a graph/grapheme⟯ which ⟮represents a consonant⟯, and ⟮c_;vowels⟯ are ⟮added as modifications of the base character⟯.  An »⟮abjad⟯« is ⟮＿a writing system＿⟯ which ⟮primarily deals in consonants⟯. A »⟮pure abjad⟯« has ⟮no way of indicating vowels whatsoever⟯. An »⟮impure abjad⟯« has ⟮some way of indicating vowels⟯. An ⟮＿impure abjad＿⟯ may ⟮indicate vowels⟯ with ⟮diacritics⟯ or ⟮a limited set of vowel letters⟯.  ## graphs without phonological realization  »⟮blahs⟯« (my term) are ⟮a subset⟯ of ⟮graphemes⟯ ⟮not directly used to represent a basic linguistic unit such as sounds or words⟯. ⟮＿blahs＿⟯ may be ⟮＿punctuation＿⟯, ⟮＿emoji＿⟯, etc.  ### punctuation  »⟮Punctuation⟯« is ⟮a subset⟯ of ⟮＿blahs＿⟯ ⟮used to indicate some sort of interpretation help for text⟯. ⟮＿Punctuation＿⟯ may be roughly divided into ⟮＿whitespace＿⟯ and ⟮＿visible punctuation＿⟯. A »⟮punctuation mark⟯« is ⟮a single grapheme⟯ ⟮acting as ＿punctuation＿⟯.  #### visible  ##### enclosing punctuation  ###### brackets  »⟮Brackets⟯« are ⟮a type of⟯ ⟮punctuation⟯ that exist in ⟮mirrored opening and closing⟯ variants and are meant to ⟮enclose something⟯. ⟮＿brackets＿⟯ is ⟮the cover term⟯ for ⟮all of ()‹›[]{}⟯.  ####### names   table:thing|name (non-us)|name (us) ⟮{}⟯|⟮curly brackets⟯|⟮braces⟯ or ⟮curly braces⟯ ⟮‹›⟯|span=2;⟮angle brackets⟯ or ⟮chevrons⟯ ⟮( )⟯|⟮brackets⟯, ⟮round brackets⟯|⟮parantheses⟯ ⟮[]⟯|⟮square brackets⟯|⟮brackets⟯  ⟮parentheses⟯ refer to ⟮()⟯ in ⟮the US⟯, and ⟮nothing⟯ ⟮in non-US varieties⟯ ⟮braces⟯ refers to ⟮{}⟯ in ⟮the US⟯, and ⟮nothing⟯ in ⟮non-US varieties⟯ ⟮brackets⟯ may be used ⟮as a cover term⟯ or refer to ⟮[]⟯ in ⟮the us⟯ and ⟮()⟯ in ⟮non-us varieties⟯  Due to ⟮US cultural influence⟯, ⟮the US names⟯ for ()‹›[]{} may be ⟮recognized in other countries⟯.   ##### sentence-ending punctuation  ###### bang  The ⟮exlamation point⟯ may also be called a ⟮bang⟯. Calling the ⟮exclamation point⟯ a ⟮c_;bang⟯ emerged from ⟮printing slang in the 1950s⟯.  Off ⟮the slang term bang for !⟯ was coined the ⟮interrobang⟯ and the ⟮shebang⟯  the »⟮interrobang⟯« is ⟮the combination of exclamation point and question mark⟯. ⟮‽⟯ is called the ⟮interrobang⟯.   ##### intra-sentence punctuation  ###### dashes ＆ hyphens  »⟮Dashes⟯« and »⟮hyphens⟯« are both ⟮＿punctuation marks＿⟯ that are ⟮horizontal lines⟯. ⟮dashes⟯ are ⟮longer⟯ than ⟮the hyphen/minus sign⟯.  There are ⟮two common⟯ ⟮dashes⟯ (though there are more ⟮c-;uncommon⟯ ones), The ⟮two common dashes⟯ are the ⟮en-dash⟯ and the ⟮em-dash⟯.   ##### other  ###### prime  The »⟮prime⟯« is a ⟮＿punctuation mark＿⟯ looks similar to ⟮an apostrophe⟯, but ⟮angled to the right⟯.  The »⟮double prime⟯« is ⟮two ＿primes＿⟯ »directly side by side« The ⟮prime⟯ is often used to ⟮mark something derived from something⟯.  Unit-wise, the ⟮prime⟯ and ⟮double prime⟯ can mark ⟮(arc)minutes⟯ and ⟮(arc)seconds⟯ respectively    table:Symbol|Name ⟮′⟯|⟮Prime⟯ ⟮″⟯|⟮Double prime⟯  #### whitespace  »⟮whitespace⟯« is ⟮＿punctuation＿⟯ that consists of ⟮space with no marks⟯. ⟮＿Whitespace＿⟯ may be ⟮＿horizontal＿⟯ or ⟮＿vertical＿⟯.  ##### horizontal  »⟮horizontal whitespace⟯« is ⟮＿whitespace＿⟯ that ⟮is horizontal space (duh.)⟯ ⟮＿horizontal whitespace＿⟯ as a category consists of ⟮＿space＿⟯ and ⟮＿horizontal tabs＿⟯.  ###### horizontal tabs  »⟮horizontal tabs⟯« are ⟮＿horizontal whitespace＿⟯ with a width of ⟮multiple space characters⟯. »⟮a hard tab⟯« is ⟮the ASCII tab character⟯. »⟮A soft tab⟯« is ⟮multiple spaces used as 'tabs'⟯. In programming, the ⟮width of tabs⟯ is commonly ⟮2 or 4 spaces⟯.  ##### vertical  A ⟮blank line⟯ is two ⟮newlines⟯.  ### emoji, emoticons  #### emoticons  An »⟮emoticon⟯« is ⟮a face⟯ represented using ⟮multiple⟯ ⟮non-face⟯ ⟮graphemes⟯  There are two main kinds of ⟮＿emoticons＿⟯, ⟮western⟯ and ⟮　顔文字（顔文字）⟯  ##### western  »⟮western emoticons⟯« are ⟮＿emoticons＿⟯ that have ⟮faces⟯ that are oriented ⟮left-to-right⟯   ###### eyes   table:emoticon eyes|meaning ⟮:⟯|⟮default (more common)⟯ ⟮=⟯|⟮default (less common)⟯ ⟮8⟯|⟮default (super rare)⟯ ⟮%⟯|⟮drunk/confused⟯ ⟮X⟯|⟮c+;equivalent of ›‹ eyes, but more often used positively⟯ ⟮c+;;⟯|⟮wink⟯  ##### kaomoji  »⟮　顔文字（顔文字）⟯« are ⟮＿emoticons＿⟯ that have ⟮faces⟯ oriented ⟮top-to-bottom⟯  most common ⟮head delimiters⟯ for 　顔文字（顔文字）: ⟮()⟯   ###### General pattern for kaomoji  ``` !kaomoji ::= ⟮[‹left-arm›]⟯⟮‹head›⟯⟮c-;[‹right-arm›]⟯ !⟮hb;⟮head⟯ ::= ⟮[‹left-head›]⟯⟮‹face›⟯⟮c-;[‹right-head›]⟯⟯ !⟮hb;⟮face⟯ ::= ⟮[‹left-cheek›]⟯⟮‹eye›[‹nose›]‹eye›⟯⟮c-;[‹right-cheek›]⟯⟯ ```  # combinations of graphs  ## digraphs   »⟮A digraph⟯« is ⟮using two graphs⟯ to ⟮write a single phoneme⟯. An example of ⟮＿a digraph＿⟯ is ⟮sh for /ʃ/⟯ in english. Digraphs are often combined into ligatures, and as such the term also sometimes refers to those as digraphs.  ## ligatures  flex-container:✫sm_298px-Ligature_drawing.svg.png✫✫Typographic_ligature_st.png✫✫Th_Taumfel.jpg✫✫1024px-Ĳ_uppercase_ligature.svg.png✫   »⟮A ligature⟯« is when ⟮two or more characters⟯ are ⟮fused to form a single character⟯.  Many ⟮current symbols/characters/graphemes⟯ ⟮originated as⟯ ⟮＿ligatures＿⟯, ⟮c-;but are now⟯ ⟮ordinary characters⟯.  ⟮The ampersand ＆⟯ originated as ⟮a ＿ligature＿⟯ of ⟮et⟯.  ⟮圕⟯ is ⟮a rare ligature⟯ of ⟮図書館⟯   ### ligatures  table:character|ligature of ⟮ɶ⟯|⟮oE⟯ ⟮œ⟯|⟮oe⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}{{c209::}}{{c210::}}{{c211::}}{{c212::}}{{c213::}}{{c214::}}{{c215::}}{{c216::}}{{c217::}}{{c218::}}{{c219::}}{{c220::}}{{c221::}}{{c222::}}{{c223::}}{{c224::}}{{c225::}}{{c226::}}{{c227::}}{{c228::}}{{c229::}}{{c230::}}{{c231::}}{{c232::}}{{c233::}}{{c234::}}{{c235::}}{{c236::}}{{c237::}}{{c238::}}{{c239::}}{{c240::}}{{c241::}}{{c242::}}{{c243::}}{{c244::}}{{c245::}}{{c246::}}{{c247::}}{{c248::}}{{c249::}}{{c250::}}{{c251::}}{{c252::}}{{c253::}}{{c254::}}</span>"	linguistics::graphemics::graphemes
"# writing systems  »⟮A writing system⟯« is ⟮a set of graphemes⟯ and⟮ possible combinations⟯ used to ⟮represent linguistic units⟯ ⟮visually⟯. ⟮＿A writing system＿⟯ may also be known as a ⟮script⟯. »⟮An orthography⟯« is ⟮a set of rules⟯ for ⟮writing a languoid⟯. »⟮Digraphia⟯« is the situation of ⟮having more than one writing system⟯ for ⟮the same languoid⟯  # ortographic depth  »⟮Orthographic depth⟯« is ⟮the degree of deviation⟯ from ⟮the ideal correspondence between⟯ ⟮one character⟯ and ⟮c_;one referred item (morpheme, syllable, phoneme...)⟯ »A phonemic orthography« is the special case of ⟮＿an alphabet＿ specifically⟯ ⟮having no or little orthographic depth⟯.  ## !of languages I know  table:orthographic depth|language ⟮ortographically deep⟯|⟮English⟯ ⟮ortographically shallow⟯|⟮spanish, japanese (kana)⟯  # properties  ## letter case  »⟮Letter case⟯« is ⟮the distinction between⟯ ⟮uppercase and lowercase letters⟯.  ⟮uppercase letter⟯ = ⟮captial letter⟯ = ⟮majuscle⟯  ⟮lowercase letter⟯ = ⟮minuscle⟯   ⟮uppercase letters⟯ are ⟮generally larger than⟯ ⟮the lowercase letters⟯.   ### writing systems  Regarding letter case, writing systems may be ⟮＿bicameral＿⟯ or ⟮c_;＿unicameral＿⟯. »⟮bicameral⟯« writing systems are those that ⟮have a letter case distinction⟯. »⟮unicameral⟯« writing systems are those that that ⟮don't have a letter case distinction⟯.  ### capitalization  »⟮capitalization⟯« is ⟮which letters⟯ in a word ⟮are uppercase⟯ and ⟮c-;which⟯ ⟮are lowercase⟯. The »⟮rules of capitalization⟯« say ⟮which capitalization to apply⟯ in ⟮which case⟯. In natural language, typically the only question is ⟮whether the first character is uppercase or lowercase⟯, in this case ⟮＿capitalization＿⟯ may refer to this property specifically  #### interesting capitalizations  table:Name|Features ⟮Snake case⟯|⟮lowercase text⟯ ⟮separated by underscores _⟯ ⟮kebab case⟯|⟮lowercase text⟯ ⟮separated by hyphens -⟯ ⟮screaming snake case⟯|⟮all caps⟯ ⟮separated by underscores⟯ ⟮alternating caps⟯|⟮rAndDOMLy DisTrIBUting CApitAL LEtteRS⟯ ⟮camel case⟯|⟮words glued together⟯ with ⟮each initial letter capitalized⟯; the ⟮initial letter of the word⟯ ⟮lowercase⟯ ⟮upper camel case⟯|⟮words glued together⟯ with ⟮each initial letter capitalized⟯; the ⟮initial letter of the word⟯ ⟮also uppercase⟯  ⟮upper camel case⟯ = ⟮pascal case⟯ ⟮alternating caps⟯ = ⟮studly caps⟯ = ⟮SpongeBob caps/case⟯  #### rules of capitalization  ##### title case  ⟮Title case⟯ = ⟮headline case⟯  »⟮Title case⟯« is a ⟮set of ＿rules of capitalization＿⟯ used for ⟮titles of things⟯ in ⟮English⟯.  In ⟮＿title case＿⟯, ⟮major words⟯ and ⟮the first and last word of the title⟯ are ⟮capitalized⟯.  ⟮Exact rules of capitalization⟯ in ⟮title case⟯ ⟮vary⟯.  Most commonly, ⟮most words⟯ are considered ⟮major words (for the purposes of title case)⟯ exept for ⟮articles⟯, ⟮conjunctions⟯ and ⟮preposititons⟯. ⟮Some style guides⟯ reccommend ⟮＿capitalizing＿⟯ ⟮even non-major words⟯ if ⟮they are four characters or more⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}</span>"	linguistics::graphemics::writing-systems
"# manuscripts  A »⟮manuscript⟯« is a ⟮non-printed⟯ ⟮written work⟯. Sometimes, the term ⟮＿manuscript＿⟯ is a written work ⟮in any medium⟯, as long as ⟮it is not in its final form⟯. ⟮Before the advent of printing⟯, ⟮all written works⟯ were ⟮manuscripts⟯.  # palimpsest  flex-container:✫sm_paste-08cee722aa3a0d331ac53f3027ef7cf35ad457e2.jpg✫   »⟮A palimpsest⟯« is a thing on which ⟮multiple different texts have been written⟯ ⟮on top of each other⟯. For ⟮＿palimpsests＿⟯, generally ⟮the previous layer was erased⟯ before ⟮the new layer was written⟯, though ⟮often with varying degrees of success⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}</span>"	linguistics::graphemics::kinds-of-written-wrks
"# graphemics  »⟮Graphemics⟯« is the study of ⟮writing systems⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}</span>"	linguistics::graphemics
"# signs and symptoms  flex-container:✫sm_1_lcJqhlhwT274BKCOXwTO2g.png✫  »⟮Signs and symptoms⟯« are the things that allow ⟮individuals⟯ ⟮to notice there is something wrong⟯. The difference between ⟮signs and symptoms⟯ is  ⟮how they are perceptible⟯  a »⟮sign⟯« is ⟮observable to others (not just the patient⟯) a »⟮symptom⟯« is ⟮observable to the patent only⟯  # medical conditions  »⟮Diseases, disorders and syndromes⟯« are all ⟮disruptions of regular functions⟯ with ⟮recognizable ＿signs and symptoms＿⟯. The difference between ⟮diseases, disorders and syndromes⟯ is ⟮how much we know about the cause⟯   table:thing|cause for disruption of regular functions with recognizable signs and symptoms is »⟮disease⟯«|⟮specific, known process in the body⟯ »⟮disorder⟯«|⟮no statement of if we know the cause, if there are multiple causes, etc.⟯ »⟮syndrome⟯«|⟮correlation, but no known cause.⟯   Sudden infant death ⟮syndrome⟯ is a ⟮c_;syndrome⟯ ⟮because we know what happens, but not why⟯  A »disorder« might indicate that ⟮a specific disease is possible⟯ but ⟮there is not enough clinical evidence for diagnosis⟯.   ## disorder  ### nervous system  #### dystonia  »⟮Dystonia⟯« is a ⟮neurological⟯ ⟮＿disorder＿⟯ where ⟮muscle contractions cause jerking, twitching, and abnormal movement⟯s. »⟮Focal dystonia⟯« is ⟮＿dystonia＿⟯ that ⟮affects a specific part of the body⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>"	misc::biology::medicine
"# memory  ## types  ⟮Explicit memory⟯ = ⟮declarative memory⟯ ⟮Implicit memory⟯ = ⟮non-declarative memory⟯ »⟮Explicit memory⟯« stores ⟮facts, concepts⟯ »⟮Implicit memory⟯« stores ⟮procedures, categories, sensory experiences...⟯ ⟮Explicit/declarative memory⟯ is the memory that is subject to the ⟮Ebbinghaus forgetting⟯ curve.  # abuse  ## cycle of abuse  The ⟮cycle of abuse⟯ is a ⟮common pattern⟯ for ⟮abusive relationships⟯.  The »⟮Cycle of abuse⟯«: ⟮Tension building⟯ → ⟮Acute explosion/Incident⟯ → ⟮Honeymoon⟯ (repeat)   # personality traits  ## dark triad  ### narcissism  #### personality  ⟮»Narcissism«⟯ is an ⟮overriding desire⟯ to ⟮protect/soothe/strengthen⟯ one's ⟮self-image.⟯  »⟮Narcisstic supply⟯« are experiences that ⟮soothe one's self-image⟯ and thus ⟮a narcissist seeks⟯. »⟮Narcisstic injury⟯« are experience that ⟮damage one's self-image⟯ and thus ⟮a narcissist seeks to avoid⟯  #### narcissist's web  A ⟮narcissist⟯ ⟮structures social relationships⟯ around them in such a way that ⟮everyone falls into a certain role⟯, relative to⟮ the narcissists desire for strengthening their self-image⟯. I'll call ⟮the structure of social relationships a narcissist creates⟯ a »⟮narcissists's web⟯«. A ⟮＿narcissist's web＿⟯ is ⟮structural⟯: ⟮the different roles give rise and then resilience to the other roles⟯. A »⟮narcissistic family⟯« is ⟮a family⟯ that is ⟮＿a narcissist's web＿⟯. ⟮Roles⟯ in a ＿⟮narcissist's web＿⟯ may ⟮shift⟯ if ⟮they do not provide the function to the narcissist anymore.⟯   ##### certain roles  ⟮The ＿narcissist's web＿⟯ consists of different ⟮roles⟯: ⟮the narcissist⟯, ⟮the golden person⟯ and ⟮the scapegoat⟯ ⟮establish the structure⟯, butressed by ⟮flying monkeys⟯, ⟮neutral /people.⟯ and sometimes also others (e.g. enablers)  »⟮Golden person and scapegoat⟯« exists for the narcissist ⟮to strengthen their self-image⟯ ⟮by projection⟯. Onto the »⟮golden person⟯«, the narcissist ⟮projects⟯ ⟮the positive version⟯ of ⟮c-;their self image⟯ for ⟮confirmation⟯. Onto the »⟮scapegoat⟯«, the narcissist ⟮projects⟯ ⟮the negative version⟯ of ⟮c-;their self image⟯ for ⟮contrast⟯. Thus, the ⟮＿golden person＿⟯'s ⟮achievements⟯ are ⟮rewarded⟯, the ⟮c-;＿scapegoat＿⟯'s ⟮achievements⟯ are ⟮ignored or punished⟯. However, the ⟮scapegoat⟯ may have ⟮an easier time⟯ ⟮breaking away from the narcissist's web⟯.   The ⟮»neutral person«⟯ is the person that ⟮always tries to mediate⟯, but ends up ⟮denying the reality of what's happening⟯.  A »⟮flying monkey⟯« is a person ⟮used by the narcissist⟯ as ⟮a proxy for their narcissist actions.⟯   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}</span>"	misc::psychology
"# !directions  ## !general  !flex-container:✫directional-terms.jpg✫⟮h∞;✫directional-terms-labeled.jpg✫⟯   table:No. in diagram|Name|Alternative Name ⟮3⟯|⟮c+;s+;dorsal⟯|⟮c+;s-;posterior⟯ ⟮4⟯|⟮c+;s+;ventral⟯|⟮c+;s-;anterior⟯   table:Name|Direction ⟮dorsal⟯|⟮Towards the back (bodypart⟯) ⟮ventral⟯|⟮Towards the belly⟯  ## !positions  ### !lying  table:name|image ⟮supine⟯|⟮✫Screenshot%202021-12-04%20at%2004.40.23.png✫⟯ ⟮prone⟯|⟮✫Screenshot%202021-12-04%20at%2004.40.18.png✫⟯  ## !parts of body  ### !hands  !flex-container:✫sm_240px-Human-Hands-Front-Back.jpg✫   table:Name|Description of side of hand ⟮the dorsal side of the hand⟯|⟮with knuckles etc.⟯ ⟮the palmar side of the hand⟯|⟮the one that has your palm⟯ ⟮the ulnar side of the hand⟯|⟮the side with your pinky finger⟯   # !regions  !flex-container:✫body-regions-numbered.png✫⟮h∞;✫681px-Regions_of_Human_Body.jpg✫⟯   table:No. in diagram|Formal name (noun)|Formal name (adjective)|Alternative name ⟮28⟯|⟮femur⟯|⟮femoral⟯|⟮thigh⟯   # organs  ## bloodstream  ### embolus  »⟮An embolus⟯« is ⟮some kind of foreign object⟯ ⟮in the bloodstream⟯. »⟮An embolism⟯« is ⟮＿an embolus＿⟯ ⟮getting lodged⟯ and ⟮blocking a bloodstream⟯.  #### thrombi  »⟮A thrombus⟯« is ⟮＿an embolus＿⟯ ⟮made up of platelets and other elements⟯. »⟮Thrombosis⟯« is ⟮the formation of a thrombus⟯, ⟮blocking blood⟯. »⟮A thromboembolism⟯« is ⟮an embolism⟯ of ⟮a thrombus⟯ ⟮＿A thromboembolism＿⟯ can only happen ⟮after a thrombosis⟯, after which ⟮the thrombus has broken off.⟯  #### thromboses  ⟮＿Thromboses＿⟯ most often occur in ⟮the veins⟯ of ⟮the legs⟯. ⟮＿Thromboses＿⟯ are often caused by ⟮not moving that bodypart for a while⟯  # muscles  ## types of movement  Image|Name of movement ⟮✫eccentric-cont.png✫⟯|⟮eccentric⟯ ⟮✫concentric-cont.png✫⟯|⟮concentric⟯ ⟮✫isometric-cont.png✫⟯|⟮isometric⟯  ## naming ＆ categorizing  ### body  ！flex-container:✫muscle-anatomy-quiz.png✫   table:No. in diagram|Name ⟮3⟯|⟮Deltoids⟯ ⟮7⟯|⟮Pecs⟯   ### back   ！flex-container:✫sm_muscles_back.jpg✫  table:No.|Name ⟮11⟯|⟮erector spinae⟯   # bones  ## spine  ！flex-container:✫sm_human_spine_sections.jpg✫✫sm_human_spine_sections_labeled.jpg✫   table:No. in diagram|Name ⟮3⟯|⟮Lumbar spine⟯   # joints  ## flexion ＆ extension   flex-container:✫800px-FlexsionExtension2017.jpeg✫  »⟮Flexion⟯« is ⟮movement⟯ that ⟮decreases the angle between⟯ ⟮things connecting at a joint (or similar point)⟯. »⟮Extension⟯« is ⟮movement⟯ that ⟮increases the angle between⟯ ⟮things connecting at a joint (or similar point)⟯. The ⟮opposite of⟯ ⟮＿flexion＿⟯ is ⟮＿extension＿⟯. When a person is sitting down, the ⟮knees⟯ are ⟮flexed⟯. ⟮Flexing⟯ ⟮the elbow (joint⟯) happens ⟮when one brings one's hand closer to one's body⟯. When ⟮a joint can move in both direction⟯, ⟮＿flexion＿⟯ is ⟮in the anterior direction⟯.  # nerves  ## dermatomes  flex-container:✫sm_554px-Grant_1962_663.jpg✫  A »⟮dermatome⟯« is ⟮an area of skin⟯ 'served' by ⟮a single spinal nerve⟯.  Your body has ⟮30⟯ ⟮＿dermatomes＿⟯.  In your ⟮limbs⟯, ⟮＿dermatomes＿⟯ run ⟮vertically⟯.  In your ⟮torso⟯, ⟮＿dermatomes＿⟯ run ⟮horizontally⟯.   # nodules  »⟮Nodule⟯« and »⟮papule⟯« are generic terms for ⟮small⟯ ⟮firm⟯ ⟮lumps⟯. »⟮Nodules⟯« are usually ⟮greater than 1 cm in diameter⟯. ⟮Anything smaller than⟯ ⟮＿a nodule＿⟯ is »⟮a papule⟯«. »⟮A cyst⟯« is ⟮a nodule⟯ that ⟮is filled with fluid⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}</span>"	misc::biology::anatomy
"# practices  ## veganism  ⟮Veganism⟯ is the practice of ⟮abstaining from the use of animal products⟯, particularly in ⟮diet⟯   # institutions  ## metrics  table:Abbreviation|Full ⟮EAR⟯|⟮Estimated Average Requirement⟯ ⟮RDA⟯|⟮Recommended Dietary Allowance⟯   ⟮RDAs⟯ are set higher than ⟮EARs⟯ to ⟮cover people with / situations where people have higher than average needs⟯.   ## disagreements   government organizations do not necessarily ⟮always agree⟯ on the ⟮amounts of nutrients⟯ needed to ⟮avoid deficiency⟯ or ⟮c_;maximum amounts⟯ (however, ⟮the ballpark is often similar⟯ ) ⟮chromium⟯ is designated an ⟮essential nutrient⟯ by the ⟮US⟯ and ⟮c_;Japan⟯, but not the ⟮c_;EU⟯  ^Sources: https://www.efsa.europa.eu/en/efsajournal/pub/3845  ## veganism  ⟮most health authorities⟯ recommend ⟮supplementing⟯ at least ⟮vitamin b12⟯ in ⟮vegan diets⟯   # antinutrients  »⟮Antinutrients⟯« are compounds that ⟮interfere with the absorption of nutrients⟯.  ⟮Phytate (=phytic acid)⟯ may be found in ⟮whole grains⟯, ⟮nuts/seeds⟯, and ⟮legumes⟯ ⟮Phytate⟯ is an ⟮antinutrient⟯ which may ⟮inhibit⟯ ⟮iron⟯, ⟮zinc⟯ and to a lesser extent ⟮calcium⟯ ⟮absorption⟯.  # nutrients  A »⟮nutrient⟯« is a substance that an organism ⟮requires⟯ ⟮for good functioning / maintaining life⟯  ⟮an »essential nutrient«⟯ is ⟮a ＿nutrient＿⟯ that ⟮cannot be synthesized by the body (⇒ must be consumed for survival)⟯  A ⟮nutrient⟯ is »⟮conditionally essential⟯« if ⟮synthesis may be limited in certain circumstances⟯ According to Marion Nestle (no relation), the ⟮list of essential nutrients⟯ is ⟮almost certainly incomplete⟯  »⟮Nutrient density⟯« is ⟮the ratio⟯ of ⟮＿nutrients＿⟯ to ⟮energy content⟯  An »⟮empty calorie⟯« is one from food with ⟮very low ＿nutrient density＿⟯  ## classification  Nutrients are divided into macro- and micronutrients. ⟮a micronutrient⟯ is ⟮a nutrient we require small amounts of⟯ ⟮a macronutrient⟯ is ⟮a nutrient we require large amounts of⟯ ⟮Macronutrient⟯ is sometimes used in the more ⟮restricted⟯ sense  ⟮macronutrient that provides energy⟯    onion-box: ⟮Macronutrient⟯   ⟮Does not provide energy⟯     ⟮Water⟯     ⟮Fiber⟯   ⟮Provides energy⟯     ⟮Alcohol⟯     ⟮Fat⟯     ⟮Carbohydrates⟯     ⟮Protein⟯   onion-box ⟮Micronutrient⟯   ⟮Minerals⟯     ⟮Macrominerals⟯     ⟮Trace minerals⟯     ⟮Ultratrace minerals⟯   ⟮Vitamins⟯     ⟮Fat-soluble⟯       ⟮A⟯       ⟮D⟯       ⟮E⟯       ⟮K⟯     ⟮Water-soluble⟯       ⟮the 8 B vitamins⟯       ⟮C⟯  ## macro  Macronutrients are divided into those containing food energy, and those that do not. Macronutrients that don't contain food energy are water and fiber.  ### food energy  »⟮Food energy⟯« is ⟮energy⟯ derived from ⟮food⟯  ⟮＿Food energy＿⟯ is generally measured in ⟮kilocalories⟯   #### calories  the »⟮calorie⟯«, in its proper definition, is ⟮the amount of energy⟯  ⟮needed to raise the temperature of one gram of water by one Kelvin / deg C⟯  ⟮calorie⟯ is also sometimes nonstandardly called ⟮small calorie⟯, ⟮gram calorie⟯  ⟮kilocalorie⟯ is also sometimes nonstandardly called ⟮calorie (confusingly, and mainly in casual conversation)⟯ ⟮large calorie⟯, ⟮food calorie⟯   #### Foods by food energy  1. ⟮fats⟯  2. ⟮alcohol(ethanol⟯)  3. ⟮carbohydrates⟯/⟮protein⟯  #### carbs  ⟮Saccharide⟯ is as far as I know a synonym for ⟮Carbohydrate⟯  ⟮Carbohydrates⟯ may be classified as ⟮monosaccharides⟯, ⟮disaccharides⟯ or ⟮polysaccharides⟯   #### protein  ⟮Proteins⟯ are made up of ⟮amino acids⟯  ⟮Amino acids⟯ are ⟮organic⟯ compounds. All ⟮Amino acids⟯ contain ⟮amino⟯ (–NH2) and ⟮carboxyl⟯ (–COOH) ⟮＿functional groups＿⟯ ⟮Any amino acid⟯ has a ⟮side chain⟯ (⟮R group⟯) ⟮unique to it⟯ The key elements of an ⟮amino acid⟯ are ⟮carbon⟯, ⟮hydrogen⟯, ⟮oxygen⟯, and ⟮nitrogen⟯, although the ⟮side chains⟯ sometimes ⟮include others⟯ There are ⟮21⟯ ⟮amino acids⟯ ⟮common to all life forms⟯. Of ⟮the 21 common amino acids⟯, for humans, ⟮nine⟯ are ⟮essential⟯, ⟮c-;six⟯ are ⟮conditionally essential⟯, and ⟮c-;six⟯ are ⟮non-essential⟯  #### fats  ⟮Fat⟯ consists of (is an ester of, whatever that means) ⟮fatty acids⟯  ⟮Fatty acids⟯ may either be ⟮saturated⟯ or ⟮unsaturated⟯.   ##### health  While the research is not completely settled, ⟮saturated⟯ and ⟮c_;trans unsaturated fats⟯ are generally considered ⟮unhealthy⟯ and ⟮c-;cis unsaturated fats⟯ considered ⟮healthy⟯  ##### saturation  »⟮Saturation⟯« is about whether ⟮the fatty acid⟯ ⟮has C=C double bonds or only C-C single bonds⟯. »⟮Unsaturated⟯ fatty acids« ones have ⟮one or more⟯ ⟮C=C double bonds⟯. »⟮saturated⟯ factty acids« have ⟮no⟯ ⟮C=C double bonds⟯.  ⟮Saturated fats⟯ are called that because they have the ⟮maximum possible number of hydrogen atoms⟯ ⟮attached to every carbon atom⟯, and thus no ⟮need (or possibility)⟯ for ⟮double C=C bonds⟯   ###### unsaturated  »⟮monounsaturated⟯« fats are ＿unsaturated fats＿ with ⟮one⟯ ⟮C=C double bond(s)⟯  »⟮polyunsaturated⟯« fats are ＿unsaturated fats＿ with ⟮two or more⟯ ⟮C=C double bond(s)⟯    ####### cis and trans  »⟮cis and trans⟯« are the two ways the ⟮structure of the molecule⟯ ⟮around the C=C double bond⟯ may be Only ⟮＿unsaturated fats＿⟯ can be ⟮＿cis or trans＿⟯.  ^Since cis and trans⟯ fats refer to the structure around the ⁑C=C double bond⁑. since an ⟮＿polyunsaturated fatty acid＿⟯ ⟮can have more than one double bond⟯, it ⟮can be ＿both cis and trans＿⟯   ####### omega  ⟮all omega fatty acids⟯ are ⟮unsaturated fatty acids⟯. ⟮all omega (or maybe just all?) fatty acids⟯ ⟮end in⟯ ⟮a methyl group⟯. ⟮The number⟯ of ⟮the omega fatty acids⟯ indicates ⟮how many atoms away from the terminal methyl group⟯ ⟮a C=C double bound occurs⟯. omega ⟮3 and 6⟯ are ⟮polyunsaturated fatty acids⟯. omega ⟮7 and 9⟯ are ⟮monunsaturated fatty acids⟯.  ######## omega-3  There are ⟮three⟯ types of ⟮omega-3⟯ fatty acids ⟮relevant to human nutrition⟯. The ⟮three types of omega-3 fatty acids relevant to human nutrition⟯ are ⟮ALA⟯, ⟮EPA⟯, and ⟮DHA⟯. of ⟮the three types of omega-3 fatty acids relevant to human nutrition⟯, only ⟮ALA⟯ is ⟮essential⟯.  ⟮Of the omega-3 fatty acids⟯, only ⟮ALA is essential⟯ since ⟮EPA and DHA⟯ ⟮can be synthesized from the former⟯. ⟮EPA/DHA synthesis from ALA⟯ may be ⟮impaired in aging⟯ and generally is ⟮not a particularly efficient process⟯ Due to ⟮the flaws in EPA/DHA synthesis⟯ ⟮making sure to consume EPA/DHA⟯ is probably advisable.  ######## omega-3  ⟮there are a bunch of⟯ ⟮omega-6⟯ fatty acids, but only ⟮linoleic acid⟯ is ⟮considered essential⟯ ⇱https://www.hsph.harvard.edu/nutritionsource/what-should-you-eat/fats-and-cholesterol/types-of-fat/omega-3-fats/⇲  ######## sources  There are only ⟮two⟯ ⟮essential⟯ ⟮fatty acids⟯. The ⟮essential fatty acids⟯ are one ⟮omega-3⟯ and one ⟮c_;omega-6⟯ fatty acid. ⟮ALA⟯ ⟮can be found⟯ ⟮in plant sources⟯. ⟮ALA⟯ plant sources are mainly ⟮seeds and nuts⟯. ⟮EPA and DHA⟯ are ⟮generally not found⟯ ⟮in plant sources⟯. ⟮alpha-linoleic acid⟯ ⟮can be found⟯ ⟮in plant sources⟯.  ## micro  ### fortification  Food ⟮fortification⟯ = ⟮enrichment⟯ food ⟮fortification/enrichment⟯ is the process of ⟮adding micronutrients⟯ ⟮to food⟯.   ### genesis  ⟮Minerals⟯ are ⟮originally found⟯ in ⟮rock, soil, or water⟯. ⟮Minerals⟯ ⟮from the rock/soil/water⟯ are ⟮absorbed by plants as they grow⟯. ⟮Minerals⟯ may also be absorbed by ⟮animals⟯ by ⟮them licking rocks⟯. ⟮Minerals⟯ are ⟮passed up the food chain⟯ until ⟮they end up in us humans⟯. ⟮What minerals we get⟯ from ⟮a certain plant/animal⟯ depends on ⟮which they can store⟯, but also ⟮what the soil/animals further down the food chain had in them⟯.   ### vitamins  ⟮Vitamins⟯ are produced by being ⟮＿biosynthesized＿⟯ by ⟮plants/animals⟯. ⟮Which vitamins⟯ are ⟮contained in food⟯ depend on ⟮what the relevant vegetable or animal can biosythesize⟯.  Theoretically, all ⟮vitamins⟯ are defined to be ⟮essential nutrients⟯ ⟮Vitamin D⟯ can be synthesized if ⟮exposed to sunlight (specifically UVB rays)⟯ Since ⟮Vitamin D can be synthesized by us⟯, it is ⟮an exception⟯ to ⟮the idea that all vitamins are essential⟯ »⟮vitamers⟯« are ⟮related molecules⟯ ⟮grouped together into one vitamin⟯ Most ⟮vitamins⟯ are not ⟮single molecules⟯, but ⟮＿vitamers＿⟯. Each ⟮vitamin⟯ is typically used in ⟮multiple reactions⟯, and therefore ⟮most have multiple functions⟯.  ⟮Vitamin B12⟯ is ⟮the only⟯ ⟮vitamin or nutrient⟯ ⟮not available from plant sources.⟯   #### water/fat-soluble  ⟮Vitamins⟯ are generally categorized as either ⟮water- or fat soluble⟯  The ⟮water-soluble vitamins⟯ are ⟮easily excreted from the body⟯. The ⟮fat-soluble vitamins⟯ can ⟮accumulate in the body⟯. ⟮High storage levels⟯ is only an issue with those vitamins that ⟮can accumulate in the body (fat-soluble ones)⟯, and of those generally only ⟮A and D⟯. With ⟮the water-soluble vitamins⟯, ⟮consistent consumption⟯ is required.  ### minerals  ⟮Minerals⟯ are ⟮micronutrients⟯ that ⟮are inorganic chemical elements⟯   #### macro/trace/ultratrace  ⟮Minerals⟯ as ＿micronutrients＿ are subcategorized (by ⟮amount necessary⟯) into ⟮macrominerals⟯, ⟮trace minerals⟯, and ⟮ultratrace minerals⟯.  There are many ⟮ultratrace⟯ elements that have been ⟮suggested as essential⟯, such claims are ⟮difficult to reproduce⟯.    table:Mineral|Is defined by? ⟮Macrominerals⟯|⟮c+;RDA › 150-200mg/day⟯ ⟮Trace minerals⟯|⟮c+;RDA › 150-200mg/day⟯ ⟮ultratrace minerals⟯|⟮RDA of μg/day⟯  #### various minerals  ##### iron  ⟮Iron⟯ ⟮from food⟯ comes in two forms, ⟮heme and non-heme⟯ ⟮Heme⟯ iron can be gotten ⟮only from animal flesh⟯ ⟮non-heme⟯ iron  can be gotten ⟮from other sources too⟯  ⟮Heme⟯ iron is ⟮better absorbed by the body⟯ than ⟮c-;non-heme⟯ iron.  ⟮Iron from non-heme sources⟯ is ⟮more readily absorbed⟯ if ⟮consumed with foods⟯ ⟮that contain⟯ either ⟮heme-bound iron⟯ or ⟮vitamin C⟯.   ### choline  ⟮Choline⟯ is ⟮＿a micronutrient＿⟯ that is ⟮neither a mineral nor a vitamin⟯. ⟮Choline⟯ is ⟮available in⟯ ⟮what feels like just about any food⟯, but is ⟮c-;genrally highest in⟯ ⟮animal products⟯.  # food  ## vegetables  ### leafy greens  ⟮Leaf(y) vegetable⟯ = ⟮leaf(y) green⟯ »⟮leafy greens⟯« are ⟮plant leaves⟯ eaten as ⟮a vegetable⟯ ⟮＿Leafy greens＿⟯ have that name since ⟮they are usually green-colored⟯. ⟮＿leafy greens＿⟯ are grouped since ⟮they share many nutritional similarities⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}{{c209::}}{{c210::}}{{c211::}}{{c212::}}{{c213::}}{{c214::}}{{c215::}}{{c216::}}{{c217::}}{{c218::}}{{c219::}}{{c220::}}{{c221::}}{{c222::}}{{c223::}}{{c224::}}{{c225::}}{{c226::}}{{c227::}}{{c228::}}{{c229::}}{{c230::}}{{c231::}}{{c232::}}{{c233::}}{{c234::}}{{c235::}}{{c236::}}{{c237::}}{{c238::}}{{c239::}}{{c240::}}{{c241::}}{{c242::}}{{c243::}}{{c244::}}{{c245::}}{{c246::}}{{c247::}}{{c248::}}{{c249::}}{{c250::}}{{c251::}}{{c252::}}{{c253::}}{{c254::}}{{c255::}}{{c256::}}{{c257::}}{{c258::}}{{c259::}}{{c260::}}{{c261::}}{{c262::}}{{c263::}}{{c264::}}{{c265::}}{{c266::}}{{c267::}}{{c268::}}{{c269::}}{{c270::}}{{c271::}}{{c272::}}{{c273::}}{{c274::}}{{c275::}}{{c276::}}{{c277::}}{{c278::}}{{c279::}}{{c280::}}{{c281::}}{{c282::}}{{c283::}}{{c284::}}{{c285::}}{{c286::}}{{c287::}}{{c288::}}{{c289::}}{{c290::}}{{c291::}}{{c292::}}{{c293::}}{{c294::}}{{c295::}}{{c296::}}{{c297::}}{{c298::}}{{c299::}}{{c300::}}{{c301::}}{{c302::}}{{c303::}}{{c304::}}{{c305::}}{{c306::}}{{c307::}}{{c308::}}{{c309::}}{{c310::}}{{c311::}}{{c312::}}{{c313::}}{{c314::}}{{c315::}}{{c316::}}{{c317::}}{{c318::}}{{c319::}}{{c320::}}</span>"	misc::biology::nutrition
"# base and superstructure  In marxism, ⟮society⟯ ⟮consists of⟯ two parts, ⟮the ＿base＿⟯ and ⟮the ＿superstructure＿⟯. The »⟮base⟯« consists of ⟮forces and relations of production⟯. The »⟮superstructure⟯« consists of ⟮culture, institutions, rituals, states, etc.⟯ In marxism, the ⟮base and superstructure⟯ ⟮reciprocally influence each other⟯, but ⟮the base is predominant⟯.  # universal equivalent  »⟮the universal equivalent⟯« is ⟮the measure⟯ by which ⟮all commodities⟯ are ⟮compared and exchanged⟯  To marx, ⟮money⟯ is the thing that eventually takes over the role of ⟮the universal equivalent⟯ in capitalism.  # value  To ⟮marx⟯, the »⟮exchange value⟯« of a good is ⟮how it can be exchanged for other commodities⟯ To ⟮marx⟯, the »⟮use value⟯« of a good is ⟮its tangible features/physical properties⟯ that  ⟮fulfill human needs/wants⟯   form|corresp. value|explanation ⟮natural form⟯|⟮use value⟯|⟮actual tangible form (the actual physical form, e.g. cloth, iron, etc.⟯) ⟮value form⟯|⟮exchange value⟯|⟮a good in relation to different commodities (e.g. 20 yards of linen = 1 coat⟯)  # labor  ## reproductive labor  »⟮reproductive labor⟯« is ⟮the work⟯ that ⟮reproduces other labor⟯. ⟮＿Reproductive labor＿⟯ is ⟮absolutely necessary⟯ - without ⟮c-;reproductive labor⟯, there ⟮would be no labor at all⟯. ⟮＿Reproductive labor＿⟯ consists of ⟮chores⟯ and ⟮childrearing⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}</span>"	misc::econ::marx
"# applied  In some sense, math ⟮may be divided⟯ into ⟮pure mathematics and applied mathematics⟯  »⟮pure mathematics⟯« is ⟮the study of mathematical concepts independent from applications⟯  # units   ## units  ⟮Unit of measurement⟯ is often abbreviated ⟮unit⟯. A »⟮unit (of measurement)⟯« is ⟮a certain ＿magnitude＿⟯ ⟮of a given ＿quantity＿⟯. E.g. the metre is a certain magnitude (the length of the path traveled by light in a vacuum ...) of the quantity length ⟮＿An unit＿⟯ typically can be ⟮identified by⟯ its ⟮＿unit name＿⟯ and/or ⟮＿unit symbol＿⟯. »⟮An unit name⟯« is ⟮a common noun⟯ ⟮identifying⟯ ⟮＿a unit＿⟯. »⟮An unit symbol⟯« is a ⟮character⟯, ⟮a few characters⟯ or ⟮a ＿expression＿ containing other ＿unit symbols＿⟯ ⟮identifying⟯ ⟮＿a unit＿⟯  ### non-SI  #### imperial ＆ US customary  »⟮Imperial units/system⟯« are the ⟮Units used in the british empire (after 1826)⟯ »⟮United States customary units⟯« are the ⟮units used in the US⟯. However, ⟮imperial units⟯ is often ⟮falsely⟯ used as ⟮a synonym for USC units as well⟯. In general, ⟮many units are shared⟯ between USC and imperial units, ⟮but there are also significant differences⟯.  ##### temperature  ⟮Fahrenheit⟯ has the ⟮＿unit symbol＿⟯ ⟮°F⟯. An ⟮increase⟯ ⟮of 1 °F⟯ corresponds to an ⟮c_-;increase⟯ ⟮of 5/9 °C⟯ The ⟮distance between⟯ ⟮water melting⟯ and ⟮c_;boiling⟯ in ⟮Fahrenheit⟯ is ⟮180 degrees⟯   table:Temperature (°F)|Significance 32|Water melts 98|Human body temperatue 212|Water boils  ### bits ＆ bytes  table:unit symbol|unit name b|bit B|byte  ## unit prefix  »⟮A unit prefix⟯« is ⟮a prefix⟯ ⟮appended to⟯ ⟮＿an unit of measurement＿⟯. ⟮＿An unit prefix＿⟯ indicates ⟮＿multiples＿⟯ or ⟮c_;＿submultiples＿⟯ of ⟮＿the unit＿⟯. ⟮＿An unit prefix＿⟯ can be identified by its ⟮＿(unit) prefix name＿⟯ or ⟮c_;＿(unit) prefix symbol＿⟯. »⟮An (unit) prefix name⟯« is ⟮a common noun⟯ ⟮identifying⟯ ⟮＿a unit prefix＿⟯. »⟮An (unit) prefix symbol⟯« is a ⟮character/few characters⟯ ⟮identifying⟯ ⟮＿a unit prefix＿⟯  ### SI prefix  »⟮A metric prefix⟯« is ⟮＿a unit prefix＿⟯ for ⟮＿the metric system＿⟯. ⟮All⟯ ⟮＿metric prefixes＿⟯ are ⟮base-10⟯. ⟮Most⟯ ⟮＿metric prefixes＿⟯ are ⟮multiples/submultiples of 10⎴3⎴⟯. »⟮An SI prefix⟯« is ⟮＿a metric prefix＿⟯ that ⟮was standartized within SI⟯. ergo »⟮SI prefix symbols/names⟯« are ⟮those ＿unit prefix symbols/names＿⟯ ⟮used for SI⟯ ⟮＿SI prefix symbols＿⟯ are ⟮single⟯ characters (except ⟮the one for deca (da)⟯). ⟮＿SI prefix symbols＿⟯ are typically ⟮lowercase⟯ for ⟮submultiples⟯. ⟮＿SI prefix symbols＿⟯ are typically ⟮uppercase⟯ for ⟮multiples⟯. As ⟮an exception⟯, the ⟮＿SI prefix symbols＿⟯ for ⟮10, 100 and 1000⟯ are ⟮lowercase⟯. The ⟮＿SI prefix symbols＿⟯ are ⟮the first letter of the prefix name⟯, except for ⟮deca (da) and micro (μ)⟯.  #### prefix name  SI prefix name|10⎴?⎴ ⟮exa⟯|⟮10⎴18⎴ = 1000000000000000000⟯ ⟮peta⟯|⟮10⎴15⎴ = 1000000000000000⟯ ⟮tera⟯|⟮10⎴12⎴ = 1000000000000⟯ ⟮giga⟯|⟮10⎴9⎴ = 1000000000⟯ ⟮mega⟯|⟮10⎴6⎴ = 1000000⟯ ⟮kilo⟯|⟮10⎴3⎴ = 1000⟯ ⟮hecto⟯|⟮10⎴2⎴ = 100⟯ ⟮deca⟯|⟮10⎴1⎴ = 10⟯ ø|1⎴0⎴ = 1 ⟮deci⟯|⟮10⎴−1⎴ = 0.1⟯ ⟮centi⟯|⟮10⎴−2⎴ = 0.01⟯ ⟮milli⟯|⟮10⎴−3⎴ = 0.001⟯ ⟮micro⟯|⟮10⎴−6⎴ = 0.000001⟯ ⟮nano⟯|⟮10⎴−9⎴ = 0.000000001⟯ ⟮pico⟯|⟮10⎴−12⎴ = 0.000000000001⟯ ⟮femto⟯|⟮10⎴−15⎴ = 0.000000000000001⟯  ### for binary numbers  »⟮A binary prefix⟯« is ⟮＿a unit prefix＿⟯ that ⟮is base-2⟯. ⟮＿Binary prefixes＿⟯ are most commonly ⟮multiples of 2⎴10⎴ = 1024⟯. ⟮binary-prefix-symbol⟯ ::= ⟮‹metric-prefix-symbol›i⟯ ⟮binary-prefix-name⟯ ::= ⟮‹metric-prefix-name-first-2-chars›bi⟯ Sometimes, ⟮＿metri prefixes＿⟯ are used as ⟮＿binary prefixes＿⟯, however this is ⟮incorrect usage ⟯ ⟮＿metric/decimal prefixes＿⟯ are ⟮base 10⟯ even when ⟮used on bits or bytes⟯.  ## SI  ### history/organization  A ⟮decimal⟯-based ⟮system of measurements⟯ based on ⟮the meter⟯ was first introduced in ⟮france⟯ in ⟮the 1790s⟯. ⟮＿The metric system＿⟯ ⟮evolved from⟯ ⟮the french decimalised system.⟯ »⟮SI⟯« is ⟮a organization/standartization⟯ of ⟮＿the metric system＿⟯. ⟮＿SI＿⟯ is short for ⟮International System of Units⟯ ⟮SI⟯ is the ⟮nearly universally used⟯ ⟮system of measurements⟯.   ### base ＆ derived units  The ⟮SI⟯ has ⟮7⟯ ⟮base units.⟯  The ⟮7 ＿base units＿⟯ are the units from which ⟮all⟯ ⟮＿derived units＿⟯ ⟮can be derived⟯. The ⟮7 ＿base units＿⟯ are defined by using seven ⟮＿defining constants＿⟯. the »⟮defining constants⟯« are constants that ⟮have certain exact numerical values⟯ when ⟮expressed in terms of their SI units⟯. e.g. c = 299 792 458 m/s ⟮The SI⟯ has ⟮22⟯ ⟮＿derived units＿⟯. »⟮A derived unit⟯« is a unit that ⟮can be expressed as⟯ ⟮a product of ＿base unit(s)＿⟯. ⟮＿Derived units＿⟯ may contain ⟮fractions⟯ since ⟮c_;a fraction⟯ is ⟮just multiplication with a thing with negative exponent⟯. Within ⟮the 22 ＿derived units＿⟯ there are ⟮2 unitless units⟯, derived via ⟮unit elimination⟯.  e.g. rad = m/m = 1 From the ⟮＿base＿⟯ and ⟮c_;＿derived units＿⟯, ⟮other coherent units⟯ ⟮can be derived⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}</span>"	math::applied
"# probability theory  ## random variable  ### discrete or continous  A ⟮＿random variable＿⟯ may be ⟮＿coninous＿⟯ or ⟮＿discrete＿⟯. A »⟮discrete random variable⟯« has either ⟮a finite⟯ or ⟮a countably infinite⟯ ⟮set of permitted values⟯.  # statisstics  »⟮statistis⟯« is the field concerned with ⟮data⟯.  ## descriptive statistics  »⟮Descriptive statistics⟯« is ⟮the branch of statistics⟯ that is concerned with ⟮various ＿descriptive statistics＿⟯. »⟮A descriptive statistic⟯« is a statistic designed to ⟮describe features of a collection of information⟯.  ### diagrams  #### box plot        ⟮Q1⟯     ⟮c_;Q2⟯    ⟮c_;Q3⟯ ⟮min⟯    ┏━━━━━┳━━━━━┓    ⟮c_;max⟯  ┃━━━━━┃     ┃     ┃━━━━━┃   ⟮whskr⟯┗━━━━━┻━━━━━┛⟮c_;whskr⟯        ┗━━━━━┳━━━━━┛             ⟮IQR⟯  ### summary statistics  ⟮＿Summary statistics＿⟯ are an important part of ⟮descriptive statistics⟯ »⟮A summary statistic⟯« is ⟮＿a statistic＿⟯ to ⟮summarize a set of data points⟯. ⟮＿Summary statistics＿⟯ for ⟮a single variable⟯:  (measures of) {⟮central tendency⟯, ⟮dispersion⟯, ⟮shape⟯}  #### central tendency  »⟮a central tendency⟯« as ⟮＿a summary statistic＿⟯ is ⟮a central or typical value⟯ for ⟮a probability distribution⟯  #### dispersion  ⟮dispersion⟯ is also called ⟮variability⟯, ⟮scatter⟯ or ⟮spread⟯. »⟮Dispersion⟯« as ⟮＿a summary statistic＿⟯ is ⟮how spread out⟯ ⟮the values are⟯ ⟮from the central tendency⟯.  ##### variance-related  ##### quantile  »⟮A quantile⟯« ⟮divides⟯ something into ⟮intervals with equal probability⟯. ⟮＿A quantile＿⟯ may divide ⟮a probability distribution⟯ or ⟮a set of observations⟯. Importantly, ⟮＿a quantile＿⟯ is ⟮the divider⟯, not ⟮c_;the groups created⟯. ⟮The groups created⟯ by ⟮＿quantiles＿⟯ are known as ⟮halves, thirds, quarters⟯... A »⟮q-quantile⟯« divides the thing ⟮into q groups of equal sizes⟯.  a ⟮＿q-quantile＿⟯ creates ⟮q-1⟯ ⟮＿quantiles＿⟯.  ###### various quantiles  table:q-quantile|name ⟮2⟯|⟮median⟯ ⟮3⟯|⟮ter(t/c)ile⟯ ⟮4⟯|⟮quartile⟯ ⟮100⟯|⟮percentile⟯  ###### quartile  The three ⟮quartiles⟯ are termed ⟮Q⎵1⎵, Q⎵2⎵, Q⎵3⎵⟯ ⟮Q⎵2⎵⟯ is also ⟮the median⟯.  ####### IQR  The ⟮＿IQR＿⟯ is a ⟮＿disperson＿⟯ ⟮＿summary statistic＿⟯. »⟮IQR⟯« = ⟮Q⎵3⎵ - Q⎵1⎵⟯  #### shape  »⟮Shape⟯« as ⟮＿a summary statistic＿⟯ is ⟮how the data values are distributed⟯ ⟮across the range of values in the sample⟯.  ## inferential statistics  »⟮Inferential statistics⟯« is ⟮the branch of statistics⟯ concerned with ⟮＿statistical inferences＿⟯. »⟮A statistical inference⟯« is ⟮inferring truths about the population⟯ ⟮from other data⟯.  ### populations ＆ samples  A »⟮parameter⟯« is ⟮a truth⟯ about ⟮the population⟯  a »⟮statistic⟯« is ⟮a truth⟯ about ⟮a sample⟯  An ⟮estimator⟯ is ⟮＿a statistic＿⟯ that ⟮is being used to estimate⟯ ⟮＿a parameter＿⟯.  ## correlation  »⟮Correlation⟯« is ⟮a statistical relationship⟯ ⟮between two ＿random variables＿⟯ ⟮＿Correlation＿⟯ may be ⟮causal⟯ or ⟮c_;not⟯. Correlation is often used for degree of linear correlation.  ### spurious association  ⟮Spurious association⟯ = ⟮spurious correlation⟯ »⟮A spurious correlation⟯« when ⟮two ＿random variables＿⟯ are ⟮＿correlated＿⟯ but ⟮not causally related⟯.  #### confounding variable  flex-container:✫sm_1000px-Simple_Confounding_Case.svg.jpg✫   All the same: ⟮(confound|lurk)⟯(⟮er|ing⟯ ⟮(variable|factor)⟯  »⟮a confounding variable⟯« is ⟮a variable⟯ that ⟮influences both dependent and independent variable⟯, causing ⟮＿a spurious association＿⟯.  # applied statistics  ## empirical statistical laws  ### pareto principle  flex-container:✫320px-Probability_density_function_of_Pareto_distribution.svg.png✫✫Pareto_principle.png✫   The »⟮pareto distribution⟯« is a ⟮family of probability distributions⟯ that ⟮applies to⟯ ⟮a large set of natural and social phenomena⟯.  The ⟮＿pareto principle＿⟯ is a ⟮specific⟯ ⟮＿pareto distribution＿⟯. »⟮The pareto principle⟯« says that ⟮80% of the coutcomes are due to 20% of causes⟯.  ## citation metrics  ### coupling   flex-container:✫Visualization_of_co-citation_analysis_methods.png✫  »⟮Bibliographic coupling⟯« is about if ⟮two documents⟯ ⟮cite the same works⟯.  Two documents are ⟮＿bibliographically coupled＿⟯ if ⟮they cite at least one work in common⟯.  The »⟮bibliographic coupling strength/index⟯« is ⟮how many of the same works⟯ ⟮two documents cite⟯.  ### co-citation  »⟮Co-citation⟯« is about if ⟮two documents⟯ ⟮are cited together by⟯ ⟮other documents⟯.  Two documents are ⟮＿co-cited＿⟯ if ⟮at least one other document cites two documents in common⟯. The »⟮co-citation strength/index⟯« is ⟮how many other documents⟯ ⟮cite two documents together⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}</span>"	math::probability
"# language geography  »⟮Language geography⟯« is the study of ⟮the interaction of language and place/region⟯.  ## geography of languages  ⟮＿The geography of languages＿⟯ is ⟮a branch of⟯ ⟮＿language geography＿⟯. »⟮The geography of languages⟯« is the study of ⟮the distribution of languages⟯ in ⟮space and time⟯.  ### language boundary  ⟮language border⟯ = ⟮language boundary⟯ »⟮A language boundary⟯« is ⟮a boundary⟯ ⟮c_;separating⟯ ⟮two areas⟯ where ⟮different (mutually unintelligible) languages are spoken⟯  ### sprachraum  »⟮A sprachraum⟯« is⟮ a geographical region⟯ ⟮where a common L1 is spoken⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}</span>"	linguistics::language-geography
"# lexicology  »⟮Lexicology⟯« is the study of ⟮＿lexical units＿⟯. ⟮Lexical item⟯ and ⟮lexical unit⟯ are synonyms. ⟮＿A lexical unit＿⟯ can be ⟮a part of a word⟯, ⟮c_;word⟯, or ⟮c_;chain of words⟯. »⟮A lexeme⟯« is ⟮＿a lexical unit＿⟯ that ⟮is a single word⟯. Most commonly, ⟮the distinction between⟯ ⟮＿lexeme＿⟯ and ⟮c_;＿lexical unit＿⟯ is ⟮not at issue⟯. »⟮A lexical unit/lexeme⟯« is ⟮the fundamental unit⟯ of ⟮a language's lexicon⟯. A ⟮＿lexical unit/lexeme＿⟯ is ⟮＿an emic unit＿⟯. A ⟮＿lexical unit/lexeme＿⟯'s ⟮＿etic units＿⟯ are ⟮＿lex＿⟯es. »⟮A lex⟯« is ⟮＿an inflectional variant＿⟯.  ## lexis  »⟮A lexis⟯« is ⟮a set of⟯ ⟮＿lexical units＿⟯ g⟮rouped by some criteria.⟯ »⟮The lexis (of a languoid)⟯« is ⟮the set of all lexical units⟯ ⟮in a given languoid⟯. »⟮Lexicon⟯« may be ⟮a synonym of⟯ ⟮＿lexis (of a languoid)＿⟯, or may be ⟮a type of dictionary⟯ on ⟮＿the lexis (of a languoid)＿⟯.  ## Lexeme  By convention, ⟮＿lexical units/lexemes＿⟯ are represented in ⟮all caps⟯. Any ⟮＿lexeme＿⟯ belongs to ⟮a particular ⟮＿syntactic category/word class＿⟯⟯. A »⟮lemma⟯« is ⟮＿the inflectional variant＿⟯ that is chosen by ⟮convention⟯ to ⟮represent⟯ the ⟮lexeme⟯.  ## lexicography  ⟮＿Lexicography＿⟯ is a branch of ⟮＿lexicology＿⟯. »⟮Lexicography⟯« is concerned with ⟮dictionaries⟯.  ### headword  »⟮The headword⟯« is ⟮the word⟯ ⟮under which dictionary entries appear⟯ ⟮＿The inflectional variant＿ of⟮＿a lexeme＿⟯ used as ⟮＿a headword＿⟯ is usually ⟮＿its lemma＿⟯. Sometimes ⟮＿lemma＿⟯ and ⟮＿headword＿⟯ are used synonymously.  ## types of lexical units  ### nounlikes  #### terms  »⟮Terminology⟯« as a field is ⟮the study of ＿terms＿⟯. »⟮Terminology⟯« as a grouping is ⟮a set of ⟮＿terms＿⟯⟯. »⟮A term⟯« is ⟮＿a lexical unit＿⟯ with ⟮a meaning⟯ ⟮related to a particular field⟯.  ##### kinship terminology  »⟮Kinship terminology⟯« is ⟮＿the terminology＿⟯ ⟮related to kinship relationships⟯.  ###### english  ⟮Your parent's siblings⟯ are called ⟮parsib⟯/⟮pibling⟯/⟮auncle⟯.  ⟮Your siblings children⟯  are called ⟮niblings⟯.    table:family term|female|male ⟮Parsib/pibling/auncle⟯|⟮aunt⟯|⟮uncle⟯ ⟮nibling⟯|⟮niece⟯|⟮nephew⟯  #### proper and improper  ⟮＿Nouns＿⟯ as ⟮＿lexical units＿⟯ may be ⟮proper⟯ or ⟮c_;common⟯. »⟮A proper nouns⟯« is ⟮＿a noun＿⟯ that ⟮refers to (an) entity/ies considered unique⟯. »⟮A common noun⟯« is ⟮＿a noun＿⟯ that ⟮refers to a class of entities or a member of that class⟯.  ##### orthography  ###### in english  In English, proper nouns generally but not always ⟮don't take an article⟯ In English, proper nouns generally but not always are ⟮singular⟯. In English, proper nouns are ⟮capitalized⟯.  ##### proper nouns  »⟮Onomastics⟯« is the study of ⟮＿proper nouns＿⟯.  ###### epithets  »⟮an epithet⟯« is ⟮＿a lexical unit＿⟯ that ⟮accompanies a name⟯ ⟮as a matter of course⟯ Sometimes, an »⟮epithet⟯« may also be something that ⟮replaces⟯ ⟮a name⟯.  Examples of ⟮＿epithets＿⟯ are ⟮☞pallas☜ athena, alfred ☞the great☜, suleiman ☞the magnificent☜, richard ☞the lionheart☜⟯  ###### people in certain states  ####### necronyms  »⟮A necronym⟯« is ⟮＿a proper noun＿⟯ which ⟮references a person who has died⟯. Most commonly, the ⟮additional constraint⟯ is added to ⟮＿necronym＿⟯ that the name is ⟮not the same as the person had in life⟯.  ##### placeholder names  »⟮A placeholder name⟯« is ⟮＿a proper noun＿⟯ as a ⟮purposefully generic⟯ ⟮＿identifier＿⟯.  ###### in various languages  table:thing it is placeholding|language|value ⟮given name (male)⟯|⟮en⟯|⟮john⟯ ⟮given name (female)⟯|⟮en⟯|⟮jane⟯ ⟮given name (male)⟯|⟮ja⟯|⟮太郎⟯ ⟮given name (female)⟯|⟮ja⟯|⟮花子⟯ ⟮family name⟯|⟮en⟯|⟮doe⟯ ⟮family name⟯|⟮ja⟯|⟮山田⟯  ## phraseology  »⟮Phraseology⟯« is the study of ⟮＿phrasemes＿ and related phenomena⟯. »⟮A phraseme⟯« is a ⟮multi-word⟯ ⟮＿lexical unit＿⟯ which ⟮violates the ＿principle of compositionality＿ to some degree (i.e. their meaning is not completely deducable from their parts)⟯  ### types of phrasemes  #### phrasal templates  »⟮A phrasal template⟯« is ⟮a template with multiple empty slots⟯ which allows one to ⟮create ＿phraseme＿-like constructions⟯ ⟮at will⟯. »⟮Snowclone⟯« is a synonym of ⟮＿phrasal template＿⟯, though it carries the nuance that ⟮the template is very cliche⟯. Examples: In space, no one can hear you X; X is the new Y; The mother of all X; X-ing while Y; To X or not to X; Have X, will travel; X considered harmful  #### chunk  »⟮A chunk⟯« is ⟮a sequence of two or more words⟯ that ⟮cooccur with high frequency⟯ but ⟮don't quite meet the threshold for being a ＿phraseme＿⟯.  #### idioms  »⟮An idiom⟯« is ⟮＿a phraseme＿⟯ which ⟮violates the principle of compositionality to a very high degree⟯. Most commonly, ⟮＿idioms＿⟯ have the structure of either ⟮complement verb⟯ or ⟮subject complement verb⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}</span>"	linguistics
"# corpora  A »⟮corpus⟯« is ⟮a set of⟯ ⟮text/language⟯.  ⟮＿Corpora＿⟯ are generally designed to be ⟮machnine-readable⟯.  »⟮Corpus linguistics⟯« studies ⟮language⟯ ⟮via ＿corpora＿⟯.  Statistically, the ⟮corpus⟯ is ⟮a sample⟯ of ⟮c_;the population (all relevant language⟯)   ## types of corpora  ### parallel text  A »⟮parallel text⟯« is a text ⟮placed alongside⟯ ⟮its translation(s)/transcriptions.⟯  ⟮»a parallel corpus⟯« is ⟮＿a corpus＿⟯ of ⟮＿parallel texts＿⟯. The ⟮rosetta stone：famous⟯ was/is ⟮a ＿parallel text＿⟯.  ## features of corpora  ### collocations  »⟮collocation⟯« in a wide sense is ⟮the co-occuring of⟯ ⟮two linguemes⟯ ⟮more often than would be expected by chance⟯. »⟮collocation⟯« in the narrow sense is ⟮＿a collocation (wide sense)＿⟯ ⟮of ＿lexical units＿⟯. »⟮Colligation⟯« is ⟮＿colocation＿⟯ ⟮of ⟮＿syntactic categories＿⟯⟯. ⟮Semantic prosody⟯ = ⟮discourse prosody⟯. »⟮Semantic prosody⟯«, is ⟮seemingly neutral words⟯ ⟮gaining certain associations⟯ through ⟮frequent ＿collocation＿⟯.   ### concordances  flex-container:✫KWIC.png✫✫KWOC.png✫✫KWAC.png✫   »⟮A concordance⟯« is ⟮a list of⟯ ⟮＿concordance lines＿⟯. »⟮A concordance line⟯« consists of ⟮＿a keyword＿⟯ and ⟮＿its context＿⟯. »⟮The context⟯« are ⟮the words surrounding ＿the keyword＿ (in the original text)⟯. »⟮A keyword⟯« is ⟮a single ＿lexical unit＿⟯ that ⟮matches the lexical unit or pattern provided.⟯ The »⟮concordance line format⟯« is how precisesly ⟮＿the keyword＿ and ＿context＿⟯ ⟮are ordered⟯. There are three ⟮＿concordance line formats＿⟯: ⟮KWIC, KWAC, or KWOC⟯ »KWIC/KWAC/KWOC« = ⟮Key Word in/alongside/out of context⟯ ⟮`ptx`⟯ is ⟮a shell command⟯ that ⟮produces a KWIC concordance⟯.   #### KWIC KWAC KWOC  Using »⟮KWIC⟯«, ⟮＿the keyword＿ appears⟯ ⟮in the middle of ＿the context＿⟯ Using »⟮KWAC and KWOC⟯«, ⟮＿the keyword＿ appears⟯ ⟮at the far left, with ＿the context＿ after it.⟯ The difference between »KWAC« and »KWOC« is that ⟮＿the context＿ for »KWAC« is sans ＿the keyword＿, while＿ the context＿ for »KWOC« includes ＿the keyword＿.⟯ ⟮＿KWAC＿⟯ may also refer to ⟮adding extra info to the collocation⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}</span>"	linguistics
"# quantitiative linguistics  »⟮Quantitative linguistics⟯« is the branch of linguistics that investigates language using ⟮quantitative methods⟯.  ## linguistic law  ⟮＿A linguistic law＿⟯ is a phenomenon in ⟮＿quantitative linguistics＿⟯. »⟮A linguistic law⟯« is⟮ a statistical regularity⟯ in ⟮the relationship between scales⟯ of ⟮＿linguistic units＿⟯.  ### brevity law  ⟮Brevity law⟯ = ⟮zipf's law of abbreviation⟯ »⟮Brevity law⟯« is ⟮＿a linguistic law＿⟯ that says ⟮the frequency of use⟯ of ⟮a word⟯ is ⟮inversely proportional⟯ to ⟮c-2;the length⟯ of ⟮a word⟯. According to ＿brevity law＿: The ⟮shorter a word is⟯, the ⟮more often it is used⟯; According to ＿brevity law＿: the ⟮longer a word is⟯, the ⟮less frequently it is used⟯ ⟮＿Brevity law＿⟯ can be found in ⟮all investigated (currently 1k languages of 80 language families)⟯ ⟮natural languages⟯ , as well as ⟮in some other communication systems, such as that of primates.⟯ ⟮＿Brevity law＿⟯ was first described in ⟮1945⟯ in corpus work on American English by ⟮Ziph⟯.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}</span>"	linguistics
"# fundamental concepts  ## units  ### emic/etic  »⟮An emic unit⟯« is ⟮an abstract unit⟯ of ⟮a number of⟯ ⟮variant forms⟯. »⟮An etic unit⟯« is ⟮a variant form⟯ of ⟮＿an emic unit＿⟯. ⟮Various types of⟯ ⟮＿emic/etic units＿⟯ exists for ⟮different fields/concerns⟯. ⟮＿Emic units＿⟯ carry ⟮the name of ＿the etic unit＿⟯, ⟮suffixed with -eme⟯. ⟮＿Etic units＿⟯ of ⟮the same ＿emic units＿⟯ are ⟮allo-⟯.   table:emic unit|etic unit- ⟮phoneme⟯|⟮phone⟯ ⟮morpheme⟯|⟮morph⟯ ⟮grapheme⟯|⟮glyph⟯ ⟮phraseme⟯|⟮phrase⟯ ⟮sememe⟯|⟮seme⟯ ⟮pragmeme⟯|⟮pract⟯ ⟮lingueme⟯|⟮ling⟯ ⟮grammeme⟯|⟮gram⟯ ⟮lexical unit/lexeme⟯|⟮lex⟯  ### things  »⟮A linguistic unit⟯« is ⟮a generic name⟯ for ⟮an element⟯ which ⟮forms a sequence with others of its kind⟯. ^A linguistic unit may be e.g. phoneme, morpheme, phraseme, grapheme, syllable... »⟮A segment⟯« is ⟮＿a linguistic unit＿⟯ of which ⟮we're not sure which linguistic unit it is⟯, or ⟮for which it is irrelevant⟯. »⟮A lingueme⟯« is ⟮any linguistic emic unit⟯ which can be independently learned and transmitted. A linguistic item is any linguistic thing under analysis  ### feature  »⟮A feature⟯« is a ⟮binary⟯ ⟮value⟯. ⟮＿A feature＿⟯ is indicated by ⟮[‹name›]⟯. ⟮＿A feature＿⟯'s ⟮states⟯ are indicated by ⟮[+ ‹name›]⟯ and ⟮c_;[- ‹name›]⟯ Most commonly, ⟮＿an etic unit＿⟯ ⟮can be further analyzed into⟯ ⟮multiple ＿features＿⟯.  ### sequences  »⟮A string⟯« is most commonly assumed to be ⟮a string of words⟯, but may also be a synonym for ⟮sequence of any linguistic unit⟯. »⟮A sequence of linguistic units⟯« is ⟮a series of these linguistic units⟯ with ⟮no claim as to compositionality⟯.  ## ways things can exist  ### markedness  According to ⟮Haspelmath (2005)⟯, ⟮markedness⟯ has ⟮12 distinctive senses⟯, which makes it ⟮pretty hard to use unambiguously⟯. ⟮Most but not all⟯ senses of ⟮markedness⟯ share ⟮a feeling of oddness⟯ A ⟮marked⟯ form, ⟮across most of the⟯ senses, is more ⟮rare⟯.  ### implicational scale  flex-container:✫mplicational-scale-of-basic-color-terms.png✫✫sm_2021-10-21--08-21-02-screenshot.jpg✫   If a thing exsists »⟮⟮implicational scale⟯⟯«, if ⟮one thing is present⟯, ⟮all the things⟯ ⟮lower on the scale⟯ ⟮will be as well⟯ If a thing is on an ⟮＿implicational scale＿⟯, and we find that ⟮the e.g. 5th stage is present⟯, we would expect to also find ⟮all four lower stages to be present⟯.  ## structuralism  ### history  『⟮Course in General Linguistics⟯』 is a book by ⟮de Sassure⟯ and was published in ⟮1916⟯ ⟮De Sassure⟯ founded ⟮structuralism⟯ in the book 『⟮Course in General Linguistics⟯』. ⟮Structuralism⟯ lies at the base of ⟮emic units⟯ and thus of ⟮linguistics⟯. Outside of ⟮linguistics⟯, ⟮structuralism⟯ had ⟮its heyday⟯ in ⟮the 1950s and 1960s⟯ in ⟮France⟯ (but is still influential)   ### signs  #### semiotics  »⟮semiosis⟯« is ⟮activity/process involving signs⟯  »⟮semiotics⟯« is the study of ⟮＿semiosis＿⟯  ### the sign  »⟮A sign⟯« consists of ⟮the connection between⟯ ⟮＿a signfier＿ and ＿a signified＿⟯. I will define »⟮sign component⟯« as ⟮＿a cover term＿⟯ for ⟮either ＿sign＿, ＿signifer＿ or ＿signified＿⟯. »⟮The sign compnent type⟯« is ⟮either sign, signifier or signified.⟯ The »⟮sign component type set⟯« is ⟮the set of⟯ ⟮＿all sign components＿⟯ of ⟮＿the sign component type＿⟯. A ⟮＿sign component＿⟯ ⟮gains its meaning⟯ by⟮ contrast with⟯ ⟮all other members of the ＿sign component type set＿⟯. The ⟮＿sign component type set＿⟯ ⟮starts out as⟯ ⟮an undifferentiated mass⟯, ⟮c-;which is then⟯ ⟮divided into⟯ ⟮a finite number of ＿sign components＿⟯. So, the meaning of a signifier ⟮horse⟯ is ⟮¬{x ∈ S⎵signifier⎵⟯} | ⟮x ≠ horse}⟯ The ⟮＿sign＿⟯ is ⟮arbitrary⟯ because ⟮any ＿signified＿⟯ ⟮could have been signified by a different ＿signifier＿⟯.  Since the ⟮＿sign＿⟯ consists of ⟮the two parts of ＿signifier＿ and ＿signified＿⟯, the model is often called ⟮dyadic⟯.   #### image  flex-container:✫sm_planes_of_sound__thought.gif✫✫https://miro.medium.com/max/520/1*YI30OcZeMkEqy_aguUZbug.png✫   table:What?|Where in the image? ⟮a sign⟯|⟮the are between any two dotted lines⟯ ⟮the arbitrary dividing point of sings⟯|⟮the dotted lines⟯ ⟮the masses of signifier and signifieds⟯|⟮the wavy areas⟯   #### nesting  flex-container:✫sm_paste-4ec4611eb2c01f7a72ccea70f0ba84d090431577.jpg✫✫sm_paste-e61d7b203b885a6825eeb111737b0f16b1bcaf01.jpg✫   ⟮Barthes⟯ took ⟮Sassures sign⟯ and ⟮nested it.⟯  ⟮Derrida⟯ then took ⟮Barthes sign⟯ and realized that it ⟮could be nested infinitely⟯ in ⟮both directions⟯ ⟮The endless nesting of signs⟯ creates ⟮an endless deferrment of meaning⟯ »⟮Différance⟯« is ⟮the endless deferrment of meaning⟯ due to ⟮the endless nesting of signs⟯.  ## perspective  ### langue and parole  flex-container:✫sm_paste-7e1cabd1841b80a2ab4a4d8a0f6746c2d1c4c811.jpg✫✫sm_planes_of_sound__thought.gif✫   As regards languoids, ⟮De Sassure⟯ created the distinction between ⟮langue⟯ and ⟮c_;parole⟯.  ⟮＿langue and parole＿⟯ are about ⟮what we're talking about when⟯ we ⟮say language (or, well, languoid)⟯ »⟮Langue⟯« is ⟮the structuralist system⟯ of a given languoid  »⟮Parole⟯« is ⟮all instances of the use⟯ of a languoid  !Sassure claims that in the ⟮langue⟯ of ⟮spoken language⟯ - !the ⟮＿signified＿⟯ is ⟮the concept⟯ - !the ⟮＿signifier＿⟯ is ⟮(the psychological reality of) the phonological realization⟯.   ### synchronic/diachronic  As regards viewpoints, ⟮De Sassure⟯ created the distinction between ⟮＿synchronic and diachronic＿⟯. ⟮＿Synchronic and diachronic＿⟯ are two perspectives we can take on related to ⟮how we care about⟯ ⟮the history of a language⟯ in ⟮c-;our analysis⟯. A »⟮synchronic⟯« viewpoint considers a languoid⟮ at a moment in time without taking its history into account⟯. A »⟮diachronic⟯« approach considers a languoid⟮'s history⟯. If we're being structuralist, a synchronic approach specifically consideres the structuralist system of a languoid.  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}</span>"	linguistics