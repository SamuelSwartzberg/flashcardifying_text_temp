"<div class='c1-f'> Why do round braces prevent this from being treated as a block statement with no return value? </div><pre><code>var func = () =&gt; <span class="""">({</span> foo: 1 <span class="""">})</span>;</code></pre> <span class=""divider"">-></span> {{c1::Because round braces don't go around block statements, and so the parser concludes it must be an object literal.}}"	acad::js
"---   §§ A ((c:1;::gloss)) is ((c:2;::a brief explanation)), often ((c:3;::placed near the text)) ((c:2;::it is explaining)) §   §§ An ((c:4;::interlinear gloss)) is ((c:5;::a gloss)) that is ((c:6;::placed between lines.)) §   §§ In linguistics, ((c:7;::interlinear glossing)) follows the ((c:8;::Leipzig Glossing Rules)). §   §§ In linguistics, ((c:9;::interlinear glossing following the Leipzig Glossing Rules)) is ((c:10;::morpheme))-by-((c:10;::morpheme)). §   §§ However, since ((c:11;::the exact morphology)) is ((c:12;::not always clear)) or ((c:13;::may be at issue)), ((c:14;::interlinear glossing in linguistics)) is generally ((c:15;::for the readers understanding)), not ((c:16;::to state an analysis)). § ===  <section class=""cloze-group-children hide-if-inactive-children"">   Interlinear glossing according to ((c:17;::the Leipzig Glossing Rules)):   §§ Interlinear glosses are ((c:18;::aligned)) ((c:19;::word-by-word (not morpheme-by-morpheme!))), and in this way ((c:20;::left-aligned)). §   §§ ((c:21;::Morphemes within the same word)) are ((c:22;::separated by hyphen)) both ((c:23;::within the object language)) and ((c:24;::in the gloss)). §   §§ In Interlinear glosses, ((c:25;::grammatical morphemes)) can be rendered by ((c:26;::abbreviated lables (e.g. LOC))) or&nbsp; §   §§ ((c:27;::by a word in the metalanguage (e.g. in))) § In interlienar gloss, ((c:28;::the lables indicating grammatical morphemes)) are ((c:29;::written in caps)), most commonly ((c:30;::in small caps.))   §§ In interlinear gloss, the ((c:31;::most common)) of the abbreviated lables may be ((c:32;::further abbreviated)). §   §§ ((c:33;::Clitic boundaries)) are marked by ((c:34;::an equals sign)). §   §§ In interlinear gloss, if ((c:35;::one element in the object language)) is ((c:36;::rendered by several elements in the metalanguage)), those are ((c:37;::separated in the gloss by periods. (there are also optional further category separations here which use _ \ = ; &gt;)))  §   §§ Things that are ((c:38;::contained in the gloss)) that are ((c:39;::not marked in the object language)) may either ((c:40;::be enclosed by [])) in ((c:40;::the metalanguage)), or ((c:41;::be indicated by ø)) in ((c:41;::the object language)) § </section>  <table>   <thead>     <tr>       <th>Grammatical Item</th>       <th>Abbreviation</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children""> <tr><td>((c:47;::Article))</td> <td>((c:42;::ART))</td></tr> <tr><td>((c:43;::Demonstrative))</td> <td>((c:44;::DET))</td></tr> <tr><td>((c:45;::Honorific))</td> <td>((c:46;::HON))</td></tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}</span><div class=""sub""> <table class=""blank-canvas cloze-group hide-if-inactive"" style=""text-align: left"">   <tbody>     <tr><td>My</td><td>s</td><td>Marko</td><td>poexa-l-i</td><td>avtobus-om</td><td>v</td><td>Peredelkino.</td></tr>     <tr> <td>1PL</td><td>COM</td><td>Marko</td><td>go-PST-PL</td><td>bus-INS</td><td>All</td><td>Peredelkino.</td></tr>     <tr><td colspan=""7"">'Marko and I went to Perdelkino by bus.'</td></tr>   </tbody> </table>  <table style=""text-align: left"" class=""blank-canvas cloze-group hide-if-inactive"">   <tbody>     <tr> <td>puer</td> <td>or:</td> <td>puer-Ø</td> </tr> <tr> <td>boy[NOM.SG]</td> <td></td> <td>boy-NOM.SG</td> </tr> <tr> <td>‘boy’</td> <td></td> <td>‘boy’</td> </tr>   </tbody> </table>   </div>"	acad::ughhh
"<pre><code data-codetype=""text"">*the lady’s a book</code></pre> <span class=""divider"">-&gt;</span> {{c1::That possessive s is a determiner}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessor DPs cannot be replaced by pronouns}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Replace the posessor DP with a pronoun}} <pre><code data-codetype=""text"">The book's the bookmark.</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessive s is followed by NPs, not by DPs}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::DP}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::It attaches to DPs}} <pre><code data-codetype=""text"">the city’s destruction</code></pre> <span class=""divider"">-&gt;</span> {{c1::general ascription}} <pre><code data-codetype=""text"">the man’s hat</code></pre> <span class=""divider"">-&gt;</span> {{c1::posession&nbsp;}} <pre><code data-codetype=""text"">the owner of the car's mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::<pre><code data-codetype=""text""><mark>the owner of the car</mark>'s mother</code></pre>}} How does English possessive s differ from German genitive -s, in where it attaches? <span class=""divider"">-&gt;</span> {{c1::German genitive -s attaches to nouns, english possessive s to DPs (or NPs, depending on your theory)}} Prove that possessive s is a determiner by inserting other determiners! <span class=""divider"">-&gt;</span> {{c1::*the lady’s a book}} What can't posessor DPs do, but most other DPs can? <span class=""divider"">-&gt;</span> {{c1::Be replaced by a normal pronoun}} What does posessive s attach to? <span class=""divider"">-&gt;</span> {{c1::DPs}} What syntactic category does possessive s belong to? <span class=""divider"">-&gt;</span> {{c1::Determiner}} What type of constitutent is the thing after a posessive s? <span class=""divider"">-&gt;</span> {{c1::A NP (dp theory)}} What type of constitutent is the thing before a posessive s? <span class=""divider"">-&gt;</span> {{c1::A DP}} the children’s toys <span class=""divider"">-&gt;</span> {{c1::the toys of the children}}"	acad::ughhh::synt
"For NVC to 'work', what is the least amount of people literate in NVC necessary in any given situation? <span class=""divider"">-&gt;</span> {{c1::1}}"	acad::nvc
"Which of the lateral sounds is the smallcaps one? <span class=""divider"">-&gt;</span> {{c1::the voiced velar lateral approximant}} What two pharyngeal sounds both feature IPA symbols containing an h/H? <span class=""divider"">-&gt;</span> {{c1::voiceless pharyngeal trill and fricative}} What two IPA symbols both using the glottal stop character are oriented with the head to the right? <span class=""divider"">-&gt;</span> {{c1::Voiceless pharyngeal and glottal stop/plosive}} What two IPA symbols both using the glottal stop character are oriented with the head to the left? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal trill and fricative}} What two IPA symbols both feature a glottal stop crossed out by a bar? <span class=""divider"">-&gt;</span> {{c1::Pharyngeal voiceless plosive and voiced trill}} What sound is the one whose character is supposedly the third one, besides a fricative and an approximant, that is based off the j, but is actually just a turned f? <span class=""divider"">-&gt;</span> {{c1::voiced palatal plosive}} What place of articulation would you expect ɣ to have, but which does it actually have? <span class=""divider"">-&gt;</span> {{c1::You'd expect it to be uvular (because of χ), but it's actually velar}} What is the order of the hooks (front to back) of n-based consonants? <span class=""divider"">-&gt;</span> {{c1::nɳɲŋ}} What is the only place of articulation for consonants that feature small horizontal bars crossing out symbols normally not so crossed?&nbsp; <span class=""divider"">-&gt;</span> {{c1::Pharyngeal}}<div class=""sub""> <div class=""sub c1-f c2-b""> Ignoring the voiced palatal plosive, which theoretically also is barred, but is actually a turned f </div> </div> What is the IPA voiced palatal plosive supposedly? <span class=""divider"">-&gt;</span> {{c1::a barred dotless j}} What is the IPA symbol for the voiced palatal plosive actually? <span class=""divider"">-&gt;</span> {{c1::an f turned by 180 degrees}} What do the symbols c, k, q describe in the IPA? <span class=""divider"">-&gt;</span> {{c1::a progression of voiceless plosives}} The voiced velar approximant kinda looks like a turned ___ combined with a turned ___ <span class=""divider"">-&gt;</span> {{c1::h, m}} The symbol for the palatal voiced fricative is just the symbol for what plus a curl? <span class=""divider"">-&gt;</span> {{c1::voiced palatal approximant}} The symbol for the palatal voiced fricative is just the symbol for the palatal voiced approximant plus a? <span class=""divider"">-&gt;</span> {{c1::curl}} Of the two n-like symbols with left-facing hooks, the one who has it further to the right is also the one... <span class=""divider"">-&gt;</span> {{c1::further back}} Of the two n-like symbols with left-facing hooks, the one who has it further to the left is also the one... <span class=""divider"">-&gt;</span> {{c1::further front}} Of the four pharyngeal/glottal voiced/unvoiced fricative symbols, which is the only one not based on h? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal fricative}} Name a portguese word in which the character for the palatal voiceless fricative is also contained! <span class=""divider"">-&gt;</span> {{c1::seleçao}} In how many aspects do barred consonants differ from their non-barred counterparts? <span class=""divider"">-&gt;</span> {{c1::exactly one (so voicedness, place, OR manner)}} For what manner and voicing are g/G only ever used in the IPA? <span class=""divider"">-&gt;</span> {{c1::voiced plosives}} For what kind of sounds is the l/L only ever used? <span class=""divider"">-&gt;</span> {{c1::lateral ones}} All three sounds (including the one that is actually a turned f) based in their IPA symbols off the j are ___ and ___ <span class=""divider"">-&gt;</span> {{c1::palatal and voiced}} All IPA symbols based of a modified version of the glottal stop are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::pharyngeal(epiglottal) or glottal}} <span class=""hide-5"">sounds written with a variant of the small h in the IPA all have what </span><b>manner</b> of articulation? <span class=""divider"">-&gt;</span> {{c1::fricative}} Why is  ɽ (voiced retroflex tap or flap) an exception, in how we would deduce what the alveolar voiced tap or flap is based on it? <span class=""divider"">-&gt;</span> {{c1::Since it's ɾ, but we would expect it to be r}} Which one of the nasals is the one that is spelled with an n, but has no hook? <span class=""divider"">-&gt;</span> {{c1::voiced alveolar etc. nasal}} What reason might one give why the voiced alveolar trill symbol is the one with two 'heads'? <span class=""divider"">-&gt;</span> {{c1::since the tongue hits multiple times}} What number does the voiced postalveolar fricative look kinda similar to? <span class=""divider"">-&gt;</span> {{c1::3}} What might one say the reason is for voiced alveolar etc. tap being the one with one head? <span class=""divider"">-&gt;</span> {{c1::since the tounge hits only once}} What latin letters are all nasal consonant symbols of the IPA similar to? <span class=""divider"">-&gt;</span> {{c1::m or n}} What latin letter are all voiced bilabial sounds besides the nasal similar to? <span class=""divider"">-&gt;</span> {{c1::b/B}} What kind of symbol are 3/5 of the IPA trill letters based on? <span class=""divider"">-&gt;</span> {{c1::smallcaps letters}} What kana does the voiced postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::ろ}} What is/are the exceptions for the ipa symbols of retroflex consonants being based on alveolar ones? <span class=""divider"">-&gt;</span> {{c1::ɽ (voiced retroflex tap or flap)}} What is the IPA voiced labiodental fricative v mostly spelled as in German? <span class=""divider"">-&gt;</span> {{c1::W}}<div class=""sub""> <div class=""sub c1-b c2-f""> Wächter, wachs etc. </div> </div> What is the IPA voiced labiodental fricative v mostly spelled as in English? <span class=""divider"">-&gt;</span> {{c1::v}} What is the IPA symbol for the sound that crosslinguistically is often spelled f? <span class=""divider"">-&gt;</span> {{c1::f}} What does the voiced labiodental approximant look kinda similar to (which is also labiodental and voiced)? <span class=""divider"">-&gt;</span> {{c1::the labiodental fricative v}} What do the IPA spellings of the voiced alveolar etc. trill and tap or flap have in common, as regards their Orientation? <span class=""divider"">-&gt;</span> {{c1::they are both right-side up}} What do all symbols for retroflex consonants share in the ipa? <span class=""divider"">-&gt;</span> {{c1::A right-facing bottom hook such as ɭ or ʈ}} What do all IPA spellings of lateral approximants have in common? <span class=""divider"">-&gt;</span> {{c1::They are all spelled with representations of l (english or greek representations)}} What are both bilabilal fricatives written with in the IPA? <span class=""divider"">-&gt;</span> {{c1::Greek letters}} What IPA symbol is the voiced labiodental nasal ɱ based off of? <span class=""divider"">-&gt;</span> {{c1::the voiced bilabial nasal m}} What IPA symbol does the first sound of ふ correspond to? <span class=""divider"">-&gt;</span> {{c1::ɸ}} To which IPA symbol does written letter 'p' in english generally correspond? <span class=""divider"">-&gt;</span> {{c1::also p (voiceless bilabial plosive)}} The voiceless ＆ voiced alveolar fricative IPA symbols are both... <span class=""divider"">-&gt;</span> {{c1::latin letters}} The voiced labiodental nasal uses the same symbol as the voiced bilabial nasal, but with... <span class=""divider"">-&gt;</span> {{c1::a leftwards hook}} The symbols for the labiodental fricatives are both? <span class=""divider"">-&gt;</span> {{c1::Latin leters}} The letters used for the retroflex sounds are the same as the ones used for which sounds? <span class=""divider"">-&gt;</span> {{c1::The alveolar ones}}<div class=""sub""> <div class=""sub c1-b c2-f""> with the slight exception of ɽ </div> </div> The IPA spelling of the voiced alveolar etc. lateral fricative is like an l and which IPA sound glued together? <span class=""divider"">-&gt;</span> {{c1::Like an l-sound and the voiced postalveolar fricative ʒ}} The IPA spelling of both the voiceless and the voiced alveolar etc. lateral fricative contain in their 'design' what letter? <span class=""divider"">-&gt;</span> {{c1::l}} Since the voiced&nbsp; alveolar etc. approximant ɹ is turned 180°, the retroflex version... (related to orientation) <span class=""divider"">-&gt;</span> {{c1::is also turned 180°}} IPA symbols including variants of the small l are limited to what place? <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar and retroflex sounds}} IPA symbols for the nasals which use the letter m as their basis have which or which place of articulation? <span class=""divider"">-&gt;</span> {{c1::bilabial and labiodental}} How many retroflex consonant symbols have the right-facing hook? <span class=""divider"">-&gt;</span> {{c1::All of them}} How many of the letters for trills in the IPA are smallcaps letters? <span class=""divider"">-&gt;</span> {{c1::3/5}} How does the symbol of the voiced alveolar approximant relate to the symbol for the voiced alveolar trill r? <span class=""divider"">-&gt;</span> {{c1::it's the symbol for the alveolar trill, but turned 180°:&nbsp; ɹ        }} From what language' script is the symbol for the voiced dental fricative derived? <span class=""divider"">-&gt;</span> {{c1::old english / icelandic}} For both the sets of alveolar and postalveolar fricatives, the voiceless sound is spelled (in the IPA) more ___-like and the voiced sound is more ___-like <span class=""divider"">-&gt;</span> {{c1::the voiceless sound is spelled (in the IPA) more s-like and the voiced sound is more z-like}} Besides the voiced alveolar trill r, what other trill does not feature a smallcaps IPA letter? <span class=""divider"">-&gt;</span> {{c1::The voiced pharyngeal/epiglottal trill ʢ}} All sounds spelled with some variant of the small r are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar or retroflex}} <div>What greek letter does the voiceless dental fricative use?</div><span class=""divider"">-&gt;</span> {{c1::theta}} <div>The voiceless alveolar lateral fricative is an l with a...</div><span class=""divider"">-&gt;</span> {{c1::little curl}} ((h:1;::<img src=""sm_Suzuki_Violin_No.580.jpg"">))What part of an instrument does the voiceless postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::Those s-like things on a violin (called f-holes)}} What symbols are the retroflex right facing lower hooks generally attached to? <span class=""divider"">-&gt;</span> {{c1::The alveolar consonants}} What is the distinctive feature that most epiglottal=pharyngeal consonant symbols share? <span class=""divider"">-&gt;</span> {{c1::a horizontal bar through}}<table> <tbody class=""yesno""> <tr> <th>Place (active) →</th> <th colspan=""4"" scope=""col"">Labial</th> <th colspan=""8"" scope=""col"">Coronal</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Dorsal (rarely coronal)</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Radical/​Ary­epiglottal</th> <th colspan=""2"" scope=""col"">Ary­epiglottal</th> </tr> <tr> <th>Place (active + passive) →</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Bi­labial</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Labio­dental</th> <th colspan=""6"" rowspan=""2"" scope=""col"">Dental/​Alveolar/​Post­alveolar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Retro­flex</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Palatal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Velar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Uvular</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Pharyn­geal/​epi­glottal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Glottal</th> </tr>   <tr><th>Manner ↓</th>   </tr> <tr> <th scope=""row"">Plosive</th> <td>{{c1::p}}</td> <td>{{c2::b}}</td> <td></td> <td></td> <td colspan=""3"">{{c3::t}}</td> <td colspan=""3"">{{c4::d}}</td> <td>{{c5::ʈ}}</td> <td>{{c6::ɖ}}</td> <td>{{c7::c}}</td> <td>{{c8::ɟ}}</td> <td>{{c9::k}}</td> <td>{{c10::ɡ}}</td> <td>{{c11::q}}</td> <td>{{c12::ɢ}}</td> <td>{{c13::ʡ}}</td> <td class=""no""></td> <td>{{c14::ʔ}}</td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Nasal</th> <td></td> <td>{{c15::m}}</td> <td></td> <td>{{c16::ɱ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c17::n}}</td> <td></td> <td>{{c18::ɳ}}</td> <td></td> <td>{{c19::ɲ}}</td> <td></td> <td>{{c20::ŋ}}</td> <td></td> <td>{{c21::ɴ}}</td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Trill</th> <td></td> <td>{{c22::ʙ}}</td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c23::r}}</td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td>{{c24::ʀ}}</td> <td>{{c25::ʜ}}</td> <td>{{c26::ʢ}}</td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Tap/flap</th> <td></td> <td></td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c27::ɾ}}</td> <td></td> <td>{{c28::ɽ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral approximant</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3""></td> <td colspan=""3"">{{c58::l}}</td> <td></td> <td>{{c59::ɭ}}</td> <td></td> <td>{{c60::ʎ}}</td> <td></td> <td>{{c61::ʟ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral fricative</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3"">{{c51::ɬ}}</td> <td colspan=""3"">{{c52::ɮ}}</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Approximant</th> <td></td> <td></td> <td></td> <td>{{c53::ʋ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c54::ɹ}}</td> <td>{{c55::ɻ}}</td> <td></td> <td>{{c56::j}}</td> <td></td> <td>{{c57::ɰ}}</td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> </tr>   <tr><td colspan=""5"" class=""no""></td>       <th colspan=""2"">Dental</th> <th colspan=""2"">Alveolar</th> <th colspan=""2"">Post­alveolar</th>   </tr>   <tr> <th scope=""row"">Fricative</th> <td>{{c29::ɸ}}</td> <td>{{c30::β}}</td> <td>{{c31::f}}</td> <td>{{c32::v}}</td> <td>{{c33::θ}}</td> <td>{{c34::ð}}</td> <td>{{c35::s}}</td> <td>{{c36::z}}</td> <td>{{c37::ʃ}}</td> <td>{{c38::ʒ}}</td> <td>{{c39::ʂ}}</td> <td>{{c40::ʐ}}</td> <td>{{c41::ç}}</td> <td>{{c42::ʝ}}</td> <td>{{c43::x}}</td> <td>{{c44::ɣ}}</td> <td>{{c45::χ}}</td> <td>{{c46::ʁ}}</td> <td>{{c47::ħ}}</td> <td>{{c48::ʕ}}</td> <td>{{c49::h}}</td> <td>{{c50::ɦ}}</td> </tr>  </tbody></table> "	acad::ughhh::phon-both
"Which two features do both sounds spelled with the IPA with (a variant of) ɑ share? <span class=""divider"">-&gt;</span> {{c1::open and back}}    What feature do all vowels share that are written with ligatures in IPA?  They are all front vowels Also either open, near open or open mid What do the IPA vowels written with an i/ɪ all have in common, as it relates to height?  They are somewhere between close and near-close What do the IPA vowels written with an i/ɪ all have in common, as it relates to front-ness  They are somewhere between front and central (both inclusive) What do the IPA symbols for the rounded close-mid and open-mid central vowels have in common?  They are both 'closed' on the outside What do all IPA vowels written with a symbol based of an o (barred or not) (not ligatures) have in common? (two things)  they are all three close-mid and rounded The IPA symbol for the close central unrounded vowel is what, but barred?  close front unrounded The IPA symbol for the close central rounded vowel is what, but barred?  close back rounded How is the Symbol of the rounded version of the central open-mid vowel related to the unrounded version's symbol?  it's the same mirrored epsilon, but connected to form a pretzel How does the IPA symbol for the close central unrounded vowel relate to the IPA symbol for the close front unrounded vowel?  The same, just barred How does the IPA symbol for the close central rounded vowel relate to the IPA symbol for the close back rounded vowel?  The same, just barred How are the close＆open-mid front unrounded and close＆open-mid central unrounded vowels related to each other?  They are mirrored along the y-axis From the unrounded close-mid central vowel's symbol, how could you generate the rounded version's symbol?  merely close the 'gap' of the mirrored e For the close-mid＆open-mid front unrounded and close-mid＆open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the right?  the front ones For the close＆open-mid front unrounded and close＆open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the left?  the central ones For the IPA vowel chart, the unroundedversions of vowels are written where (as relates to the pair)?  on the left of the pair For the IPA vowel chart, the rounded versions of vowels are written where (as relates to the pair)?  on the right of the pair What design feature do the IPA symbols of both the unrounded and rounded open-mid back vowel share?  They are rotated 180° latin letters"	acad::ughhh::phon-both
"Wie sind Prämissen und Konklusion verknüpft? <span class=""divider"">-></span> {{c1::Die Prämissen beweisen die (/garantieren die Wahrheit der) Konklusion}}"	acad::log
"<div class='c1-f'> Welche art ding ist das? </div>Wo ist der Unterschied zwischen einem Argument und einer Erklärung? <span class=""divider"">-></span> {{c1::Das Argument will einen Sachverhalt beweisen, die Erklärung geht von der Wahrheit dieses Sachverhalts schon aus}} Ich spreche fließend Englisch, da ich einige Jahre inLondon gelebt habe. <span class=""divider"">-></span> {{c1::Eine Erklärung (kein Argument, nimmt die wahrheit des eng sprechen schon an)}} Die Sonne scheint auf- und unterzugehen, weil die Erde sich um sich selbst dreht <span class=""divider"">-></span> {{c1::Eine Erklärung}} Auf die Wahrheit von was verlassen wir uns bei einer Erklärung? <span class=""divider"">-></span> {{c1::die Warheit der 'Konklusion' (des Sachverhaltes = des zu Erklärenden)}}"	acad::log
"What are most ad hominem arguments, as regards their validity? <span class=""divider"">-></span> {{c1::invalid/fallacious}}"	acad::log
"In ad hominem arguments (argumentum ad hominem), in general, what is attacked? <span class=""divider"">-></span> {{c1::The opponent (rather than the opponents arguments)}}"	acad::log
"An argument where speaker attacks the character, motive, or some other attribute of the person making an argument rather than attacking the substance of the argument itself is called? <span class=""divider"">-></span> {{c1::Argumentum ad hominem}}"	acad::log
"The argument/fallacy that discredits the argument of an oponent as hypocritical is called... <span class=""divider"">-></span> {{c1::tu quoque}}"	acad::log
"In a tu quoque, broadly, what is criticised? <span class=""divider"">-></span> {{c1::The hypocrisy of a speaker}}"	acad::log
"Terms of logic in english and german<table>   <thead>     <tr>       <th>en</th>       <th>de</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c1-cloze"">valid</span></td>       <td><span class=""c2-cloze"">gültig</span></td>     </tr>         <tr>       <td><span class=""c3-cloze"">sound</span></td>       <td><span class=""c4-cloze"">schlüssig</span></td>     </tr>         <tr>       <td><span class=""c5-cloze"">if and only if</span></td>       <td><span class=""c6-cloze"">genau dann, wenn</span></td>     </tr>         <tr>       <td><span class=""c7-cloze"">iff.</span></td>       <td><span class=""c8-cloze"">gdw.</span></td>     </tr>             <tr>       <td><span class=""c7-cloze"">singular term</span></td>       <td><span class=""c8-cloze"">singulärer term</span></td>     </tr>                 <tr>       <td><span class=""c7-cloze"">logical connective</span></td>       <td><span class=""c8-cloze"">junktor</span></td>     </tr>        </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::log
"An argument is <b>what</b>&nbsp;iff it is impossible for the premises to be true and the conclusion to be false? <span class=""divider"">-></span> {{c1::valid}}"	acad::log
"Logic abbreviations<table>   <thead>     <tr>       <th></th>       <th></th>       <th></th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c1-cloze"">iff.</span></td>       <td><span class=""c2-cloze"">if and only if</span></td>     </tr>     <tr>       <td><span class=""c3-cloze"">gdw.</span></td>       <td><span class=""c4-cloze"">genau dann, wenn</span></td>     </tr>     <tr>       <td><span class=""c5-cloze"">wff</span></td>       <td><span class=""c6-cloze"">well-formed formula</span></td>     </tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}</span>"	acad::log
"<div class='c2-f'> What is this read as? </div><div class='c1-f'> How is this written in short? </div>{{c1::gdw.}}  <span class=""divider"">&lt;-&gt;</span> {{c2::genau dann, wenn}}"	acad::log
"<div class=""cloze-group hide-if-inactive""><p>If an <span class=""c8-cloze"">argument</span> is <span class=""c2-cloze"">valid</span>, <span class=""c3-cloze"">the conclusion cannot be false</span> <span class=""c1-cloze"">if the premises are true</span>.</p> <p>For an <span class=""c7-cloze"">argument</span> to be <span class=""c4-cloze"">sound</span>, it must first <span class=""c5-cloze"">be valid</span>, in addition, <span class=""c6-cloze"">the premises must be true</span>.</p>   <p>An <span class=""c9-cloze"">argument</span> consists of <span class=""c10-cloze"">premises</span> and <span class=""c11-cloze"">conclusions</span>.</p>   <p>In an <span class=""c15-cloze"">argument</span>, the <span class=""c12-cloze"">truth of the premises</span> intends to <span class=""c13-cloze"">determine</span> <span class=""c14-cloze"">the truth of the conclusion</span>. </p>   <p>In a <span class=""c16-cloze"">deductive argument</span>, the t<span class=""c17-cloze"">ruth of the premises</span> <span class=""c18-cloze""><b>guarantees</b></span>&nbsp;<span class=""c19-cloze"">the truth of the conclusion</span>.</p> <p>An <span class=""c25-cloze"">argument</span> is the claim that given <span class=""c20-cloze"">every member of</span> <span class=""c21-cloze"">a certain premise set</span> <span class=""c22-cloze"">of formulae</span> is <span class=""c23-cloze"">true</span>, <span class=""c24-cloze"">so is the conclusion formula</span>.</p></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}</span>"	acad::log
"<div class='c1-f'> Wie gültig ist dieses Argument? </div>Wovon sind formal gültige Argumente unabhängig? <span class=""divider"">-></span> {{c1::unabhängig von ihrem Inhalt}} Wenn in einem Argument die prämissen falsch sind, kann es was sein, aber nicht was? <span class=""divider"">-></span> {{c1::Gültig, aber nicht schlüssig}} Wenn ein argument allein aufgrund seiner Form gültig ist, heißt es wie? <span class=""divider"">-></span> {{c1::formal gültig}} Was muss ein formal schlüssiges argument sein, außer wahre Prämissen zu haben? <span class=""divider"">-></span> {{c1::formal gültig sein}} Ein argument ist schlüssig, gdw. seine Prämissen wahr sind und zusätzlich? <span class=""divider"">-></span> {{c1::es gültig ist}} Ein argument ist schlüssig, gdw. es gültig ist und zusätzlich? <span class=""divider"">-></span> {{c1::seine Prämissen wahr sind}} Ein argument das gültig ist und dessen Prämissen wahr sind, heißt wie? <span class=""divider"">-></span> {{c1::schlüssig}} Allein aufgrund von was sind fomal gültige argumente gültig? <span class=""divider"">-></span> {{c1::Allein aufgrund ihrer form}} A valid argument with true premises is called? <span class=""divider"">-></span> {{c1::sound}} <pre><code>(1) a ist F. Also: (2) a ist nicht G.</code></pre> <span class=""divider"">-></span> {{c1::Gültig, aber nicht formal gültig}} <pre><code data-codetype=""text"">(1) P. (2) Wenn P, dann Q. Also: (3) Q.</code></pre> <span class=""divider"">-></span> {{c1::Formal gültig}}"	acad::log
"<div class='c2-f'> What does this mean, in natural language? </div><div class='c1-f'> How is this often written in logic? </div>{{c1::¬p}}  <span class=""divider"">&lt;-&gt;</span> {{c2::not p}}"	acad::log
"<div class='c1-f'> Was für ein satz ist dieser Satz? </div> <div class='c1-f'> Was für eine art satz ist das? </div>Mit welchem Symbol wird das Konditional häufig ausgedrückt? <span class=""divider"">-></span> {{c1::→}} Welche Form haben Konditional(sätze) in der natürlichen sprache? (anhand von P und Q) <span class=""divider"">-></span> {{c1::Wenn P, dann Q}} Wenn P, dann Q <span class=""divider"">-></span> {{c1::Ein Konditional(satz)}} Wenn Sie Abitur haben, dürfen Sie studieren. <span class=""divider"">-></span> {{c1::Ein Konditional(satz)}}<div class=""sub""> <div class=""sub c1-f"" > eckig </div> </div>"	acad::log
"<div class='c1-f'> What is P here? </div> <div class='c1-f'> What is Q here? </div> <div class='c1-f'> Was ist hier das Antezedens? </div> <div class='c1-f'> Was ist hier das Konsequens? </div>If P, then Q. <span class=""divider"">-></span> {{c1::The antecedent}} If P, then Q. <span class=""divider"">-></span> {{c1::the consequent}} Wenn P, dann Q. <span class=""divider"">-></span> {{c1::P}} Wenn P, dann Q. <span class=""divider"">-></span> {{c1::Q}}"	acad::log
"<div class='c2-f'> Auf Englisch? </div><div class='c1-f'> Auf Deutsch? </div>{{c1::Notwendige Bedingung}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Necessary condition}} {{c1::Hinreichende Bedingung}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sufficient condition}}"	acad::log
"In einem Konditional verhält sich das Antezedens wie zum Konsequenz (Ist welche Art von Bedingung für)? <span class=""divider"">-></span> {{c1::Das antezedens ist hinreichende Bedingung für das Konsequens}}"	acad::log
"<div class=""cloze-group hide-if-inactive c1-5-unhide""><span class=""c1-cloze"">Modus Ponens</span> is a <span class=""c2-cloze"">rule of inference</span> with the following form: <pre><code data-codetype=""text""><span class=""c3-cloze"">Wenn P, dann Q.</span> <span class=""c4-cloze"">P.</span> <hr><span class=""c5-cloze"">∴ Q.</span></code></pre> </div> <div class=""cloze-group hide-if-inactive cloze-group-children hide-if-inactive-children""> Examples of <span class=""c18-cloze all-unhide"">modus ponens</span>: <pre><code data-codetype=""text""><span class=""c7-cloze"">Es ist 11h.</span> <span class=""c6-cloze"">Wenn es 11h ist, dauert die Vorlesung noch 45 Minuten.</span> <hr><span class=""c8-cloze"">Die Vorlesung dauert noch 45 Minuten.</span></code></pre> <pre><code data-codetype=""text""><span class=""c9-cloze"">Wenn Lina zur Party geht, dann geht Tina nicht zur Party.</span> <span class=""c10-cloze"">Lina geht zur Party.</span> <hr><span class=""c11-cloze"">Tina geht nicht zur Party.</span></code></pre> <pre><code data-codetype=""text""><span class=""c12-cloze"">Wenn ich Kaffee trinke, brauche ich Zucker.</span> <span class=""c13-cloze"">Ich trinke Kaffee.</span> ∴ <span class=""c14-cloze"">brauche ich zucker</span></code></pre> <pre><code data-codetype=""text""><span class=""c15-cloze"">Wenn es regnet, wird die Straße nass.</span> <span class=""c16-cloze"">Es regnet.</span> ∴ <span class=""c17-cloze"">wird die Straße nass</span></code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}</span>"	acad::log
"In einem Konditional verhält sich das Konsequenz wie zum Antezedens (Ist welche Art von Bedingung für)? <span class=""divider"">-></span> {{c1::Das Konsequenz ist notwendige Bedingung für das Antezedens}}"	acad::log
"<div class=""cloze-group hide-if-inactive""><span class=""c1-cloze"">Modus Tollens</span> is a <span class=""c2-cloze"">valid</span> <span class=""c3-cloze"">rule of inference</span> with the following logical form<pre><code data-codetype=""text""><span class=""c4-cloze"">Wenn P, dann Q.</span> <span class=""c5-cloze"">¬Q.</span> <hr><span class=""c6-cloze"">¬P.</span></code></pre> </div> <div class=""cloze-group hide-if-inactive"">Examples of modus tollens:  <pre><code data-codetype=""text""><span class=""c7-cloze"">Wenn es heute schneit, dann können Schweine fliegen.</span> <span class=""c1-cloze"">Schweine können nicht fliegen.</span><hr><span class=""c8-cloze"">Es schneit heute nicht.</span></code></pre> <pre><code data-codetype=""text""><span class=""c9-cloze"">Wenn wir freien Willen haben, dann können wir immer anders handeln.</span> <span class=""c10-cloze"">Wir können nicht immer anders handeln.</span> ∴ <span class=""c1-cloze"">haben wir nicht freien Willen</span> </code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}</span>"	acad::log
"Kontraposition<pre><code data-codetype=""text"">Wenn ¬Q, dann ¬P. <hr>{{c1::Wenn P, dann Q.}}</code></pre>"	acad::log
"Der satz ""Wenn P, dann Q"" kann (ohne negierungen zu nutzen) zu welchem satz umgeformt werden? <span class=""divider"">-></span> {{c1::""Nur wenn Q, dann P""}}"	acad::log
"Der satz ""Nur wenn Q, dann P"" kann (ohne negierungen zu nutzen) zu welchem satz umgeformt werden? <span class=""divider"">-></span> {{c1::Wenn P, dann Q}}"	acad::log
"Fehlschluss: Bejahen des Konsequens<pre><code data-codetype=""text"">Wenn P, dann Q. Q.<hr>{{c1::Also P.}}</code></pre>"	acad::log
"Fehlschluss: Verneinen des Antezedens<pre><code data-codetype=""text"">Wenn P, dann Q. Nicht P.<hr>{{c1::(↯) Also nicht Q.}}</code></pre>"	acad::log
"Wie verhalten sich formal gültige argumente zu gültigen argumenten, re: mengenlehre? <span class=""divider"">-></span> {{c1::Formal gültige argumente sind eine teilmenge aller gültigen Argumente}} Welche zustände können sätze im kontext von argumenten nicht haben? <span class=""divider"">-></span> {{c1::Gültig/Ungültig}} Welche zustände können sätze im kontext von argumenten haben? <span class=""divider"">-></span> {{c1::Wahr oder falsch}} Welche zustände können argumente haben, außer schlüssig oder nicht schlüssig? <span class=""divider"">-></span> {{c1::Gültig oder ungültig}} Welche zustände können argumente haben, außer gültig oder ungültig? <span class=""divider"">-></span> {{c1::schlüssig oder nicht schlüssig}}<div class=""sub""> <div class=""sub c1-b c2-f"" > und auch nicht schlüssig/ nicht schlüssig </div> </div>"	acad::log
"<div class='c2-f'> In english? </div><div class='c1-f'> In German </div> Kettenschluss{{c1::Kettenschluss}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Polysyllogism}} <pre><code data-codetype=""text"">Wenn P, dann Q. Wenn Q, dann R.<hr>{{c1::Wenn P, dann R.}}</code></pre><div class=""sub""> <div class=""sub c2-b c1-f"" > also often sorites </div> </div>"	acad::log
"Logical connectives connect one or more formulals into a new formula.  Was sind ""Wenn ..., dann ..."", ""und"", ""oder"", ""nicht""? <span class=""divider"">-&gt;</span> {{c1::Junktoren}}"	acad::log
"¬P ist die <b>was</b>&nbsp;von P? <span class=""divider"">-&gt;</span> {{c1::Die Negation von P}}<img src=""sm_tmpcg1be8rx.jpg""><img src=""sm_tmpyhsq8e6j.png"">"	acad::log
"Aus ¬¬P folgt was? <span class=""divider"">-></span> {{c1::P}} <pre><code data-codetype=""text"">P<hr>{{c1::¬}}¬P</code></pre>"	acad::log
"<div class='c1-f'> Was sind 'A' sowie&nbsp; 'B' hier? </div> <div class='c1-f'> Wie heißt diese Verknüpfung? </div>A und B <span class=""divider"">-></span> {{c1::Konjunkte}} A und B <span class=""divider"">-></span> {{c1::Konjunktion}}<div class=""sub""> <div class=""sub c1-f c2-b"" > ggf auch nur das wort </div> </div>"	acad::log
"Und-einführung<pre><code data-codetype=""text"">P und Q.<hr>{{c1::Q.}}</code></pre><div class=""sub""> <div class=""sub c1-b c2-f"" > oder natürlich auch P </div> </div>"	acad::log
"<div class='c1-f'> Was sind P sowie Q hier? </div> <div class='c1-f'> Was ist diese aussage (oder das ""oder"")? </div>P oder Q. <span class=""divider"">-></span> {{c1::Disjunkte}} P oder Q. <span class=""divider"">-></span> {{c1::Eine Disjunktion}}"	acad::log
"Oder-Einführung<pre><code data-codetype=""text"">Q.<hr>{{c1::P oder Q.}}</code></pre>"	acad::log
"<div class='c2-f'> Symbol für... </div><div class='c1-f'> Symbol für... </div> <div class='c2-f'> Symbol für... </div><div class='c1-f'> Symbol für... </div> <div class='c2-f'> (rundes) Symbol für... </div><div class='c1-f'> Symbol für... </div>{{c1::und}}  <span class=""divider"">&lt;-&gt;</span> {{c2::∧}} {{c1::oder}}  <span class=""divider"">&lt;-&gt;</span> {{c2::∨}} {{c1::Wenn, dann}}  <span class=""divider"">&lt;-&gt;</span> {{c2::⊃}}<div class=""sub""> <div class=""sub all-b""> yes, this does look like the superset operator </div><div class=""sub c2-f c1-b"" > Material conditional </div><div class=""sub c2-b c1-f"" > not the one related to sets </div> </div>"	acad::log
"<div class='c1-f'> Wie heißt dieser schluss? </div><pre><code data-codetype=""text"">P ∨ Q. ¬P.<hr>Q.</code></pre> <span class=""divider"">-></span> {{c1::Disjunktiver Syllogismus}}"	acad::log
"Disjunktiver Syllogismus<pre><code data-codetype=""text"">{{c1::P ∨ Q.}} ¬P.<hr>Q.</code></pre>"	acad::log
"Disjunktiver Syllogismus<pre><code data-codetype=""text"">P ∨ Q. {{c1::¬P.}}<hr>Q.</code></pre>"	acad::log
"Disjunktiver Syllogismus<pre><code data-codetype=""text"">P ∨ Q. ¬P.<hr>{{c1::Q.}}</code></pre>"	acad::log
"Klassisches Dilemma<div class=""cloze-group-children hide-if-inactive-children"">   <p><span class=""c24-cloze"">Dilemma</span> (EN/DE), <span class=""c24-cloze"">klassisches dilemma</span> (DE only), in the logical sense is a <span class=""c26-cloze"">valid</span> <span class=""c25-cloze"">inference rule (or set of inference rules, to be precise).</span></p> <div>   The <span class=""c18-cloze c19-scr"">constructive</span> (or <span class=""c19-cloze c18-scr"">positive</span>) <span class=""c20-cloze"">dilemma</span> is:  <pre><code data-codetype=""text""><span class=""c1-cloze"">P∨Q.</span> <span class=""c2-cloze"">P→R.</span> <span class=""c3-cloze"">Q→R.</span><hr><span class=""c4-cloze"">R.</span></code></pre> </div> <div>   The <span class=""c21-cloze c20-scr"">destructive</span> (or <span class=""c22-cloze c21-scr"">negative</span>) <span class=""c23-cloze"">dilemma</span> is: <pre><code data-codetype=""text""><span class=""c27-cloze"">P→Q.</span> <span class=""c28-cloze"">P→R.</span> <span class=""c29-cloze"">¬Q∨¬R.</span><hr><span class=""c30-cloze"">¬P.</span></code></pre> </div> <p>There are also variants <span class=""c13-cloze"">of both types of dilemmata</span> which have <span class=""c14-cloze"">the conditionals have different consequents</span> (e.g. <span class=""c15-cloze c14-scr"">P→R, Q→S</span>), and therefore <span class=""c16-cloze"">the conclusion is a disjunction of these different consequents</span> (<span class=""c17-cloze c16-scr"">∴ R ∨ S</span>)</p> <p>The <span class=""c5-cloze"">dilemma's</span> <span class=""c6-cloze"">two disjuncts</span> are known as <span class=""c7-cloze"">horns</span>.</p> <p>To <span class=""c8-cloze"">reject a dilemma</span>, one can <span class=""c9-cloze"">refute either of the horns</span>, or <span class=""c10-cloze"">refute the disjunction itself</span>. </p> <p><span class=""c11-cloze"">Refuting the disjunction of a dilemma</span> is known as <q><span class=""c12-cloze"">escaping (between) the horns of the dilemma</span></q></p></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}</span>"	acad::log
"<div class='c2-f'> Logical symbol for? </div><div class='c1-f'> Logical symbol for? </div> <div class='c2-f'> Allcaps logical name for? </div><div class='c1-f'> Allcaps logical name for? </div>{{c1::⊕}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Exclusive or}} {{c1::Exclusive or}}  <span class=""divider"">&lt;-&gt;</span> {{c2::XOR}}"	acad::log
"<pre><code data-codetype=""text"">P⊕Q {{c1::P}}<hr>¬Q</code></pre>"	acad::log
"<pre><code data-codetype=""text"">P⊕Q P<hr>{{c1::¬Q}}</code></pre>"	acad::log
"Prämissen, die man ergänzen muss, um das Argument formal gültig zu machen, heißen wie? <span class=""divider"">-></span> {{c1::Implizite prämissen}}"	acad::log
"Prämissen, mit denen man was tun mus, um das Argument formal gültig zu machen, heißen implizite prämissen? <span class=""divider"">-></span> {{c1::Sie ergänzen}}"	acad::log
"Zu welchem Zweck ergänzt man implite prämissen? <span class=""divider"">-></span> {{c1::Um das Argument formal gültig zu machen}}"	acad::log
"The principle requiring interpreting any argument in the best, strongest possible interpretation is called what? <span class=""divider"">-></span> {{c1::Principle of charity}}"	acad::log
"In general, the principle of charity requires that we interpret arguments how? <span class=""divider"">-></span> {{c1::In the best, strongest way possible}}"	acad::log
"When does the principle of charity apply? <span class=""divider"">-></span> {{c1::When interpreting arguments etc.}}"	acad::log
"When is a tautology true? <span class=""divider"">-></span> {{c1::Always}}"	acad::log
"A sentence that is always true (due to its logical form, not dus to some weird contingency) is called what? <span class=""divider"">-></span> {{c1::a tautology}}"	acad::log
"A sentence that is always false due to the rules of logic is called what? <span class=""divider"">-></span> {{c1::a contradiction}}"	acad::log
"A contradiction takes on what truth value? <span class=""divider"">-></span> {{c1::False (always)}}"	acad::log
"<div class='c1-f'> What is this sentence? </div>Es gibt intelligentes Leben auf anderen Planeten, oder es gibt kein intelligentes Leben auf anderen Planeten. <span class=""divider"">-></span> {{c1::a Tautology}}"	acad::log
"<div class='c1-f'> What is this sentence? </div>Es gibt intelligentes Leben auf anderen Planeten, und es gibt kein intelligentes Leben auf anderen Planeten. <span class=""divider"">-></span> {{c1::A contradiction}}"	acad::log
"<div class='c1-f'> What law does this sentence express? </div>P xor not P. <span class=""divider"">-></span> {{c1::The law of the excluded middle}}"	acad::log
"<div class='c2-f'> In eng? </div><div class='c1-f'> In de? </div>{{c1::Satz vom ausgeschlossenen Dritten}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Law of the excluded middle}}<div class=""sub""> <div class=""sub c2-f c1-b"" > selterner auch gesetz der ausgeschlossenen mitte </div> </div>"	acad::log
"Under the law of the excluded middle, how are P and not P related? <span class=""divider"">-></span> {{c1::Exactly one must be true}}"	acad::log
"Under the law of the excluded middle, either P is true, or... <span class=""divider"">-></span> {{c1::not P is true}}"	acad::log
"<div class='c2-f'> In de? </div><div class='c1-f'> In en? </div>{{c1::law/principle of noncontradiction}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Satz vom ausgeschlossenem Widerspruch}}"	acad::log
"<div class='c1-f'> What is this expressing? </div>¬(p ∧ ¬p) <span class=""divider"">-></span> {{c1::The law of non-contradiction}}"	acad::log
"The law of noncontradiction states that what and what cannot be true at the same time? <span class=""divider"">-></span> {{c1::P and not P}}<div class=""sub""> <div class=""sub c1-b c2-f"" > any proopsition and its negation </div> </div>"	acad::log
"Was sagt aristoteles über jemanden, der den satz vom ausgeschlossenen widerspruch verneint? <span class=""divider"">-></span> {{c1::Wie unterscheidet er sich denn dann von den Pflanzen?}}"	acad::log
"Wann darf man eine Tautologie als implizite Prämisse einführen? <span class=""divider"">-></span> {{c1::immer}}"	acad::log
"Bei der logischen reduktio ad absurdum, was wollen wir als vorletzte konklusion haben? <span class=""divider"">-></span> {{c1::Eine Kontradiktion}}"	acad::log
"Bei der logischen reduktio ad absurdum, was folgern wir aus der Kontradiktion? <span class=""divider"">-></span> {{c1::Das die hypothetisch angenommene prämisse falsch ist}}"	acad::log
"Bei der reduktio ad absurdum, was nehmen wir zunächst an? <span class=""divider"">-></span> {{c1::Eine prämisse}}"	acad::log
"Bei der reduktio ad absurdum, was machen wir am ende mit der prämisse, die wir zunächst nur angenommen hatten? <span class=""divider"">-></span> {{c1::Wir weisen sie zurück}}"	acad::log
"<div class='c1-f'> Welches argument ist das? </div><pre><code data-codetype=""text"">P (Annahme) ... <hr>Q und nicht Q.<hr>Nicht P.</code></pre> <span class=""divider"">-></span> {{c1::Reduktio ad absurdum}}"	acad::log
"Reductio ad absurdum<pre><code data-codetype=""text"">P (Annahme) ... <hr>{{c1::Q und nicht Q.}}<hr>Nicht P.</code></pre>"	acad::log
"Reductio ad absurdum<pre><code data-codetype=""text"">P (Annahme) ... <hr>Q und nicht Q.<hr>{{c1::Nicht P.}}</code></pre>"	acad::log
"Reductio ad absurdum<pre><code data-codetype=""text"">P ({{c1::Annahme}}) ... <hr>Q und nicht Q.<hr>Nicht P.</code></pre>"	acad::log
"Was müssen wir treffen, um später auf ein Konditionalsatz schließen zu können? <span class=""divider"">-></span> {{c1::Eine Annahme treffen}}"	acad::log
"Wenn wir für ein Konditional argumentieren und eine annahme treffen, was machen wir dann? <span class=""divider"">-></span> {{c1::So lange schließen, bis wir zum konsequenz kommen}}"	acad::log
"Wenn-Einführung<pre><code data-codetype=""text"">{{c1::P.}} ...<hr>Q.<hr>Wenn P, dann Q.</code></pre>"	acad::log
"Wenn-Einführung<pre><code data-codetype=""text"">P. ...<hr>{{c1::Q.}}<hr>Wenn P, dann Q.</code></pre>"	acad::log
"Wenn-Einführung<pre><code data-codetype=""text"">P. ...<hr>Q.<hr>{{c1::Wenn P, dann Q.}}</code></pre>"	acad::log
"<div class='c1-f'> Wie heißt das hier? </div><img class=""c1-f c2-b"" src=""sm_paste-0dfc0a39b97ceb35118c25dece0a48a7c7ded29a.jpg""> <span class=""divider"">-></span> {{c1::Wahrheitstafel/tabelle}}"	acad::log
"Was übrigbleibt, wenn man von einem Aussagesatz den Inhalt 'abzieht', heißt wie? <span class=""divider"">-></span> {{c1::Logische form}}"	acad::log
"Die logische Form eines satzes ist der satz minus was? <span class=""divider"">-></span> {{c1::den Inhalt}}"	acad::log
"<div class='c1-f'> Logische form des satzes? </div>Wenn es schneit, dann ist es kalt. <span class=""divider"">-></span> {{c1::Wenn P, dann Q.}}"	acad::log
"Wenn man eine Wahrheitstafel nutzt, um ein Argument zu überprüfen, und es keine Kombination gibt, in der die Prämissen wahr sind, aber die Konklusion falsch, was ist dann der fall? <span class=""divider"">-></span> {{c1::Das argument ist gültig}} Wenn man eine Wahrheitstafel nutzt, um ein Argument zu überprüfen, in welcher situation (Re: Prämissen und Konklusion) wissen wir, ob das argument gültig ist? <span class=""divider"">-></span> {{c1::Wenn es keine Kombination gibt, in der die Prämissen wahr sind, aber die Konklusion falsch}}"	acad::log
"Wie wird die verbindung zwischen zwei variablen mittels des Konditionals oft genannt? <span class=""divider"">-></span> {{c1::Materiale implikation}}<div class=""sub""> <div class=""sub c1-f c2-b"" > starts w m </div> </div>"	acad::log
"Was kann das konsequenz eines konditionals sein, wenn das antezendens falsch ist? <span class=""divider"">-></span> {{c1::alles}}"	acad::log
"Was kann das konsequenz eines konditionals sein, wenn das antezendens wahr ist? <span class=""divider"">-></span> {{c1::Jede wahre aussage}}"	acad::log
"Das Paradox der materialen Implikation kommt daher, dass das Antezedens und Konsequenz nur wie, aber nicht wie verbunden sind? <span class=""divider"">-></span> {{c1::nur wahrheitswerttechnisch, aber nicht kausal/semantisch}}"	acad::log
"<div class='c1-f'> Wofür ist das ein beispiel? </div>Wenn 2+2=4 ist, dann liegt Berlin in Deutschland. <span class=""divider"">-></span> {{c1::Das Paradox der materialen Implikation}}"	acad::log
"Was bezeichnet ein singulärer Term? <span class=""divider"">-></span> {{c1::Genau einen Gegenstand}}"	acad::log
"Ein Ausdruck, der genau einen gegenstand bezeichnet, heißt wie? <span class=""divider"">-></span> {{c1::Singulärer Term}}"	acad::log
"In der Logik macht ein Prädikat was? <span class=""divider"">-></span> {{c1::Etwas über einen oder merhere Gegenstand aussagen}}"	acad::log
"In der traditionellen Logik heißt das ding, was etwas über einen oder mehrere Gegenstand aussagt, wie? <span class=""divider"">-></span> {{c1::Prädikat}}"	acad::log
"<div class='c1-f'> Was ist/sind hier singuläre term(e)? </div>Sokrates lacht? <span class=""divider"">-></span> {{c1::Sokrates}}"	acad::log
"<div class='c1-f'> Was ist/sind hier Prädikat(e)? </div>Sokrates lacht <span class=""divider"">-></span> {{c1::lacht}}"	acad::log
"<div class='c2-f'> Über was sagt das etwas aus? </div><div class='c1-f'> Wie heißt ein solches Prädikat? </div>{{c1::einstelliges Prädikat}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sagt etwas über <b>einen</b>&nbsp;gegenstand aus}}"	acad::log
"<div class='c2-f'> Über was sagt das etwas aus? </div><div class='c1-f'> Wie heißt ein solches Prädikat? </div>{{c1::zweistelliges Prädikat}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sagt etwas über (das Verhältnis zwischen) zwei Gegenstände(n) aus.}}"	acad::log
"<div class='c2-f'> Englisch? </div><div class='c1-f'> Deutsch? </div>Beispiele für Quantoren? <span class=""divider"">-></span> {{c1::Alle, einige, keine, etc.}} {{c1::Quantor}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Quantifier}}"	acad::log
"<img class=""c1-f c2-b"" src=""sm_paste-ff6d086464b1137323b6d3584f15a7751b272c93.jpg"">Die Extension eines Prädikates ist __ der Gegenstände, auf die es zutrifft? <span class=""divider"">-></span> {{c1::die Menge}} Die Extension eines Prädikates ist die Menge von was? <span class=""divider"">-></span> {{c1::der Gegenstände, auf die es Zutrifft}} Die Intension eines Prädikates ist/sind was? <span class=""divider"">-></span> {{c1::die Merkmale, aufgrund deren das Prädikat auf diese Dinge zutrifft.}} Die Menge der Gegenstände, auf die ein Prädikat zutrifft, heißt wie? <span class=""divider"">-></span> {{c1::Extension}} Die Merkmale, aufgrund derer das Prädikat zutrifft, heißt wie? <span class=""divider"">-></span> {{c1::Die Intension (des Prädikats)}} Was ist hier die Extension von 'ist gelb'? <span class=""divider"">-></span> {{c1::Die beiden linken objekte}} Was ist hier die Intension von 'ist gelb'? <span class=""divider"">-></span> {{c1::Sendet licht mit einer bestimmten wellenlänge aus etc.}}"	acad::log
"<div class='c1-f'> Wie liest man das? </div>P → R <span class=""divider"">-></span> {{c1::Wenn P, dann R}}"	acad::log
"<div class='c1-f'> How is this read (in english)? </div>P → R <span class=""divider"">-></span> {{c1::If P, then R.}}"	acad::log
"Im generellen, wie verhalten sich Intension und Extension? <span class=""divider"">-></span> {{c1::Die Intension bestimmt die Extension}}"	acad::log
"In der logik sind zwei begriffe mit der selben intension was? <span class=""divider"">-></span> {{c1::Synonyme}}<div class=""sub""> <div class=""sub c1-f"" > cointensional isn't a thing </div> </div>"	acad::log
"In der logik haben synonyme das/dieselbe was? <span class=""divider"">-></span> {{c1::Intension}}"	acad::log
"Was kann man mit synonymen in der argumentrekonstruktion machen? <span class=""divider"">-></span> {{c1::Sie füreinander austauschen}}"	acad::log
"In einer argumentrekonstruktion, was sollte man für synonyme verwenden? <span class=""divider"">-></span> {{c1::Immer denselben begriff}}"	acad::log
"In einer argumentrekonstruktion kann ein begriff mit was ohne probleme ersetzt werden? <span class=""divider"">-></span> {{c1::einem Synonym}}"	acad::log
"Zwei Ausdrücke, die dieselbe Extension haben, heißen wie? <span class=""divider"">-></span> {{c1::koextensional}} Zwei koextensionale Ausdrücke haben die/dasselbe was? <span class=""divider"">-></span> {{c1::Extension}}"	acad::log
"In der Argumentrekonstruktion, was tut man, wenn man koextensionale aber nicht synonyme terme füreinander ersetzt? <span class=""divider"">-></span> {{c1::man begeht einen fehler}}"	acad::log
"Ein ausdruck, der mehr als als eine Intension hat, heißt wie? <span class=""divider"">-></span> {{c1::mehrdeutig/homonym/äquivok/ambig}} Was hat ein mehrdeutiger/homonymer/äquivoker/ambiger begriff? <span class=""divider"">-></span> {{c1::Mehr als eine Intension}}"	acad::log
"If two sentences are contradictory, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::nothing, they never have the same truth value}} If two sentences are contradictory, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::they can neither be both true at the same time nor both false at the same time}} If two sentences are contrary, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::both false&nbsp;}} If two sentences are contrary, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::both True}} If two sentences are subcontrary, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::both true}} If two sentences are subcontrary, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::both false}} Two sentences that cannot be false but can be true at the same time are? <span class=""divider"">-></span> {{c1::subcontrary}} Two sentences that cannot be true but can be false at the same time are? <span class=""divider"">-></span> {{c1::contrary}} Two sentences that cannot be true nor false at the same time are? <span class=""divider"">-></span> {{c1::contradictory}}<div class=""sub""> <div class='sub f'> Aristotelian (syllogistic) logic </div> <div class='sub f'> Aristotelian (syllogistic) logic </div><div class=""sub c1-b c2-f"" > One always true, one is always false </div> <div class='sub f'> Aristotelian (syllogistic) logic </div> </div>"	acad::log
"Was ist ein gutes mittel, um ein argument (dessen gültigkeit wir nicht leicht ermitteln können) als ungültig aufzuzeigen? <span class=""divider"">-></span> {{c1::Ein gegenmodell}} Wenn man mittels eines gegenmodells einen argument als ungültig erweisen will, was muss dann wahr sein, was falsch? <span class=""divider"">-></span> {{c1::Die Prämissen wahr, aber die Konklusion falsch}}"	acad::log
"If a statement is subaltern to another statement, that means that if the latter is true, then... <span class=""divider"">-></span> {{c1::the former must also be}} If a statement is subaltern to another statement, that means that if the latter must be true when? <span class=""divider"">-></span> {{c1::If the former is true}} The relationship which says that the truth of 'All F are G.' guarantees the truth of 'Some F are G.' in the square of opposition is called... <span class=""divider"">-></span> {{c1::Subalternation}}"	acad::log
"<div class='c1-f'> Wie heißt das? </div><img class=""c1-f c2-b"" src=""sm_paste-fb611f5eecdef2a8a7c547df2a5e07ed3c5de226.jpg""> <span class=""divider"">-></span> {{c1::Das logische Quadrat}}"	acad::log
"<div class='c1-f'> What is this called? </div><img class=""c1-f c2-b"" src=""sm_paste-b7e01d02e1a865ba2e26744ce49721b25b686690.jpg""> <span class=""divider"">-></span> {{c1::Square of Opposition}}"	acad::log
"In natürlicher Sprache sagt der allquantor was aus? <span class=""divider"">-></span> {{c1::Für alle/jedes x gilt}}"	acad::log
"<div class='c1-f'> Was ist das? </div>Für alle/jedes x gilt <span class=""divider"">-></span> {{c1::Der Allquantor}}"	acad::log
"<div class='c1-f'> Wie heißt dieser Schluss? </div><pre><code data-codetype=""text"">Alles ist F. <hr>a ist F.</code></pre> <span class=""divider"">-></span> {{c1::Allbeseitigung}}"	acad::log
"Allbeseitigung<pre><code data-codetype=""text"">Alles ist F. <hr>{{c1::a ist F.}}</code></pre>"	acad::log
"Gegenbeispiel<pre><code data-codetype=""text"">Der Mord an Schatow ist nicht erlaubt.<hr>{{c1::Nicht alles ist erlaubt.}}</code></pre>"	acad::log
"<div class='c1-f'> Was für ein Schluss ist das? </div><pre><code data-codetype=""text"">Der Mord an Schatow ist nicht erlaubt.<hr>Nicht alles ist erlaubt.</code></pre> <span class=""divider"">-></span> {{c1::Gegenbeispiel}}<div class=""sub""> <div class=""sub c1-b c2-f"" > Aristotelian logic </div><div class=""sub c1-b c2-f"" > this is called a gegenbeispiel, but not all gegenbeispiele are like this i think </div> </div>"	acad::log
"What is begging the question a near-synonym for? <span class=""divider"">-></span> {{c1::Circular reasoning}}"	acad::log
"How does begging the question relate to circular reasoning? <span class=""divider"">-></span> {{c1::A near-synonym}}"	acad::log
"In circular reasoning / begging the question, what is the relationship between the conclusion and one of the premises? <span class=""divider"">-></span> {{c1::They are the same}}<div class=""sub""> <div class=""sub c1-b c2-f"" > That is, our conclusion is part of our premises </div> </div>"	acad::log
"How is a circular argument formally? <span class=""divider"">-></span> {{c1::formally valid}}"	acad::log
"What is the defect in a circular argument? (Why is it a problem if an argument is circular?) <span class=""divider"">-></span> {{c1::It does not add new information}}"	acad::log
"An argument where the conclusion is contained in the premises is known as what? <span class=""divider"">-></span> {{c1::circular/question-begging}}"	acad::log
"Der Wahrheitswert eines analytischen Satzes ergibt sich wie? <span class=""divider"">-></span> {{c1::(allein) aus den darin ausgedrückten Begriffen}} Der Wahrheitswert eines synthetischen Satzes ergibt sich wie nicht? <span class=""divider"">-></span> {{c1::nicht allein aus den darin ausgedrückten Begriffen}} Ein Satz, dessen Wahrheitswert <b>nicht&nbsp;</b>aus den darin ausgedrückten Begriffen ergibt, heißt wie? <span class=""divider"">-></span> {{c1::synthetisch}} Ein Satz, dessen Wahrheitswert sich allein aus den darin ausgedrückten Begriffen ergibt, antstatt von dem 'state of the world' abzuhängen, heißt wie? <span class=""divider"">-></span> {{c1::analytisch}}"	acad::log
"<div class='c2-f'> Wie heißt das auch? </div><div class='c1-f'> Wie heißt das auch? </div> <div class='c2-f'> Was ist das? </div><div class='c1-f'> Wie heißt das? </div>Das Agrippa/Münchhausen-Trilemma sagt, dass&nbsp;die Begründung einer Aussage unweigerlich entweder einem {{c1::unendlichen Regress}}, einem {{c2::Zirkel}}, oder {{c3::unbegründeten ersten Prinzipen}} endet. Wenn das Münchhausen-Trilemma schlüssig ist, was ist dann der fall? <span class=""divider"">-></span> {{c1::Man kann nichts wissen}} Wenn jede begründung eine weitere begründung braucht, wie vermeiden wir einen unendlichen regress, wenn nicht mittels eines zirkels? <span class=""divider"">-></span> {{c1::Mittels unbegründeter erster prinzipien}} Wenn jede begründung eine weitere begründung braucht, wie vermeiden wir einen unendlichen regress, wenn nicht mittels unbegründeter erster prinzipien? <span class=""divider"">-></span> {{c1::mittels eines Zirkels}} Wenn jede begründung eine weitere begründung braucht, wo enden wir dann? <span class=""divider"">-></span> {{c1::In einem unendlichen regress}} Worin besteht das grund-problem des Münchhausen-trilemmas? <span class=""divider"">-></span> {{c1::Jede Begründung braucht eine weitere begründung}} {{c1::Agrippa-Trilemma}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Münchhausen-Trilemma}} {{c1::Trilemma}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Dilemma mit drei Hörnern}}<div class=""sub""> <div class=""sub c1-b c2-f"" > Genauer, für alle P kann ich nicht wissen dass P </div> <div class=""sub c1-b c2-f"" > fundamentalismus/foundationalism </div> <div class=""sub c1-b c2-f"" > = regress problem/argument </div> </div>"	acad::log
"Ein schluss von einigen elementen auf eine größere regel/wahrheit heißt? <span class=""divider"">-></span> {{c1::Induktion}} In the narrow sense, an induction is reasoning from some examples to what? <span class=""divider"">-></span> {{c1::to a broader truth/statement}} In the narrow sense, an induction is reasoning from what to a broader truth? <span class=""divider"">-></span> {{c1::Some examples}} Welche art von Schluss mit -uktion ist in der weiten lesart der Induktion erhalten, in der engen aber nicht? <span class=""divider"">-></span> {{c1::Abduktion}} Wie kann man induktion als begriff nutzen, bezüglich darauf, was er einschließt? <span class=""divider"">-></span> {{c1::Auf eine enge und eine weite weise}}"	acad::log
"Ein argument, dass den Anspruch erhebt, gültig (die wahrheit der prämissen garantiert die wahrheit der Konklusion) zu sein, heißt wie? <span class=""divider"">-></span> {{c1::deduktiv}}"	acad::log
"Wie ist in einem gültigen deduktiven argument das Verhältnis zwischen Prämissen und Konklusion? <span class=""divider"">-></span> {{c1::Die Wahrheit der Prämissen <b>garantiert</b> die Wahrheit der Konklusion}}"	acad::log
"Wie ist in einem guten induktiven argument das Verhältnis zwischen Prämissen und Konklusion? <span class=""divider"">-></span> {{c1::Die Wahrheit der Prämissen macht die Wahrheit der Konklusion <b>wahrscheinlich</b>}}"	acad::log
"In einem weiten sinne, wie wird induktiv verwendet? <span class=""divider"">-></span> {{c1::Für gute nicht-deduktive argumente}}"	acad::log
"Im generellen, auf welche menge an fällen müssen Induktive schlüsse i.e.s. basieren? <span class=""divider"">-></span> {{c1::Auf der Basis von hinreichend vielen}}<div class=""sub""> <div class=""sub c1-b c2-f"" > und repräsentativen </div> </div>"	acad::log
"The fallacy where one thinks that a temporal relationship implies a causal one is called? <span class=""divider"">-></span> {{c1::Post hoc ergo propter hoc}}"	acad::log
"If a thing (statement, conclusion, argument...) is ampliative, what does it do, relative to what we knew before? <span class=""divider"">-></span> {{c1::Add to our knowledge}} If something (a statement, argument, conclusion ...) adds to our knowledge, relative to what we knew before, what do we call that thing? <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"What kind of <b>argument/method of reasoning</b> is not ampliative? <span class=""divider"">-></span> {{c1::deductive reasoning}}"	acad::log
"What kind of feature do inductive arguments have, if they are good (in comparison to deductive arguments) <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"If an argument is synthetic, it is also... (relative to if it adds knowledge) <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"For the Post hoc ergo propter hoc fallacy,  we conclude that something is causally related based on what? <span class=""divider"">-></span> {{c1::Based on a temporal relationship}}"	acad::log
"In day-to-day usage, correlation does not imply causation is used to talk abou what? <span class=""divider"">-></span> {{c1::Any error where people see causality although there might be none}}"	acad::log
"In correlation implies causation used in the narrow sense, we assume that the relation of two events how implies causation? <span class=""divider"">-></span> {{c1::their co-occurence}}"	acad::log
"<div class='c2-f'> What is this fallacy also known as? </div><div class='c1-f'> What is this fallacy also known as? </div>{{c1::correlation implies causation (narrow sense)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::cum hoc ergo propter hoc}}"	acad::log
"<div class='c2-f'> What is this also known as? </div><div class='c1-f'> What is this also known as? </div> <div class='c1-f'> Was für ein Schluss ist das? </div>{{c1::Abduktion}}  <span class=""divider"">&lt;-&gt;</span> {{c2::schluss auf die beste erklärung}} <pre><code data-codetype=""text"">P. Die beste Erklärung dafür, dass P, ist Q.<hr>Q.</code></pre> <span class=""divider"">-></span> {{c1::Schluss auf die beste Erklärung (Abduktion)}}"	acad::log
"An argument that is based on the fact that a certain thing cannot be explained without F is called a... <span class=""divider"">-></span> {{c1::(explanatory) indispensablity argument}}"	acad::log
"An argument that is based on the fact that a certain thing <b>can</b> be explained without F is called a... <span class=""divider"">-></span> {{c1::(explanatory) dispensablity argument}}<div class=""sub""> <div class=""sub c1-f"" > () d... </div> </div>"	acad::log
"Was muss die Konklusion  eines Arguments A sein, damit man sagen kann dass A eine Prämisse P (eines anderen Arguments) stützt? <span class=""divider"">-&gt;</span> {{c1::P}} Was muss die Konklusion&nbsp; eines Arguments A sein, damit man sagen kann dass e A eine Prämisse P (eines anderen Arguments) angreift? <span class=""divider"">-&gt;</span> {{c1::¬P}} Was muss gleich P sein,&nbsp;damit man sagen kann dass ein Argument A eine Prämisse P (eines anderen Arguments) stützt? <span class=""divider"">-&gt;</span> {{c1::die Konklusion von A}} Was muss gleich ¬P sein,&nbsp;damit man sagen kann dass ein Argument A eine Prämisse P (eines anderen Arguments) angreift? <span class=""divider"">-&gt;</span> {{c1::die Konklusion von A}} Wenn ein Argument A als Konklusion P hat, und P eine Prämisse eines anderen Arguments ist, was tut dann A im bezug auf P? <span class=""divider"">-&gt;</span> {{c1::Es stützt P}} Wenn ein Argument A als Konklusion ¬P hat, und P eine Prämisse eines anderen Arguments ist, was tut dann A im bezug auf P? <span class=""divider"">-&gt;</span> {{c1::Es greift P an}}"	acad::log
"Ein gegenmodell hat die/dasselbe was wie zu dem Argument, das wir als ungültig erweisen wollen? <span class=""divider"">-></span> {{c1::dieselbe&nbsp; logische form}} Ein gegenmodell verhält sich von der logischen form her wie zu dem Argument, das wir als ungültig erweisen wollen? <span class=""divider"">-></span> {{c1::dieselbe&nbsp; logische form}}"	acad::log
"If you have an invalid argument, what can you do to make it valid? <span class=""divider"">-></span> {{c1::Add one or more premises}}<div class=""sub""> <div class=""sub c1-b c2-f"" > but this may just shift it to become unsound </div> </div> If you have an invalid argument, and you have added one or more premises to make it valid, how might this just have moved the problem? <span class=""divider"">-></span> {{c1::this may just shift it to become unsound instead}}"	acad::log
"¬¬a{{c1::=}}a a ∧ b {{c1::=}} b ∧ a<div class=""sub""> <div class=""sub c1-b c2-f"" > conjunction is commutative </div> </div> Since a&nbsp;∨ b =  b&nbsp;∨ a  , we know that the disjunction is what? <span class=""divider"">-></span> {{c1::the disjunction is commutative}} Since a ∧ b =  b ∧ a  , we know that the conjunction is what? <span class=""divider"">-></span> {{c1::the conjunction is commutative}} Since a&nbsp;∨ a = a&nbsp; , we know that the disjunction is what? <span class=""divider"">-></span> {{c1::idempotent}} Since a&nbsp;∧ a = a&nbsp; , we know that the conjunction is what? <span class=""divider"">-></span> {{c1::idempotent}} If we're using logical operations, but using 1 and 0 for true and false, what are we doing? <span class=""divider"">-></span> {{c1::boolean algebra}} Given that&nbsp;&nbsp;we are doing boolean algebra, what can we say about&nbsp;¬1? <span class=""divider"">-></span> {{c1::0}} Given that we are doing boolean algebra, what can we say about&nbsp;¬0? <span class=""divider"">-></span> {{c1::1&nbsp;}} Boolean algebra uses logical operations, but assigns which values for true and false? <span class=""divider"">-></span> {{c1::True = 1, False = 0}} <div class='c2-f'> Logical form for? </div><div class='c1-f'> Using an abbreviation instead of a symbol? </div>{{c1::P iff Q}}  <span class=""divider"">&lt;-&gt;</span> {{c2::P ⇔/↔/≡ Q}} <div class='c2-f'> Because it is distributive, this is... (use left-distributivity in this example) </div><div class='c1-f'> Because it is distributive, this is...  </div>{{c1::(a ∨ b) ∧ (a ∧ c)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a ∨ (b ∧ c)}}<div class=""sub""> <div class=""sub c2-f c1-b"" > has a mistake </div> </div> <div class='c2-f'> Because it is distributive, this is... (use left-distributivity in this example) </div><div class='c1-f'> Because it is distributive, this is...  </div>{{c1::(a ∧ b) ∨ (a ∧ c)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a ∧ (b ∨ c)}} <div class='c1-f'> What property does this logical rule of replacement demonstrate? </div>a ∨ (b ∧ c) = (a ∨ b) ∧ (a ∧ c) <span class=""divider"">-></span> {{c1::distributive}}<div class=""sub""> <div class=""sub all-b""> Specifically, this is left-distributive, but of course it is also right-distributive </div> </div> <div class='c1-f'> What property does this logical rule of replacement demonstrate </div>a ∧ (b ∨ c) = (a ∧ b) ∨ (a ∧ c) <span class=""divider"">-></span> {{c1::distributive}}<div class=""sub""> <div class=""sub all-b""> Specifically, this is left-distributive, but of course it is also right-distributive </div> </div> <div class='c1-f'> What property are we demonstrating here, in general? </div><pre><code data-codetype=""text"">x * (y + z) = (x * y) + (x * z)</code></pre> <span class=""divider"">-></span> {{c1::distributivity}} <div class='c1-f'> Dieser Satz enthält welchen Junktor? </div>Der Mond ist genau dann eine Lichtquelle, wenn Isaak Newton ein Deutscher war. <span class=""divider"">-></span> {{c1::ein Bikonditional}} a&nbsp;∨ ¬a = <span class=""divider"">-></span> {{c1::1}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∨ 1 = <span class=""divider"">-></span> {{c1::1}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∨ 0 = <span class=""divider"">-></span> {{c1::a}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∧ 1 = <span class=""divider"">-></span> {{c1::a}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∧ 0 = <span class=""divider"">-></span> {{c1::0}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a ∧ ¬a = <span class=""divider"">-></span> {{c1::0}}<div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> Law of absorption<img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-b91f1f3ef5a7d024ab7d9809566477f8f4f61292.jpg"">a ∨ {{c1:: (a ∧ b)}} = a<div class=""sub""> <div class=""sub c1-b c2-f"" > an or between these two images </div> </div> Law of absorption<img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-b91f1f3ef5a7d024ab7d9809566477f8f4f61292.jpg"">a ∨ (a ∧ b) ={{c1:: a}}<div class=""sub""> <div class=""sub c1-b c2-f"" > an or between these two images </div> </div> Law of absorption<img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-786c8d4b84a26f1c89add25b8c7b39231d83693c.jpg"">a ∧{{c1:: (a ∨ b)}} = a<div class=""sub""> <div class=""sub c1-b c2-f"" > an and between these two images </div> </div> Law of absorption<img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-786c8d4b84a26f1c89add25b8c7b39231d83693c.jpg"">a ∧ (a ∨ b) ={{c1:: a}}<div class=""sub""> <div class=""sub c1-b c2-f"" > an and between these two images </div> </div> <div class='c1-f'> Why is this called the law of absorption? </div>a ∨ (a ∧ b) = a <span class=""divider"">-></span> {{c1::Because (a ∧ b) is irrellevant to the truth of the statement (it is absorbed)}} De Morgan's laws((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬({{c1::a ∨ b}}) = ¬a ∧ ¬b De Morgan's laws((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬(a ∨ b) = ¬a {{c1::∧}} ¬b De Morgan's laws((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬(a ∨ b) = {{c1::¬a}} ∧ {{c1::¬b}} De Morgan's laws((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬({{c1::a ∧ b}}) = ¬a ∨ ¬b De Morgan's laws((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬(a ∧ b) = ¬a  {{c1::∨ }} ¬b De Morgan's laws((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬(a ∧ b) = {{c1::¬a}} ∨ {{c1::¬b}} De Morgan's laws((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">)){{c1::¬}}(a ∧ b) = ¬a ∨ ¬b <div class='c1-f'> What are these laws known as? </div>¬(a ∨ b) = ¬a ∧ ¬b ; ¬(a ∧ b) = ¬a ∨ ¬b <span class=""divider"">-></span> {{c1::De Morgan's laws}} What property does putting on socks have, but putting on underwear and trousers doesn't? <span class=""divider"">-></span> {{c1::commutative}} Though ambiguous, the symbols used for the biconditional are mostly  {{c1::↔}},  {{c2::≡}},  {{c3::⇔}}. P ↔ Q {{c1::⇔}} Q ↔ P<div class=""sub""> <div class=""sub all-b""> commutative </div> </div> Less precisely, what is the biconditional sometimes called? <span class=""divider"">-></span> {{c1::Equivalence}} <div class='c2-f'> What is this often read as? </div><div class='c1-f'> What is the symbol for this, at least often? </div>{{c1::≢}}  <span class=""divider"">&lt;-&gt;</span> {{c2::is not equivalent/identical to}} <div class='c2-f'> What is this often read as? </div><div class='c1-f'> What is the symbol for this, at least often, that doesn't include an arrow? </div>{{c1::≡}}  <span class=""divider"">&lt;-&gt;</span> {{c2::is equivalent/identical to}} <div class='c2-f'> Venn diagram for? (two circles) </div><div class='c1-f'> Venn diagram for? </div>((h:2;::<img src=""sm_paste-56260f5a54106342986fad6da5ccc5bb8b08460b.jpg"">)){{c1::Biconditional}}  <span class=""divider"">&lt;-&gt;</span> {{c2::}} <div class='c2-f'> Allcaps notation </div><div class='c1-f'> Allcaps notation for? </div>{{c1::Biconditional}}  <span class=""divider"">&lt;-&gt;</span> {{c2::XNOR}} <div class='c1-f'> What logical connective (junktor) are these often used for? </div>↔, ≡, ⇔ <span class=""divider"">-></span> {{c1::The biconditional}} In standard form, what almost always precedes the conclusion? <span class=""divider"">-></span> {{c1::Some sort of indication that it is indeed the conclusion}} In standard form, what often preceeds the premises as well as the the conclusion? <span class=""divider"">-></span> {{c1::Numbers}} In standard form, what sometimes accompanies the conclusion, besides an indication that it is indeed the conclusion? <span class=""divider"">-></span> {{c1::From which premises it's coming}}<div class=""sub""> <div class=""sub c1-b c2-f"" > that is, they are numbered </div> </div> <div class=""c1-f""> An argument that is written like this or similar is in what form? </div><pre><code data-codetype=""text"">1. Humans are mortal. 2. Socrates is human. 3. Therefore, Socrates is mortal (by 1 and 2).</code></pre> <span class=""divider"">-&gt;</span> {{c1::Standard form}}<div class=""sub""> <div class=""sub c1-b c2-f""> normal form is probably wrong, even though that <b>was</b>&nbsp;used in my logic course&nbsp; </div> </div> <div class='c1-f'> Wofür ist das manchmal ein synonym? </div>Folgerichtig <span class=""divider"">-></span> {{c1::gültig}} What conditions are abbreviated by if and only if? <span class=""divider"">-></span> {{c1::The necessary and sufficient conditions}} Q is necessary and sufficient for P can also be said (using a way of speaking commonly used in definitions)? <span class=""divider"">-></span> {{c1::P if and only if Q}}<div class=""sub""> <div class=""sub c1-b c2-f"" > Q if and only if P </div> </div>"	acad::log
"<div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c2-f""> Languages that are this are also... </div><div class=""c1-f""> Languages that are this are also... </div><img class=""c1-f c2-b"" src=""sm_paste-f8905a83ae65ccc1c0f94347a99ffd017cf2efee.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-4481fdfb6ba20a69bb29540e2b14cb74632e1211.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-f407ff4ff31634a63b3dff9684044951e1ae2379.jpg""><span class=""divider"">-&gt;</span> {{c1::(fully) left-branching}} <span class=""divider"">-&gt;</span> {{c1::(fully) right-branching}} <span class=""divider"">-&gt;</span> {{c1::mostly right-branching}} An example for what kind of branching is japanese? <span class=""divider"">-&gt;</span> {{c1::left-branching}} In left-branching/ languages, what will happen if we draw a syntax tree? <span class=""divider"">-&gt;</span> {{c1::It will branch/grow to the left}} What is one of the most rigidly left-branching language? <span class=""divider"">-&gt;</span> {{c1::japanese}} What's the problem with saying a language is left-branching/right-branching? <span class=""divider"">-&gt;</span> {{c1::It is more a tendency than it is a rule, mostly}} {{c1::left-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-final}} {{c1::right-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-initial}}"	acad::ughhh
"<div class=""c1-f""> Under the more wide definition, what is the predicate here? </div> <div class=""c1-f""> Under the more narrow definition, what is the predicate here? </div> <div class=""c1-f""> How are these often called in short? </div><pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard Fread.}} <pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard}} In grammar, a predicate either connects the subject to an idea ('what the subject is like'), or is...? <span class=""divider"">-&gt;</span> {{c1::something that says something about a subject}} In grammar, a predicate is either the thing that says something about the subject, or the thing that connects what to what? <span class=""divider"">-&gt;</span> {{c1::the subject to an idea ('what the subject is like')}} In grammar, a predicate is either the thing that says something about the subject, or what, in relation to the the subject and an idea ('what the subject is like')? <span class=""divider"">-&gt;</span> {{c1::It connects the subject to an idea ('what the subject is like')}} In grammar, either (a) something that says something about a subject or (b) something that links something a subject and what that subject is like is called... <span class=""divider"">-&gt;</span> {{c1::a predicate}} In grammar, what is the problem with the term predicate? <span class=""divider"">-&gt;</span> {{c1::It has two competing definitions}} In english, what are the non-lexical verbs that don't take objects? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs are required to use negation? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs go before the subject DP in question inversion? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} Why does auxiliary being equivalent to auxiliary verb not cause confusion? <span class=""divider"">-&gt;</span> {{c1::Because there are no other kinds of auxiliary words}} auxiliary verbs <span class=""divider"">-&gt;</span> {{c1::auxiliaries}} In the circumstances where do and have aren't auxiliaries (and also aren't lexical), what are they? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Light verbs are different from auxiliary verbs how? <span class=""divider"">-&gt;</span> {{c1::Can't do the syntactical stuff auxes can}} Light verbs are different from lexical verbs how? <span class=""divider"">-&gt;</span> {{c1::Little semantic content}} Verbs that have little semantic content but are not auxiliaries due to syntactic concerns are called what? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Relationship between auxiliaries and modals in set notation? <span class=""divider"">-&gt;</span> {{c1::modals ⊊ auxiliaries}} What property do modal verbs express? <span class=""divider"">-&gt;</span> {{c1::Modality}}<div class=""sub""> <div class=""sub c1-f c2-b""> competing definitions </div> <div class=""sub c1-b c2-f""> Question inversion, negation etc. </div> <div class=""sub c1-b c2-f""> auxiliaries ⊋ modals </div> </div>"	acad::ughhh
"What might be the type of the token""my bycicle"" <span class=""divider"">-&gt;</span> {{c1::bycicle generally}} The ontological relationship between phoneme and phone is&nbsp; <span class=""divider"">-&gt;</span> {{c1::a type - token relationship}}<div class=""sub""> <div class=""sub c1-f""> or any emic/etic relationship </div><div class=""sub c1-f c2-b""> unless you have some sophisticated criticism of the concept of a phoneme or phone </div> </div> Plato's theory of ideas might be an example of what kind of relationship? <span class=""divider"">-&gt;</span> {{c1::Type - token}} In the type-token distinction, what is the type? <span class=""divider"">-&gt;</span> {{c1::a general sort of thing}} In the type-token distinction, what is the token in relation to the type? <span class=""divider"">-&gt;</span> {{c1::an instance of a type}} If an object A belongs to another object B, what is the relationship between them, formally? <span class=""divider"">-&gt;</span> {{c1::B has-a A}}<div class=""sub""> <div class=""sub c1-f""> B ... A </div> </div> If B's intension implies A's intension, what ontological relationship do they have? <span class=""divider"">-&gt;</span> {{c1::A is-a B }} From whom is the ""type-token"" formulation? <span class=""divider"">-&gt;</span> {{c1::Charles Sanders Peirce}} A token, is what in relation to its type? <span class=""divider"">-&gt;</span> {{c1::Is an instance of}} A thing A has a is-a relationship with something B when, related to their intensions? <span class=""divider"">-&gt;</span> {{c1::B's intension implies A's intension}} A subclass has what kind of relationship with its superclass? <span class=""divider"">-&gt;</span> {{c1::is-a}}<div class=""sub""> <div class=""sub c1-f c2-b""> Not exactly the OOP usage (though similar) </div> </div> A hyponym has what kind of relationship with its hypernym? <span class=""divider"">-&gt;</span> {{c1:: is-a }} A ___class has a is-a of relationship with its ___class? <span class=""divider"">-&gt;</span> {{c1::subclass, superclass}}<div class=""sub""> <div class=""sub c1-f c2-b""> Not exactly the OOP usage (though similar) </div> </div> In some sense (ignoring things such as static methods), the relationship between class and object in OOP is what? <span class=""divider"">-&gt;</span> {{c1::Type - token (instance-of)}}"	acad::log
At its most general, parsing is taking strings and extracting information. In programming, parsing is often used for extracting a bit of useful data out of a string. In natural and computer languages, parsing takes a series of tokens and transforms them into some kind of data structure. In natural and computer languages, parsing is also called syntax/syntactic analysis. The data structure that parsing results in dependss on the input data. Parsing a CSV file may result in a list of records. Parsing natural or programming/markup/whatever languages often results in a tree. This tree is called a parse tree for programming/markup/whatever languages and syntax tree for natural language. The tokens for parsing/syntactic analysis in the lexical analysis sense are generated by lexical analysis/tokenization. After parsing/syntactic analysis comes semantic analysis. a parse tree is the result of {{c1::a derivation}} of a context-free grammar. {{c1::a syntax tree}} is a form of parse tree most common in linguistics. AST|Abstract syntax tree {{c1::}} more on ASTs, parse trees	acad::inf
"Two languages descended from a common ancestor genetically are called what? <span class=""divider"">-></span> {{c1::sister languages}} Languages related through descent from a common ancestor are said to constitute what? <span class=""divider"">-></span> {{c1::A language family}} Languages descended from a ancestor are known as what, in relation to that ancestor?&nbsp; <span class=""divider"">-></span> {{c1::daughter languages}} Daughter languages are descended genetically from what? <span class=""divider"">-></span> {{c1::A parent/ancestor language}} Sister languages are descended from a common ancestor how? <span class=""divider"">-></span> {{c1::genetically}}"	acad::ughhh
"Abductive reasoning<pre><code data-codetype=""text"">{{c1::(1) a -&gt; b}} (2) b (3) Therefore: a</code></pre> Abductive reasoning<pre><code data-codetype=""text"">{{c1::(1) Alle bohnen aus dem sack sind weiß}} (2) Diese bohnen sind weiß (3) Therefore: Diese bohnen sind aus dem sack</code></pre> Abductive reasoning<pre><code data-codetype=""text"">(1) a -&gt; b {{c1::(2) b}} (3) Therefore: a</code></pre> Abductive reasoning<pre><code data-codetype=""text"">(1) a -&gt; b (2) b {{c1::(3) Therefore: a}}</code></pre> Abductive reasoning<pre><code data-codetype=""text"">(1) Alle bohnen aus dem sack sind weiß {{c1::(2) Diese bohnen sind weiß}} (3) Therefore: Diese bohnen sind aus dem sack</code></pre> Abductive reasoning<pre><code data-codetype=""text"">(1) Alle bohnen aus dem sack sind weiß (2) Diese bohnen sind weiß {{c1::(3) Therefore: Diese bohnen sind aus dem sack}}</code></pre>"	acad::log
"According to the HMC,&nbsp; where can I only move? <span class=""divider"">-&gt;</span> {{c1::The position which has IP as its complement}} If english lexical verbs wanted to move to C in y/n questions, what would have to happen first? <span class=""divider"">-&gt;</span> {{c1::It would have to move to I}}"	acad::ughhh::synt
"What language I speak is a Topic-prominent language? <span class=""divider"">-></span> {{c1::Japanese}} Topic, comment, presupposition,&nbsp; focus etc., are part of which linguistic concept/subarea? <span class=""divider"">-></span> {{c1::Information structure}} The way information is packaged/structured within a sentence is known as what? <span class=""divider"">-></span> {{c1::Information structure}} Information structure as a part of linguistics is about what? <span class=""divider"">-></span> {{c1::How we structure information (esp. in relation to existing information)}} In information structure, the thing that is new or <b>contrastive</b> information is called what? <span class=""divider"">-></span> {{c1::focus}} In information structure, focus is what kind of information? <span class=""divider"">-></span> {{c1::new or contrastive information}} Terms used roughly synonymously: {{c1::comment}}, {{c2::rheme}} Semantically, what is the theme? <span class=""divider"">-></span> {{c1::'The point of departure' = the starting point of the sentence}}<div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> Semantically, what is the rheme? <span class=""divider"">-></span> {{c1::'The destination' = the point where the sentence goes beyond the departure point}}<div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> In information structure, a clause is divided into what? <span class=""divider"">-></span> {{c1::Theme and rheme (Topic and comment)}} How does topic - comment relate to syntactic relations and semantic roles? <span class=""divider"">-></span> {{c1::Distinct from both}} <div class='c2-f'> Other name for? </div><div class='c1-f'> Other name for? </div>{{c1::Topic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Theme}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div>{{c1::Topic/Theme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is being talked about}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div>{{c1::Comment/Rheme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is said about the topic/theme}} <div class='c2-f'> Is called? </div><div class='c1-f'> Is? </div>{{c1::A language that organizes its syntax so that sentences have a topic - comment (theme - rheme) structure&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Topic-prominent language}} What is the problem with distinguising focus, givenness, topic, rheme, etc.? <span class=""divider"">-></span> {{c1::Theory-ladenness/controversy}} Topicalization is moving something to the front of the sentence and thus doing what? <span class=""divider"">-></span> {{c1::Marking it as the topic}} Topicalization is making something the topic how? <span class=""divider"">-></span> {{c1::Moving something to the front of the sentence}} The opposite of focus is what? <span class=""divider"">-></span> {{c1::givenness}} The movement of a constituent to the front of the clause and concomittantly establishing it as the topic/theme is known as what? <span class=""divider"">-></span> {{c1::Topicalization}} Moving something to the beginning of a sentence is known as what? <span class=""divider"">-></span> {{c1::fronting}} Fronting is doing what (in syntax)? <span class=""divider"">-></span> {{c1::Moving a constituent to the beginning of the sentence}} <div class=""c2-f""> Are examples of? </div><div class=""c1-f""> What are examples of this? </div>{{c1::This is a <em>salad</em> salad; Do you <em>like</em>&nbsp;like him? I talked to him that week, but I didn't talk to him talk to him.}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Contrastive focus reduplication}}"	acad::ughhh
"a derivation is what (related to formal grammars) to arrive at a string? <span class=""divider"">-&gt;</span> {{c1::&nbsp;an application of the production rules&nbsp;}} a derivation is an application of the production rules of a formal grammar to what? <span class=""divider"">-&gt;</span> {{c1::arrive at a (well-formed) word}} With what tool is the syntax of a formal language often formally&nbsp;defined? <span class=""divider"">-&gt;</span> {{c1::formal grammar}} When have we finished derivation? <span class=""divider"">-&gt;</span> {{c1::When we've arrived at a string with no more nonterminals}}<div class=""sub""> <div class=""sub f""> formal grammar </div> </div> When generating a string using a formal grammar, where do we start? <span class=""divider"">-&gt;</span> {{c1::at the start symbol}} What parts do production rules of formal grammars consist of, fundamentally? <span class=""divider"">-&gt;</span> {{c1::a left-hand and a right-hand side}} What languages do regular grammars generate? <span class=""divider"">-&gt;</span> {{c1::regular languages}} What kind of thing can an alphabet be, in the context of formal languages? <span class=""divider"">-&gt;</span> {{c1::any set}} What is the alphabet of formal languages most of the time? <span class=""divider"">-&gt;</span> {{c1::a character set of some sort}} What does a formal grammar produce in terms of a formal language? <span class=""divider"">-&gt;</span> {{c1::A formal grammar generates the formal language}}<div class=""sub""> <div class=""sub c1-b c2-f""> well, precisely it generates the set of well-formed words that make up the formal language </div> </div> What do we do with nonterminals in the course of derivation? <span class=""divider"">-&gt;</span> {{c1::replace them with further production rules}} The {{c1::syntax}} of {{c2::formal languages}} is said to be {{c4::the structure}} of {{c4::well-formed words}} in a language (however it's not a {{c3::rigurously defined}} term), and contrasted with {{c5::semantics}}. It may be defined via {{c6::a formal grammar}}. The {{c7::grammar}} of a {{c2::formal language}} is {{c8::merely a synonym}} for {{c6::formal grammar}}. The syntax governing a meta-language {{c1::metasyntax}} The start symbol is a kind of what? <span class=""divider"">-&gt;</span> {{c1::nonterminal}} The semantics of a formal language expresses what? <span class=""divider"">-&gt;</span> {{c1::What the words mean}} The rules that formal grammars consist of are known as what? <span class=""divider"">-&gt;</span> {{c1::production rules}} The production rules of a formal language are made up of {{c1::nonterminal symbols}}, {{c2::terminal symbols}} and {{c3::a start symbol}} Something {{c1::well-formed}} {{c4::comforms to}} {{c2::the rules/grammar/syntax}} of a given {{c3::system/<b>formal</b> language}} In the production rules of formal languages, what appears on the left side? <span class=""divider"">-&gt;</span> {{c1::a non-terminal}}<div class=""sub""> <div class=""sub f""> Context-free and reuglar only </div> </div> In the production rules for regular grammars, what may appear on the right (right-regular only)? <span class=""divider"">-&gt;</span> {{c1::terminal nonterminal}}<div class=""sub""> <div class=""sub c1-f c2-b""> Both right-regular and left-regular can just have a terminal </div> </div> In the production rules for regular grammars, what may appear on the right (after the -&gt;) (left-regular only)? <span class=""divider"">-&gt;</span> {{c1::nonterminal terminal}} In the production rules for regular grammars, what may always appear on the right (both left- and right regular) ? <span class=""divider"">-&gt;</span> {{c1::a single terminal}} In the production rules for context-free grammars, what may appear on the right? <span class=""divider"">-&gt;</span> {{c1::any sequence of terminals and nonterminals}} In the production rules for context-free grammars, what may appear on the left? <span class=""divider"">-&gt;</span> {{c1::a single nonterminal}} In the case of a finite formal language, how can we theoretically specify the language? <span class=""divider"">-&gt;</span> {{c1::List all well-formed words}} In formal languages, what are well-formed words sometimes further assembled to? <span class=""divider"">-&gt;</span> {{c1::They are assembled to well-formed expressions}} In a formal language, what are words made of? <span class=""divider"">-&gt;</span> {{c1::characters/elements from its alphabet}} How large is the size of the alphabet of a formal language? <span class=""divider"">-&gt;</span> {{c1::finite}} Formal languages are separated by size in... <span class=""divider"">-&gt;</span> {{c1::finite and infinite langauges}} Any well-formed&nbsp;string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a well-formed word/formula}} Any string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a word}} A formal language consists of what? <span class=""divider"">-&gt;</span> {{c1::a set of well-formed words}} <div class=""c2-f""> What will be done with these, in the course of derivation? </div><div class=""c1-f""> Are called? </div>{{c1::nonterminal symbol}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(Things that)&nbsp;will be replaced by further production rules}}<div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Synonym? </div><div class=""c1-f""> Synonym? </div>{{c1::syntactic varialble}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminal}}<div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Symbolizes? </div><div class=""c1-f""> Is symbolized by? </div>{{c1::Σ}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The alphabet of a formal language}}<div class=""sub""> <div class=""sub f""> In formal languages </div> </div> <div class=""c2-f""> Symbolizes what? </div><div class=""c1-f""> Are written how? </div>{{c1::S}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the start symbol}}<div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div>{{c1::lowercase letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::terminals}}<div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div>{{c1::Capital letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminals}}<div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Is symbolized by? </div><div class=""c1-f""> Symbolizes? </div>{{c1::Empty word}}  <span class=""divider"">&lt;-&gt;</span> {{c2::e/ε}}<div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Are? </div><div class=""c1-f""> Are called (besides and more specifically than letter/character/element)? </div>{{c1::terminal symbols}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the fundamental elements of the formal language (part of the alphabet)}}<div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Are what, in relation to automatons? </div><div class=""c1-f""> Are what, in terms of chomsky's hierarchy? </div>{{c1::context-free languages}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The languages that can be recognized by a pushdown automaton}} <div class=""c1-f""> What is this? </div>Left -&gt; Right <span class=""divider"">-&gt;</span> {{c1::a production rule}}<div class=""sub""> <div class=""sub f""> formal grammars </div> </div> <div class=""c1-f""> Is? </div>Something that conforms to the grammar of the formal language of which it is a part <span class=""divider"">-&gt;</span> {{c1::Something that is well-formed}} <div class=""c1-f""> Is called? </div>An application of the production rules of a formal grammar to arrive at a string <span class=""divider"">-&gt;</span> {{c1::a derivation}}"	acad::ughhh
"Why would gramscians say we think the things are normal that we think are normal? <span class=""divider"">-&gt;</span> {{c1::Through manipulation of society by the ruling classes}} What school of thought was gramsci a part of? <span class=""divider"">-&gt;</span> {{c1::Marxism}} Cultural hegemony establishes the ruling classes norms, values and ideas as normal, inevitable, apoliticalCultural hegomony achieves the normalizing of the ruling classes norms {{c1::through manipulation of the culture (what one might call propaganda)}}Cultural hegemony was introduced by Antonio GramsciLinguistic hegemony is a form of / variation on&nbsp;{{c1::Cultural hegemony}}"	acad::ughhh
"for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is 𝛿? <span class=""divider"">-&gt;</span> {{c1::the state transition function&nbsp;}}<div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is Σ? <span class=""divider"">-&gt;</span> {{c1::The input alphabet (same as for a formal language)}}<div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is s0? <span class=""divider"">-&gt;</span> {{c1::the initial state}}<div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is S? <span class=""divider"">-&gt;</span> {{c1::set of states}}<div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is F? <span class=""divider"">-&gt;</span> {{c1::the set of final states}}<div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> a finite state machine, if {{c3::it doesn't have a transition for an input}}, is {{c1::either said to fail}}&nbsp; or {{c2::goes to a failure state}} What kind of storage does a FSA have? <span class=""divider"">-&gt;</span> {{c1::no storage}} What is a deterministic FSA in relation to its corresponding non-deterministic FSA most often? <span class=""divider"">-&gt;</span> {{c1::more complex}} What can any non-deterministic FSA be transformed into? <span class=""divider"">-&gt;</span> {{c1::a deterministic FSA}} Nonterminals ∩ Terminals =  <span class=""divider"">-&gt;</span> {{c1::ø}} In a finite state machine, each transition merely depends on the {{c1::current state}} and the {{c2::input}} In a classic formalization, a formal grammar G consists of the 4-tuple ({{c1::Set of}} {{c2::nonterminals}}, {{c1::set of}} {{c3::terminals}}, {{c1::set of}} {{c4::production rules}}, {{c5::start symbol}}) A transducer is a FSA that accepts input (like an acceptor) and then... <span class=""divider"">-&gt;</span> {{c1::generates output}} A FSA that accepts input (like an acceptor) but then generates an output is known as what? <span class=""divider"">-&gt;</span> {{c1::a transducer}} <div class=""c2-f""> Rough synonym? </div><div class=""c1-f""> Rough synonym? </div>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Finite state automaton}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div>A -&gt; aB or A -&gt; Ba <span class=""divider"">-&gt;</span> {{c1::regular grammars / languages}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div>A -&gt; BbcCdCCBaA... <span class=""divider"">-&gt;</span> {{c1::context-free grammars / languages}} <div class=""c1-f""> Short for? </div>FSM/FSA <span class=""divider"">-&gt;</span> {{c1::Finite state machine / automaton}} What does a finite-state machine do in response to some inputs? <span class=""divider"">-&gt;</span> {{c1::transition}} The input is a well-formed word if what and the input is over&nbsp;&nbsp;(in a deterministic finite-state machine that is acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::we've reached a final state}} The input is a well-formed word if we've reached a final state and what (in a deterministic finite-state machine that is a acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::the input is over&nbsp;}} If we've reached a final state and the input is over in a deterministic finite-state machine that is a acceptors/detectors/recognizers, then what is the case?&nbsp; <span class=""divider"">-&gt;</span> {{c1::the input is contained in the language}}<div class=""sub""> <div class=""sub c1-b c2-f""> the input is a well-formed word </div> </div> For a deterministic finite-state acceptor machine, what is the relationship between F (set of final states) and S (set of states)? <span class=""divider"">-&gt;</span> {{c1::F ⊆ S}} For a deterministic finite-state acceptor machine, the state transition function produces what? <span class=""divider"">-&gt;</span> {{c1::the transitions}} Definition of a deterministic finite-state machine = ({{c1::Σ}},  {{c2::S}},  {{c3::s0}},  {{c4::𝛿}},  {{c5::F}}) ⎵technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM⎵ At any given time, an automaton is what? <span class=""divider"">-&gt;</span> {{c1::In a given state}} At any given time, an automaton is in how many states? <span class=""divider"">-&gt;</span> {{c1::exactly one}} <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div>{{c1::non-deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::there is more than one}}<div class=""sub""> <div class=""sub c2-b c1-f""> it is ambiguous </div> </div> <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div>{{c1::deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::It is unambiguous (the combination of input + state produces exactly one possible transition)}} <img class=""c1-f c2-b"" src=""sm_Turnstile_state_machine_colored.svg"">What are the transitions here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::all the arrows}} What are the states&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Locked and unlocked}} What are the inputs&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Push and Coin}} What are the arrows here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::transitions}} What are Push and Coin here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Inputs}} What are Locked and Unlocked here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::states}} <img class=""c1-f c2-b"" src=""sm_220px-DFAexample.svg.png"">What is S1 here probably? <span class=""divider"">-&gt;</span> {{c1::a final state}} <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div>{{c1::Turing machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::recursively enumerable languages}}<div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a turing machine is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div>{{c1::Pushdown automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-free languages}}<div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a pushdown automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div>{{c1::Linear bounded automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-sensitive languages}}<div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a linear bounded automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Regular languages}} <div class=""c1-f""> What does this define? </div>(Σ,  S,  s0,  𝛿,  F) <span class=""divider"">-&gt;</span> {{c1::a deterministic finite-state machine}}<div class=""sub""> <div class=""sub c1-b c2-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> ((h:1;::<img src=""sm_220px-DFAexample.svg.png"">))How are final states in FSM acceptors often designated? <span class=""divider"">-&gt;</span> {{c1::Double circle}}"	acad::inf
"In most contexts, what is the difference between 'program' and 'application'? <span class=""divider"">-></span> {{c1::They are synonyms}} If we're differentiating, a program that is directly used by an user is known as what? <span class=""divider"">-></span> {{c1::an application}} If we're differentiating between program and application, what is the difference (using set operators)? <span class=""divider"">-></span> {{c1::application ⊊ program}} If we're differentiating between program and application, an application is a program that... <span class=""divider"">-></span> {{c1::is aimed at (interfaced by) an user}}"	acad::inf
"The two functionally complete logical connectives are {{c1::NAND}} and {{c2::NOR}} NAND and NOR are the only two logical connectives that are what? <span class=""divider"">-&gt;</span> {{c1::functionally complete}} {{c1::¬(A OR B)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NOR B}} {{c1::¬(A AND B)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NAND B}} <img class=""c2-f c1-b"" src=""sm_Nand.jpg"">{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NAND B}} <img class=""c2-f c1-b"" src=""sm_1280px-Venn1000.svg.jpg"">{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NOR B}} "	acad::log
A functionally complete set is a&nbsp;set of logical connectives (including singletons) that can be used to {{c1::express any possible logical connective}}	acad::log
"flip-flops are a type of what? <span class=""divider"">-&gt;</span> {{c1::circuit}} What is a very simple ciruit for saving one bit? <span class=""divider"">-&gt;</span> {{c1::An (SR) flip-flop}} The most simple type of flip-flop is what flip-flop? <span class=""divider"">-&gt;</span> {{c1::SR flip-flop}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with two of which or which gates? <span class=""divider"">-&gt;</span> {{c1::NAND or NOR gates}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with how many NAND or NOR gates? <span class=""divider"">-&gt;</span> {{c1::two}} How much information can a flip-flop store? <span class=""divider"">-&gt;</span> {{c1::one bit}} How many stable states does a flip-flop have? <span class=""divider"">-&gt;</span> {{c1::two}} <div class=""c2-f""> Near-synyonym? </div><div class=""c1-f""> Near-synonym? </div>{{c1::Flip-flop}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Latch}}<div class=""sub""> <div class=""sub c2-f""> L... </div> </div> SR flip-flop <span class=""divider"">-&gt;</span> {{c1::Set-Reset Flipflop}} As what thing is a transistor often used? <span class=""divider"">-&gt;</span> {{c1::As a switch}}"	acad::inf
"since GPL forces you to license software built of this with the same rights, it has what attribute? <span class=""divider"">-></span> {{c1::copyleft}} What do you have to do with software using the GPL related to the source code? <span class=""divider"">-></span> {{c1::include it with it (or otherwise make it publicly available)}} What can you do related to redistributing GPL software? <span class=""divider"">-></span> {{c1::you can redistribute it}} What can you do related to changing GPL software? <span class=""divider"">-></span> {{c1::modify it however you like}} I write MyCoolTokenizer with a copyleft-including license. You use MyCoolTokenizer in MyCoolFrequencyAnalyzer. What do you have to do? <span class=""divider"">-&gt;</span> {{c1::Give the users of MyCoolFrequencyAnalyzer the same freedoms MyCoolTokenizer allows.}} How can you sell things licensed with the GPL, if you comply with the license terms? <span class=""divider"">-></span> {{c1::however you want}} If you modify GPL software, what do you have to do with those changes? <span class=""divider"">-&gt;</span> {{c1::make them available}}<div class=""sub""> <div class=""sub c1-f""> Unless only you use the changes </div> </div>"	acad::inf
grep [{{c1::OPTIONS}}] {{c2::PATTERN}} [{{c3::FILE...}}]	acad::inf
"The type of waiting that can be stopped by getting a signal is what? <span class=""divider"">-&gt;</span> {{c1::Interruptible waiting}} In unix, a process can be {{c1::running/runnable}}, {{c2::waiting}}, {{c3::stopped}}, or {{c4::zombie}}. A waiting process can either be what or whatß <span class=""divider"">-&gt;</span> {{c1::uninterruptible or interruptible}} A running process is either {{c1::the current process}} or {{c2::waiting to be assigned to one of the cpus}} A process that is either the current process or waiting to be assigned one of the CPUs is known as what? <span class=""divider"">-&gt;</span> {{c1::running}}"	acad::inf
"§§ ((c:8;::Observations)) are the ((c:9;::1st)) ((c:10;::component)) of ((c:11;::NVC)).  § §§ The ((c:12;::life-alienated/violent version)) of ((c:13;::observations)) are ((c:14;::evaluations)). § §§ ((c:15;::Observations)) and ((c:15;::evaluations)) make up ((c:17;::the totality)) of ((c:16;::possible statements 'about the world')). § §§ Mixing ((c:18;::evaluations)) and ((c:18;::observations)) will lead to ((c:19;::confusion)). § §§ ((c:20;::Observations)) are anything that ((c:21;::can be directly experienced ('that a camera would see'))). § §§ ((c:22;::Evaluations)) are anything that ((c:23;::relies on our interpretations of the world)). §  <table class=""cloze-group hide-if-inactive"">   <thead>     <tr>       <th>((c:6;::Evaluations))</th>       <th>((c:7;::Observations))</th>     </tr>   </thead>   <tbody>     <tr>       <td>         <table>           <tbody>             <tr>               <td>((c:1;::confusing predition with certainty))</td>               <td>((c:2;::presumption of insight into other's mental states))</td>               <td>((c:3;::not being specific about referents))</td>               <td>((c:4;::use of evaluative words))</td>               <td>((c:5;::use of quantifiers non-literally))</td>             </tr>           </tbody>         </table>       </td>       <td></td>     </tr>   </tbody> </table>  §§ About ((c:24;::more subjective things)), ((c:25;::observations)) ((c:26;::emphasize the situatedness of one's position (I didn't see you close the door &lt;-&gt; you didn't close the door))) § §§ To ((c:27;::make an evaluation)) while ((c:28;::communicating non-violently)), ((c:29;::indicate that you are making an evaluation (This is however not a free pass to evaluate))) § §§ ((c:30;::Quantifiers)) are ((c:31;::observations)) when ((c:32;::literally true)), and ((c:31;::evaluations)) when ((c:32;::they are not literally true)). §  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>   "	acad::nvc
"<table>   <thead>     <tr>       <th>Example</th>       <th>Thing that is evaluative, if any?</th>       <th>Form of evaluation, if any?</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>   <td>Doug procrastinates.</td>     <td><span class=""c1-cloze all-scr"">procrastinates</span></td>   <td><span class=""c2-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Doug only studies for exams the night before.</td>     <td><span class=""c3-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c4-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Hank Smith is a poor soccer player.</td>     <td><span class=""c5-cloze all-scr"">poor</span></td>   <td><span class=""c6-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Hank Smith has not scored a goal in twenty games.</td>     <td><span class=""c7-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c8-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>If you don’t eat balanced meals, your health will be impaired.</td>     <td><span class=""c9-cloze all-scr"">If ... will be impaired</span></td>   <td><span class=""c10-cloze all-scr"">confusing predition with certainty</span></td> </tr> <tr>   <td>If you don’t eat balanced meals, I fear your health may be impaired.</td>     <td><span class=""c11-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c12-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Jim is ugly.</td>     <td><span class=""c13-cloze all-scr"">ugly</span></td>   <td><span class=""c14-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Jim’s looks don’t appeal to me.</td>     <td><span class=""c15-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c16-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Your brow is furrowed.</td>     <td><span class=""c17-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c18-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>You're thinking of him again.</td>     <td><span class=""c19-cloze all-scr"">whole sentence</span></td>   <td><span class=""c20-cloze all-scr"">presuming to have insight into other's mental states</span></td> </tr>  <tr>   <td>“Pam was first in line every day this week.”</td>     <td><span class=""c21-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c22-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Sam didn’t ask for my opinion during the meeting.”</td>     <td><span class=""c23-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c24-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Yesterday evening Nancy bit her fingernails while watching television.”</td>     <td><span class=""c25-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c26-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Henry is aggressive.”</td>     <td><span class=""c27-cloze all-scr"">aggressive</span></td>   <td><span class=""c28-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>“Janice works too much.”</td>     <td><span class=""c29-cloze all-scr"">too much</span></td>   <td><span class=""c30-cloze all-scr"">non-literal use of quantifiers</span></td> </tr>   <tr>   <td>“John was angry with me yesterday for no reason.”</td>     <td><span class=""c31-cloze all-scr"">for no reason (also angry)</span></td>   <td><span class=""c32-cloze all-scr"">presuming insight into other's mental state</span></td> </tr>  <tr>   <td>“Luke told me I didn’t look good in yellow.”</td>     <td><span class=""c33-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c34-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“My aunt complains when I talk with her.”&nbsp;</td>     <td><span class=""c35-cloze all-scr"">complain</span></td>   <td><span class=""c36-cloze all-scr"">evaluative words or presuming insight into other's mental states</span></td> </tr>  <tr>   <td>“My father is a good man.”</td>     <td><span class=""c37-cloze all-scr"">good man</span></td>   <td><span class=""c38-cloze all-scr"">evaluative words</span></td> </tr>  <tr>   <td>“My son often doesn’t brush his teeth.”</td>     <td><span class=""c39-cloze all-scr"">often</span></td>   <td><span class=""c40-cloze all-scr"">non-literal quantifier (often cannot be literal, as it is undetermined)</span></td> </tr>    </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}</span>"	acad::nvc
"<table>   <thead>     <tr>       <th>Example</th>       <th>Expresses</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>   <td>I'm sad.</td>     <td><span class=""c1-cloze"">a feeling.</span></td> </tr>  <tr>   <td>“<mark>I feel scared</mark> when you say that.”</td>     <td><span class=""c2-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I’m happy</mark> that you can come.”</td>     <td><span class=""c3-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I’m sad</mark> that you’re leaving.”</td>     <td><span class=""c4-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I feel good</mark> about what you did for me.”</td>     <td><span class=""c5-cloze"">A feeling (but quite vaguely)</span></td> </tr>  <tr>   <td>“I feel like hitting you.”</td>     <td><span class=""c6-cloze"">A thought</span></td> </tr>  <tr>   <td>“I feel misunderstood.”</td>     <td><span class=""c7-cloze"">A thought</span></td> </tr>  <tr>   <td>“I’m worthless.”</td>     <td><span class=""c8-cloze"">A thought</span></td> </tr>  <tr>   <td>“When you don’t greet me, <mark>I feel neglected.</mark>”</td>     <td><span class=""c9-cloze"">A  thought</span></td> </tr>  <tr>   <td>“You’re disgusting.”</td>     <td><span class=""c10-cloze"">A thought (or perhaps an evaluation, not that that distinction matters much)</span></td> </tr>  <tr>   <td>“I feel Amy has been pretty responsible.”</td>     <td><span class=""c11-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel I am constantly on call.”</td>     <td><span class=""c12-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel as if I’m living with a wall.”</td>     <td><span class=""c13-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel it is useless.”</td>     <td><span class=""c14-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel like a failure.”</td>     <td><span class=""c15-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel my boss is being manipulative.”</td>     <td><span class=""c16-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel that you should know better.”</td>     <td><span class=""c17-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel you don’t love me.”</td>     <td><span class=""c18-cloze"">A thought (not a feeling)</span></td> </tr>    </tbody> </table><div class=""sub""> <div class=""sub c1-b c2-f""> although, since the need is nit being expressed, the sentence as a whole may still be violen </div> <div class=""sub c1-b c2-f""> although of course the need is kinda missing </div> </div>"	acad::nvc
"<div class='c1-f'> What form of evaluation is this? </div>You seldom do what I want. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>You are always busy. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>Whenever I have observed Jack on the phone, he has spoken for at least thirty minutes. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div>The last three times I initiated an activity, you said you didn’t want to do it. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div>She is never there when she’s needed. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>Immigrants don’t take care of their property. <span class=""divider"">-></span> {{c1::failure to be specific about referents}} <div class='c1-f'> What form of evaluation is this? </div>I have not seen the immigrant family living at 1679 Ross shovel the snow on their sidewalk. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div>He frequently comes over. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>He comes over at least three times a week. <span class=""divider"">-></span> {{c1::none}}"	acad::nvc
"When requests are reformulated to being positive, precise, and actionable, what may they turn out to be? <span class=""divider"">-></span> {{c1::very different then what their abstract formulation implied}}"	acad::nvc
"After being put into clear positive actionable language, what did a specific father's request to ""show a little responsibility"" morph into? <span class=""divider"">-></span> {{c1::""Well, it doesn't sound so good, but when I say that I want responsibility, what I really mean is that I want him to do what I ask, without question - to jump when I say jump, and to smile while doing it""}}<div class=""sub""> <div class=""sub c2-b"" > which of course isn't actually responsibility </div> </div>"	acad::nvc
"Using clear positive actionable language makes it clear what we're requesting of others, but what does it also do? <span class=""divider"">-></span> {{c1::Clarify what we want (are requesting) for ourselves}}"	acad::nvc
"When would we be likely to request honesty from a listener? <span class=""divider"">-&gt;</span> {{c1::After we've expressed ourself vulnerably}} What might even a sentence seemingly requesting nothing actually be requesting? <span class=""divider"">-&gt;</span> {{c1::something like an acknowledgement that one was heard/understood}} What does Marshall Rosenberg argue relative to how many things we say are requesting something? <span class=""divider"">-&gt;</span> {{c1::all things}} What can you request to help to make sure communication is not being misunderstood (is being accurately recieved)? <span class=""divider"">-&gt;</span> {{c1::requesting a reflection}} In general, when we're requesting honesty, we might want to know {{c1::what the listener is feeling/needing/observing)}}, {{c2::what the listener is thinking}}, or {{c3::if the listener would be willing to take a particular action = a normal request}} If not accompanied by the speakers (observations, )feelings and needs (the other three components), what may genuine requests sound like? <span class=""divider"">-&gt;</span> {{c1::demands}} Genuine requests may sound like demands when it is unaccompanied by what? <span class=""divider"">-&gt;</span> {{c1::If not accompanied by the other 3 components}} Even in normal conversation, what increases the likelyhood that the person will respond in a way that would help you in the moment (empathy, honesty, an acknwledgement...)? <span class=""divider"">-&gt;</span> {{c1::Making the relevant request}}"	acad::nvc
"Requesting a reflection might sound something like? <span class=""divider"">-></span> {{c1::Could you tell me what you just heard me say?}}"	acad::nvc
"Where is it especially important to know what you are requesting with a specific beitrag? <span class=""divider"">-></span> {{c1::In groups}}"	acad::nvc
"In groups, how is a lot of time often wasted, related to NVC requests? <span class=""divider"">-></span> {{c1::when speakers are not certain what they are wanting ('requesting' in NVC parlance)}}"	acad::nvc
"what would having bas-concousness involve? <span class=""divider"">-></span> {{c1::making clear when a question etc. has been adequately answered (and moving on is possible)}}"	acad::nvc
"making clear when a question etc. has been adequately answered (and moving on is possible) might be called what? <span class=""divider"">-></span> {{c1::bas-consciousness}}"	acad::nvc
"<div class='c1-f'> What form of evaluation is this? </div>You seldom do what I want. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>You are always busy. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>Whenever I have observed Jack on the phone, he has spoken for at least thirty minutes. <span class=""divider"">-></span> {{c1::none, is an observation}} <div class='c1-f'> What form of evaluation is this? </div>The last three times I initiated an activity, you said you didn’t want to do it. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div>She is never there when she’s needed. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div>Immigrants don’t take care of their property. <span class=""divider"">-></span> {{c1::not being specific about referents}} <div class='c1-f'> What form of evaluation is this? </div>I have not seen the immigrant family living at 1679 Ross shovel the snow on their sidewalk. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div>I cannot recall your ever writing to me. <span class=""divider"">-></span> {{c1::none&nbsp;}}<div class=""sub""> <div class=""sub c1-b c2-f"" > I mean, since this is a claim about remembering, it technically isn't an evaluation, but it's a little sketchy to me </div> </div> <div class='c1-f'> What form of evaluation is this? </div>He frequently comes over. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}}"	acad::nvc
"What phrase denying choice&nbsp; always (as far as I can see) indicates life-alienating communication? <span class=""divider"">-></span> {{c1::""have to""}}"	acad::nvc
"Us talking in terms of ""have to"" is what form of communication (top-level distinction)? <span class=""divider"">-></span> {{c1::Life-alienating communication}}"	acad::nvc
"How does life-alienating communication go through the world looking at what happens/why things happen/what should happen (what does it use as a frame of reference)? <span class=""divider"">-></span> {{c1::In terms of 'who is what'}}"	acad::nvc
"「Who is what」 is life-alienating communication's what?&nbsp; <span class=""divider"">-></span> {{c1::way of looking at the world / frame of reference}}"	acad::nvc
"Why is life-alienating communication tragic? <span class=""divider"">-></span> {{c1::because the needs behind it will probably not be met}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, what can this 'what' be (three possible values, of which one is rare) <span class=""divider"">-></span> {{c1::too much or too little (or rarely, exactly right)}}<div class=""sub""> <div class=""sub c1-b c2-f"" > can be as in this is how it is, this isn't how it should be (in fact it is the opposite) </div> </div>"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, who is the frame of reference for 'too much' or 'too little'? <span class=""divider"">-></span> {{c1::Ourselves}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, if someone does something more than us, they are doing it how? <span class=""divider"">-></span> {{c1::too much}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, if someone does something less than us, they are doing it how? <span class=""divider"">-></span> {{c1::too little}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, (according to me) besides everything everyone else does either being too much or too little, what could also be the case? <span class=""divider"">-></span> {{c1::everything I do is either too much or too little}}"	acad::nvc
"The fact that we see the what in ""who is what"" = life-alienating communication always as either too much or too little in comparison with ourselves means that we are invested in communicating this how? <span class=""divider"">-></span> {{c1::with comparisons (to ourselves) only}}"	acad::nvc
"Instead of recieving empathy, what is often the default (and mostly life-alienating) response? <span class=""divider"">-></span> {{c1::to offer help (=advice/reassurance)}}"	acad::nvc
"offering help (=advice/reassurance) instead of offering empathy = paraphrasing (through the four components) is mostly what kind of communication? <span class=""divider"">-></span> {{c1::life-alienating}}"	acad::nvc
"offering help (=advice/reassurance) instead of empathy = paraphrasing (through the four components) often feels what (for the reciever)? <span class=""divider"">-></span> {{c1::painful, frustrating, helpless}}"	acad::nvc
"If we're listening to what people are thinking and trying to understand that intellectually, what does that make a lot harder? <span class=""divider"">-></span> {{c1::Trying to sense their feelings and needs the compassionate communication way}}"	acad::nvc
"As always, what do we want to make sure about whom the questions in paraphrasing are imputing the ownership of the four components to? <span class=""divider"">-></span> {{c1::the relevant (in this case the other) person}}"	acad::nvc
"The act of paraphrasing, esp. through the four components, generally makes the other person feel how? <span class=""divider"">-></span> {{c1::very relieved}}"	acad::nvc
the more {{c1::emotionally charged a situation}}, the more it will likely it will be helpful to use hte nvc tools of {{c2:: paraphrasing/reflections}}	acad::nvc
"Sometimes, instead of reflecting one or more of the four components, what might a paraphrase be? <span class=""divider"">-></span> {{c1::A repetition of what they said}}"	acad::nvc
"At the point where a reflection is repeating what the other person just said, which three theories/practices overlap? <span class=""divider"">-></span> {{c1::NVC, the mirror from never split the difference, and repetition (meisner)}}"	acad::nvc
"In general, NVC makes some exchanges take longer than they normally would, however, what might take even longer? <span class=""divider"">-></span> {{c1::Going on without understanding each other}}"	acad::nvc
"For the empathizing half of NVC, what might moving too quickly cause, related to the thoughts of the other person? <span class=""divider"">-></span> {{c1::The thought that you just want rid of them}}"	acad::nvc
"For the empathizing half of NVC, what might moving too quickly cause, related to the depth of the feelings/needs? <span class=""divider"">-></span> {{c1::those very deep down might remain undiscovered}}"	acad::nvc
"What is an expressed feeling/need (even if expressed in a life-alienating way) often (only), in relation to more things? <span class=""divider"">-></span> {{c1::the tip of the iceberg}}"	acad::nvc
"If we stay in the giving empathy half of NVC longer, what will often emerge? <span class=""divider"">-></span> {{c1::deeper feelings/needs}}"	acad::nvc
"What will often happen to the bodies of both people engaged in NVC once the thing has been explored and empathized with all the way down? <span class=""divider"">-></span> {{c1::palpable release of tension}}"	acad::nvc
related to the person talking if engaged in NVC, once the thing has been explored and empathized with all the way down, they will often stop   {{c1:: talking}}	acad::nvc
"If we can't empathize with someone despite our efforts, what is this a sign of? <span class=""divider"">-></span> {{c1::That we need empathy ourselves}}"	acad::nvc
"If we are desperately needing empathy ourselves, what can we often not do? <span class=""divider"">-></span> {{c1::give empathy}}"	acad::nvc
"Besides other people, who can give you empathy? <span class=""divider"">-></span> {{c1::you yourself}}"	acad::nvc
"What is the (perhaps) best option if you yourself are needing empathy too much to hear the other person (in a given situation)? <span class=""divider"">-></span> {{c1::give yourself empathy}}"	acad::nvc
"If you're in a situation where the other person is needing empathy, but you just can't give it right now, what is a possible safeword-like mechanism? <span class=""divider"">-></span> {{c1::screaming nonviolently}}"	acad::nvc
"If you're in a situation where the other person is needing empathy, and you are too and even screaming nonviolently won't help, what should you probably do? <span class=""divider"">-></span> {{c1::remove yourself from the situation}}"	acad::nvc
"Nonviolently screaming involves what without using life-alienated communication such as blaming? <span class=""divider"">-></span> {{c1::Expressing your pain}}"	acad::nvc
"Nonviolently screaming involves expression pain without what? <span class=""divider"">-></span> {{c1::without life-alienated elements (e.g. blame)}}"	acad::nvc
"Expressing your (large amount) of pain non-violently without life-alienated elements (e.g.) blame is known as what? <span class=""divider"">-></span> {{c1::screaming non-violently}}"	acad::nvc
"<div class='c1-f'> What is this answer doing (and what might be better, if anything)? </div>「How could I do something so stupid?」 - 「Nobody is perfect, you're too hard on yourself」 <span class=""divider"">-></span> {{c1::offering help (better: paraphrasing = empathizing)}}"	acad::nvc
"how does recieving true empathy feel? <span class=""divider"">-></span> {{c1::very good}}"	acad::nvc
"What happens to our perception after we've recieved empathy? <span class=""divider"">-></span> {{c1::It shifts, often dramatically}}"	acad::nvc
"Often, what we require to have our problems begin to be solvable is just... <span class=""divider"">-></span> {{c1::recieving empathy properly}}"	acad::nvc
"In hierarchical relationships, what might present an additional hurdle to empathizing? <span class=""divider"">-></span> {{c1::It's harder (in different ways) to empathize with people above you in hierarchy}}"	acad::nvc
"The more we empathize, the more we will feel what, related to things that will then help us open up ourselves? <span class=""divider"">-></span> {{c1::safe (to be vulnerable)}}"	acad::nvc
"in NVC, the more we feel safe (to be vulnerable), the more we will be able to do what? <span class=""divider"">-></span> {{c1::Make ourselves vulnerable by expressing ourselves in NVC}}"	acad::nvc
"What shouldn't you do with 'but'? <span class=""divider"">-></span> {{c1::Don't put your 'but' in people's faces}}"	acad::nvc
"What might be one of the most life-alienating ways to respond to somebody? <span class=""divider"">-></span> {{c1::but}}"	acad::nvc
"Counterintuitively (well, not actually, but y'know), whom might it be most difficult to give empathy? <span class=""divider"">-></span> {{c1::those closest to us}}"	acad::nvc
"Often, what can using NVC do to a lifeless conversation where you're not quite sure why a person is droning on about sth? <span class=""divider"">-></span> {{c1::revive it}}"	acad::nvc
"If you're having a boring conversation where you seem to be stuck, what might you do (using NVC)? <span class=""divider"">-></span> {{c1::interrupt with empathy}}"	acad::nvc
"If silence comes from another person in an NVC exchange, what can it be wise to do? <span class=""divider"">-></span> {{c1::empathize with that silence (as if it was something the person had said)}}"	acad::nvc
"When we communicate with <b>ourselves</b> in life-alienating ways, what will it be hard to do? <span class=""divider"">-></span> {{c1::engage in compassionate communication with others}}"	acad::nvc
"Quote about noticing the special thing <span class=""divider"">-></span> {{c1::「I want him to know exactly the special thing he is or else he won’t notice it when it starts to go.」}}<div class=""sub""> <div class=""sub c1-b c2-f"" >  Herb Gardner, A Thousand Clowns </div> </div>"	acad::nvc
"Quote about humans and chairs <span class=""divider"">-></span> {{c1::「And I want him to know the subtle, sneaky, important reason why he was born a human being and not a chair.」}}<div class=""sub""> <div class=""sub c1-b c2-f"" >  Herb Gardner, A Thousand Clowns </div> </div>"	acad::nvc
"Marshall says that trying to change ourselves by talking to ourselves in life-alienating ways is how effective? <span class=""divider"">-></span> {{c1::unlikely to be effective}}"	acad::nvc
"Marshall says that trying to change ourselves by talking to ourselves in life-alienating ways does what, even if it happens to be effective? <span class=""divider"">-></span> {{c1::infuse our success with that kind of energy}}"	acad::nvc
"To Marshall, what kind of (self) communication is shame? <span class=""divider"">-></span> {{c1::Another form of life-alienating communication}}"	acad::nvc
"If we act from life-alienating motives in our individual lives, then what will that do even to seemingly separate spheres and interactions? <span class=""divider"">-></span> {{c1::infuse them with that energy}}"	acad::nvc
"Instead of telling ourselves what to do in life-alienating ways, what would be a more effective and joyful way to go about it? <span class=""divider"">-></span> {{c1::embracing our unmet needs (that make us want to do these things)}}"	acad::nvc
"Should belongs to what half of communication? <span class=""divider"">-></span> {{c1::life-alienating}}"	acad::nvc
"When we engage with ourselves in life-alienating communication, what would probably be better? <span class=""divider"">-></span> {{c1::engage withourselves via compassionate communication}}"	acad::nvc
"What has made it nearly impossible to only ever act in accordance with compassionate communication? <span class=""divider"">-></span> {{c1::our high level of training in life-alienating communication}}"	acad::nvc
"According to NVC, how many things are there that we have to do? <span class=""divider"">-></span> {{c1::0}}"	acad::nvc
"When we do something that makes us unhappy with ourselves, according to NVC, what would the best step to take probably be? <span class=""divider"">-></span> {{c1::do some NVC mourning}}"	acad::nvc
"When we do something that makes us unhappy with ourselves, after we've done some NVC mourning, what is that followed by? <span class=""divider"">-></span> {{c1::NVC self-forgiveness}}"	acad::nvc
"NVC mourning -&gt; NVC forgiveness is something we primarily do when? <span class=""divider"">-></span> {{c1::when we've done something that makes us less than happy with ourselves}}"	acad::nvc
"In NVC mourning, we try and connect with what stimulated by past actions we now regret? <span class=""divider"">-></span> {{c1::Our feelings and unmet needs}}"	acad::nvc
"In NVC mourning, we try and connect with our feelings and unmet needs stimulated by what? <span class=""divider"">-></span> {{c1::past actions we now regret}}"	acad::nvc
"Connecting with our feelings and unmet needs stimulated by past actions we now regret is what? <span class=""divider"">-></span> {{c1::NVC mourning}}"	acad::nvc
"Focusing on the actions we now regret and asking ourselves which needs we were trying to meet when we were taking those actions is what? <span class=""divider"">-></span> {{c1::NVC self-forgiveness}}"	acad::nvc
"NVC self-forgiveness involves focusing on <b>what</b> and asking ourselves which needs we were trying to meet when we were doing <b>that</b>? <span class=""divider"">-></span> {{c1:: the actions we now regret}}"	acad::nvc
"NVC self-forgiveness involves focusing on the actions we now regret and asking ourselves what? <span class=""divider"">-></span> {{c1::which needs we were trying to meet when we were taking those actions}}"	acad::nvc
"in going through NVC mourning and self-forgiveness, which two things are we trying to hold? <span class=""divider"">-></span> {{c1::both the part of us that regrets the action and the part of us that took the action in the first place}}"	acad::nvc
"Ideas such as that all forms of have to and should are life-alienating and thus doing anything is a choice gives rise to which idea (of Marshall Rosenberg) about what to do and not to do? <span class=""divider"">-></span> {{c1::Don't do anything that isn't play}}"	acad::nvc
"According to NVC, since any action we take is being done to meet some needs, what doesn't exist? <span class=""divider"">-></span> {{c1::things we have to do}}"	acad::nvc
"To create clarity why we are doing things, and if we could meet our needs better somehow, we can take sentences including have to and... <span class=""divider"">-></span> {{c1::substitute 'choose to'}}"	acad::nvc
"To create clarity why we are doing things, and if we could meet our needs better somehow, we can take sentences including have to, substitute 'choose to', and ... <span class=""divider"">-></span> {{c1::add the need (or need-like) you are trying to meet}}"	acad::nvc
"What does Marshall claim about hurting people (in a wide sense) and expressing anger? <span class=""divider"">-></span> {{c1::it's too superficial}}"	acad::nvc
"for NVC, money is not what, but rather what? <span class=""divider"">-></span> {{c1::not a need, but only one of many strategies for meeting needs}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem a lot like needs (and may be strategies for meeting needs), but which do what? <span class=""divider"">-></span> {{c1::often don't end up enriching life}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem like what, but which often don't end up enriching life? <span class=""divider"">-></span> {{c1::seem a lot like needs (and may be strategies for meeting needs)}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem a lot like needs (and may be strategies for meeting needs), but which often don't end up enriching life. What would be some examples? <span class=""divider"">-></span> {{c1::Money, approval, escaping punishment, avoiding shame/guilt, sense of duty}}"	acad::nvc
"Marshall Rosenberg claims that anger stems from what? <span class=""divider"">-&gt;</span> {{c1::our judgements of ""who-is-what"" and concomittant too much/littleness}}<div class=""sub""> <div class=""sub c1-f c2-b""> besides other feelings ＆ unmet needs? </div> </div>"	acad::nvc
"Saying something like ""You know, you are really a killer of the planet, you have no right to abuse the land in this way"" will not get us towards our goal of environmental protection because what generally does not get us closer to our goals? <span class=""divider"">-></span> {{c1::life-alienating communication}}"	acad::nvc
Expressing anger the NVC way:1. {{c1::Stop. Breathe.}}2. {{c2::Identify our judgmental thoughts.}}3. {{c3::connect with and Express our feelings and unmet needs.}}	acad::nvc
"When we are angry, besides the needs that caused us to be angry, what do is our need probably? <span class=""divider"">-></span> {{c1::For the other person to truly hear our need}}"	acad::nvc
"For the other person to truly hear our pain (in an event that made us angry), what do we need to do (high-level view)? <span class=""divider"">-></span> {{c1::Engage with them in a NVC process}}"	acad::nvc
"Since NVC can be difficult, what do we need to do while using it, especially if we're not used to it? <span class=""divider"">-></span> {{c1::take our time}}"	acad::nvc
"more specifically, for conflict resolution using NVC, we {{c1::hear their needs}}, {{c2::express our own needs}}, and {{c3::make sure that we've accurately heard each other}}, and only then we try to move on to {{c4::requests=resolution}}"	acad::nvc
"If we're engaging in an NVC process, we want to hear the things the other party says in terms of the four components regardless of? <span class=""divider"">-></span> {{c1::what they're actually saying / how they're saying it}}"	acad::nvc
"When someone is incapable of hearing the other person in terms of feelings and needs even when expressed as such, what might be the case? <span class=""divider"">-></span> {{c1::might be in too much pain (and thus themselves need empathy)}}"	acad::nvc
"If a person is in too much pain to be able to hear anyone else's feelings and needs, what is often necessary? <span class=""divider"">-></span> {{c1::giving this person empathy first}}"	acad::nvc
"if you're mediating a conflict with NVC, and one of the parties accuses you of favoritism because you spend too much time with the other party, what might you need to give them? <span class=""divider"">-></span> {{c1::first-aid empathy}}"	acad::nvc
"If a situation gets too heated and verfahren, what might you need to do as NVC mediator? <span class=""divider"">-></span> {{c1::Interrupt}}"	acad::nvc
"If we interrupt in NVC meditation, what is the goal? <span class=""divider"">-></span> {{c1::to restore the process}}"	acad::nvc
"What is the only time physical force is justified in NVC? <span class=""divider"">-></span> {{c1::to prevent imminent danger}}<div class=""sub""> <div class=""sub c1-b c2-f"" > for no other reason! </div> </div>"	acad::nvc
"<div class='c1-f'> How are these sentence expressing appreciation? </div>""You did a good job on that report."", ""You are a very sensitive person."", ""It was kind of you ot offer me a ride home last evening."" <span class=""divider"">-></span> {{c1::They're expressing appreciation in a life-alienating way}}"	acad::nvc
"If someone tells us 「no」, instead of reacting hurt or trying to convince etc, what does NVC advise us to do? <span class=""divider"">-></span> {{c1::treat it like any other expression (and hear the feelings, needs behind it etc.)}}"	acad::nvc
"In assessing if something is life-alienated, what is the relevance of the statement being positive (you're beautiful) or negative (you're ugly)? <span class=""divider"">-></span> {{c1::generally, no difference}}"	acad::nvc
"Like any important NVC message, what can be difficult about NVC appreciaton-expressing? <span class=""divider"">-></span> {{c1::It often feels scary and vulnerable}}"	acad::nvc
"Women's language containing the injunction against strong language and the resulting double bind may even cause people to view her how (if she obeys the gender prescriptions)? (Lakoff 1975) <span class=""divider"">-&gt;</span> {{c1::as less of a person/individual}} (Following lakoff) What are some examples of masculinity being the standard even for equality, related to language? <span class=""divider"">-&gt;</span> {{c1::It is highly valued (at least relatively) for women to start speaking more powerful mens language, but not men women's language}} Whil Robin Lakoff's introspective/native-speaker intuition data in&nbsp; Language and Womans place limits the scope of analysis to white, educated, middle-class women, she claims what? <span class=""divider"">-&gt;</span> {{c1::that it will hold most of the time for most english speakers}} What is the stereotype re color lexicon size and gender? <span class=""divider"">-&gt;</span> {{c1::Women use more distinct color terms}}<div class=""sub""> <div class=""sub c1-b c2-f""> via Lakoff 1975, but common </div> </div> Lakoff 1975's fundamental idea of the double bind starts with the insight that there are some forms of language use which do what? <span class=""divider"">-&gt;</span> {{c1::confer real-world advantages}} Lakoff 1975's fundamental idea of the double bind starts with the insight that being conferred advantages can be based on what? <span class=""divider"">-&gt;</span> {{c1::one's language use}} Lakoff 1975 says that if men overhear women talk about 'trivial' topics such as shades of color, what will their reaction be? <span class=""divider"">-&gt;</span> {{c1::amusement/contempt}}<div class=""sub""> <div class=""sub c1-b c2-f""> even though it is of course the division into genderlects that have rendered it something 'women talk about' in the first place! </div> </div> Lakoff 1975 argues that women having larger (but supposedly useless) lexica of colors&nbsp; is emblematic of which trend? <span class=""divider"">-&gt;</span> {{c1::that women's areas of concern are (or are supposed to be) trivial}} Lakoff 1975 argues that as a part of the female genderlect being weaker,&nbsp; men relegate to the female genderlect which topics? <span class=""divider"">-&gt;</span> {{c1::topics that they consider trivial}} For Lakoff 1975, the male lect containing strong/useful forms, and the female lect less so sets up which situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} For Lakoff 1975, language use can create real-world benefits, which relate how to genderlects? <span class=""divider"">-&gt;</span> {{c1::the male lect gets the powerful/useful forms}} According to lakoff, women's language norms create what kind of unavoidable situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} The stereotype of women not being able to make decisions, be changeable, etc. comes from where, according to Lakoff (1975)?  discouragement of women to contradict men, and thus having to be extra careful Lakoff (1975) argues that women use what things (for example) to weaken the potential strength/conflict-proneness of their statement?  Tag questions, hedges, statements-as-questions-by-intonation Lakoff (1975) argues that women use things like tag questions, statements with the intonation of questions and hedges why?  to weaken the potential strength/conflict-proneness of their statement Since women's language contains the injunction against strong language, she will either be censured as unwomanly (as usual for this type of double bind), or she will (the other side of the double bind)?  (Lakoff 1975)  not be able to assert her opinions as strongly"	acad::ughhh
"to create a new thing using a constructor, use what? <span class=""divider"">-&gt;</span> {{c1::the <code>new</code> keyword}} the <code>__proto__</code> property refers to what? <span class=""divider"">-&gt;</span> {{c1::the prototype of the current object}} null sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::at the top}} if you want to use the constructor of a given object 「someObject」, what do you call? <span class=""divider"">-&gt;</span> {{c1::<code>new someObject.constructor()</code>}} getPrototypeOf() gets what? <span class=""divider"">-&gt;</span> {{c1::the actual prototype (__proto__)}} __proto__ is nice to access the prototype, but is what...? <span class=""divider"">-&gt;</span> {{c1::non-standard}} Why do functions have properties, how is that even possible? <span class=""divider"">-&gt;</span> {{c1::functions are Objects}} Whose <code>prototype</code> property contains the constructor property? <span class=""divider"">-&gt;</span> {{c1::that of a constructor function}}<div class=""sub""> <div class=""sub c1-b c2-f""> but isn't anything that has this property automatically a constructor??????? </div> </div> Which JS methods <b>will</b> be inherited by things that are instances of from the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the <code>prototype</code> property}} Which JS methods <b>will not</b>&nbsp;be inherited by things that instantiate the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the thing directly}} Where can you find the constructor that was used to create a given object? <span class=""divider"">-&gt;</span> {{c1::its constructor property (which it is actually on its __proto__, as you would expect)}} When will JS walk up the prototype chain to find a method? <span class=""divider"">-&gt;</span> {{c1::if the relevant Object does not have it}} What's the problem of declaring properties on the constructor prototype? <span class=""divider"">-&gt;</span> {{c1::<code>this</code> will not have the correct scope}} What sits at the top of the prototype chain? <span class=""divider"">-&gt;</span> {{c1::null}} What is super confusing abut the <code>prototype</code> property in JS? <span class=""divider"">-&gt;</span> {{c1::it does not refer to the actual prototype -.-}} What does the 2nd-to-top element of the prototype chain have as its prototype? <span class=""divider"">-&gt;</span> {{c1::<font face=""monospace"">null}} What does the  <code>prototype</code> property of a constructor function definitely contain? <span class=""divider"">-&gt;</span> {{c1::the constructor property}} What are JS functions actually, internally? <span class=""divider"">-&gt;</span> {{c1::Objects}} The whole class syntax is what, related to how JS inheritance and objects actually work? <span class=""divider"">-&gt;</span> {{c1::syntactic sugar}} The methods defined in the <code>prototype</code> property have what characteristic?  <span class=""divider"">-&gt;</span> {{c1::Will be inherited}} The fact that if an object has a property with a certain name, properties with the same name further up the prototype chain will not be visited is known as what? <span class=""divider"">-&gt;</span> {{c1::prototype shadowing}}<div class=""sub""> <div class=""sub c1-b c2-f""> cf name shadowing </div> </div> The <code>prototype</code> does not refer to the prototype of an object, instead, what does? <span class=""divider"">-&gt;</span> {{c1::the <code>__proto__</code> property}} More standard way to access the actual prototype of the Object? <span class=""divider"">-&gt;</span> {{c1::getPrototypeOf()}} If you want to find out what the name of the constructor function that someObject was created with is, what would you do? <span class=""divider"">-&gt;</span> {{c1::<code>someObject.constructor.name</code>}}<div class=""sub""> <div class=""sub c1-b c2-f""> which is obv not defined on someObject itself, but further up the prototype chain </div> </div> If we wanted to delete a method from all instances of something, where would we remove it from? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function (or the __proto__ of any of the objects, since someObj.__proto__ == constructorOfObj.prototype)}} If we wanted all instances of something to gain a method, where would we add it? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function}} If we delete something from the prototype of the constructor, where is it deleted? <span class=""divider"">-&gt;</span> {{c1::from all instances}} If we call a method on something that doesn't have that method, what does JS do? <span class=""divider"">-&gt;</span> {{c1::walk up the prototype chain until it finds it}} If we add something to the prototype of the constructor, who can then access it? <span class=""divider"">-&gt;</span> {{c1::any instance}} <div class=""c2-f""> What does this sometimes also indicate? </div><div class=""c1-f""> How is this sometimes indicated, esp in ECMAScript design documents? </div>{{c1::[[Prototype]]}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the actual prototype}} having prototypes of prototypes in JS establishes what? <span class=""divider"">-&gt;</span> {{c1::the prototype chain}} What is the prototype chain? <span class=""divider"">-&gt;</span> {{c1::the prototypes of prototypes (__proto__) etc.}} The mechanism that handles JS inheritance is what? <span class=""divider"">-&gt;</span> {{c1::prototype}} if bar's <code>prototype</code> property is foo's prototype (__proto__), then... <span class=""divider"">-&gt;</span> {{c1::foo is an instance of bar}} When does a function become a constructor? <span class=""divider"">-&gt;</span> {{c1::When it is called with the new operator}} What is the performance impact of traversing the prototype chain? <span class=""divider"">-&gt;</span> {{c1::can be signifcant}} What do almost all JS objects inherit from? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} What do all functions inherit from? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}} What are almost all JS objects instances of? <span class=""divider"">-&gt;</span> {{c1::Object}} What are all arrays instances of (directly)? <span class=""divider"">-&gt;</span> {{c1::Array}} The first argument Object.create takes is... <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) it will have&nbsp;}} In JS, foo is an instance of bar if bar's what is foo's what? <span class=""divider"">-&gt;</span> {{c1::bar's <code>prototype</code> property is foo's prototype (__proto__)}} Function.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} For Object.create, the thing to use as prototype (__proto__) goes where? <span class=""divider"">-&gt;</span> {{c1::first argument}} Creating an object and specifying which prototype (__proto__) you want explicitly is done how? <span class=""divider"">-&gt;</span> {{c1::Object.create}} Any function that you call with the new operator is what, in JS? <span class=""divider"">-&gt;</span> {{c1::a constructor}} A constructor is what which you call with the new operator? <span class=""divider"">-&gt;</span> {{c1::a function}} <div class=""c2-f""> Object.prototype method for? </div><div class=""c1-f""> Object.prototype method for? </div>{{c1::hasOwnProperty}}  <span class=""divider"">&lt;-&gt;</span> {{c2::seeing if the property is not inherited or inherited}} <div class=""c1-f""> What will this be? </div>Object.create(Array.prototype).__proto__  <span class=""divider"">-&gt;</span> {{c1::Array.prototype including methods such as push...}} <div class=""c1-f""> What will Array.prototype be to the newly created object? </div>Object.create(Array.prototype) <span class=""divider"">-&gt;</span> {{c1::__proto__}}</font> Which kind of functions do not have a <code>prototype</code> property? <span class=""divider"">-&gt;</span> {{c1::arrow functions}}<div class=""sub""> <div class=""sub c1-b c2-f""> which is why they can't be used as constructors </div> </div> Which <b>kind of </b>functions <b>can</b> you call with <code>new</code> to create a new instance? <span class=""divider"">-&gt;</span> {{c1::any function that is not an arrow function}} When you create an object with object literal syntax in JS, what is its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} When you create an object with object literal syntax in JS, what constructor is used? <span class=""divider"">-&gt;</span> {{c1::the Object() constructor}} When functions are being used as constructors, where will the objects created by them have the things that were defined on constructor.prototype? <span class=""divider"">-&gt;</span> {{c1::their prototype (__proto__)}} When functions are being used as constructors, the prototype of the constructor function becomes what?  <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) of the new object }} When functions are being used as constructors, the prototype (__proto__) of the new object will be equal to what? <span class=""divider"">-&gt;</span> {{c1::the <code>prototype</code> of the constructor function}} What sits at the second position of the prototype chain, below null? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Object.prototype sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::one below the top (below null)}} If you don't {{c1::supply a constructor to a <code>class</code> declaration}}, <span class=""c4-5-scr"">the constructor will be {{c2::an empty constructor}} if it is a {{c3::base class}}</span>, and <span class=""c2-3-scr"">{{c4::one that just calls the constructor of the parent class}} if it is a {{c5::derived class}}</span>. Array.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Any given function has what as its prototype  (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}}<div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> Any given array has what as its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Array.prototype}}<div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> <div class=""c1-f""> Why doesn't this work? </div><pre><code>let temp = () =&gt; 5; new temp;</code></pre> <span class=""divider"">-&gt;</span> {{c1::arrow functions cannot be used as constructors}} The <code>typeof</code> things like <code>Array</code>, <code>Object</code>, <code>Function</code> is what? <span class=""divider"">-></span> {{c1::function}}<div class=""sub""> <div class=""sub c1-b c2-f"" > they are classes (in a sense) but classes are functions </div> </div>"	acad::js
"A table in latex is created by the tabular environment.  the tabular environment has a very specific syntax. Matrix syntax is similar to  {{c1::tabular syntax}} The call to \begin{tabular} takes an additional argument,  Defining {{c3::multiple columns}} within a {{c4::tabular}} argument: {{c5::*}} {{c6::{}} {{c1::amount}} {{c6::} }}{{c6::{}} {{c2::type}} {{c6::}&nbsp;}}&nbsp;<div class=""sub""> spacing is for anki clozes, not for latex </div> ((h:2;::<img src=""sm_147px-Multicolumn.svg.png"">))In comparison with normal columns, what do paragraph columns do?  wrap \multicolumn{ num_cols }{ alignment }{ contents } to wrap text within a table, what kind of columns should you use?  paaragraph columns cline{&lt;start&gt;-&lt;end&gt;}   generate a partial horizontal line from start to end multicolumn   create a collumn that is broader than one paragraph column of width width   p{width} tabular   a table<div class=""sub""> <div class=""sub c1-f""> syntax in html is what? (different from this) </div> <div class=""sub all-b""> the table environment is used for something different </div> </div> <div class=""c2-f""> Latex package for? </div><div class=""c1-f""> Latex package for? </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div>{{c1::longtable}}  <span class=""divider"">&lt;-&gt;</span> {{c2::allow tables to flow over page boundaries}}<div class=""sub""> <div class=""sub f""> package longtable </div> </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div> <div class=""c2-f""> Indicate what? </div><div class=""c1-f""> Are indicated how? </div>((h:2;::<img src=""sm_5da95a8e56e67d6b497a09183e429c5d961f7323.svg"">)){{c1::matrix (and derivatives, pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a matrix&nbsp;}} {{c1::the letters in front of the matrix environment (pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the braces surrounding a matrix}}<div class=""sub""> <div class=""sub all-b""> the table environment is used for something different </div> </div>"	acad::latex
Internally, a Promise has the properties {{c1::[[PromiseState]]}} and {{c2::[[PromiseResult]]}}	acad::js
"\{{c1::stackrel}}{{c2::{top}{bot} }} will {{c3::render the top text above the bottom text}} In Latex, there are a bunch of commands starting with \text (which I will call \textwhatever) that indicate different fontstyles: \textbf, \textit, \textrm (roman), \texttt (monospace), \textsc (smallcaps) If you try to type text in a math env as-is, it will look weird, as latex is formatting it for math. To insert text in a math environment, you can use any of \mathwhatever, \textwhatever, or just \text. It is generally advised that you use \text or \textwhatever within math environments when you want to write text, and \mathwhatever when you want to write math that just happens to be in roman letters. For many but not all \textwhatever font formatting commands, latex has corresponding \mathwhatever fonts (e.g. \mathrm, \math. The \mathwhatever fonts only work within a math environment. The \textwhatever fonts also work within a math environment. Within a math environment, there are some differences between \mathwhatever and \texthatever:  \mathwhatever uses the defined math font and \textwhatever uses the defined text font (which may be different) \mathwhatever does not preserve spaces within, but \textwhatever does. you can nest \textwhatevers but not \mathwhatevers. some text styles only exist as \mathwhatevers, e.g. mathfrak (Fraktur), mathbb (Blackboard bold)  In math environments, besides using \textbf or \mathbf, you can bold symbols by using \boldsymbol or \pmb 'poor man's bold' (which however only works by duplicating characters 3 times slightly offset)  frac{a}{b}   fraction (bruch)||<img src=""sm_JFBz6.png""> sqrt[root]{math}   square root (wurzel) \sum_lower^upper  There are also commands for math functions that are pure text (e.g. sin, lim), which have the advantage over just typing the characters that proper formatting is guaranteed  For commands (esp. math) that take something lower, it is often indicated {{c1::_{foo}}} For commands (esp. math) that take something upper, it is often indicated {{c1::^{foo}}}  \bar{foo}|ad a bar on top of letter <div class='c2-f'> What does this indicate? </div><div class='c1-f'> How do we indicate this in latex? </div>{{c1::x^{n}}}  <span class=""divider"">&lt;-&gt;</span> {{c2::x⎴n⎴}}<div class=""sub""> <div class=""sub c2-f c1-b"" > for single characters {} are optional </div> </div> <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div>((h:2;::<img src=""sm_403-4037364_6848425-integral-symbol.png"">)) ((h:2;::<img src=""sm_1200px-Greek_uc_sigma.svg.png"">)){{c1::int}}  <span class=""divider"">&lt;-&gt;</span> {{c2::integral}} {{c1::sum}}  <span class=""divider"">&lt;-&gt;</span> {{c2::render a sum}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div>((h:2;::<img src=""sm_uNgnp.png"">)){{c1::overbrace}}  <span class=""divider"">&lt;-&gt;</span> {{c2::horizontal curly brace on top}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div>((h:2;::<img src=""sm_binomial-coefficient-formula.png"">)){{c1::binom}}  <span class=""divider"">&lt;-&gt;</span> {{c2::binomial coefficient}}"	acad::latex
"Instead of writing key: function(... for methods, what can you write, in ES6? <span class=""divider"">-></span> {{c1::key(...}}"	acad::js
"<img src=""sm_tmp0ejxsp3b.png""> 1|Untracked 2|Unmodified 3|Modified 4|staged 5|add the file 6|edit the file  7|stage the file 8|remove the file 9|commit"	acad::inf
"To get latex citations etc to work (when compiling), first...  pdf make (<code>pdflatex</code>) To get latex citations etc to work, first run the pdf maker (pdflatex), then run the citation processor, then...  run the pdf maker twice To get latex citations etc to work, first run the pdf maker, then  run the citation processor Latex' convention of naming everything to do with citation bibliography&lt;whatever&gt; reflects what usage of the word bibliography?  the wide sense (synonym to works cited / references) \usepackage[style=foo]{biblatex}   (biblatex) set the citation style to foo printbibliography   (biblatex) add a works cited/references section BibTeX is a {{c1::file format (.bib)}} as well as {{c2::a latex citation processor}} Common packages for citation management in latex are {{c1::biblatex}} and {{c2::natbib}} Common processors for .bib files for latex are {{c1::BibTeX}} and {{c2::biber}} In latex, what generally glues our latex file and our citations (in the .bib file) together?  a certain (citation) processor In latex, where do we generally save our citations?  a separate (.bib) file The confusing thing about BibTeX being two things is that even if you do what, you still use BibTeX the file format?  use a different processor The confusing thing about BibTeX being two things is that even if you use a different processor, you still?  use the .bib format biblatex is <b>most commonly </b>used with what as the processing program?  biber biblatex requires what as the processing program?  nothing in particular natbib requires what as the processing program?  BibTeX addbibresource   (biblatex) command to specify the location for your .bib file<div class=""sub""> <div class=""sub c1-b c2-f""> (well, biber does also support other formats) <img src=""sm_tmprbsz3kbb.jpg""></div> </div> <div class=""c1-f""> What's the problem? </div>What happens if you try to use e.g. biber with a file with file ending?  it'll not work (try to find files that don't exit) biber foo.tex  Call biber without extension (biber foo) if you call biber, the argument you call it with has what characteristic?  don't include file extension <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div>footnote{foo}   create a footnote containing foo<div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div> cite{foo}   cite a specific work with label foo footcite{foo}   cite a specific work with label foo in as a foot note nocite{foo}   add a specific work with label foo into the references/works cited section without referring to it in the text parencite{foo}   cite a specific work with label foo in parentheses textcite{foo}   cite a specific work with label foo in-text with parenthesees areound <b>a specific part</b> <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div>appendix   generate an appendix"	acad::latex
"Why will a tab freeze if you run code that takes very long?  because JS is single threaded and thus has to process the message to comopletion Why is the timeout we give setTimeout only a minimum time?  because its put at the end of the message queue and thus might take longer Why are we guaranteed that the things we are using from our function will not change 'behind our backs' while the function is running?  because we will always finish processing the curreent message (and thus the current stack contents) before we do anything else When the event loop processes a message in the message queue, what does it do?  calls the corresponding function What runs on JS's single thread hosts the event loop. The event loop processes the message queue Once the event loop has called the function of a message, when is it done?  when the call stack is empty Once the event loop has called the function of a message, what will it do with subsequent function calls within?  new stack frame on the stack In JS, stack frames are called execution contexts.  Each execution context contains a scope chain, which is a lists of lexical scopes from inner to outer. A lexical environment is a structure that holds identifiers and the variables/functions they refer to. What does setTimeout do with its function argument? (JS-internal view)  adds a new message with this function at the end of the message queue What does each  message in the message queue have associated with it?  a function Until the stack is empty, what can't we do?  start processing a new message In browsers generally each tab has  its own heap, stack and message queue If there's something on the stack, then what are we doing?  processing a message in the message queue How is JS threaded?  single-theaded Besides the heap and call stack, what does JS also have, as a core part of the implementation?  the message queue"	acad::js
"to add something to the evenet queue of another runtime, what method can one use? <span class=""divider"">-></span> {{c1::window.postMessage()}}"	acad::js
CORS|Cross-Origin Resource Sharing	acad::js
"the little secondary queue that will (probably) run after the current function finishes? <span class=""divider"">-></span> {{c1::Promise job/microtask queue}}"	acad::js
"the promise job/microtask queue (also has other names) is a secondary queue that will run when? <span class=""divider"">-></span> {{c1::as soon as the current message is processed (or otherwise soon, the specs aren't in agreement/clear)}}"	acad::js
precedence of <b>nodejs</b> queues: {{c1::process.nextTick}} queue &gt; {{c2::promises microtask}} queue &gt; {{c3::setTimeout (with a timeout of 0)}} queue ≈ {{c4::setImmediate}} queue	acad::js
"Function to add things to be executed at the end of the current message? <span class=""divider"">-&gt;</span> {{c1::process.nextTick(callback)}}"	acad::js
"process.nextTick(callback) adds things to be executed when? <span class=""divider"">-></span> {{c1::at the end of the current message}}"	acad::js
"what do we pass to process.nextTick() to be executed at the end of the current message? <span class=""divider"">-></span> {{c1::a callback}}"	acad::js
setImmediate() is similar to {{c2::process.nextTick()}} but {{c1::runs later (with lower priority)}}	acad::js
the callback provided to http.createServer (that reacts to request events) is provided two objects when called, a {{c1::http.IncomingMessage}} object, and a {{c2::http.ServerResponse}}	acad::js
"<div class='c1-f'> Is an API for what? </div>{{c1::JS api for form validation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Constraint validation API}}"	acad::js
"the {{c1::define()}} method of window.customElements takes the arguments 1) {{c2::what the name of the element will be}}, 2) the {{c3::class}} that will {{c4::define its behavior}}, 3) (optional) an {{c5::object}} {{c6::specifying what it extends}} The two types of custom elements are customized built-in elements and... <span class=""divider"">-&gt;</span> {{c1::autonomous custom elements}} The two types of custom elements are autonomous custom elements and... <span class=""divider"">-&gt;</span> {{c1::customized built-in elements}} In general, regardless of what, the class defining a custom element should at least extend something like HTMLElement? <span class=""divider"">-&gt;</span> {{c1::the extends parameter (3rd arg to define)}} In general, regardless of the extends parameter (3rd arg to define), the class defining a custom element should do what? <span class=""divider"">-&gt;</span> {{c1::(at least) extend something like e.g. HTMLElement}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div>{{c1::customized built in elements, e.g. foo-bar that extends p}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;p is=""foo-bar""&gt;&lt;/p&gt;}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div>{{c1::autonomous custom elements, e.g. foo-bar}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;foo-bar ...&gt;&lt;/foo-bar&gt;}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div>{{c1::if you<b>&nbsp;do not</b> specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::an autonomous custom element}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div>{{c1::if you specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a customized built-in element}} <div class=""c2-f""> Function of window.customElements for? </div><div class=""c1-f""> Function of window.customElements for? </div>{{c1::define()}}  <span class=""divider"">&lt;-&gt;</span> {{c2::definining a new custom element}} <div class=""c1-f""> what's the problem with this custom element? </div>&lt;wordcount&gt; <span class=""divider"">-&gt;</span> {{c1::must include at least a -&nbsp;}} <div class=""c1-f""> have what restriction in their name? </div>custom elements <span class=""divider"">-&gt;</span> {{c1::must include at least one -}}"	acad::js
"Function to set an attribute (e.g. href) on an <code>Element</code>? <span class=""divider"">-></span> {{c1::setAttribute}} Function to remove an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::removeAttribute}} Function to get an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::getAttribute}}"	acad::js
"<div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div>{{c1::whenDefined(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get a promise that resolves when foo is defined}} <div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div>{{c1::get(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get the constructor of the custom element named foo}}"	acad::js
"{{c3::&lt;template&gt;}} contains HTML that won't {{c1::be rendered immediately}}, but {{c2::can be used from JS (often multiple times)}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div>{{c1:::part(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::element within shadow tree that has part=""foo""}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div>{{c1:::host}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow hosts}}<div class=""sub""> <div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div>{{c1:::host-context(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which has a <b>ancestor!!!!</b> some-selector}}<div class=""sub""> <div class=""sub all-b""> :host-context(.mine) matches <pre><code>&lt;h1 class=""mine""&gt;   ...     &lt;some-shadow-host&gt;</code></pre> </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div>{{c1:::host(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which matches some-selector}}<div class=""sub""> <div class=""sub all-b""> :host(.mine) matches &lt;some-shadow-host class=""mine""&gt; </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div>{{c1:::defined}}  <span class=""divider"">&lt;-&gt;</span> {{c2::custom elements that are already defined}}<div class=""sub""> <div class=""sub c2-b c1-f""> useful for showing placeholder stuff </div> </div> <div class=""c2-f""> is selected how? </div><div class=""c1-f""> selects what? </div>{{c1::part=""foo""}}  <span class=""divider"">&lt;-&gt;</span> {{c2:::part(foo)}} <div class=""c2-f""> Solves what problem? </div><div class=""c1-f""> Is solved by what? </div>{{c1::the part property&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::targeting things within shadow DOMs (mostly components}} interestingly, what can you do with custom elements before you define them? <span class=""divider"">-&gt;</span> {{c1::already use them in the html}} Within a custom element, what can we have, that makes it particularly useful? <span class=""divider"">-&gt;</span> {{c1::child elements}} Where are the lifecycle callbacks for custom elements defined? <span class=""divider"">-&gt;</span> {{c1::in the class that defines the custom elements}} To what do you most commonly attach a shadow root? <span class=""divider"">-&gt;</span> {{c1::a custom element}} In the constructor for a custom element, what should you do, first thing? <span class=""divider"">-&gt;</span> {{c1::call super(props) (to make sure that the correct prototype chain is established)}} <div class=""c2-f""> are called when? </div><div class=""c1-f""> What is called then? </div>{{c1::lifecycle callbacks}}  <span class=""divider"">&lt;-&gt;</span> {{c2::when the custom element changes in relation to the DOM (e.g. connected or disconnected from the DOM)}}<div class=""sub""> <div class=""sub f""> Fot custom elements </div><div class=""sub c2-f""> be a little specific </div> </div> <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div>{{c1::connected/disconnectedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::connected to/ disconnected from the DOM}} <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div>{{c1::adoptedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moved to a new document}} <b>custom elements</b> have are four {{c1::lifecycle callbacks}}, {{c2::connectedCallback}}, {{c3::disconnectedCallback}}, {{c4::adoptedCallback}}, {{c5::attributeChangedCallback}}   3.2.2. Selecting Shadow Hosts from within a Shadow Tree A shadow host is outside of the shadow tree it hosts, and so would ordinarily be untargettable by any selectors evaluated in the context of the shadow tree (as selectors are limited to a single tree), but it is sometimes useful to be able to style it from inside the shadow tree context.  For the purpose of Selectors, a shadow host also appears in its shadow tree, with the contents of the shadow tree treated as its children. (In other words, the shadow host is treated as replacing the shadow root node.)  When considered within its own shadow trees, the shadow host is featureless. Only the :host, :host(), and :host-context() pseudo-classes are allowed to match it.  Why is the shadow host so weird? The shadow host lives outside the shadow tree, and its markup is in control of the page author, not the component author.  It would not be very good if a component used a particular class name internally in a shadow tree stylesheet, and the page author using the component accidentally also used the same class name and put it on the shadow host. Such a situation would result in accidental styling that is impossible for the component author to predict, and confusing for the page author to debug.  However, there are still some reasonable use-cases for letting a stylesheet in a shadow tree style its shadow host. (For example, the component might want to be laid out as a flexbox, requiring the shadow host to be set to display: flex.) So, to allow this situation but prevent accidental styling, the shadow host appears but is completely featureless and unselectable except through :host and its related functional forms, which make it very explicit when you’re trying to match against markup provided by the page author. How can you prevent FOUC with custom elements? <span class=""divider"">-&gt;</span> {{c1:::defined (and specifically :not(:defined))}} {{c1::custom elements}} are HTML elements that have their own {{c2::name}} and {{c3::custom functionality}}. The {{c1::Web Components::w...}} suite consists of {{c2::Custom elements}}, {{c3::Shadow DOM}} and {{c4::HTML templates}} <div class=""c2-f""> returns something of the type? </div><div class=""c1-f""> The most common and relevant element of this type is? </div>{{c1::window.customElements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::CustomElementRegistry}} <div class=""c1-f""> When can you already use this? </div><pre><code>&lt;share-buttons&gt;   &lt;social-button type=""twitter""&gt;&lt;a href=""...""&gt;Twitter&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""fb""&gt;&lt;a href=""...""&gt;Facebook&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""plus""&gt;&lt;a href=""...""&gt;G+&lt;/a&gt;&lt;/social-button&gt; &lt;/share-buttons&gt; </code></pre> <span class=""divider"">-&gt;</span> {{c1::even before these custom elements are defined}}"	acad::inf
"What do we do with the content templates in JS, so we can use it elswhere (without fucking the template up)? <span class=""divider"">-></span> {{c1::call cloneNode on it}}"	acad::js
"often, it makes sense to use templates as what? <span class=""divider"">-></span> {{c1::the shadow dom of custom elements}} attachShadow takes an argument which is what? <span class=""divider"">-></span> {{c1::an options object}}<div class=""sub""> <div class=""sub all-b""> yes, it doesn't take an argument of a shadow tree to directly attach, you have to do that later </div> </div> attachShadow takes an argument which is an options object with the key(s)? <span class=""divider"">-></span> {{c1::mode}} You can access the {{c3::shadow root}} of an element via {{c2::the shadowRoot property (of any given element)}}, but only if {{c1::its mode = ""open""}} When rendering, what happens to the shadow tree? <span class=""divider"">-></span> {{c1::it's attached at the shadow host}} What kind of elements already use the shadow DOM in the background? <span class=""divider"">-></span> {{c1::things like &lt;video&gt; (e.g. its controls)}} To what can you attach a shadow root? <span class=""divider"">-></span> {{c1::any <code>Element</code>}} Once you've created a shadow root, how do you add children etc? <span class=""divider"">-></span> {{c1::just as you would for any normal DOM element}} Method of any <code>Element</code> to attach a shadow root? <span class=""divider"">-></span> {{c1::attachShadow}} <div class='c2-f'> What would you use? </div><div class='c1-f'> Allows us to do what? </div>{{c1::To encapsulate part of the DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div>{{c1::the root node of the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow root}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div>{{c1::the point where the regular DOM ends ant the shadow DOM begins}}  <span class=""divider"">&lt;-&gt;</span> {{c2::shadow boundary}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div>{{c1::the dom node that a shadow DOM is attached to}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow host}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div>{{c1::the DOM tree inside the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow tree}} <div class='c2-f'> Does what? </div><div class='c1-f'> How do we do this, for a given shadow root? </div>{{c1::the mode option&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specifies if JS written in the main page can access it}}<div class=""sub""> <div class='sub f'> of the options object of attachShadow </div> </div> Why might you want to use web components without the shadow DOM, for example? <span class=""divider"">-></span> {{c1::e.g. you ＊want＊&nbsp;styles to propagate}} The {{c1::normal DOM}}, when {{c2::in contrast to the shadow DOM}}, is sometimes called {{c3::the light DOM}}? During composition, things with {{c1::slot=""foo""}} replace {{c3::slots}} with {{c2::name=""foo""}} in the {{c4::shadow DOM}}. <div class='c2-f'> go where? </div><div class='c1-f'> What things related to slots are here? </div>{{c1::&lt;slot&gt; elements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::somewhere within the shadow DOM}} <div class='c2-f'> Are problems that what solves? </div><div class='c1-f'> What are some exampls of problems that this solves? </div>{{c1::competing styles, multiple IDs}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} If there are multiple elements in light DOM {{c1::with the same slot name}}, they are {{c2::appended into the slot, one after another}}. <div class='c2-f'> go/are in(to) which DOM? </div><div class='c1-f'> What things related to slots are here? </div>{{c1::elements with slot=""something""}}  <span class=""divider"">&lt;-&gt;</span> {{c2::are in the light DOM}}"	acad::js
"Lakoff 1975 says that women's language involves what, related to swearing? <span class=""divider"">-&gt;</span> {{c1::swearing is not womanly}} If the point about 'woman's domain being the trivial' holds, then the double bind is that she can either either participate in men's areas of interest and be censured, or talk about what (which causes what)? <span class=""divider"">-&gt;</span> {{c1::talk about women's things (which are 'trivial' and will be laughed at and ignored)}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either use the male forms and face censure for acting outside her gender norms, or? <span class=""divider"">-&gt;</span> {{c1::face the disadvantages of using a lect with less power}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either face the disadvantages of using a lect with less power, or? <span class=""divider"">-&gt;</span> {{c1::use the male forms and face censure for acting outside her gender norms}} For Lakoff 1975, language use can create real-world benefits, of which the male lect gets the powerful/useful forms, and the female lect? <span class=""divider"">-&gt;</span> {{c1::gets the weak forms}}"	acad::ughhh
"The most common type of {{c5::test doubles}} (arranged alphabetically) are {{c1::dummys}}, {{c2::fakes}}, {{c3::mocks}}, and {{c4::stubs}} As test doubles, {{c3::stubs}} use {{c4::predefined answers}} to {{c5::simulate what a method would actually do&nbsp;}}<div class=""sub""> <div class=""sub all-b"">dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly</div> </div> As test doubles, {{c3::mocks}} make sure that {{c2::the method was actually called}} on {{c1::the mock}}&nbsp;in the way {{c4::it shoud}}<div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::fakes}} have {{c2::working implementations}} but {{c2::use some kind of shortcut}} (e.g. {{c1::database in memory}})<div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::dummys}} are {{c2::passed}} but {{c2::never used}} (e.g. {{c1::used to fill param lists}})<div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div>"	acad::inf
"foo.{{c3::tagName}} (or .{{c3::nodeName}}) will get the {{c2::name of the html tag}} {{c1::in allcaps}} foo.{{c1::tagName}} and foo.{{c1::nodeName}} are the same, except that {{c1::nodeName}} will return {{c2::#text for text nodes}} Why have I never heard of the capturing phase until today (19.07.2021)? <span class=""divider"">-&gt;</span> {{c1::Because by default, events are registered for the bubbling phase}} The on&lt;event&gt; prop can't do what, what other methods of adding event handlers can? <span class=""divider"">-&gt;</span> {{c1::add multiple event handlers}} Inverse of addEventListener? <span class=""divider"">-&gt;</span> {{c1::removeEventListener}} Generally, DOM Events have three phases: The {{c1::capturing phase}}, the {{c2::target phase}}, and the {{c3::bubbling phase}} Function that allows adding multiple events: element.{{c1::addEventListener}}({{c2::event}}, {{c3::handler}}, {{c4::options}}) Event delegation only works due to what? <span class=""divider"">-&gt;</span> {{c1::event bubbling}} By default, which events bubble? <span class=""divider"">-&gt;</span> {{c1::most but not all (e.g. focus)}} By default, events become what kind of events? <span class=""divider"">-&gt;</span> {{c1::events that trigger during the bubbling phase}} Behavior pattern for {{c5::event delegation}}: Add {{c3::custom attribute}} to element that {{c4::describes behavior}}, add event listener on {{c1::document (or other high elem)}} that {{c2::tests for attribute}} (and then handles the changes) {{c1::If we pass an object/class as an event handler}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the handleEvent() function}} {{c1::stop further event bubbling&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.stopPropagation()}} {{c1::stop default browser actions for event (e.g. going to link when clicking on it)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.preventDefault()}}  {{c1::make an event trigger during the capturing phase}}  <span class=""divider"">&lt;-&gt;</span> {{c2::3rd arg of addEventListener {capture: true}}}"	acad::inf
"<div class='c2-f'> method for? </div><div class='c1-f'> does what? </div>{{c1::Object.entries(someObj)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get array of [key, value] pairs}}"	acad::js
for await of allows you to iterate over an {{c2::async iterable object}}, to use it, insert {{c1::an await between for and the rest of the iteration statement}}	acad::js
{{c1::Object.fromEntries}} takes an argument that is an {{c2::iterator}} of {{c3::[key, value]}} and {{c4::transforms it into an object&nbsp;}}	acad::js
"Why can't you misformat something using prettier? <span class=""divider"">-&gt;</span> {{c1::since it formats your code automatically}} Which languages does prettier support? <span class=""divider"">-&gt;</span> {{c1::a lot of different web-related ones (JS, Angular, Vue, JSX, CSS, SCSS, JSON, YAML etc. etc.)}} What does prettier do with the stuff you give it? <span class=""divider"">-&gt;</span> {{c1::formats it according to its rules}}"	acad::js
"the {{c3::deviceorientation}} event contains four values, {{c1::absolute}}, {{c2::alpha}}, {{c4::beta}}, and {{c5::gamma}} for the deviceorientation events, the things they can be relative to is the {{c1::screen}} on your mobile device, and the {{c2::keyboard}} on your laptop (generally) Why might your laptop have acceleration sensors? <span class=""divider"">-></span> {{c1::protect HDD when fallign}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div>((h:all;::<img src=""sm_beta2.png"">)){{c1::beta (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the x axis&nbsp;}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div>((h:all;::<img src=""sm_alpha.png"">)){{c1::alpha (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the z axis}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div>((h:all;::<img src=""gamma.png"">)){{c1::gamma (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the y axis&nbsp;}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div>{{c1::deviceorientation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Device orientation changes (in alpha, beta, gamma)}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div>{{c1::devicemotion}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moving your device (accelerometer changes)}}"	acad::js
"the parameters taken by {{c1::fetch()}} and the {{c2::Request constructor}} are {{c3::identical}} (except that you can pass a {{c2::Request}} object to {{c1::fetch}} {{c4::instead of the 'proper' parameters}}) <div class='c2-f'> fetch()/new Request() key for? </div><div class='c1-f'> fetch()/new Request() key for? </div>{{c1::method}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the HTTP method to use}} <div class='c2-f'> fetch() options object/new Request() key for? </div><div class='c1-f'> fetch() options object/new Request() key for? </div>{{c1::headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the headers to use}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div>{{c1::Response.status}}  <span class=""divider"">&lt;-&gt;</span> {{c2::HTTP status code}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div>{{c1::Response.ok}}  <span class=""divider"">&lt;-&gt;</span> {{c2::whether the status code was ok (200-299)}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div>{{c1::Response.headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The HTTP headers returned}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div>{{c1::Response.body}}  <span class=""divider"">&lt;-&gt;</span> {{c2::body returned}}"	acad::js
"WebAssembly and JS are meant to... <span class=""divider"">-></span> {{c1::work together}} One of main problematic implications of {{c3::WebAssembly}} is that it allows running code on your computer which is {{c2::not easily inspectable}} because {{c1::compiled}}, thus potentially hiding {{c4::malware}}, preventing {{c5::adblockers etc.}} from applying, and in a notable case, being used for {{c6::crypto mining}} JS can access WebAssembly via... <span class=""divider"">-></span> {{c1::the WebAssembly JavaScript API}}"	acad::inf
"Using JSX with React is... <span class=""divider"">-&gt;</span> {{c1::optional}}"	acad::react
"How mutable are React elements? <span class=""divider"">-&gt;</span> {{c1::immutable}}"	acad::react
When React sees an {{c1::element representing a user-defined component}}, it passes JSX {{c2::attributes}} and {{c3::children}} to it as {{c4::a single object}}. We call this object “{{c5::props}}”.	acad::react
the only time we can assign to {{c1::this.state}} is in the the {{c2::constructor}}	acad::react
In the react {{c2::component constructor}}, we always need to call {{c1::super(props)}} first	acad::react
{{c2::outputting}} the {{c3::virtual representation of a component}} into the {{c4::final UI representation}} (most often the {{c4::actual DOM}}) is known as {{c1::mounting}}	acad::react
Within the component class, besides {{c1::lifecycle}} methods, constructors etc., we can add {{c2::custom}} methods	acad::react
within class components, {{c2::outside of the constructor}}, you can {{c3::only change state}} via {{c1::setState()}}	acad::react
both {{c2::this}}.{{c1::props}} and {{c2::this}}.{{c1::state}} may be updated {{c3::asynchronously}}, if you want to make sure that {{c4::things are updated in the correct order}}, pass a {{c5::callback}}	acad::react
if you use {{c1::setState}}, but only {{c2::specify some of the keys}}, they will be {{c3::merged in to the previous state object}}	acad::react
If we take a function, e.g. {{c1::a method}} of {{c1::an object}}, and {{c2::assign it to e.g. a variable}} (or {{c2::pass it as a param}}), and then {{c4::call it later}}, it will use {{c3::whatever <code>this</code> is in scope}}, instead of {{c3::the <code>this</code>}}&nbsp;of {{c1::the object}} or similar	acad::js
To make sure react {{c5::event handlers}} {{c1::get the correct <code>this</code>}}, you need to {{c2::<code>bind</code> them in the constructor}}, or use {{c3::public class fields}}/{{c4::arrow functions}} (which have their own downsides)	acad::react
To {{c3::pass arguments}} to React {{c4::event handlers}}, use {{c1::anonymous functions}} or {{c2::bind}}	acad::react
To {{c2::conditionally render things}}, use {{c1::native JS constructs such as if, ternary, log-op}}	acad::react
For easy list generation, it is often idiomatic in react to {{c1::return JSX}} from a {{c2::map function}}	acad::react
In react, a {{c1::controlled component}} has react as {{c2::the only thing managing its behavior}}, making its content {{c3::reflect the react state}}, and having {{c4::react update it}} based on {{c5::events}} (e.g. {{c5::onchange}})	acad::react
"what would you set to this.state.somekey to have a input type=""text"" be a controlled component? <span class=""divider"">-></span> {{c1::value}}"	acad::react
In React, the content of a {{c1::textarea}} does not live {{c2::between its tags}}, but instead {{c3::in a value attribute}}	acad::react
In React, which <code>{{c1::&lt;option&gt;}}</code> is selected is not specified by {{c2::a <code>selected</code> attr}}&nbsp;on {{c2::the <code>&lt;option&gt;</code>}}, but by {{c3::a <code>value</code> attr}}&nbsp;on {{c3::the <code>&lt;select&gt;</code> tag}}	acad::react
{{c1::formik}} and {{c2::react-hook-form}} are the most popular {{c3::react form libraries}}	acad::react
{{c1::Lifting state up}} is putting {{c2::state}} that {{c3::needs to be shared}} in {{c4::the closest common ancestor}} When lifting state up, the {{c1::state changes}} are then {{c2::passed back down}} as {{c3::props}} To {{c1::lift state up}} in react, {{c2::child components}} {{c4::should not}} depend on {{c3::state}} anymore, but on {{c3::props}} If child components have to {{c2::handle events}} when {{c1::lifting state up}}, the {{c3::event handlers}} should be {{c4::passed in}}, so they can {{c5::change the correct state}}	acad::react
{{c1::react-devtools}} are specific devtools that should make {{c2::inspecting react a lot easier}}	acad::react
In sharing information, react prefers {{c1::composition}} over {{c1::inheritance}}	acad::react
Whatever you {{c2::put in between}}&nbsp; {{c3::JSX component opening＆closing tags}} gets {{c4::passed on to the component}} as {{c1::props.children}}	acad::react
"<div class='c1-f'> What provides the props.children here? </div><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::html content within &lt;FancyBorder&gt; tags}}"	acad::react
"<div class=""c1-f""> What does the content between &lt;FancyBorder&gt; tags do? </div><pre><code>function WelcomeDialog() {   return (     &lt;FancyBorder color=blue&gt;       &lt;h1 className=Dialog-title&gt;         Welcome       &lt;/h1&gt;       &lt;p className=Dialog-message&gt;         Thank you for visiting our spacecraft!       &lt;/p&gt;     &lt;/FancyBorder&gt;   ); } </code></pre> <span class=""divider"">-&gt;</span> {{c1::becomes accessible as props.children}}"	acad::react
"In react, {{c1::inheritance}}-like behavior is achieved by {{c2::the more general component}} {{c3::recieving props from}} {{c2::the more specific component}}<div class=""sub""> <div class=""sub all-b""><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre></div> </div>"	acad::react
The steps react recommends to building an react app: {{c1::create a mockup of your site -}}&gt; {{c2::iidentify components}} -&gt; {{c3::build a static verion in react}} -&gt; {{c4::find out all the things that need state}} -&gt; {{c5::find out who should own the state}} -&gt; {{c6::add a way for handling changes}}	acad::react
"<span class=""line"">The shape that a specific character/grapheme takes in a specific typeface/writing style/writing system is known as a {{c1::letterform}}.</span> "	acad::ughhh
In contrast to {{c3::most HTML attributes in react}}, {{c2::aria attributes}} are written in {{c1::kebab-case}}	acad::react
"In react, you can use {{c2::Context}} to {{c3::store global data}}, but you should {{c1::think if there isn't a better way to do it first}}"	acad::react
"In react, to create a Context object, call {{c1::React.}}{{c2::createContext}}{{c3::(defaultValue)}}<div class=""sub""> <pre><code>const ThemeContext = React.createContext('light'); </code></pre> </div>"	acad::react
In react, everything {{c2::nested within}} a {{c1::context provider}} has acces to {{c3::the Context}} with {{c3::the specified value}}	acad::react
To instantiate a context provider of context Foo within JSX, use {{c1::&lt;}}{{c2::Foo.Provider}}{{c3:: value={somevalue} }}{{c1::&gt;&nbsp;}}	acad::react
In react, a component with a {{c1::render prop}} takes a {{c2::function}} that {{c2::returns}} a {{c3::react element}} and {{c3::calls it (the function)}} instead of {{c4::implementing its own render logic}}	acad::react
"While it's ideomatic to call a {{c1::render prop}} {{c2::<code>render</code>}}, any prop that {{c3::is a function}} and {{c4::another component uses to know what to render}} is a {{c1::render prop}}"	acad::react
"<div class='c1-f'> What are we doing here? </div><pre><code>class MouseTracker extends React.Component {   render() {     return (       &lt;div&gt;         <mark>&lt;Mouse render={mouse =&gt; (           &lt;Cat mouse={mouse} /&gt;         )}/&gt;</mark>       &lt;/div&gt;     );   } } </code></pre> <span class=""divider"">-></span> {{c1::creating a render prop}}"	acad::react
"You're not limited to putting {{c2::other elements}} within {{c3::the component tags}} to pass it as props.children, you can also {{c1::insert arbitray {someJS} }} in here."	acad::react
"within {{c1::&lt;SomeContext.}}{{c2::Consumer&gt;}} tags, you can {{c3::specify a function}} that takes {{c4::the value of the closest provider}} and returns {{c5::react elements/JSX to render}}<div class=""sub""> <pre><code>&lt;MyContext.Consumer&gt;   {value =&gt; /* render something based on the context value */} &lt;/MyContext.Consumer&gt; </code></pre> </div>"	acad::react
the {{c1::useState}} function returns an {{c2::array of length 2}}, {{c2::[0]}} being {{c3::the current state}}, and {{c2::[1]}} being {{c3::the function to change the state}}	acad::react
"<pre><code>function Example() {   // Declare a new state variable, which we'll call count   const {{c1::[count, setCount]}} = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre>"	acad::react
"<div class='c1-f'> What are we using here to manage state? </div><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::hooks}}"	acad::react
"<div class='c1-f'> What is count doing here, related to state? </div><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::representing the current state}}"	acad::react
"<div class='c1-f'> What is setCount doing here, related to state? </div><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::changing it}}"	acad::react
Before {{c2::hooks}}, if you were writing a {{c1::function component}} and needed {{c3::e.g. state}}, we would have to have {{c4::converted it to a class component}}	acad::react
"the hook {{c1::useState}} takes an argument of {{c2::the inital value}}<div class=""sub""> <div class=""sub all-b"">both useEffect and useContext take different arguments</div> </div>"	acad::react
the values of variables that we {{c2::assign the useState() return values to}} are preserved even {{c1::after the function exits}}	acad::react
{{c3::the useState function}} is a {{c2::Hook}} called the {{c1::State}} {{c2::Hook}}	acad::react
{{c1::useEffect}} takes {{c2::a callback}} to specify the side effect {{c1::useEffect}} runs {{c2::asynchronously}}, if you need a {{c2::blocking}} version, use {{c3::useLayoutEffect}} instead {{c1::useEffect}} is called when? {{c2::after every render}} (by default) {{c1::useEffect}} is a {{c2::Hook}} that allows you to do {{c3::side effects}} such as {{c3::changing the DOM}} from a {{c4::function component}}	acad::react
if you {{c1::return a callback from}} {{c2::useEffect}}, React will run it {{c3::before any new render (and before finally dismounting)}}	acad::react
to {{c1::clean up}} useEffect stuff, <b>return</b> {{c2::a callback from it}}	acad::react
"since you can {{c1::call useEffect multiple times}}, it's recommended to call it based on {{c2::separate concerns}}, not just {{c3::cram everything the component should do into the same useEffect}}"	acad::react
The {{c1::optional}} {{c2::second argument}} to useEffect is {{c3::an array of states}} - useEffect will only be called if {{c4::one of the values}} in {{c3::the array}} changed,&nbsp;	acad::react
When {{c2::specifying the array optional secondary arg}} for useEffect, you need to include {{c1::any states you will use in the array,}} or it will {{c3::use outdated values}}	acad::react
While you can {{c2::pass an empty array}} to useEffect as the second arg, causing it to {{c3::only run once on mount}} (and {{c3::the return value once on unmount}}), it is {{c1::generally discouraged}}	acad::react
You can only call {{c2::hooks}} from React {{c3::function components}} (not {{c3::plain JS functions}}, even if {{c3::called from react components}}), or from {{c1::custom Hooks}}	acad::react
You can only call {{c2::hooks}} {{c3::at the top level,}} that is not in {{c3::loops,}} {{c3::conditions}}, or {{c3::nested functions}}, because React {{c1::relies on the order in which the Hooks are called to determine which state is what}}	acad::react
"<div class='c1-f'> What's the problem here? </div><pre><code>     if (name !== '') {     useEffect(function persistForm() {       localStorage.setItem('formData', name);     });   }</code></pre> <span class=""divider"">-></span> {{c1::call hooks only at toplevel}}"	acad::react
a {{c3::custom hook}} is a JS {{c4::function}} whose name {{c2::starts with use}} and which may {{c1::call other hooks}}	acad::react
in contrast to {{c2::built-in hooks}}, {{c2::custom hooks}} can {{c1::take any arguments}} and {{c1::return anything}}	acad::react
"{{c4::custom hooks}} are meant for {{c3::reusing logic}}, which you can't just {{c1::do via a normal function}}, since {{c2::normal functions can't call the built-in hooks}}"	acad::react
conventionally, {{c1::the first value returned}} from {{c3::useState}} is called {{c4::e.g. foo}}, and {{c1::the second value}} is then called {{c2::setFoo}}	acad::react
"when we're generalizing over all {{c2::foos}} and {{c2::setFoos}} we might {{c3::get from useState}}, we call them {{c1::state}} and {{c1::setState}}"	acad::react
{{c4::setState}} may take a value, or a {{c1::callback}} which {{c2::recieves the previous value}} and {{c3::returns the next value}}	acad::react
if you want to specify {{c1::an inital state}} that is {{c2::complicated}}, instead of {{c3::passing useState a value}}, you may also {{c3::pass it a callback}}	acad::react
within {{c1::the render function}}&nbsp;≈ {{c2::the main body of a function component}} (≈ outside of&nbsp;{{c2:: useEffect and similar}})&nbsp;respectively, you may not do things {{c3::that cause side effects&nbsp;}}	acad::react
{{c1::useContext}} is a {{c2::hook}} that {{c3::takes SomeContext}} and {{c3::returns the value for that SomeContext}} (the one determined by {{c4::the nearest SomeContext.Provider}})	acad::react
"SInce in react-bootstrap {{c1::.key-value often becomes key=""value""}}, to {{c2::add new key=""value"" pairs}}, {{c3::add new .key-value classes}}"	acad::react
"{{c1::until which breakpoint on the container will follow the 100% plus padding thing}} is set in react-bootstrap by {{c2::the fluid=""breakpoint"" prop}}"	acad::react
{{c1::Next.js}} is a {{c2::framework}} for {{c3::react}}	acad::nextjs
In next.js, any {{c1::react component}} {{c3::exported}} from a {{c2::.js}}({{c2::x}}) or {{c2::.ts}}({{c2::x}}) file in {{c4::the pages directory}} is {{c5::a page}}	acad::nextjs
By default, {{c1::next.js}} {{c2::pre-renders}} ({{c2::generates the HTML of in advance}}) {{c3::every page}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getStaticPaths}} claim to only run {{c2::during build time}}, but {{c3::actually also can run during runtime}} if using {{c4::Incremental Static Regeneration}}	acad::nextjs
the three functions (which are all a{{c2::sync}}) for {{c1::fetching data}} in next.js are {{c3::getStaticProps}}, {{c4::getStaticPaths}}, {{c5::getServerSideProps}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getServerSideProps}} will both pass the value {{c4::in the props key}} of {{c5::the return value}} to the {{c2::react component}} {{c3::defining the page}}	acad::nextjs
to {{c1::add custom stylesheets}} you <code>{{c2::import}}</code> them in {{c3::pages/_app.js}} ({{c4::and only there!}}) {{c6::stylesheets from npm modules}} can be {{c2::imported}} {{c5::anywhere}}	acad::nextjs
no matter what {{c1::optional chaining}} you use, if you {{c2::call}} a thing as {{c2::a method}} that is {{c2::in fact a property}} you will always get {{c3::a TypeError}}	acad::js
"JSON Schema: <pre><code>  ...   ""type"": {{c1::""object""}},   {{c2::""properties""}}: {     ""productId"": {       ""description"": ""The unique identifier for a product"",       ""type"": ""integer""     }   },</code></pre> JSON Schema toplevel:  <pre><code>{   {{c1::""$schema""}}: ""https://json-schema.org/draft/2020-12/schema"",   {{c2::""$id""}}: ""https://example.com/product.schema.json"",   {{c3::""title""}}: ""Product"",   {{c4::""description""}}: ""A product in the catalog"",   {{c5::""type""}}: ... }</code></pre>"	acad::js
"to {{c1::only allow unique items in arrays (to make it a set, I guess)}} in json schema, specify <code>{{c2::""uniqueItems"": true}}</code> to specify that a JSON Schema value {{c1::has children}}, use {{c2::the <code>properties</code> key}} the {{c3::top-level}} {{c1::type}} key provides a {{c2::type for the top-level object}} the {{c2::top-level object}} in a {{c3::JSON schema document}} has a few {{c1::metadata/general description}} keys the JSON schema keys {{c1::min/maxItems}} say {{c2::how many items an item of type array can have}} the JSON schema keys <code>{{c2::(exclusive)}}{{c1::m/Minimum}}</code> and <code>{{c2::(exclusive)}}{{c1::m/Maximum}}</code> describe {{c3::the relevant kind of minimum/maximums of the values}} the JSON schema key {{c2::type}} tells us {{c1::what datatype the value should be}} the JSON schema key {{c2::<code>required</code>}} is an {{c3::array}} saying {{c1::which children must be present}} the JSON schema key {{c2::<code>description</code>}} provides {{c1::a short description of the value}}  the {{c1::dependentRequired}} key in json schema takes an {{c2::object}} where for every given {{c2::key}} there is {{c3::an array}} of other propetries which are {{c4::then also required}} if the {{c4::key is specified}} To express a more detailed conditional relationship in JSON schema, you can use the {{c1::""if""}}, {{c2::""then""}}, and {{c3::""else""}} keywords If {{c1::credit_card is present}}, {{c1::billing_address is also required}} (JSON Schema): <pre><code>{   ""properties"": {     ""name"": { ""type"": ""string"" },     ""credit_card"": { ""type"": ""number"" },     ""billing_address"": { ""type"": ""string"" }   },    ""required"": [""name""],    {{c2::""dependentRequired""}}: {     {{c3::""credit_card""}}: {{c4::[""billing_address""]}}   } }</code></pre>"	acad::inf
"<div class='c1-f'> For next.js, what will About become? </div><pre><code>function About() {   return &lt;div&gt;About&lt;/div&gt; }  export default About</code></pre> <span class=""divider"">-></span> {{c1::a page}}"	acad::nextjs
"By default, what decides the route of a next.js page? <span class=""divider"">-></span> {{c1::the filename}}"	acad::nextjs
Converting {{c2::static HTML websites}} (either from {{c2::SSR}} or {{c2::statically generated}}) into {{c3::dynamic web pages}} via {{c4::client-side JS}} is known as {{c1::hydration}}.	acad::nextjs
The functions for getting data, getServerSideProps/getStaticPaths/getStaticProps are functions that are {{c1::written}} and {{c2::exported}} by {{c3::you}} for {{c4::any page that needs them}}	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} recieve {{c2::a single argument}} <code>{{c3::context}}</code>	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} return a {{c2::props object}} that {{c3::the react component}} implementing the page will recieve	acad::nextjs
Next.js itself is built on top of {{c1::node.js}}	acad::nextjs
Nextjs supports {{c2::modern browsers}} + {{c1::IE11}} by default	acad::nextjs
create-next-app supports using {{c1::typescript}} with the {{c2::--ts}}/{{c2::--typescript}} flag	acad::nextjs
the getStatic/ServersSide... functions have {{c1::TS types}} that are {{c2::the same but capitalized (UpperCamelCase)}}	acad::nextjs
"<div class='c1-f'> What will every page now have? </div><pre><code>import Layout from '../components/layout'  export default function MyApp({ Component, pageProps }) {   return (     &lt;Layout&gt;       &lt;Component {...pageProps} /&gt;     &lt;/Layout&gt;   ) } </code></pre> <span class=""divider"">-></span> {{c1::the same global layout}}"	acad::nextjs
"If you want to have some stuff that every page of your next.js website will have, what should you do? <span class=""divider"">-></span> {{c1::override the global App component}}"	acad::nextjs
If you want to have {{c5::different layouts}} for {{c5::different pages}}, you need to attach a <code>{{c1::getLayout}}</code> {{c1::method}} to the {{c2::function implementing your page}}, which takes an argument of {{c3::the page}}, and returns {{c4::the page with whatever modifications}}.	acad::nextjs
"<div class='c1-f'> What are we doing here? </div><pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> <span class=""divider"">-></span> {{c1::defining a layout for this page specifically}}"	acad::nextjs
Define a layout for this page specifically<pre><code>//... imports export default function Page() {   //... {{c1::Page}}.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<pre><code>//... imports export default function Page() {   //... Page.{{c1::getLayout}} = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {{c1::{page} surrounded by some other stuff}} </code></pre>	acad::nextjs
"What's the benefit of specifying layouts for individual pages, instead of just also returning this from the main component? <span class=""divider"">-&gt;</span> {{c1::react will be able to tell what changed and thus enable more SPA-like operation}}"	acad::nextjs
"Next.js {{c1::auto-optimizes your images}} if you specify them using the {{c2::<code>Image</code> component}}&nbsp;in {{c3::next/image}} <div class='c1-f'> What would we have to do to use this? </div><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>import Image from 'next/image' </code></pre>}} <div class='c1-f'> What is the advantage of specifying images like this in next.js? </div><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::uses built-in compression, lazy-loading etc}} <div class='c1-f'> Allows us to do what? </div><pre><code>module.exports = {   images: {     domains: ['example.com'],   }, }</code></pre> <span class=""divider"">-></span> {{c1::use next.js image component with external images}} (next.js) For production, it is recommended that you install the npm package <code>{{c1::sharp}}</code> for {{c2::<code>Image</code> component minification}}"	acad::nextjs
By default, next.js only allows images {{c1::in the project itself}} to be used {{c2::for the Image component}}, if you want to use others, specify the {{c3::domain}} in {{c4::{images:}} {{c5::{domains:}} [...	acad::nextjs
to change how next.js {{c1::image optimization}} works, specify {{c2::{images:}} {{c3::{loader:}} 	acad::nextjs
Next.js auto {{c2::inlines}} {{c1::font}} css	acad::nextjs
{{c1::next/head}} contains a component for {{c2::appending things to the &lt;head&gt;}}.	acad::nextjs
The {{c1::first contentful paint}} is when the {{c2::first piece of DOM content}} (which elements are exactly considered is more complicated) loaded, relative to {{c3::when the page first started loading}}	acad::js
"<div class='c1-f'> How do we react to the service worker being created? </div><pre><code> navigator.serviceWorker.register('/example/sw.js')</code></pre> <span class=""divider"">-></span> {{c1::via a then() (or any other way we can respond to a promise)}}"	acad::js
"To do stuff in the service worker once {{c2::it's been installed}}, add an event listener for the {{c1::<code>install</code>}} event.<div class=""sub""> <div class=""sub all-b""><pre><code>self.addEventListener('install', function(event) {   // Perform install steps });</code></pre></div> </div>"	acad::js
To {{c1::add something to the microtask queue}}, use {{c2::queueMicrotask()}}.	acad::js
the <code>{{c1::install}}</code> and <code>{{c1::activate}}</code> events of service workers are/conform to the interface <code>{{c2::ExtendableEvent}}</code>	acad::js
"the {{c1::ExtendableEvent}} interface has a method {{c2::waitUntil}}(), which prevents the service worker from being treated as {{c4::successfully installed}} until {{c3::the passed promise resolves successfully}}<div class=""sub"">  This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated. </div>"	acad::js
the {{c1::ExtendableEvent.waitUntil}}() method is mainly used so that the service worker is not {{c2::considered installed}} until {{c3::all the caches it needs are populated}}.	acad::js
"{{c1::CacheStorage (normally as <code>caches</code>).open(somename)}}&nbsp;returns {{c4::a Promise}} that resolves to {{c5::the Cache object}} matching {{c2::the name passed}}, or {{c3::creates it if it does not exist}} {{c1::CacheStorage (normally as <code>caches</code>).match(someRequest)}} is a convenience method that looks if {{c2::the someRequest is cached}} in {{c3::any of the caches}} the <code>{{c1::Cache}}</code> interface is meant to store <code>{{c2::Request}}</code> / <code>{{c2::Response}}</code> pairs since there can be more than one <code>Cache</code>, you {{c1::get a specific <code>Cache</code>}}&nbsp;via the <code>{{c2::CacheStorage}}</code> interface, which can be accessed via {{c3::the global <code>caches</code> property}} for the Cache API, the {{c1::retrieval}} functions are {{c2::match}} for a {{c4::single item}} and {{c2::match}}{{c3::All}} for {{c4::an array}}. Arguments are ({{c5::request}}, {{c5::options}}) for the Cache API, the {{c1::add}}/{{c1::addAll}} methods take a {{c2::request object}}, {{c3::fetch the response}}, and then {{c4::add the response to the cache}}. for the Cache API, if something {{c2::returns something}}, it does so in the form of {{c1::a promise}} What is the Cache API/interface distinct from? <span class=""divider"">-></span> {{c1::HTTP caching}} By whom is the <code>Cache</code> managed? <span class=""divider"">-></span> {{c1::primarily by you, the dev}}<div class=""sub""> <div class=""sub c1-f c2-b"" > the one that stores Request / Response object pairs </div> </div>"	acad::js
the primary use of the {{c1::activate}} event of service workers is to {{c2::clean up}} from {{c3::a previous service worker}} If your service worker has {{c1::previously been installed}}, and then a {{c2::new version}} of the worker is available on {{c3::refresh or page load}}, the new version is {{c4::installed in the background}}, but not {{c5::yet activated}}. After a service worker is {{c1::active}} and the user {{c2::navigates to a different page}} or {{c2::refreshes}}, the {{c3::service worker}} will begin to receive {{c4::fetch}} events	acad::js
"If you add a new service worker, what might you do with the <code>Cache</code> used? <span class=""divider"">-></span> {{c1::use a new <code>Cache</code>}}<div class=""sub""> <div class=""sub c1-f"" > esp. if they are incompatible </div> </div>"	acad::js
"What should you definitely do when reacting to the activate event in service workers? <span class=""divider"">-></span> {{c1::remove old caches}}"	acad::js
"{{c1::web app manifests}} are usually called {{c2::manifest}}.{{c3::webmanifest}}/.{{c3::json}} {{c1::Progressive web app}} is not {{c2::an official term}}, but refers to creating {{c3::a flexible, adaptable app}} using {{c4::web technologies}} (though {{c5:: there have been a few technologies that have become very intertwined with it (service workers, web app manifests, etc.)}}) within a web app manifest,&nbsp; the <code>{{c1::scope}}</code> property manages {{c2::which URLs are considered to be within your app}} within a web app manifest, you must provide {{c2::at least one}} of {{c1::<code>short_name</code>}} or {{c1::<code>name</code>}}, which appear {{c3::in the installation screen}} and {{c3::most other places where space is limited}}, respectively within a web app manifest, the <code>{{c1::start_url}}</code> property is used to determine {{c2::from where the app starts}} within a web app manifest, the <code>{{c1::icons}}</code> property is an {{c2::array}} of {{c2::objects}}, each representing {{c3::an icon for launchers, etc.}} within a web app manifest, the <code>{{c1::display}}</code> property is used to determine {{c2::how the apps start (e.g. in fullscreen / back buttons, etc.)}} within a web app manifest, the <code>{{c1::background_color}}</code> property is mainly used for {{c2::the startup splash screen}} within a web app manifest, for the <code>{{c1::display}}</code> property <code>{{c2::fullscreen}}</code> shows {{c6::no UI}}, <code>{{c3::standalone}}</code> shows {{c6::only the OS UI (works as a normal app would)}}, <code>{{c4::minimal-ui}}</code> {{c7::additionally shows some nav elements (back/reload) but no address bar}}, and <code>{{c5::browser}}</code> {{c7::gives you a standard browser experience}} within a web app manifest, each object within the array of&nbsp;<code>{{c1::icons}}</code> property can have the keys {{c2::sizes}}, {{c3::src}}, {{c4::type}}, and {{c5::purpose (esp. used for adapting e.g. to monochrome or maskable icons)}} The {{c1::web app manifest}} is a {{c2::JSON}} file that tells the browser about your {{c3::Progressive Web App}} and how it {{c4::should behave}}&nbsp;when {{c5::installed on the user's desktop or mobile device.}}"	acad::js
"((h:all;::<img src=""8mkBdT3O0FZLo0PUppvv.png"">))within a web app manifest,&nbsp; the <code>{{c1::theme_color}}</code> property manages {{c2::the color of the bars/notification shade, etc.}}"	acad::js
"to define {{c1::app shortcuts}}, use the {{c2::shortcuts}} property in the web manifest ((h:all;::<img src=""F4TsJNfRJNJSt2ZpqVAy.png"">))"	acad::js
"((h:all;::<img src=""appshell.png"">))An {{c1::app shell}} is a way to build a {{c2::PWA}} and involves {{c4::aggressively caching}}&nbsp; {{c3::the common UI}} and {{c4::dynamically loading}} {{c3::the content}} using JS"	acad::js
The {{c1::Push}} API&nbsp;allows web apps to get messages {{c2::pushed from a server}}, whether or not the web app is {{c3::in the foreground / even currently loaded}}	acad::js
"<div class='c1-f'> When should the parentheses be here? </div><pre><code>const layout = (props) =&gt; {   return (     &lt;Aux&gt;     ...     &lt;/Aux&gt;   ) }</code></pre> <span class=""divider"">-></span> {{c1::if the JSX returned is more than one line}}"	acad::react
Normally you can only return {{c1::one element}} as a react component, but you may want to return {{c1::multiple elements}} without {{c2::a wrapper.}} for this, you can use {{c3::&lt;React.Fragment&gt;}}...{{c3::&lt;/React.Fragment&gt;}} or the short syntax {{c4::&lt;&gt;}}...{{c4::&lt;/&gt;}}	acad::react
"<div class='c1-f'> This is shorthand for? </div><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>render() {   return (     &lt;React.Fragment&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/React.Fragment&gt;   ); } </code></pre>}}"	acad::react
"<div class='c1-f'> What would happen if we didn't include the &lt;&gt;...&lt;/&gt;? </div><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::it wouldn't work}}"	acad::react
"<div class='c1-f'> What's missing here? </div><pre><code>render() {   return (     &lt;ChildA /&gt;     &lt;ChildB /&gt;     &lt;ChildC /&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::the children should be wrapped in a fragment}}"	acad::react
For Chakra UI to {{c3::work correctly}}, you need to set up the {{c1::ChakraProvider}} at {{c2::the root of your application}}.	acad::chakra-ui
create-react-app&nbsp; Custom Templates are always named in the format {{c1::cra-template-[template-name]}}, however you only need to provide the {{c2::template-name}} to the {{c3::creation command}}.	acad::react
set create-react-app {{c2::templates}} by using {{c1::--template foo}}	acad::chakra-ui
"Customizing the {{c2::chakra}} {{c1::theme}} <pre><code>{{c3::import}} {{c4::{ extendTheme } }} {{c3::from}} {{c5::""@chakra-ui/react""}}  //... const/let theme {{c6::= extendTheme}}(/* things to change (is an {{c7::object}}) */) //... {{c8::&lt;ChakraProvider}} {{c9::theme={theme}&gt;}}</code></pre>"	acad::chakra-ui
"the {{c1::resetCSS}} prop of {{c2::ChakraProvider}} automatically includes a {{c3::&lt;CSSReset /&gt;}} the {{c1::portalZIndex}} prop of {{c2::ChakraProvider}} is a {{c3::common z-index to use for <code>Portal</code>}} the {{c1::colorModeManager}} prop of {{c2::ChakraProvider}} is a {{c3::container to persist a users' color mode preference in}}"	acad::chakra-ui
"The {{c1::<code>as</code>}} prop is a feature of chakra components that allows you to pass {{c2::an HTML tag}} or {{c3::component}}, which allows you to {{c4::use all of that things props}}<div class=""sub""> <div class=""sub all-b""><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre></div> </div>"	acad::chakra-ui
"<div class='c1-f'> What does the 'as' here allow you to do? </div><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::act as an &lt;a&gt; as well}}"	acad::chakra-ui
"<div class='c1-f'> Why does e.g. href here work? </div><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::the as=""a"" allows it to work as an &lt;a&gt; as well}}"	acad::chakra-ui
chakra does most of {{c2::its config}} in the the {{c1::<code>config</code> property of <code>theme</code>}}	acad::chakra-ui
 Chakra stores the color mode in the browser in {{c1::localStorage}}	acad::chakra-ui
{{c1::Color mode}} is chakras way for managing {{c2::light and dark mode}}. It accepts the values {{c3::light}}, {{c3::dark}}, and {{c3::system}}	acad::chakra-ui
the {{c5::<code>config</code> property of <code>theme</code>}} takes {{c1::<code>initialColorMode</code>}} to tell the app {{c2::in which color mode to start}}, and {{c3::<code>useSystemColorMode</code>}} {{c4::whether to respond to the color theme system preference}}	acad::chakra-ui
{{c1::&lt;ColorModeScript&gt;}} is necessary {{c2::for color mode in chakra to work}}, and needs to be {{c3::one of the first things in the &lt;body&gt;}}	acad::chakra-ui
{{c1::useColorMode}} is a React {{c2::hook}} that gives you access to {{c3::colorMode}}, {{c3::toggleColorMode}}	acad::chakra-ui
{{c1::useColorModeValue}} is a React hook used to {{c2::change any value or style based on the color mode}}. It {{c4::takes 2 arguments}}: {{c3::the value in light mode}}, and {{c3::the value in dark mode}}.	acad::chakra-ui
In some occasions, you might want Chakra components to {{c1::look the same in both light and dark modes}}. To achieve this, {{c3::wrap the component}} in a {{c2::LightMode}} or {{c2::DarkMode}} component. 	acad::chakra-ui
if using {{c2::SSR/Static generation}} with {{c4::Nextjs}} and {{c4::Chakra}} {{c3::color mode}} together, {{c1::some additional boilerplate}} is required	acad::chakra-ui
{{c3::Chakra UI}}&nbsp; converts {{c2::theme tokens (colors, font sizes, stc)}} to {{c1::CSS variables}}.	acad::chakra-ui
"Chakra's {{c1::css variables}} are prefixed with {{c2::chakra-}}"	acad::chakra-ui
"<div class='c2-f'> This might generate CSS such as? </div><div class='c1-f'> How might this have been generated with Chakra? </div>{{c1::<pre><code>&lt;Box color=""gray.100"" /&gt;</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code>.css-box {    color: ""var(--chakra-colors-gray-100)"" }</code></pre>}}"	acad::chakra-ui
(based off the System UI Theme Specification) to have a style prop change based on {{c1::breakpoints}}, you can either pass an {{c2::array}}, with each value being {{c3::the one for that breakpoint}} (starting from {{c4::the unnamed smallest one}}) and {{c5::pass null}} to {{c6::skip breakpoints}} and thus avoid {{c6::generating unnecessary css}}, or pass an {{c2::object}} with keys with {{c7::the breakpoint names}} and the values as the relevant values	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (object syntax)? </div>{{c1::<pre><code>&lt;Text fontSize={{ base: ""24px"", md: ""40px"", lg: ""56px"" }}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the font size at 24 px , have the md breakpoint be 40 px, and the lg and above be 56px}}"	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (array syntax)? </div>{{c1::<pre><code>&lt;Box bg=""red.200"" w={[300, 400, 500]}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the width at 300 px , have the sm breakpoint be 400 px, and the md and above be 500px}}"	acad::chakra-ui
if you want {{c1::base html elements}} (e.g. {{c1::button}}) to {{c2::accept style props styling}}, use {{c3::&lt;chakra.&lt;element&gt;}} (e.g. {{c3::&lt;chakra.button}})	acad::chakra-ui
the chakra {{c1::factory}} function <code>chakra()</code> takes {{c2::a react component}} (or {{c2::html tag}}) and optionally an argument of {{c3::props}}, and makes it into a {{c4::chakra style-props aware component}}. Since it uses <code>{{c5::emotion}}</code> under the hood, {{c2::the react component}} needs to {{c6::accept className as props}} or it will not work	acad::chakra-ui
"By using {{c1::ChakraProvider}} at the root of your application, we automatically render a {{c2::GlobalStyle}} component, which reads the styles defined in {{c3::theme.styles.global}} and {{c4::passes them}} to {{c5::emotion's Global component}} which is used to handle global style injection."	acad::chakra-ui
to set {{c3::global styles}} for things in chakra, use {{c4::theme.styles.global}}. There, every key is {{c1::a selector}}, and every property is a {{c2::set of declarations}}	acad::chakra-ui
The {{c1::layerStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
The {{c1::textStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles for text}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
{{c1::Themera}} is a web app to {{c2::generate chakra UI color schemes}} (there are also many others tho)	acad::chakra-ui
"{{c1::Chakra}}'s {{c3::default}} {{c2::theme}} (and {{c3::any other}} {{c2::theme}}) includes defaults for all the {{c4::System UI Theme Specification scales}}"	acad::chakra-ui
to customize styles (in a&nbsp;<b>consistent</b>&nbsp;way) in chakra, you broadly have three options: Customize the {{c1::theme tokens}}, {{c2::component styles}}, or {{c3::global styles}}	acad::chakra-ui
"the {{c1::colorScheme}} property of a {{c2::component}} takes a {{c3::color name}} (of the ones that define {{c4::palettes}}, in {{c5::<code>theme.colors</code>}}), it then uses {{c6::different weights}} for {{c7::different parts of itself}}<div class=""sub""> <div class=""sub all-b"">If you give a Button component, for example, a colorScheme of ""red"", it uses the different palette ranges for its color and hover, disabled, active pseudo-classes.</div> </div>"	acad::chakra-ui
"chakra has {{c1::single}}-{{c2::part}} {{c3::components}} and {{c1::multi}}-{{c2::part}} {{c3::components}} (e.g. bootstrap has too, but doesn't call them that)"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div>{{c1::<pre><code>&lt;Button&gt;My button&lt;/Button&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a single-part component}}"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div>{{c1::<pre><code>&lt;Tabs&gt;   &lt;TabList&gt;     &lt;Tab&gt;Tab 1&lt;/Tab&gt;     &lt;Tab&gt;Tab 2&lt;/Tab&gt;   &lt;/TabList&gt;   &lt;TabPanels&gt;     &lt;TabPanel&gt;Tab 1&lt;/TabPanel&gt;     &lt;TabPanel&gt;Tab 2&lt;/TabPanel&gt;   &lt;/TabPanels&gt; &lt;/Tabs&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a multi-part component}}"	acad::chakra-ui
chakra {{c5::components}} have a <code>{{c1::baseStyle}}</code> which can be varied based on different things, of which you define the <code>{{c3::sizes}}</code> and <code>{{c4::variants}}</code> {{c2::within the component itself}}	acad::chakra-ui
"to set a default <code>{{c1::size}}</code> or <code>{{c1::variant}}</code> of a component, use the <code>{{c2::defaultProps}}</code> key of theme.components.ComponentName<div class=""sub""> <pre><code>const ComponentStyle = {   // style object for base or default style   baseStyle: {},   // styles for different sizes (""sm"", ""md"", ""lg"")   sizes: {},   // styles for different visual variants (""outline"", ""solid"")   variants: {},   // default values for `size` and `variant`   defaultProps: {     size: """",     variant: """",   }, }</code></pre> </div>"	acad::chakra-ui
"you customize components {{c1::globally}} by editing {{c2::the relevant component}} within <code>{{c3::theme.component}}</code><div class=""sub""> <div class=""sub all-b""><pre><code>const theme = extendTheme({   components: {     Button: {       // 1. We can update the base styles       baseStyle: {         fontWeight: ""bold"", // Normally, it is ""semibold""       },       // 2. We can add a new button size or extend existing       sizes: {       //...</code></pre> </div> </div>"	acad::chakra-ui
"chakra highly suggest that instead of using a {{c1::single theme.js/ts file}}, you create {{c2::a /theme folder}} in its place.&nbsp;<div class=""sub""> <pre><code>📁 theme   📄 index.js  # my main theme entrypoint   📄 styles.js  # all my global style overrides   📁 foundations     📄 borders.js  # all my border overrides   📁 components     📄 button.js  # all my button overrides</code></pre> <pre><code>/ theme/index.js import { extendTheme } from ""@chakra-ui/react"" // Global style overrides import styles from ""./styles"" // Foundational style overrides import borders from ""./foundations/borders"" // Component style overrides import Button from ""./components/button"" const overrides = {   styles,   borders,   // Other foundational style overrides go here   components: {     Button,     // Other components go here   }, } export default extendTheme(overrides)</code></pre> </div>"	acad::chakra-ui
"the {{c1::extendTheme}} function can take {{c2::multiple overrides}}, each {{c3::overriding the previous one}}. The {{c4::final}} arg may be {{c5::a base theme}}, otherwise {{c6::the default Chakra UI one is assumed}}<div class=""sub""> <div class=""sub all-b""><pre><code>const someTheme = extendTheme({    colors: {      brand: null   } } /* whoops, since we wrote that in permanent marker, let's just override that */, {   colors: {     brand: baseTheme.colors.red   } }/*, optionally some base theme */)</code></pre></div> </div>"	acad::chakra-ui
the <code>{{c1::withDefault}}{{c2::ColorScheme}}/{{c2::Size}}/{{c2::Variant}}/{{c2::Props}}</code> are passed to <code>extendTheme</code>, take an {{c4::object}} as an arg and apply a {{c3::default}} {{c3::colorScheme}}/{{c3::size}}/{{c3::variant}}/{{c3::some props}} to {{c5::all components}} or {{c6::those provided in the <code>components</code> array}}&nbsp;of the {{c4::object}}	acad::chakra-ui
the same mechanism that allows you to {{c1::customize built-in chakra components}} (i.e. setting things such as {{c2::baseStyle}}, {{c2::variant}}, {{c2::defaultProps}} etc. in {{c3::theme.component.somename}}) allows you to {{c4::create new chakra components}}, but you also need to {{c5::implement the react component}}	acad::chakra-ui
the <code>{{c1::__css}}</code> prop has {{c2::the same API}} as the <code>{{c3::sx}}</code> prop, but {{c4::lower priority}} -&gt; good to be {{c4::overridden&nbsp;}}	acad::chakra-ui
"Implementing a {{c12::custom chakra component}}: <pre><code>// all necessary imports function ComponentName(props) {   const { {{c1::size}}, {{c1::variant}}, {{c1::colorScheme}} /* all only if used */, {{c2::children}}, {{c3::...rest}} } = {{c4::props}};   const styles = {{c5::useStyleConfig}}(""ComponentName"" /* must be the same name as in {{c6::theme.components}} */, { {{c7::size}}, {{c7::variant}}, {{c7::colorScheme}} /* all only if used */}   return (     &lt;Box /* or something else */ {{c8::__css}}={{c9::{styles} }}  {{c10::{...rest}}}&gt;       // If {{c11::children}}, include them here somewhere //...</code></pre> "	acad::chakra-ui
for {{c1::multipart}} components, you need to specify the <code>{{c2::part}}</code> property when creating the <code>{{c3::theme.components}}</code> entry as well	acad::chakra-ui
for {{c1::multipart}} components, if we want to {{c2::pass on styles to <code>children</code>}}, we need to put them in a {{c3::&lt;StylesProvider value=}}, which we then retrieve via {{c4::the useStyles hook}} in {{c5::the children}}	acad::chakra-ui
the command-line interface for chakra is {{c1::chakra-cli}}, for now the {{c2::only thing}} it can do is {{c3::generate typescript typings for a theme}} via the {{c4::tokens}} subcommand	acad::chakra-ui
{{c1::baseStyle}}, {{c1::sizes}} and {{c1::variants}} of your {{c2::theme.components}} entry can also take a {{c3::function}} so you can {{c3::generate}} them based on the current {{c4::theme}}, {{c4::colorMode}} or {{c4::colorScheme}}	acad::chakra-ui
the {{c2::&lt;AspectRatio&gt;}} chakra component takes a {{c1::ratio}} prop to set the {{c3::aspect ratio}}	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-08-42-screenshot.png"">))((h:all;::<img src=""sm_2021-09-18--23-08-35-screenshot.png"">))the {{c2::&lt;Center&gt;}} chakra component {{c3::centers its child}}, given {{c4::a width}} and/or {{c4::height}}. it can also e.g. be used to {{c1::create a frame around something}}"	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-15-08-screenshot.png"">))&lt;{{c1::Circle}}&gt; and &lt;{{c1::Square}}&gt; are wrappers around &lt;{{c2::Center}}&gt; that only take {{c3::size}}"	acad::chakra-ui
{{c1::&lt;Container&gt;}}s by default {{c2::constrain the size of the content}} to {{c3::60ch}}, but can take the {{c4::maxW}} prop with the value {{c5::container.&lt;breakpoint&gt;}} to {{c2::constraine the content}} to that breakpoint instead. It can also center its content via the {{c6::centerContent}} property.	acad::chakra-ui
"Proplog<p class=""cloze-group hide-if-inactive""><span class=""c1-cloze"">Propositional logic</span> may also be called <span class=""c2-cloze c3-scr"">propositional calculus</span> or, based <span class=""c3-cloze c4-scr"">on its relationship to 1st order logic</span>, <span class=""c4-cloze c3-scr"">zeroth-order logic</span> (other rare terms include <span class=""c5-cloze c4-scr c3-scr"">statement logic, sentential calculus/logic.</span> </p>  <p class=""cloze-group-children hide-if-inactive-children"">   <span class=""line""><span class=""c6-cloze"">propositions</span> are the things that <span class=""c7-cloze"">bear truth value</span>.</span>   <span class=""line""><span class=""c8-cloze"">A propositional variable</span> (e.g. <span class=""c8-cloze"">p, q, r</span>) <span class=""c13-cloze"">represents</span> <span class=""c9-cloze"">any possible atomic proposition</span>.</span>   <span class=""line""><span class=""c10-cloze"">a propositional formula</span> (e.g. <span class=""c10-cloze"">p AND q</span>) (also called <span class=""c14-cloze c10-scr c11-scr c12-scr"">sentence (tho only in proplog)</span>) is a <span class=""c11-cloze"">well-formed formula</span> that <span class=""c12-cloze"">consists of elements of the alphabet of a propositional logic</span> (that is <span class=""c12-cloze"">propositional variables, constants, and logical connectives</span>).</span>   <span class=""line""><span class=""c15-cloze"">a proposition</span> <span class=""c16-cloze"">expressed by</span> <span class=""c17-cloze"">a propositional constant</span> is <span class=""c18-cloze"">an atomic proposition</span>.</span>   <span class=""line""><span class=""c19-cloze"">a propositional constant</span> <span class=""c20-cloze"">expresses</span> <span class=""c21-cloze"">an atomic proposition</span>.</span></p>    <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">The <span class=""c22-cloze"">elements of the alphabet</span> of <span class=""c23-cloze"">a propositional logic</span> are the <span class=""c24-cloze"">propositional constants</span>, <span class=""c25-cloze"">propositional variables</span>, and <span class=""c26-cloze"">logical connectives</span>. </span>     <span class=""line""><span class=""c27-cloze"">propositional constants, variables and formulas all</span> <span class=""c28-cloze"">express/denote propositions</span>.</span>     <span class=""line""><span class=""c29-cloze"">Propositional constants, variables and formulas</span> as well as <span class=""c29-cloze"">logical connectives</span> are all <span class=""c30-cloze"">truth-functional.</span></span></p>      <p class=""cloze-group-children hide-if-inactive-children""><span class=""line""><span class=""c31-cloze"">Atomic propositions</span> might be things such as <span class=""c32-cloze"">""Grass is green""</span></span>&nbsp;<span class=""line""><span class=""c33-cloze"">propositional constants</span> might be things such as&nbsp;</span><span class=""line""><span class=""c34-cloze""><span class=""line"">p, q</span></span> <span class=""c35-cloze"">A propositional formula</span> might look something like <span class=""c36-cloze"">(p AND NOT q) IMPLIES (p OR q).</span></span></p>        <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">If <span class=""c37-cloze"">""Sam is awesome."" and ""Sam is cute.""</span> are <span class=""c38-cloze"">atomic propositions</span> <span class=""c39-cloze"">expressed by e.g. p and q</span>, then <span class=""c40-cloze"">p ∧ q</span> would be a <span class=""c41-cloze"">propositional formula</span> expressing the <span class=""c42-cloze"">non-atomic proposition</span> <span class=""c43-cloze"">""Sam is awesome and cute.""</span>         </span><span class=""line""><span class=""c44-cloze"">""Sam is awesome and cute.""</span> could be a proposition expressed by <span class=""c45-cloze"">a propositional variable or a propositional constant, w/o knowing the logic it's impossible to know.</span></span>         <span class=""line"">If ""Sam is awesome."" and ""Sam is cute."" are <span class=""c46-cloze"">all possible atomic propositions</span> , <span class=""c47-cloze"">a propositional varialble</span> would <span class=""c48-cloze"">range over all of them.</span></span></p>  <table class=""cloze-group-children hide-if-inactive-children"">   <thead>     <tr>       <th>Name</th>       <th>Convention</th>       <th>Location</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c49-cloze"">propositional constants</span></td>       <td><span class=""c50-cloze"">written in lowercase letters starting at p</span></td>     </tr>         <tr>       <td><span class=""c51-cloze"">propositional variables</span></td>       <td><span class=""c52-cloze""> written in uppercase letters starting at A</span></td>           <td><span class=""c53-cloze""> DE</span></td>     </tr>     <tr>       <td><span class=""c54-cloze"">propositional variables</span></td>       <td><span class=""c55-cloze""> written in lowercase letters starting at ϕ</span></td>       <td><span class=""c56-cloze""> EN</span></td>     </tr>   </tbody> </table>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}</span><div class=""sub""> All only for the most classical of logics </div>"	acad::log
"a further {{c1::microinvalidation::one of the three types}} that {{c2::I'm suggesting}} is ""{{c3::denial of lived experience}}"" ({{c3::of x-ism}}) {{c1::Microaggressions}} are {{c2::brief}}, {{c2::everyday}} moments that {{c3::send denigrating messages}} to {{c4::stigmatized/marginalized group (the -value group of an ism)}}. While not explicitly one of the {{c1::8 themes}} of {{c2::microagressions}}, a further {{c3::microinvalidation}} that has been suggested is ""{{c4::denial of y-ism}}"", where {{c5::people deny the reality of the discrimination}} {{c1::DH Sue}} ({{c2::2007}}) laid out {{c3::8}} different {{c4::themes}} of {{c5::microagressions}}, which have {{c6::somewhat widely}} been used {{c1::DH Sue}} was mainly concerned with {{c2::race}}, but his {{c3::characterizations of microagressions}} have been also {{c4::been adopted in other discriminated-against(-value) communities}} {{c1::DW Sue}} ({{c2::2007}}), perhaps {{c3::the seminal work}} on {{c4::microagressions}}, describes {{c5::three typees}} of {{c4::microagressions}}: {{c6::Microinsult}}, which {{c9::demeans a person  (based on their marginalized indentity)}}, {{c7::Microassault}}, which {{c10::are designed to hurt the victim}}, and {{c8::Microinvalidations}}, which {{c11::nullify/negate the lived reality of a person}} One of the {{c1::8 microagressions}}, a type of {{c2::microinsult}} is ""{{c3::assumption of criminal status}}"", the presumption {{c4::that a person of the identity is criminal/dangerous/deviant}}. This is salient for {{c5::racism}}, but also strongly for {{c5::sanism/mentalism}}, and to a certain extent to {{c5::homophobia}} (and probably many others) One of the {{c1::8 themes}} of {{c2::microagressions}}, categorized as a {{c3::microinvalidation}}, are claims to be {{c4::color-blind}} ≈ ""{{c5::denial of individual racism}}"", claiming in essence {{c6::that there might be racism, but I'm not doing it}}. Analogously, we might define {{c4::x-blind}} ({{c4::gender-blind, etc.}}) ≈ ""{{c5::denial of individual y-ism}}"" claiming {{c6::that there might be y-ism, but I'm not doing it}}."	acad::ughhh
In general, {{c3::most terms from discussions of discrimination}} are {{c2::coined off of / inspired by terms pioneered}} in {{c1::a given discriminated-against group}}	acad::ughhh
"<table>   <tbody>     <tr>       <th>P</th>       <th>Q</th>       <th><span class=""c13-cloze"">P ∨ Q</span></th>     </tr>     <tr>       <td><span class=""c1-cloze c1-4-scr"">W</span></td>       <td><span class=""c5-cloze c5-8-scr"">W</span></td>       <td><span class=""c9-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c2-cloze c1-4-scr"">W</span></td>       <td><span class=""c6-cloze c5-8-scr"">F</span></td>       <td><span class=""c10-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c3-cloze c1-4-scr"">F</span></td>       <td><span class=""c7-cloze c5-8-scr"">W</span></td>       <td><span class=""c11-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c4-cloze c1-4-scr"">F</span></td>       <td><span class=""c8-cloze c5-8-scr"">F</span></td>       <td><span class=""c12-cloze c9-12-scr"">F</span></td>     </tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}</span>"	acad::log
"<table>   <tbody>     <tr>       <td>P</td>       <td>{{c1::¬P}}</td>     </tr>     <tr>       <td>W</td>       <td>{{c2::F}}</td>     </tr>     <tr>       <td>F</td>       <td>{{c2::W}}</td>     </tr>   </tbody> </table>   <img src=""sm_tmp1rbymdyv.png"">"	acad::log
"<svg version=""1.0"" x=""0.00000000"" y=""0.00000000"" width=""600.00000"" height=""600.00000"" id=""svg2"" xmlns=""http://www.w3.org/2000/svg"" xmlns:svg=""http://www.w3.org/2000/svg"" xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"" xmlns:cc=""http://creativecommons.org/ns#"" xmlns:dc=""http://purl.org/dc/elements/1.1/"">     <g inkscape:groupmode=""layer"" id=""layer7"" inkscape:label=""p4"" style=""display:inline"">       <path sodipodi:type=""arc"" style=""opacity:1;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" id=""path2408"" sodipodi:cx=""187"" sodipodi:cy=""113"" sodipodi:rx=""119"" sodipodi:ry=""119"" d=""M 307 113 A 119 119 0 1 1  67,113 A 119 119 0 1 1  307 113 z"" transform=""matrix(1,0,0,1,95,171)""></path>    </g>    <g style=""display:inline"" id=""layer3""></g>    <g style=""display:inline"" id=""layer4""></g>    <g inkscape:groupmode=""layer"" id=""layer1"" inkscape:label=""p3"" style=""display:inline"">       <g id=""g2362"" transform=""matrix(0.695009,0,0,0.683713,94.00027,94.69452)"">          <path d=""M 264.65488,281.35479 L 307.55343,299.12392 L 307.53867,299.13003 L 83.172594,392.06566 L 264.65488,281.35479"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8773""></path>          <path d=""M 290.16697,342.94635 L 307.9361,300.0478 L 307.92135,300.05391 L 83.555271,392.98954 L 290.16697,342.94635"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8775""></path>          <path d=""M 351.75849,317.43427 L 308.85994,299.66514 L 308.8747,299.65903 L 533.24078,206.7234 L 351.75849,317.43427"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8779""></path>          <path d=""M 290.16693,342.94611 L 307.93606,300.04756 L 307.94217,300.06232 L 400.8778,524.4284 L 290.16693,342.94611"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8787""></path>          <path d=""M 351.75849,317.43402 L 308.85994,299.66489 L 308.86605,299.67964 L 401.80168,524.04572 L 351.75849,317.43402"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8789""></path>          <path d=""M 326.24641,255.8425 L 308.47728,298.74105 L 308.47117,298.72629 L 215.53554,74.360214 L 326.24641,255.8425"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8793""></path>          <path d=""M 264.65485,281.3546 L 307.5534,299.12373 L 307.53864,299.12984 L 83.172563,392.06547 L 264.65485,281.3546"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1397""></path>          <path d=""M 290.16693,342.94637 L 307.93606,300.04782 L 307.94217,300.06258 L 400.8778,524.42866 L 290.16693,342.94637"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1405""></path>          <g id=""g2356"">             <path id=""path8781"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 326.2464,255.84271 L 308.47727,298.74126 L 308.49202,298.73515 L 532.8581,205.79952 L 326.2464,255.84271"">             </path>             <path id=""path8795"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 264.65485,281.35459 L 307.5534,299.12372 L 307.54729,299.10897 L 214.61166,74.742891 L 264.65485,281.35459"">             </path>             <path id=""path1399"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 290.16694,342.94616 L 307.93607,300.04761 L 307.92132,300.05372 L 83.55524,392.98935 L 290.16694,342.94616"">             </path>             <path id=""path1407"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 351.75849,317.43428 L 308.85994,299.66515 L 308.86605,299.6799 L 401.80168,524.04598 L 351.75849,317.43428"">             </path>          </g>       </g>       <g style=""display:inline"" id=""g2377"" transform=""matrix(0.491446,-0.491446,0.483458,0.483458,11.99521,306.1165)"">          <path d=""M 264.65488,281.35479 L 307.55343,299.12392 L 307.53867,299.13003 L 83.172594,392.06566 L 264.65488,281.35479"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2379""></path>          <path d=""M 290.16697,342.94635 L 307.9361,300.0478 L 307.92135,300.05391 L 83.555271,392.98954 L 290.16697,342.94635"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2381""></path>          <path d=""M 351.75849,317.43427 L 308.85994,299.66514 L 308.8747,299.65903 L 533.24078,206.7234 L 351.75849,317.43427"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2383""></path>          <path d=""M 290.16693,342.94611 L 307.93606,300.04756 L 307.94217,300.06232 L 400.8778,524.4284 L 290.16693,342.94611"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2385""></path>          <path d=""M 351.75849,317.43402 L 308.85994,299.66489 L 308.86605,299.67964 L 401.80168,524.04572 L 351.75849,317.43402"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2387""></path>          <path d=""M 326.24641,255.8425 L 308.47728,298.74105 L 308.47117,298.72629 L 215.53554,74.360214 L 326.24641,255.8425"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2389""></path>          <path d=""M 264.65485,281.3546 L 307.5534,299.12373 L 307.53864,299.12984 L 83.172563,392.06547 L 264.65485,281.3546"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2391""></path>          <path d=""M 290.16693,342.94637 L 307.93606,300.04782 L 307.94217,300.06258 L 400.8778,524.42866 L 290.16693,342.94637"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2393""></path>          <g id=""g2395"">             <path id=""path2397"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 326.2464,255.84271 L 308.47727,298.74126 L 308.49202,298.73515 L 532.8581,205.79952 L 326.2464,255.84271"">             </path>             <path id=""path2399"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 264.65485,281.35459 L 307.5534,299.12372 L 307.54729,299.10897 L 214.61166,74.742891 L 264.65485,281.35459"">             </path>             <path id=""path2401"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 290.16694,342.94616 L 307.93607,300.04761 L 307.92132,300.05372 L 83.55524,392.98935 L 290.16694,342.94616"">             </path>             <path id=""path2403"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 351.75849,317.43428 L 308.85994,299.66515 L 308.86605,299.6799 L 401.80168,524.04598 L 351.75849,317.43428"">             </path>          </g>       </g>    </g>    <g inkscape:groupmode=""layer"" id=""layer6"" inkscape:label=""p2"" style=""display:inline"">       <g style=""display:inline"" id=""g1536"" transform=""translate(-55.8718,-38.60234)"">          <path d=""M 316.93813,337.99683 L 363.37116,337.99683 L 363.35986,338.00812 L 191.63751,509.73048 L 316.93813,337.99683"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1538""></path>          <path d=""M 364.07826,385.13697 L 364.07826,338.70394 L 364.06697,338.71523 L 192.34461,510.43759 L 364.07826,385.13697"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1540""></path>          <path d=""M 411.21837,337.99687 L 364.78534,337.99687 L 364.79664,337.98558 L 536.51899,166.26322 L 411.21837,337.99687"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1542""></path>          <path d=""M 364.07824,290.85673 L 364.07824,337.28976 L 364.08953,337.27847 L 535.81189,165.55611 L 364.07824,290.85673"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1544""></path>          <path d=""M 364.07813,385.13677 L 364.07813,338.70374 L 364.08942,338.71504 L 535.81178,510.43739 L 364.07813,385.13677"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1546""></path>          <path d=""M 411.21827,337.99664 L 364.78524,337.99664 L 364.79653,338.00793 L 536.51889,509.73029 L 411.21827,337.99664"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1548""></path>          <path d=""M 364.07817,290.85653 L 364.07817,337.28956 L 364.06688,337.27826 L 192.34452,165.55591 L 364.07817,290.85653"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1550""></path>          <path d=""M 316.93803,337.99666 L 363.37106,337.99666 L 363.35977,337.98537 L 191.63741,166.26301 L 316.93803,337.99666"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1552""></path>       </g>    </g>    <g inkscape:groupmode=""layer"" id=""layer2"" inkscape:label=""podstawowa"" style=""display:inline"">       <path id=""path2122"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85736,266.28355 32.8331,32.8331 -0.016,0 -242.85201,0 210.03488,-32.8331""></path>       <path id=""path5805"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85736,332.94975 32.8331,-32.8331 -0.016,0 -242.85201,0 210.03488,32.8331""></path>       <path id=""path8724"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52353,332.9498 -32.8331,-32.8331 0.016,0 242.85201,0 -210.03488,32.8331""></path>       <path id=""path8726"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52353,266.2836 -32.8331,32.8331 0.016,0 242.85201,0 -210.03488,-32.8331""></path>       <path id=""path8740"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85734,332.94973 32.8331,-32.8331 0,0.016 0,242.85201 -32.8331,-210.03488""></path>       <path id=""path8742"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52354,332.94973 -32.8331,-32.8331 0,0.016 0,242.85201 32.8331,-210.03488""></path>       <path id=""path8748"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.8573,266.28357 32.8331,32.8331 0,-0.016 0,-242.85201 -32.8331,210.03488""></path>       <path id=""path8746"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline;opacity:1"" d=""m 340.5235,266.28357 -32.8331,32.8331 0,-0.016 0,-242.85201 32.8331,210.03488""></path>    </g>    <g inkscape:groupmode=""layer"" id=""layer5"" inkscape:label=""napisy"" style=""display:inline"">       <g transform=""matrix(-0.70710678,0.70710678,-0.70710678,-0.70710678,739.59568,296.41206)"" id=""g3743"">          <path id=""path3745"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3747""></path>       </g>        <g id=""g3715"">          <g id=""g3705"">             <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3687""></path>             <path id=""path3703"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">             </path>          </g>          <g transform=""matrix(0,-1,1,0,6.6734312,606.91101)"" id=""g3709"">             <path id=""path3711"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">             </path>             <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3713""></path>          </g>       </g>       <g id=""g3725"" transform=""matrix(-1,0,0,-1,614.63471,600.00469)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3727""></path>          <path id=""path3729"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>       <g transform=""matrix(0,1,-1,0,609.00414,-7.599862)"" id=""g3731"">          <path id=""path3733"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3735""></path>       </g>       <g id=""g3749"" transform=""matrix(-0.70710678,-0.70710678,0.70710678,-0.70710678,311.06458,730.81323)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3751""></path>          <path id=""path3753"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>       <g transform=""matrix(0.70710678,-0.70710678,0.70710678,0.70710678,-123.33659,302.24244)"" id=""g3755"">          <path id=""path3757"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3759""></path>       </g>       <g id=""g3761"" transform=""matrix(0.70710678,0.70710678,-0.70710678,0.70710678,305.47563,-132.15873)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3763""></path>          <path id=""path3765"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>        <foreignObject x=""326"" y=""97""><span class=""c1-cloze"">NbE</span></foreignObject>       <foreignObject x=""366"" y=""110""><span class=""c2-cloze"">NNE</span></foreignObject>       <foreignObject y=""126"" x=""399""><span class=""c3-cloze"">NEbN</span></foreignObject>       <foreignObject y=""197"" x=""468""><span class=""c4-cloze"">NEbE</span></foreignObject>       <foreignObject y=""235"" x=""468""><span class=""c5-cloze"">ENE</span></foreignObject>       <foreignObject x=""482"" y=""268""><span class=""c6-cloze"">EbN</span></foreignObject>       <foreignObject x=""486"" y=""340""><span class=""c7-cloze"">EbS</span></foreignObject>       <foreignObject x=""486"" y=""380""><span class=""c8-cloze"">ESE</span></foreignObject>       <foreignObject y=""414"" x=""462""><span class=""c9-cloze"">SEbE</span></foreignObject>       <foreignObject y=""462"" x=""392""><span class=""c10-cloze"">SEbS</span></foreignObject>       <foreignObject y=""470"" x=""360""><span class=""c11-cloze"">SSE</span></foreignObject>       <foreignObject x=""336"" y=""501""><span class=""c12-cloze"">SbE</span></foreignObject>       <foreignObject x=""253"" y=""502""><span class=""c13-cloze"">SbW</span></foreignObject>       <foreignObject y=""456"" x=""181""><span class=""c14-cloze"">SWbS</span></foreignObject>       <foreignObject y=""480"" x=""225""><span class=""c15-cloze"">SSW</span></foreignObject>       <foreignObject y=""413"" x=""102""><span class=""c16-cloze"">SWbW</span></foreignObject>       <foreignObject x=""96"" y=""346""><span class=""c17-cloze"">WbS</span></foreignObject>       <foreignObject x=""96"" y=""370""><span class=""c18-cloze"">WSW</span></foreignObject>       <foreignObject x=""90"" y=""273""><span class=""c19-cloze"">WbN</span></foreignObject>       <foreignObject y=""198"" x=""120""><span class=""c20-cloze"">NWbW</span></foreignObject>       <foreignObject y=""230"" x=""110""><span class=""c21-cloze"">WNW</span></foreignObject>       <foreignObject y=""151"" x=""180""><span class=""c22-cloze"">NWbN</span></foreignObject>       <foreignObject x=""210"" y=""120""><span class=""c23-cloze"">NNW</span></foreignObject>       <foreignObject x=""252"" y=""104""><span class=""c24-cloze"">NbW</span></foreignObject>       <foreignObject x=""289"" y=""42""><span class=""c25-cloze"">N</span></foreignObject>       <foreignObject x=""554"" y=""307""><span class=""c26-cloze"">E</span></foreignObject>       <foreignObject x=""297"" y=""575""><span class=""c27-cloze"">S</span></foreignObject>       <foreignObject x=""19"" y=""311""><span class=""c28-cloze"">W</span></foreignObject>       <foreignObject x=""71"" y=""118""><span class=""c29-cloze"">NW</span></foreignObject>       <foreignObject x=""486"" y=""121""><span class=""c30-cloze"">NE</span></foreignObject>       <foreignObject x=""479"" y=""505""><span class=""c31-cloze"">SE</span></foreignObject>       <foreignObject x=""67"" y=""516""><span class=""c32-cloze"">SW</span></foreignObject>    </g> </svg> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>"	acad::log
"<div class=""cloze-group-children hide-if-inactive-children""><p>A <span class=""c1-cloze"">rule of inference/inference rule</span> is a <span class=""c2-cloze"">Schlussregel</span> in german.</p> <p>A <span class=""c3-cloze"">rule of inference/inference rule</span>&nbsp;is something that <span class=""c4-cloze c5-scr"">takes premises</span> and <span class=""c5-cloze c4-scr"">returns a conclusion</span>. More generally, it is a function from sets of formulae to other formulae. It is sometimes restricted to valid inference rules, and sometimes not.</p></div> The conclusion in a rule of inference/inference rule or argument is often indicated by {{c1::∴}}. <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}</span>"	acad::log
For something to be {{c1::truth-functional}} if {{c2::the truth of the resulting formula}} is {{c3::dependent only}} on {{c4::the truth of the constituent parts.}}	acad::log
"<p class=""cloze-group hide-if-inactive"">A <span class=""c1-cloze"">logic</span> is a <span class=""c2-cloze"">formal system.</span> </p><div class=""cloze-group hide-if-inactive""><span class=""c3-cloze"">Formal systems</span> have roughly the following structure: <pre><code><span class=""c4-cloze"">A formal language</span> <span class=""c5-cloze"">An inference system</span>   <span class=""c6-cloze"">A set of axioms</span>   <span class=""c7-cloze"">A set of inference rules</span> <span class=""c8-cloze"">A semantics</span></code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::log
UNRESOLVED: First-order logic—also known as {{c1::predicate logic}}, quantificational logic, and first-order predicate calculus  the logical form of an argument is called argument form.	acad::log
"# !Who Lives, Who Dies, Who Tells Your Story (extract of beginning)  &gt; !⟮c1;sb;Let me tell you what I wish I’d known ⟯ &gt; !⟮c+;sb;When I was young and dreamed of glory ⟯ &gt; !⟮c+;sb;You have no control:⟯ &gt; !⟮c+;sb;Who lives ⟯ &gt; !⟮c+;sb;Who dies ⟯ &gt; !⟮c+;sb;Who tells your story?⟯  # !Non-Stop (extract)  &gt; !⟮c7;sb;Alexander joins forces with James Madison and John Jay to write a series⟯ &gt; !⟮c+;sb;us-;of essays defending the new United States Constitution,⟯ &gt; !⟮c+;sb;entitled The Federalist Papers.⟯ &gt; !⟮c+;sb;The plan was to write a total of twenty-five essays,⟯ &gt; !⟮c+;sb;the work divided evenly among the three men. In the end,⟯ &gt; !⟮c+;sb;they wrote eighty-five essays,⟯ &gt; !⟮c+;sb;in the span of six months. John Jay got sick after writing five.⟯ &gt; !⟮c+;sb;James Madison wrote twenty-nine. Hamilton wrote the other fifty-one!⟯  # !Alexander Hamilton  !AARON BURR &gt; !⟮c15;sb;How does a bastard, orphan, son of a whore and a⟯ &gt; !⟮c+;sb;Scotsman, dropped in the middle of a forgotten⟯ &gt; !⟮c+;sb;Spot in the Caribbean by Providence, impoverished, in squalor⟯ &gt; !⟮c+;sb;Grow up to be a hero and a scholar?⟯  !JOHN LAURENS &gt; !⟮c+;sb;The ten-dollar Founding Father without a father⟯ &gt; !⟮c+;sb;Got a lot farther by workin’ a lot harder⟯ &gt; !⟮c+;sb;By bein’ a lot smarter⟯ &gt; !⟮c+;sb;By bein’ a self-starter⟯ &gt; !⟮c+;sb;By fourteen, they placed him in charge of a trading charter⟯  !THOMAS JEFFERSON &gt; !⟮c+;sb;And every day while slaves were being slaughtered and carted⟯ &gt; !⟮c+;sb;Away across the waves, he struggled and kept his guard up⟯ &gt; !⟮c+;sb;Inside, he was longing for something to be a part of⟯ &gt; !⟮c+;sb;The brother was ready to beg, steal, borrow, or barter⟯  !JAMES MADISON &gt; !⟮c+;sb;Then a hurricane came, and devastation reigned⟯ &gt; !⟮c+;sb;Our man saw his future drip, drippin’ down the drain⟯ &gt; !⟮c+;sb;Put a pencil to his temple, connected it to his brain⟯ &gt; !⟮c+;sb;And he wrote his first refrain, a testament to his pain⟯  !BURR &gt; !⟮c+;sb;Well the word got around, they said, “This kid is insane, man!”⟯ &gt; !⟮c+;sb;Took up a collection just to send him to the mainland⟯ &gt; !⟮c+;sb;“Get your education, don’t forget from whence you came, and⟯ &gt; !⟮c+;sb;The world’s gonna know your name! What’s your name, man?""⟯  !ALEXANDER HAMILTON &gt; !⟮c+;sb;Alexander Hamilton⟯ &gt; !⟮c+;sb;My name is Alexander Hamilton⟯ &gt; !⟮c+;sb;And there’s a million things I haven’t done⟯ &gt; !⟮c+;sb;But just you wait, just you wait⟯  !ELIZA HAMILTON &gt; !⟮c+;sb;When he was ten, his father split, full of it, debt-ridden⟯ &gt; !⟮c+;sb;Two years later, see Alex and his mother, bed-ridden⟯ &gt; !⟮c+;sb;Half-dead, sittin’ in their own sick⟯ &gt; !⟮c+;sb;The scent thick⟯  !COMPANY &gt; !⟮c+;sb;And Alex got better but his mother went quick⟯  !GEORGE WASHINGTON and (COMPANY) &gt; !⟮c+;sb;Moved in with a cousin, the cousin committed suicide⟯ &gt; !⟮c+;sb;Left him with nothin’ but ruined pride, somethin’ new inside⟯ &gt; !⟮c+;sb;A voice saying ""(Alex) you gotta fend for yourself""⟯ &gt; !⟮c+;sb;He started retreatin’ and readin’ every treatise on the shelf⟯  !BURR and (COMPANY) &gt; !⟮c+;sb;There would’ve been nothin’ left to do⟯ &gt; !⟮c+;sb;For someone less astute⟯ &gt; !⟮c+;sb;He would’ve been dead or destitute⟯ &gt; !⟮c+;sb;Without a cent of restitution⟯ &gt; !⟮c+;sb;Started workin’, clerkin’ for his late mother’s landlord⟯ &gt; !⟮c+;sb;Tradin’ sugar cane and rum and other things he can’t afford⟯ &gt; !⟮c+;sb;(Scammin’) for every book he can get his hands on⟯ &gt; !⟮c+;sb;(Plannin’) for the future, see him now as he stands on (oooh⟯) &gt; !⟮c+;sb;The bow of a ship headed for a new land⟯ &gt; !⟮c+;sb;In New York you can be a new man⟯  !COMPANY and (HAMILTON) &gt; !⟮c+;sb;In New York you can be a new man (Just you wait⟯) &gt; !⟮c+;sb;In New York you can be a new man (Just you wait⟯) &gt; !⟮c+;sb;In New York you can be a new man⟯  !WOMEN &gt; !⟮c+;sb;In New York⟯  !MEN &gt; !⟮c+;sb;New York⟯  !HAMILTON &gt; !⟮c+;sb;Just you wait⟯  !COMPANY and (COMPANY) &gt; !⟮c+;sb;Alexander Hamilton (Alexander Hamilton⟯) &gt; !⟮c+;sb;We are waiting in the wings for you (waiting in the wings for you⟯) &gt; !⟮c+;sb;You could never back down⟯ &gt; !⟮c+;sb;You never learned to take your time⟯ &gt; !⟮c+;sb;Oh, Alexander Hamilton (Alexander Hamilton⟯) &gt; !⟮c+;sb;When America sings for you⟯ &gt; !⟮c+;sb;Will they know what you overcame?⟯ &gt; !⟮c+;sb;Will they know you rewrote the game?⟯ &gt; !⟮c+;sb;The world will never be the same, oh⟯  !BURR and (COMPANY) &gt; !⟮c+;sb;The ship is in the harbor now, see if you can spot him(Just you wait⟯) &gt; !⟮c+;sb;Another immigrant comin’ up from the bottom(Just you wait⟯) &gt; !⟮c+;sb;His enemies destroyed his rep, America forgot him⟯  !MULLIGAN/MADISON AND LAFAYETTE/JEFFERSON &gt; !⟮c+;sb;We fought with him⟯  !LAURENS/PHILLIP &gt; !⟮c+;sb;Me? I died for him⟯  !WASHINGTON &gt; !⟮c+;sb;Me? I trusted him⟯  !ANGELICA SCHUYLER, ELIZA, MARIA REYNOLDS &gt; !⟮c+;sb;Me? I loved him⟯  !BURR &gt; !⟮c+;sb;And me? I’m the damn fool that shot him⟯  !COMPANY &gt; !⟮c+;sb;There’s a million things I haven’t done⟯ &gt; !⟮c+;sb;But just you wait⟯  !BURR &gt; !⟮c+;sb;What’s your name, man?⟯  !HAMILTON ＆ COMPANY &gt; !⟮c+;sb;Alexander Hamilton!⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}</span>"	misc::text-by-heart::hamilton
"# !To be or not to be  &gt; !⟮c1;sb;To be, or not to be, that is the question:⟯ &gt; !⟮c+;sb;Whether 'tis nobler in the mind to suffer⟯ &gt; !⟮c+;sb;The slings and arrows of outrageous fortune,⟯ &gt; !⟮c+;sb;Or to take Arms against a Sea of troubles,⟯ &gt; !⟮c+;sb;And by opposing end them: to die, to sleep⟯ &gt; !⟮c+;sb;No more; and by a sleep, to say we end⟯ &gt; !⟮c+;sb;The heart-ache, and the thousand natural shocks⟯ &gt; !⟮c+;sb;That Flesh is heir to? 'Tis a consummation⟯ &gt; !⟮c+;sb;Devoutly to be wished. To die, to sleep,⟯ &gt; !⟮c+;sb;To sleep, perchance to Dream; aye, there's the rub,⟯ &gt; !⟮c+;sb;For in that sleep of death, what dreams may come,⟯ &gt; !⟮c+;sb;When we have shuffled off this mortal coil,⟯ &gt; !⟮c+;sb;Must give us pause. There's the respect⟯ &gt; !⟮c+;sb;That makes Calamity of so long life:⟯ &gt; !⟮c+;sb;For who would bear the Whips and Scorns of time,⟯ &gt; !⟮c+;sb;The Oppressor's wrong, the proud man's Contumely,⟯ &gt; !⟮c+;sb;The pangs of dispised Love, the Law’s delay,⟯ &gt; !⟮c+;sb;The insolence of Office, and the spurns⟯ &gt; !⟮c+;sb;That patient merit of th'unworthy takes,⟯ &gt; !⟮c+;sb;When he himself might his Quietus make⟯ &gt; !⟮c+;sb;With a bare Bodkin? Who would Fardels bear, [F: these Fardels]⟯ &gt; !⟮c+;sb;To grunt and sweat under a weary life,⟯ &gt; !⟮c+;sb;But that the dread of something after death,⟯ &gt; !⟮c+;sb;The undiscovered country, from whose bourn⟯ &gt; !⟮c+;sb;No traveller returns, puzzles the will,⟯ &gt; !⟮c+;sb;And makes us rather bear those ills we have,⟯ &gt; !⟮c+;sb;Than fly to others that we know not of?⟯ &gt; !⟮c+;sb;Thus conscience does make cowards of us all,⟯ &gt; !⟮c+;sb;And thus the native hue of Resolution⟯ &gt; !⟮c+;sb;Is sicklied o'er, with the pale cast of Thought,⟯ &gt; !⟮c+;sb;And enterprises of great pitch and moment, [F: pith]⟯ &gt; !⟮c+;sb;With this regard their Currents turn awry, [F: away]⟯ &gt; !⟮c+;sb;And lose the name of Action.⟯  # !Thou knowst the mask of night...  &gt; !⟮c34;sb;Thou know’st the mask of night is on my face,⟯ &gt; !⟮c+;sb;Else would a maiden blush bepaint my cheek⟯ &gt; !⟮c+;sb;For that which thou hast heard me speak tonight.⟯ &gt; !⟮c+;sb;Fain would I dwell on form. Fain, fain deny⟯ &gt; !⟮c+;sb;What I have spoke. But farewell compliment!⟯ &gt; !⟮c+;sb;Dost thou love me? I know thou wilt say “ay,”⟯ &gt; !⟮c+;sb;And I will take thy word. Yet if thou swear’st⟯ &gt; !⟮c+;sb;Thou mayst prove false. At lovers' perjuries,⟯ &gt; !⟮c+;sb;They say, Jove laughs. O gentle Romeo,⟯ &gt; !⟮c+;sb;If thou dost love, pronounce it faithfully.⟯ &gt; !⟮c+;sb;Or if thou think’st I am too quickly won,⟯ &gt; !⟮c+;sb;I’ll frown and be perverse and say thee nay,⟯ &gt; !⟮c+;sb;So thou wilt woo. But else, not for the world.⟯ &gt; !⟮c+;sb;In truth, fair Montague, I am too fond,⟯ &gt; !⟮c+;sb;And therefore thou mayst think my 'havior light.⟯ &gt; !⟮c+;sb;But trust me, gentleman, I’ll prove more true⟯ &gt; !⟮c+;sb;Than those that have more coying to be strange.⟯ &gt; !⟮c+;sb;I should have been more strange, I must confess,⟯ &gt; !⟮c+;sb;But that thou overheard’st, ere I was 'ware,⟯ &gt; !⟮c+;sb;My true love’s passion. Therefore pardon me,⟯ &gt; !⟮c+;sb;105And not impute this yielding to light love,⟯ &gt; !⟮c+;sb;Which the dark night hath so discovered.⟯  # !The Merchant of Venice: Act III, Scene 1, Shylock Monologue  &gt; !⟮c56;sb;To bait fish withal: if it will feed nothing else,⟯ &gt; !⟮c+;sb;it will feed my revenge. He hath disgraced me, ⟯ &gt; !⟮c+;sb;and hindered me half a million; laughed at my losses,⟯ &gt; !⟮c+;sb;mocked at my gains, scorned my nation, ⟯ &gt; !⟮c+;sb;thwarted my bargains, cooled my friends, ⟯ &gt; !⟮c+;sb;heated mine enemies; and what's his reason? ⟯ &gt; !⟮c+;sb;I am a Jew. Hath not a Jew eyes? ⟯ &gt; !⟮c+;sb;hath not a Jew hands, organs, dimensions, senses, affections, passions? ⟯ &gt; !⟮c+;sb;fed with the same food, hurt with the same weapons, ⟯ &gt; !⟮c+;sb;subject to the same diseases, healed by the same means,⟯ &gt; !⟮c+;sb;warmed and cooled by the same winter and summer, as⟯ &gt; !⟮c+;sb;a Christian is? If you prick us, do we not bleed?⟯ &gt; !⟮c+;sb;if you tickle us, do we not laugh? ⟯ &gt; !⟮c+;sb;if you poison us, do we not die? ⟯ &gt; !⟮c+;sb;and if you wrong us, shall we not revenge? ⟯ &gt; !⟮c+;sb;If we are like you in the rest, we will resemble you in that. ⟯ &gt; !⟮c+;sb;If a Jew wrong a Christian, what is his humility? Revenge. ⟯ &gt; !⟮c+;sb;If a Christian wrong a Jew, what should his sufferance be, ⟯ &gt; !⟮c+;sb;by Christian example? Why, revenge. ⟯ &gt; !⟮c+;sb;The villany you teach me, I will execute, ⟯ &gt; !⟮c+;sb;and it shall go hard but I will better the instruction.⟯  # !The Merchant of Venice, Act 1 Scene 3, Shylocks Monologue  &gt; !⟮c77;sb;Signior Antonio, many a time and oft⟯ &gt; !⟮c+;sb;In the Rialto you have rated me⟯ &gt; !⟮c+;sb;About my moneys and my usances:⟯ &gt; !⟮c+;sb;Still have I borne it with a patient shrug,⟯ &gt; !⟮c+;sb;For sufferance is the badge of all our tribe.⟯ &gt; !⟮c+;sb;You call me misbeliever, cut-throat dog,⟯ &gt; !⟮c+;sb;And spit upon my Jewish gaberdine,⟯ &gt; !⟮c+;sb;And all for use of that which is mine own.⟯ &gt; !⟮c+;sb;Well then, it now appears you need my help:⟯ &gt; !⟮c+;sb;Go to, then; you come to me, and you say⟯ &gt; !⟮c+;sb;'Shylock, we would have moneys:' you say so;⟯ &gt; !⟮c+;sb;You, that did void your rheum upon my beard⟯ &gt; !⟮c+;sb;And foot me as you spurn a stranger cur⟯ &gt; !⟮c+;sb;Over your threshold: moneys is your suit⟯ &gt; !⟮c+;sb;What should I say to you? Should I not say⟯ &gt; !⟮c+;sb;'Hath a dog money? is it possible⟯ &gt; !⟮c+;sb;A cur can lend three thousand ducats?' Or⟯ &gt; !⟮c+;sb;Shall I bend low and in a bondman's key,⟯ &gt; !⟮c+;sb;With bated breath and whispering humbleness, Say this;⟯ &gt; !⟮c+;sb;'Fair sir, you spit on me on Wednesday last;⟯ &gt; !⟮c+;sb;You spurn'd me such a day; another time⟯ &gt; !⟮c+;sb;You call'd me dog; and for these courtesies⟯ &gt; !⟮c+;sb;I'll lend you thus much moneys'?⟯  # !Tomorrow, and tomorrow, and tomorrow (from Macbeth, spoken by Macbeth)  &gt; !⟮c100;sb;Tomorrow, and tomorrow, and tomorrow,⟯ &gt; !⟮c+;sb;Creeps in this petty pace from day to day,⟯ &gt; !⟮c+;sb;To the last syllable of recorded time;⟯ &gt; !⟮c+;sb;And all our yesterdays have lighted fools⟯ &gt; !⟮c+;sb;The way to dusty death. Out, out, brief candle!⟯ &gt; !⟮c+;sb;Life's but a walking shadow, a poor player,⟯ &gt; !⟮c+;sb;That struts and frets his hour upon the stage,⟯ &gt; !⟮c+;sb;And then is heard no more. It is a tale⟯ &gt; !⟮c+;sb;Told by an idiot, full of sound and fury,⟯ &gt; !⟮c+;sb;Signifying nothing.⟯  # !Once more unto the breach!  &gt; !⟮c110;sb;Once more unto the breach, dear friends, once more;⟯ &gt; !⟮c+;sb;Or close the wall up with our English dead.⟯ &gt; !⟮c+;sb;In peace there's nothing so becomes a man⟯ &gt; !⟮c+;sb;As modest stillness and humility:⟯ &gt; !⟮c+;sb;But when the blast of war blows in our ears,⟯ &gt; !⟮c+;sb;Then imitate the action of the tiger;⟯ &gt; !⟮c+;sb;Stiffen the sinews, summon up the blood,⟯ &gt; !⟮c+;sb;Disguise fair nature with hard-favour'd rage;⟯ &gt; !⟮c+;sb;Then lend the eye a terrible aspect;⟯ &gt; !⟮c+;sb;Let pry through the portage of the head⟯ &gt; !⟮c+;sb;Like the brass cannon; let the brow o'erwhelm it⟯ &gt; !⟮c+;sb;As fearfully as doth a galled rock⟯ &gt; !⟮c+;sb;O'erhang and jutty his confounded base,⟯ &gt; !⟮c+;sb;Swill'd with the wild and wasteful ocean.⟯ &gt; !⟮c+;sb;Now set the teeth and stretch the nostril wide,⟯ &gt; !⟮c+;sb;Hold hard the breath and bend up every spirit⟯ &gt; !⟮c+;sb;To his full height. On, on, you noblest English.⟯ &gt; !⟮c+;sb;Whose blood is fet from fathers of war-proof!⟯ &gt; !⟮c+;sb;Fathers that, like so many Alexanders,⟯ &gt; !⟮c+;sb;Have in these parts from morn till even fought⟯ &gt; !⟮c+;sb;And sheathed their swords for lack of argument:⟯ &gt; !⟮c+;sb;Dishonour not your mothers; now attest⟯ &gt; !⟮c+;sb;That those whom you call'd fathers did beget you.⟯ &gt; !⟮c+;sb;Be copy now to men of grosser blood,⟯ &gt; !⟮c+;sb;And teach them how to war. And you, good yeoman,⟯ &gt; !⟮c+;sb;Whose limbs were made in England, show us here⟯ &gt; !⟮c+;sb;The mettle of your pasture; let us swear⟯ &gt; !⟮c+;sb;That you are worth your breeding; which I doubt not;⟯ &gt; !⟮c+;sb;For there is none of you so mean and base,⟯ &gt; !⟮c+;sb;That hath not noble lustre in your eyes.⟯ &gt; !⟮c+;sb;I see you stand like greyhounds in the slips,⟯ &gt; !⟮c+;sb;Straining upon the start. The game's afoot:⟯ &gt; !⟮c+;sb;Follow your spirit, and upon this charge⟯ &gt; !⟮c+;sb;Cry 'God for Harry, England, and Saint George!'⟯  # !Do Not Go Gentle into that Good Night  &gt; !⟮c144;sb;Do not go gentle into that good night⟯ &gt; !⟮c+;sb;Old age should burn and rave at close of day;⟯ &gt; !⟮c+;sb;Rage, rage against the dying of the light.⟯ &gt; !⟮c+;sb;Though wise men at their end know dark is right,⟯ &gt; !⟮c+;sb;Because their words had forked no lightning they⟯ &gt; !⟮c+;sb;Do not go gentle into that good night.⟯ &gt; !⟮c+;sb;Good men, the last wave by, crying how bright⟯ &gt; !⟮c+;sb;Their frail deeds might have danced in a green bay,⟯ &gt; !⟮c+;sb;Rage, rage against the dying of the light.⟯ &gt; !⟮c+;sb;Wild men who caught and sang the sun in flight,⟯ &gt; !⟮c+;sb;And learn, too late, they grieved it on its way,⟯ &gt; !⟮c+;sb;Do not go gentle into that good night.⟯ &gt; !⟮c+;sb;Grave men, near death, who see with blinding sight⟯ &gt; !⟮c+;sb;Blind eyes could blaze like meteors and be gay,⟯ &gt; !⟮c+;sb;Rage, rage against the dying of the light.⟯ &gt; !⟮c+;sb;And you, my father, there on the sad height,⟯ &gt; !⟮c+;sb;Curse, bless, me now with your fierce tears, I pray.⟯ &gt; !⟮c+;sb;Do not go gentle into that good night.⟯ &gt; !⟮c+;sb;Rage, rage against the dying of the light.⟯  # !Friends, Romans, Countrymen  &gt; !⟮c163;sb;Friends, Romans, countrymen, lend me your ears;⟯ &gt; !⟮c+;sb;I come to bury Caesar, not to praise him.⟯ &gt; !⟮c+;sb;The evil that men do lives after them;⟯ &gt; !⟮c+;sb;The good is oft interred with their bones;⟯ &gt; !⟮c+;sb;So let it be with Caesar. The noble Brutus⟯ &gt; !⟮c+;sb;Hath told you Caesar was ambitious:⟯ &gt; !⟮c+;sb;If it were so, it was a grievous fault,⟯ &gt; !⟮c+;sb;And grievously hath Caesar answer’d it.⟯ &gt; !⟮c+;sb;Here, under leave of Brutus and the rest–⟯ &gt; !⟮c+;sb;For Brutus is an honourable man;⟯ &gt; !⟮c+;sb;So are they all, all honourable men–⟯ &gt; !⟮c+;sb;Come I to speak in Caesar’s funeral.⟯ &gt; !⟮c+;sb;He was my friend, faithful and just to me:⟯ &gt; !⟮c+;sb;But Brutus says he was ambitious;⟯ &gt; !⟮c+;sb;And Brutus is an honourable man.⟯ &gt; !⟮c+;sb;He hath brought many captives home to Rome⟯ &gt; !⟮c+;sb;Whose ransoms did the general coffers fill:⟯ &gt; !⟮c+;sb;Did this in Caesar seem ambitious?⟯ &gt; !⟮c+;sb;When that the poor have cried, Caesar hath wept:⟯ &gt; !⟮c+;sb;Ambition should be made of sterner stuff:⟯ &gt; !⟮c+;sb;Yet Brutus says he was ambitious;⟯ &gt; !⟮c+;sb;And Brutus is an honourable man.⟯ &gt; !⟮c+;sb;You all did see that on the Lupercal⟯ &gt; !⟮c+;sb;I thrice presented him a kingly crown,⟯ &gt; !⟮c+;sb;Which he did thrice refuse: was this ambition?⟯ &gt; !⟮c+;sb;Yet Brutus says he was ambitious;⟯ &gt; !⟮c+;sb;And, sure, he is an honourable man.⟯ &gt; !⟮c+;sb;I speak not to disprove what Brutus spoke,⟯ &gt; !⟮c+;sb;But here I am to speak what I do know.⟯ &gt; !⟮c+;sb;You all did love him once, not without cause:⟯ &gt; !⟮c+;sb;What cause withholds you then, to mourn for him?⟯ &gt; !⟮c+;sb;O judgment! thou art fled to brutish beasts,⟯ &gt; !⟮c+;sb;And men have lost their reason. Bear with me;⟯ &gt; !⟮c+;sb;My heart is in the coffin there with Caesar,⟯ &gt; !⟮c+;sb;And I must pause till it come back to me.⟯  # !tidbits  &gt; !⟮c198;It is too rash, too unadvised, too sudden,⟯ ⟮Too like the lightning, which doth cease to be⟯ ⟮Ere one can say “It lightens.”⟯    &gt; !⟮My bounty is as boundless as the sea,⟯  ⟮My love as deep. The more I give to thee,⟯ ⟮The more I have, for both are infinite.⟯    &gt; !Marc Anthony after Caesars murder: Cry... ⟮'Havoc!,' and let slip the dogs of war.⟯    &gt; !⟮It was the nightingale, and not the lark⟯, ⟮c+;that pierced the fearful hollow of thine ear;⟯    &gt; !⟮There are more things in heaven and earth, Horatio,⟯ ⟮than are dreamt of in your philosophy⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}</span>"	misc::text-by-heart::shakespeare
"# !de  ## !Prometheus (Goethe)  &gt; !⟮c1;sb;Bedecke deinen Himmel, Zeus,⟯ &gt; !⟮c+;sb;Mit Wolkendunst,⟯ &gt; !⟮c+;sb;Und übe, dem Knaben gleich,⟯ &gt; !⟮c+;sb;Der Disteln köpft,⟯ &gt; !⟮c+;sb;An Eichen dich und Bergeshöhn;⟯ &gt; !⟮c+;sb;Musst mir meine Erde⟯ &gt; !⟮c+;sb;Doch lassen stehn⟯ &gt; !⟮c+;sb;Und meine Hütte, die du nicht gebaut,⟯ &gt; !⟮c+;sb;Und meinen Herd,⟯ &gt; !⟮c+;sb;Um dessen Glut⟯ &gt; !⟮c+;sb;Du mich beneidest.⟯  &gt; !⟮c+;sb;Ich kenne nichts Ärmeres⟯ &gt; !⟮c+;sb;Unter der Sonn' als euch, Götter!⟯ &gt; !⟮c+;sb;Ihr nähret kümmerlich⟯ &gt; !⟮c+;sb;Von Opfersteuern⟯ &gt; !⟮c+;sb;Und Gebetshauch⟯ &gt; !⟮c+;sb;Eure Majestät,⟯ &gt; !⟮c+;sb;Und darbtet, wären⟯ &gt; !⟮c+;sb;Nicht Kinder und Bettler⟯ &gt; !⟮c+;sb;Hoffnungsvolle Toren.⟯  &gt; !⟮c+;sb;Da ich ein Kind war,⟯ &gt; !⟮c+;sb;Nicht wusste wo aus noch ein,⟯ &gt; !⟮c+;sb;Kehrt' ich mein verirrtes Auge⟯ &gt; !⟮c+;sb;Zur Sonne, als wenn drüber wär'⟯ &gt; !⟮c+;sb;Ein Ohr, zu hören meine Klage,⟯ &gt; !⟮c+;sb;Ein Herz, wie mein's,⟯ &gt; !⟮c+;sb;Sich des Bedrängten zu erbarmen.⟯  &gt; !⟮c+;sb;Wer half mir⟯ &gt; !⟮c+;sb;Wider der Titanen Übermut?⟯ &gt; !⟮c+;sb;Wer rettete vom Tode mich,⟯ &gt; !⟮c+;sb;Von Sklaverei?⟯ &gt; !⟮c+;sb;Hast du nicht alles selbst vollendet,⟯ &gt; !⟮c+;sb;Heilig glühend Herz?⟯ &gt; !⟮c+;sb;Und glühtest jung und gut,⟯ &gt; !⟮c+;sb;Betrogen, Rettungsdank⟯ &gt; !⟮c+;sb;Dem Schlafenden da droben?⟯  &gt; !⟮c+;sb;Ich dich ehren? Wofür?⟯ &gt; !⟮c+;sb;Hast du die Schmerzen gelindert⟯ &gt; !⟮c+;sb;Je des Beladenen?⟯ &gt; !⟮c+;sb;Hast du die Tränen gestillet⟯ &gt; !⟮c+;sb;Je des Geängsteten?⟯ &gt; !⟮c+;sb;Hat nicht mich zum Manne geschmiedet⟯ &gt; !⟮c+;sb;Die allmächtige Zeit⟯ &gt; !⟮c+;sb;Und das ewige Schicksal,⟯ &gt; !⟮c+;sb;Meine Herrn und deine?⟯  &gt; !⟮c+;sb;Wähntest du etwa,⟯ &gt; !⟮c+;sb;Ich sollte das Leben hassen,⟯ &gt; !⟮c+;sb;In Wüsten fliehen,⟯ &gt; !⟮c+;sb;Weil nicht alle⟯ &gt; !⟮c+;sb;Blütenträume reiften?⟯  &gt; !⟮c+;sb;Hier sitz' ich, forme Menschen⟯ &gt; !⟮c+;sb;Nach meinem Bilde,⟯ &gt; !⟮c+;sb;Ein Geschlecht, das mir gleich sei,⟯ &gt; !⟮c+;sb;Zu leiden, zu weinen,⟯ &gt; !⟮sb;Zu ⟮genießen⟯ ⟮und zu freuen sich,⟯⟯ &gt; !⟮c+;sb;Und dein nicht zu achten,⟯ &gt; !⟮c+;sb;Wie ich!⟯  # !ja  ## !Man'yōshū vol. 11, verse 2514 - 2513  &gt; !⟮c59;sb;A faint clap of thunder⟯ &gt; !⟮c+;sb;Clouded skies⟯ &gt; !⟮c+;sb;Perhaps rain comes⟯ &gt; !⟮c+;sb;If so, will you stay here with me?⟯  &gt; !⟮c+;sb;A faint clap of thunder⟯ &gt; !⟮c+;sb;Even if rain comes not⟯ &gt; !⟮c+;sb;I will stay here⟯ &gt; !⟮c+;sb;Together with you⟯  # !en  ## !Warming Her Pearls (by Carol Ann Duffy)  &gt; !⟮c67;sb;Next to my own skin, her pearls. My mistress⟯ &gt; !⟮c+;sb;bids me wear them, warm them, until evening⟯ &gt; !⟮c+;sb;when I'll brush her hair. At six, I place them⟯ &gt; !⟮c+;sb;round her cool, white throat. All day I think of her,⟯  &gt; !⟮c+;sb;resting in the Yellow Room, contemplating silk⟯ &gt; !⟮c+;sb;or taffeta, which gown tonight? She fans herself⟯ &gt; !⟮c+;sb;whilst I work willingly, my slow heat entering⟯ &gt; !⟮c+;sb;each pearl. Slack on my neck, her rope.⟯  &gt; !⟮c+;sb;She's beautiful. I dream about her⟯ &gt; !⟮c+;sb;in my attic bed; picture her dancing⟯ &gt; !⟮c+;sb;with tall men, puzzled by my faint, persistent scent⟯ &gt; !⟮c+;sb;beneath her French perfume, her milky stones.⟯  &gt; !⟮c+;sb;I dust her shoulders with a rabbit's foot,⟯ &gt; !⟮c+;sb;watch the soft blush seep through her skin⟯ &gt; !⟮c+;sb;like an indolent sigh. In her looking-glass⟯ &gt; !⟮c+;sb;my red lips part as though I want to speak.⟯  &gt; !⟮c+;sb;Full moon. Her carriage brings her home. I see⟯ &gt; !⟮c+;sb;her every movement in my head.... Undressing,⟯ &gt; !⟮c+;sb;taking off her jewels, her slim hand reaching⟯ &gt; !⟮c+;sb;for the case, slipping naked into bed, the way⟯  &gt; !⟮c+;sb;she always does.... And I lie here awake,⟯ &gt; !⟮c+;sb;knowing the pearls are cooling even now⟯ &gt; !⟮c+;sb;in the room where my mistress sleeps. All night⟯ &gt; !⟮c+;sb;I feel their absence and I burn.⟯  ## !『 Not Waving but Drowning 』 Stevie Smith 1972  &gt; !⟮c91;sb;Nobody heard him, the dead man,   ⟯ &gt; !⟮c+;sb;But still he lay moaning:⟯ &gt; !⟮c+;sb;I was much further out than you thought   ⟯ &gt; !⟮c+;sb;And not waving but drowning.⟯  &gt; !⟮c+;sb;Poor chap, he always loved larking⟯ &gt; !⟮c+;sb;And now he’s dead⟯ &gt; !⟮c+;sb;It must have been too cold for him his heart gave way,   ⟯ &gt; !⟮c+;sb;They said.⟯  &gt; !⟮c+;sb;Oh, no no no, it was too cold always   ⟯ &gt; !⟮c+;sb;(Still the dead one lay moaning)   ⟯ &gt; !⟮c+;sb;I was much too far out all my life   ⟯ &gt; !⟮c+;sb;And not waving but drowning.⟯  ## !Helen of Troy Does Countertop Dancing (by Margaret Atwood)  &gt; !⟮c103;sb;The world is full of women⟯ &gt; !⟮c+;sb;who'd tell me I should be ashamed of myself⟯ &gt; !⟮c+;sb;if they had the chance. Quit dancing.⟯ &gt; !⟮c+;sb;Get some self-respect⟯ &gt; !⟮c+;sb;and a day job.⟯ &gt; !⟮c+;sb;Right. And minimum wage,⟯ &gt; !⟮c+;sb;and varicose veins, just standing⟯ &gt; !⟮c+;sb;in one place for eight hours⟯ &gt; !⟮c+;sb;behind a glass counter⟯ &gt; !⟮c+;sb;bundled up to the neck, instead of⟯ &gt; !⟮c+;sb;naked as a meat sandwich.⟯ &gt; !⟮c+;sb;Selling gloves, or something.⟯ &gt; !⟮c+;sb;Instead of what I do sell.⟯ &gt; !⟮c+;sb;You have to have talent⟯ &gt; !⟮c+;sb;to peddle a thing so nebulous⟯ &gt; !⟮c+;sb;and without material form.⟯ &gt; !⟮c+;sb;Exploited, they'd say. Yes, any way⟯ &gt; !⟮c+;sb;you cut it, but I've a choice⟯ &gt; !⟮c+;sb;of how, and I'll take the money.⟯  &gt; !⟮c+;sb;I do give value.⟯ &gt; !⟮c+;sb;Like preachers, I sell vision,⟯ &gt; !⟮c+;sb;like perfume ads, desire⟯ &gt; !⟮c+;sb;or its facsimile. Like jokes⟯ &gt; !⟮c+;sb;or war, it's all in the timing.⟯ &gt; !⟮c+;sb;I sell men back their worse suspicions:⟯ &gt; !⟮c+;sb;that everything's for sale,⟯ &gt; !⟮c+;sb;and piecemeal. They gaze at me and see⟯ &gt; !⟮c+;sb;a chain-saw murder just before it happens,⟯ &gt; !⟮c+;sb;when thigh, ass, inkblot, crevice, tit, and nipple⟯ &gt; !⟮c+;sb;are still connected.⟯ &gt; !⟮c+;sb;Such hatred leaps in them,⟯ &gt; !⟮c+;sb;my beery worshippers! That, or a bleary⟯ &gt; !⟮c+;sb;hopeless love. Seeing the rows of heads⟯ &gt; !⟮c+;sb;and upturned eyes, imploring⟯ &gt; !⟮c+;sb;but ready to snap at my ankles,⟯ &gt; !⟮c+;sb;I understand floods and earthquakes, and the urge⟯ &gt; !⟮c+;sb;to step on ants. I keep the beat,⟯ &gt; !⟮c+;sb;and dance for them because⟯ &gt; !⟮c+;sb;they can't. The music smells like foxes,⟯ &gt; !⟮c+;sb;crisp as heated metal⟯ &gt; !⟮c+;sb;searing the nostrils⟯ &gt; !⟮c+;sb;or humid as August, hazy and languorous⟯ &gt; !⟮c+;sb;as a looted city the day after,⟯ &gt; !⟮c+;sb;when all the rape's been done⟯ &gt; !⟮c+;sb;already, and the killing,⟯ &gt; !⟮c+;sb;and the survivors wander around⟯ &gt; !⟮c+;sb;looking for garbage⟯ &gt; !⟮c+;sb;to eat, and there's only a bleak exhaustion.⟯ &gt; !⟮c+;sb;Speaking of which, it's the smiling⟯ &gt; !⟮c+;sb;tires me out the most.⟯ &gt; !⟮c+;sb;This, and the pretence⟯ &gt; !⟮c+;sb;that I can't hear them.⟯ &gt; !⟮c+;sb;And I can't, because I'm after all⟯ &gt; !⟮c+;sb;a foreigner to them.⟯ &gt; !⟮c+;sb;The speech here is all warty gutturals,⟯ &gt; !⟮c+;sb;obvious as a slab of ham,⟯ &gt; !⟮c+;sb;but I come from the province of the gods⟯ &gt; !⟮c+;sb;where meanings are lilting and oblique.⟯ &gt; !⟮c+;sb;I don't let on to everyone,⟯ &gt; !⟮c+;sb;but lean close, and I'll whisper:⟯ &gt; !⟮c+;sb;My mother was raped by a holy swan.⟯ &gt; !⟮c+;sb;You believe that? You can take me out to dinner.⟯ &gt; !⟮c+;sb;That's what we tell all the husbands.⟯ &gt; !⟮c+;sb;There sure are a lot of dangerous birds around.⟯  &gt; !⟮c+;sb;Not that anyone here⟯ &gt; !⟮c+;sb;but you would understand.⟯ &gt; !⟮c+;sb;The rest of them would like to watch me⟯ &gt; !⟮c+;sb;and feel nothing. Reduce me to components⟯ &gt; !⟮c+;sb;as in a clock factory or abattoir.⟯ &gt; !⟮c+;sb;Crush out the mystery.⟯ &gt; !⟮c+;sb;Wall me up alive⟯ &gt; !⟮c+;sb;in my own body.⟯ &gt; !⟮c+;sb;They'd like to see through me,⟯ &gt; !⟮c+;sb;but nothing is more opaque⟯ &gt; !⟮c+;sb;than absolute transparency.⟯ &gt; !⟮c+;sb;Look--my feet don't hit the marble!⟯ &gt; !⟮c+;sb;Like breath or a balloon, I'm rising,⟯ &gt; !⟮c+;sb;I hover six inches in the air⟯ &gt; !⟮c+;sb;in my blazing swan-egg of light.⟯ &gt; !⟮c+;sb;You think I'm not a goddess?⟯ &gt; !⟮c+;sb;Try me.⟯ &gt; !⟮c+;sb;This is a torch song.⟯ &gt; !⟮c+;sb;Touch me and you'll burn.⟯  ## !Extract from Meditations in an Emergency  &gt; !⟮c186;sb;I can't even enjoy a blade of grass ⟯ &gt; !⟮c+;sb;unless I know there's a subway handy,⟯ &gt; !⟮c+;sb;or a record store ⟯ &gt; !⟮c+;sb;or some other sign that people do not totally regret life.⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}</span>"	misc::text-by-heart::poetry
"# !The Serenity Prayer  &gt; !⟮c1;sb;God, grant me the serenity to accept the things I cannot change,⟯ &gt; !⟮c+;sb;courage to change the things I can,⟯ &gt; !⟮c+;sb;and wisdom to know the difference.⟯  # !Símon Bolivar's conclusion about the americas  Simon Bolivars Letter near the end of his life: 1. ⟮c4;sb;America is ungovernable.⟯ 2. ⟮c+;sb;He who serves revolution plows the sea.⟯ 3. ⟮c+;sb;The only thing one can do in America is emigrate.⟯ 4. ⟮c+;sb;This country will first fall into the hands of the unbridled crowd and then pass imperceptibly to tyrants of all colors and races.⟯ 5. ⟮c+;sb;Devoured by all crimes and extinguished by ferocity, the Europeans will not even deign to conquer us.⟯ 6. ⟮c+;sb;If it is possible for one part of the world to return to primitive chaos, it is America.⟯  # !John Chivington, 1864, about indians  &gt; !⟮c10;sb;I have come to kill Indians,⟯ &gt; !⟮c+;sb;and believe it is right and honorable to use⟯ &gt; !⟮c+;sb;any means under God's heaven to kill Indians.⟯ &gt; !⟮c+;sb;Kill and scalp all, big and little; nits make lice!⟯  # !Gettysburg Address (1863)  &gt; !⟮c14;sb;Four score and seven years ago our fathers brought forth on this continent,⟯ &gt; !⟮c+;sb;a new nation, conceived in Liberty⟯,  &gt; !⟮c+;sb;and dedicated to the proposition that all men are created equal.⟯  &gt; !⟮c+;sb;Now we are engaged in a great civil war,⟯ &gt; !⟮c+;sb;testing whether that nation,⟯ &gt; !⟮c+;sb;or any nation so conceived and so dedicated,⟯ &gt; !⟮c+;sb;can long endure.⟯ &gt; !⟮c+;sb;We are met on a great battle-field of that war.⟯ &gt; !⟮c+;sb;We have come to dedicate a portion of that field, as a final resting place⟯ &gt; !⟮c+;sb;for those who here gave their lives that that nation might live.⟯ &gt; !⟮c+;sb;It is altogether fitting and proper that we should do this. ⟯  &gt; !⟮c+;sb;But, in a larger sense,⟯ &gt; !⟮c+;sb;we can not dedicate—⟯ &gt; !⟮c+;sb;we can not consecrate—⟯ &gt; !⟮c+;sb;we can not hallow—this ground. ⟯ &gt; !⟮c+;sb;The brave men, living and dead, ⟯ &gt; !⟮c+;sb;who struggled here, have consecrated it, ⟯ &gt; !⟮c+;sb;far above our poor power to add or detract. ⟯ &gt; !⟮c+;sb;The world will little note, nor long remember what we say here, ⟯ &gt; !⟮c+;sb;but it can never forget what they did here. ⟯ &gt; !⟮c+;sb;It is for us, the living, rather, ⟯ &gt; !⟮c+;sb;to be dedicated here to the unfinished work ⟯ &gt; !⟮c+;sb;which they who fought here have thus far so nobly advanced.⟯ &gt; !⟮c+;sb;It is rather for us to be here dedicated to the great task remaining before us—⟯ &gt; !⟮c+;sb;that from these honored dead we take increased devotion⟯ &gt; !⟮c+;sb;to that cause for which they gave the last full measure of devotion—⟯ &gt; !⟮c+;sb;that we here highly resolve that these dead shall not have died in vain—⟯ &gt; !⟮c+;sb;that this nation, under God,⟯ &gt; !⟮c+;sb;shall have a new birth of freedom—⟯ &gt; !⟮c+;sb;and that government of the people,⟯ &gt; !⟮c+;sb;by the people,⟯ &gt; !⟮c+;sb;for the people,⟯ &gt; !⟮c+;sb;shall not perish from the earth.⟯ ^there are multiple versions, this is the 'canonical' one, although probably not the one he actually delivered  # !misc  &gt; !the papal legate after the first conquest during the crusade against the cathars: ⟮c47;Kill them all, let God sort them out.⟯ / ⟮c48;Kill them all. God will know his own.⟯   &gt; !Antonio José de Sucre to Simón Bolívar, after his exile: ⟮Goodbye, my general. Take as a measure of my fondness these flowing tears.⟯   &gt; !After his trial, ⟮Gallileo⟯ supposedly said: ⟮And yet it moves!⟯   &gt; !⟮Tell me, what is it you plan to do⟯ ⟮with your one wild and precious life?⟯   &gt; !⟮I was supposed to be the one⟯ ⟮to fill your dark soul with light⟯!   &gt; !The personal motto of ⟮Cesare Borgia⟯ (supposedly, though finding a source is hard) was: (in Latin) ⟮Aut Caesar, aut nihil.⟯ / (in English)⟮(Either) Caesar or nothing.⟯   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}</span>"	misc::text-by-heart::prayers,-speeches,-quotes
"# !Braiding  ## !Three-Strand Braiding  1. !⟮c1;hb;<img src=""sm__3strandbraid1.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm__3strandbraid2.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm__3strandbraid3.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm__3strandbraid4.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm__3strandbraid5.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm__3strandbraid6.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm__3strandbraid7.jpg"">⟯ 8. !⟮c+;hb;<img src=""sm__3strandbraid8.jpg"">⟯ 9. !⟮c+;hb;<img src=""sm__3strandbraid9.jpg"">⟯ 10. !⟮c+;hb;<img src=""sm__3strandbraid10.jpg"">⟯  # !around appendages  ## !any  ### !Lark's Head Single Collumn Tie  1. !⟮c11;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.05.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.10.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.15.34.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.03.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.08.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.20.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.16.31.jpg"">⟯  ### !⟮c18;Loop-chain leash⟯  1. !⟮c+;hb;<img src=""sm_Neck-Lead-02.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Neck-Lead-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Neck-Lead-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Neck-Lead-05.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Neck-Lead-06.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Neck-Lead-07.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Neck-Lead-08.jpg"">⟯ 8. !⟮c+;hb;<img src=""sm_Neck-Lead-09.jpg"">⟯ 9. !⟮c+;hb;<img src=""sm_Neck-Lead-10.jpg"">⟯ 10. !⟮c+;hb;<img src=""sm_Neck-Lead-11.jpg"">⟯ 11. !⟮c+;hb;<img src=""sm_Neck-Lead-12.jpg"">⟯  ## !hair  ### !⟮c30;Hair tie⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-05.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-06.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-07.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Hair-Tie-08.jpg"">⟯  # !two ends together  ## !⟮c35;Square Knot⟯  1. !⟮c+;hb;<img src=""sm_Square-Knot-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Square-Knot-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Square-Knot-03.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Square-Knot-04.jpg"">⟯  ## !⟮c40;Surgeons Knot⟯  1. !⟮c+;hb;<img src=""sm_Surgeons-Knot-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Surgeons-Knot-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Surgeons-Knot-03.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Surgeons-Knot-04.jpg"">⟯  ## !Double Coin Knot  1. !⟮c45;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.14.png"">⟯ 2. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.26.png"">⟯ 3. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.30.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.33.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.36.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Screenshot 2019-09-24 at 17.11.41.jpg"">⟯  # !Prusik  ## !⟮c51;Prusik shackle⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Shackle-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Shackle-02.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Shackle-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Shackle-05.jpg"">⟯  ## !⟮c56;Prusik Cuffs⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-06.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Handcuffs-08.jpg"">⟯  ## !⟮c61;Prusic head⟯  1. !⟮c+;hb;<img src=""sm_Prusik-Head-1-01.jpg"">⟯ 2. !⟮c+;hb;<img src=""sm_Prusik-Head-1-03.jpg"">⟯ 3. !⟮c+;hb;<img src=""sm_Prusik-Head-1-04.jpg"">⟯ 4. !⟮c+;hb;<img src=""sm_Prusik-Head-1-05.jpg"">⟯ 5. !⟮c+;hb;<img src=""sm_Prusik-Head-1-06.jpg"">⟯ 6. !⟮c+;hb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯ 7. !⟮c+;hb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯  # !misc  flex-container:<img src=""sm_Screenshot 2020-06-30 at 21.28.32.jpg""><img src=""sm_Screenshot 2019-08-19 at 01.13.22.jpg"">   For the '⟮c69;many wrap⟯' technique for shortening cables, you start with ⟮an overhand knot⟯ and then ⟮Just continue wrapping⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}</span>"	misc::knots
"# !improv  ## !fundamentals  ### EKL  ⟮c1;Die Struktur⟯ einer ⟮Impro-szene (und ggf. anderer dinge, aber hauptsächlich)⟯ ist ⟮EKL⟯.  ⟮EKL⟯ steht für ⟮Etablieren, Konflikt, Lösung⟯.   #### !Etablieren  In einer ⟮(Impro)szene⟯ ⟮einigt man sich (idealerweise)⟯ ⟮nach dem Etablieren⟯ ⟮auf genau einen Konflikt⟯.   ##### !Fragen  - ⟮Wer bin ich⟯ - ⟮Wo bin ich⟯ - ⟮Wann bin ich⟯ - ⟮Wie stehe ich zum Gegenüber⟯  ## !exercises  ### !Das Totale Chaos  ⟮c14;alle im kreis⟯, außer ⟮eine person in der mitte⟯.  ⟮Die Person in der Mitte⟯ ⟮sagt eine Wahrheit über sich⟯.  Falls ⟮die Wahrheit auf einen zutrifft⟯, ⟮muss man sich eine neue Position im Kreis suchen⟯. ⟮sb;Die ⟮Person die keinen mehr findet⟯, ist ⟮die neue Person in der Mitte⟯.⟯  ### !Hey Baby  ⟮Alle Leute stehen im Kreis⟯. ⟮Eine Person geht in die Mitte⟯.  ⟮Die person in der mitte geht zu jemandem hin⟯ ⟮sb;⟮und sagt ""Hey Baby, willst du mitkommen?""⟯ ⟮Falls eine person lacht oder lächelt⟯, muss ⟮die Person in die mitte⟯, ⟮Falls nicht⟯, muss ⟮die Person (in der mitte) weitermachen bis es passiert⟯⟯  ### !Mirroring  ⟮One person does something⟯ and ⟮the other person imitates them like a mirror (as well as possible).⟯  setup: ⟮2 participants⟯ ⟮facing each other⟯  generally ⟮slow⟯ movements are ⟮easiest⟯  The ⟮easier⟯ variant has ⟮one person lead, and one follow⟯  The ⟮harder⟯ variant has ⟮both people lead and both follow⟯   ### !3-satz-geschichte  ⟮jeder spieler⟯ ⟮sagt einen satz⟯, entweder ⟮E, K oder L⟯ (natürlich in ⟮der reihenfolge⟯)  mit ⟮3 sätzen⟯ entsteht ⟮eine komplette EKL geschichte⟯  mindestens ⟮2⟯ ⟮spieler*innen ⟯  ### !Ich bin der könig der  Eine Person ⟮sagt: Ich bin der König von...⟯ und ⟮alle anderen müssen das Ding darstellen⟯ bis ⟮sich jemand anders zum König der $whatevers erklärt⟯.  Die ⟮improfabrik⟯ hat das (sinvollerweise, finde ich) ⟮auf Tiere limitiert⟯   ### !Feind*in und Beschützer*in  flex-container:<img src=""sm_your-drawing.png"">   ⟮Jede*r Spieler*in⟯ sucht sich ⟮eine*n Feind*in⟯ und ⟮eine*n Beschützer*in⟯. ⟮Jede*r Spieler*in⟯ versucht, ⟮seinen/ihren Beschützer*in zwischen sich und der*dem Feind*in zu behalten.⟯   ### !assoziationsketten  ⟮Someone says something⟯, and then ⟮the next person says the first thing that comes to mind⟯ and ⟮c+;sb;then  the next person says the first thing that comes to mind and so on⟯  Important to avoid ⟮thinking, self-censorship⟯ to learn to  ⟮let go, feel free⟯, e.g. to make ⟮weird associations like ""boss-napalm""⟯ etc.   ### !walking with speed levels  ⟮one person⟯ ⟮names speed levels⟯  ⟮everyone who isn't saying the levels⟯ ⟮walks at that speed (relative to the min/max⟯)  sometimes, in ⟮the beginning⟯ one ⟮goes through all the levels once to establish⟯  normally the levels are such that ⟮1⟯ is the ⟮slowest possible⟯, ⟮10⟯ is the ⟮fastest possible speed⟯   ### raumläufe  »⟮Raumläufe⟯« sind Übungen, bei denen man ⟮durch den Raum herumgeht⟯.   #### emotionaler gang  »⟮Emotionaler Gang⟯« ist ein ⟮Raumlauf⟯ wo ⟮eine besondere person⟯ ⟮immer mal wieder⟯ ⟮emotionen vorgibt⟯ und ⟮man sich dann in darin bewegt.⟯  ### samurai  flex-container:<img src=""sm_your-drawing (1).png""><img src=""sm_your-drawing (2).png""><img src=""sm_your-drawing (3).png"">   »⟮Samurai⟯«: The attacker ⟮raises their sword⟯ and ⟮hb; ⟮cuts downwards⟯ while ⟮hb;⟮emitting a sound (which one varies)⟯ and ⟮hb;⟮points at their target⟯. Their ⟮target⟯ ⟮cuts upwards⟯ while ⟮emitting a different sound.⟯ The ⟮hb;⟮left and right neighbors⟯ ⟮cut from the side⟯ while ⟮emitting a third sound⟯.⟯⟯⟯⟯ In the game »Samurai«, the ⟮sword⟯ is formed by ⟮palms together⟯, ⟮arms straight⟯.   # !acting  ## !families/schools/traditions  ### viewpoints  Broadly, ⟮c96;Viewpoints⟯ ⟮cares less⟯ about the ⟮psychology of characters⟯ and ⟮c-;more⟯ about the ⟮sensory reality/space/perception/exeriences⟯  The main book on ⟮Viewpoints⟯ is ⟮The Viewpoints Book⟯ by ⟮Anne Bogart⟯ and ⟮c_;Tina Landau.⟯  ⟮Viewpoints⟯ as a technique originates from ⟮dance⟯   #### soft focus  ＿⟮Soft focus⟯＿ is a technique from ⟮Viewpoints⟯  ＿⟮Soft focus⟯＿ asks that we ⟮soften our focus, looking at nothing in particular⟯  When we're in ＿⟮soft focus⟯＿, we able to ⟮percieve  everything we can see⟯  When we're in ＿⟮soft focus⟯＿, rather than ⟮seeking out information⟯, ⟮information seeks us out ('penetrates' our sensiblities⟯)  ＿⟮Soft focus⟯＿ is contrasted with ⟮the normal way of looking⟯, which is ⟮staring at one particular thing (focus+saccades  or smooth pursuit movement⟯)   ### meisner  The ＿⟮c117;meisner technique⟯＿ says  ⟮you should do something⟯ only if ⟮something happens to make you do it⟯  The ＿⟮meisner technique⟯＿ says ⟮what you do⟯ ⟮depends on the other fellow⟯  The ＿meisner technique＿ emphasizes ⟮instinctive, honest, authentic⟯ reactions  Perhaps the most famous exercise of the ＿⟮meisner technique⟯＿ is ＿⟮the repetition⟯＿  #### pinch and ouch  At its most literal, »⟮a pinch and ouch⟯« in the ⟮meisner⟯ technique is ⟮someone pinching you, you react to that pain⟯  In the meisner ＿pinch and ouch＿, the ⟮pinch⟯ generally is ⟮Something that makes you feel a way⟯  In the meisner ＿pinch and ouch＿, the ⟮ouch⟯ is ⟮Your honest reaction⟯   # !techniques  ## gromolo  »⟮c133;gibberish/gromolo⟯« is ⟮speech using meaningless sounds⟯  ⟮Gibberish⟯ in theatre is a synonym for ⟮gromolo⟯.  ⟮Gromolo⟯ sometimes uses ⟮some of a languages most distinctive phonological qualities⟯ to ⟮imitate a fictive version of a real language⟯  ⟮Sim gülük dürülu milli-ü⟯ is an example for using ⟮gromolo/gibberish⟯ to ⟮imitate a language⟯ ⟮Many improv games⟯ can be varied by doing them in ⟮gromolo/gibberish⟯   ## der sprechbereite mund  ""⟮der sprechbereite mund⟯"" involves ⟮keeping your mouth open slightly all the time (during improv sessions etc.)⟯ ⟮to be able to react quickly⟯  The problem with sourcing ""⟮der sprechbereite mund⟯"" is that ⟮I can't find it on google⟯.    ## yes, and  ⟮""Yes, and...""⟯ originates from ⟮improv⟯. ⟮""Yes, and...""⟯, is both ⟮a phrase that can be said/used⟯, as well the ⟮the underlying rule-of-thumb⟯ that says that ⟮a participant should accept what another participant has stated⟯ (""⟮c_;yes⟯"") and ⟮then expand on that line of thinking⟯ (""⟮c_;and⟯""). ⟮""Yes, and...""⟯ is sometimes also expanded to ⟮a principle⟯ for ⟮communication⟯ or for ⟮c_;life⟯.  ## breathing  Telling someone to ⟮breathe their belly into the ground/their feet⟯ will make them  ⟮breathe more deeply⟯, compared to just telling them ⟮to breathe in their belly⟯, due to it ⟮priming your mind / acting as a metaphr⟯   # acroyoga  In general, ⟮c164;acroyoga⟯ can be used for ⟮acrobatics⟯, ⟮exercise (or similar, stretching etc.⟯), and ⟮relaxating/therapeutics (incl thai massage⟯) In general, ⟮acroyoga⟯ includes the three roles ⟮base⟯, ⟮flyer⟯ and ⟮spotter⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}</span>"	misc::theatre