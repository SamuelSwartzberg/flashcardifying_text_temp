Version control system (VCS) are systems for tracking/managing changes to things. Git is a type of VCS. Most commonly in a VCS, a repository contains all the files and folders of the project and their history. For git, a clone gives one the complete set of commits, branches and history.	acad::git
"<div class='c2-f'> What is this? (more precisely, what does this have?) </div><div class='c1-f'> What is this called? (more precisely, what has this?) </div><br/>{{c1::A commit}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A snapshot of the projects content at a specific time}}"	acad::git
"Are all snapshots in git arranged in a line from oldest to newest? <span class=""divider"">-></span> {{c1::No}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > because there are branches </div> </div>"	acad::git
"Why are all snapshots in git not arranged in a line from oldest to newest? <span class=""divider"">-></span> {{c1::because there can be many different branches}}"	acad::git
"<div class='c2-f'> What is this? </div><div class='c1-f'> What is this called? </div><br/>{{c1::(branch) head}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A <b>reference</b> to the commit at the tip of a branch.}}"	acad::git
"Specifically, what does <pre><code data-codetype=""sh"">git branch</code></pre> show you? <span class=""divider"">-></span> {{c1::A list of the branch heads}}"	acad::git
"How many branch heads does a new repository contain? <span class=""divider"">-></span> {{c1::1}}"	acad::git
"What is the branch head of the freshly created repository called? <span class=""divider"">-></span> {{c1::master (or more recently, main)}}"	acad::git
"What should tags generally keep pointing to? <span class=""divider"">-></span> {{c1::the same commit}} What are tags normally to mark in git? <span class=""divider"">-></span> {{c1::to mark a specifc commit}}"	acad::git
"What does <pre><code data-codetype=""sh"">git switch branchname</code></pre> do? <span class=""divider"">-></span> {{c1::Switch to that branch}}"	acad::git
"Why is there<pre><code data-codetype=""sh"">git switch branchname</code></pre> when <pre><code data-codetype=""sh"">git checkout branchname</code></pre> would do the job just fine? <span class=""divider"">-></span> {{c1::Because checkout is overloaded as fuck}}"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> How do I do this? </div><br/>{{c1::<pre><code data-codetype=""sh"">git switch -c branchname</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Create new branch and switch to it}}"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> How do I do this? </div><br/>{{c1::<pre><code data-codetype=""sh"">git show</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::show the details of the most recent commit}}"	acad::git
"How do you uniquely refer to a commit? <span class=""divider"">-></span> {{c1::By its hex id}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > eg commit 17cf781661e6d38f737f15f53ab552f1e95960d7<br> </div> </div>"	acad::git
"What is often used when talking about branch heads, instead of 'branch head'? <span class=""divider"">-></span> {{c1::just 'branch'}} What is a branch, besides a branch head? <span class=""divider"">-></span> {{c1::The entire history of commits that make up a branch}} Strictly speaking, what is a branch head? <span class=""divider"">-></span> {{c1::A reference to the most recent commit of a branch}}"	acad::git
"globs generally <br/>{{c1::<pre><code data-codetype=""sh"">*</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::match 0 to infinity arbitrary characters}} {{c1::<pre><code data-codetype=""sh"">?</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Match any one arbitrary character}} except for the slash {{c1::Match any one character a-f}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code data-codetype=""sh"">[a-f]</code></pre>}}<br/><div class=""sub""> <div class=""sub all-b""><br></div> </div>"	acad::git
"<div class='c2-f'> Inside of a .gitignore file, what does this do? </div><div class='c1-f'> Inside of a .gitignore file, how do I specify this? </div> <div class='c2-f'> Where would you do this? </div><div class='c1-f'> What does this do? </div> <div class='c2-f'> Inside of a .gitignore file, what does this do? </div><div class='c1-f'> Inside of a .gitignore file, how do I specify this? </div> <div class='c2-f'> Inside of a .gitignore file, what does this do? </div><div class='c1-f'> Inside of a .gitignore file, how do I specify this? </div> <div class='c2-f'> How would I do this in a gitignore? </div><div class='c1-f'> What would this do in a gitignore? </div><br/>Does <pre><code data-codetype=""sh"">foo/*</code></pre> match foo/bar (a directory)? <span class=""divider"">-></span> {{c1::yes}} Does <pre><code data-codetype=""sh"">foo/*</code></pre> match foo/bar/hello.c? <span class=""divider"">-></span> {{c1::no}} Does <pre><code data-codetype=""sh"">foo/*</code></pre> match foo/test.json? <span class=""divider"">-></span> {{c1::yes}} In a gitignore file, what would match hello.java, but not foo/hello.java? <span class=""divider"">-></span> {{c1::/hello.java}} In a gitignore file, what would match hello.txt&nbsp;<b>and</b> foo/hello.java? <span class=""divider"">-></span> {{c1::hello.*}} {{c1::<pre><code data-codetype=""sh"">!somepattern</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::reinclude items with somepattern}} {{c1::specify that some files should not be tracked}}  <span class=""divider"">&lt;-&gt;</span> {{c2::.gitignore}} {{c1::<pre><code data-codetype=""sh"">/somepattern</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Match anything matching somepattern in the directory the gitignore is in}} {{c1::<pre><code data-codetype=""sh"">somepattern/</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Match all directories named somepattern}} {{c1::<pre><code data-codetype=""sh"">somepattern/somepattern</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Match somepattern/somepattern, starting with the directory the gitignore is in}} {{c1::<pre><code data-codetype=""sh"">somepattern</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Match something with somepattern somewhere in it's file path}} *?[a-f] similar to globs {{c1::Match bar that is at some point a child of foo (which is in the gitignore directory)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code data-codetype=""sh"">foo/**/bar</code></pre>}} {{c1::Match everything in foo&nbsp; (with infinite depth)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code data-codetype=""sh"">foo/**</code></pre>}} {{c1::Match foo/bar in all directories (anypath/foo/bar)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code data-codetype=""sh"">**/foo/bar</code></pre>}}"	acad::git
"<div class='c2-f'> Once we've done this, what has happened to the committed data? </div><div class='c1-f'> Data is this once we've... </div> <div class='c2-f'> A file becomes this when it is what but not what? </div><div class='c1-f'> What is the term for this? </div> <div class='c2-f'> Means that this will do what once what? </div><div class='c1-f'> What is the term for this? </div><br/>{{c1::commited}}  <span class=""divider"">&lt;-&gt;</span> {{c2::data is part of git repository}} {{c1::modified}}  <span class=""divider"">&lt;-&gt;</span> {{c2::changed but not staged}} {{c1::staged}}  <span class=""divider"">&lt;-&gt;</span> {{c2::will be commited in next commit}}"	acad::git
"change the default text editor List the value for a specific setting List all git settings Where does a setting originate?<br/><pre><code data-codetype=""sh"">git config --global {{c1::core.editor}} emacs</code></pre> <pre><code data-codetype=""sh"">git config {{c1::&lt;key&gt;(e.g. user.name)}}</code></pre> <pre><code data-codetype=""sh"">git config {{c1::--list}}</code></pre> <pre><code data-codetype=""sh"">git config {{c1::--show-origin}} rerere.autoUpdate</code></pre> <table class=""cloze-group hide-if-inactive"">   <thead>     <tr><th></th>     <th></th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:1;::<code>git</code>))</td> <td>((c:2;::Interface with git))</td></tr> <tr><td>((c:3;::<code>git status</code>))</td> <td>((c:4;::Show status of current changes))</td></tr> <tr><td>((c:5;::<code>git pull</code>))</td> <td>((c:6;::Fetch and merge changes from remote))</td></tr> <tr><td>((c:7;::<code>git merge</code>))</td> <td>((c:8;::Merges things, most often branches))</td></tr> <tr><td>((c:9;::<code>git init</code>))</td> <td>((c:10;::Create a new repository))</td></tr> <tr><td>((c:11;::<code>git commit</code>))</td> <td>((c:12;::Commits staged changes))</td></tr> <tr><td>((c:13;::<code>git clone</code>))</td> <td>((c:14;::Clone an exiting project from remote))</td></tr> <tr><td>((c:15;::<code>git branch</code>))</td> <td>((c:16;::interact with branches (in general) / list current branches (no arg)))</td></tr> <tr><td>((c:17;::<code>git add/stage</code>))</td> <td>((c:18;::Stage a change))</td></tr> <tr><td>((c:19;::<code>git log</code>))</td> <td>((c:20;::show record of commits))</td></tr> <tr><td>((c:21;::<code>git branch -d &lt;branch-name&gt;</code>))</td> <td>((c:22;::deletes the specifed branch))</td></tr> <tr><td>((c:23;::<code>git checkout [branch-name]</code>))</td> <td>((c:24;::Switches to specified branch))</td></tr> <tr><td>((c:25;::<code>git branch [branch-name]</code>))</td> <td>((c:26;::Creates a new branch))</td></tr> <tr><td>((c:27;::<code>git push</code>))</td> <td>((c:28;::Push changes to remote))</td></tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}</span>   <code>git config</code>|Changes configurations <code>git config --global</code>|change the global git config <code>git config --local</code>|change the git config of the current repo <code>git config user.email ""foo"" </code>|Change the current email <code>git config user.name ""foo"" </code>|Change the current username <code>git config color.ui auto</code>|Enable command line output coloring"	acad::git
"<div class='c2-f'> Are, respectively? </div><div class='c1-f'> Are called? </div><br/>{{c1::tracked file vs untracked file}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A file git knows (cares) about, and doesn't know/care about}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > one you have at some point added with git add, I think </div> </div>"	acad::git
"Short output for e.g. git status?<br/><pre><code data-codetype=""sh"">git status {{c1::-s OR --short}}</code></pre>"	acad::git
"<div class='c1-f'> What status does lib/git.rb have? (git status -s) </div><br/><pre><code data-codetype=""sh""> M README MM Rakefile A  lib/git.rb M  lib/simplegit.rb ?? LICENSE.txt</code></pre> <span class=""divider"">-></span> {{c1::Staged}} <div class='c1-f'> What status does Rakefile have? (git status -s) </div><br/><pre><code data-codetype=""sh""> M README MM Rakefile A  lib/git.rb M  lib/simplegit.rb ?? LICENSE.txt</code></pre> <span class=""divider"">-></span> {{c1::Modified, staged, and then modified again (both staged and unstaged)}} <div class='c1-f'> What status does README have? (git status -s) </div><br/><pre><code data-codetype=""sh""> M README MM Rakefile A  lib/git.rb M  lib/simplegit.rb ?? LICENSE.txt</code></pre> <span class=""divider"">-></span> {{c1::Modified (but not yet staged)}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > M on the left is&nbsp; modified and staged, M on the right only modified </div> </div> <div class='c1-f'> What status does LICENSE.txt have? (git status -s) </div><br/><pre><code data-codetype=""sh""> M README MM Rakefile A  lib/git.rb M  lib/simplegit.rb ?? LICENSE.txt</code></pre> <span class=""divider"">-></span> {{c1::untracked}}"	acad::git
"<div class='c1-f'> What does this do? </div> Commit all tracked files without having to stage them<br/><pre><code data-codetype=""sh"">git commit <mark>-a</mark> -m ""some message""</code></pre> <span class=""divider"">-></span> {{c1::Commit all tracked files without having to stage them}} <pre><code data-codetype=""sh"">git commit {{c1::-a}} -m ""some message""</code></pre>"	acad::git
"<div class='c1-f'> What does this do? </div> <div class='c1-f'> What does this do? </div> Remove a file from git, but not from the file system? Remove a file from your file system and from git?<br/><pre><code data-codetype=""sh"">git rm --cached somefile</code></pre> <span class=""divider"">-></span> {{c1::Remove a file from git, but not from the file system}} <pre><code data-codetype=""sh"">git rm somefile</code></pre> <span class=""divider"">-></span> {{c1::Remove a file from git and from your filesystem}} <pre><code data-codetype=""sh"">git {{c1::rm --cached}} somefile</code></pre> <pre><code data-codetype=""sh"">git {{c1::rm}} somefile</code></pre>"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> How do you do this easily? </div><br/>{{c1::<pre><code data-codetype=""sh"">git mv file_from file_to</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Renames the file 'file_from' to 'file_to'}}"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> What is the git log flag for this? </div><br/>((h:2;::<img src=""sm_Ma7VH.jpg"">)) ((h:2;::<img src=""sm_2021-05-31--16-17-40-screenshot.jpg"">)){{c1::<pre><code data-codetype=""sh"">git log --S somestring</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::display only commits that contain somestring}} {{c1::<pre><code data-codetype=""sh"">git log --author=""paul"" --grep=regex --all-match</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display all commits authored by paul AND matching the regex regex}} {{c1::<pre><code data-codetype=""sh"">git log --author=""paul"" --grep=regex</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display all commits authored by paul OR matching the regex regex}} {{c1::<pre><code data-codetype=""sh"">git log --author=""paul""</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display all commits authored by paul}} {{c1::<pre><code data-codetype=""sh"">git log --graph</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display the git log as an ascii graph}} {{c1::<pre><code data-codetype=""sh"">git log --no-merges</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::don't display merge commits}} {{c1::<pre><code data-codetype=""sh"">git log --pretty=format:""someformat""</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Format the commit according to some formatting string}} {{c1::<pre><code data-codetype=""sh"">git log --pretty=oneline</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Show the commit as a oneline (hash and message)}} {{c1::<pre><code data-codetype=""sh"">git log --since=""sometime""</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display all commits since 'sometime'}} {{c1::<pre><code data-codetype=""sh"">git log --stat</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Shows some quick stats about the commit history}} {{c1::<pre><code data-codetype=""sh"">git log -n somenumber</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Display the last n commits}} {{c1::<pre><code data-codetype=""sh"">git log -p/--patch</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Shows the diff of each commit}}<br/><div class=""sub""> <div class=""sub c1-f"" > not the combined shorthand </div><div class=""sub c2-b c1-f"" > e.g. <pre><code>1d330672ad2e6445c1f19855c08c58c96441157b (HEAD -&gt; main, origin/main, origin/HEAD) minor changes to logic e1da47fba601860726b38ba9c56f4fc6561820f9 add some structs and enums as interface 5784397b0a042c65149c9bbaca12fc0346799352 add the outline of how the program should flow 28e9f6d15a06231a5c3552e16ff32b21042ebc0a Add beginnings of using package clap for command line argument management a5c2ecef571fe3c1b411555313c1405a59cfd175 Add specifier for location to design docs </code></pre> </div> <div class=""sub c2-b c1-f"" > e.g. <pre><code> src/api.rs  | 12 ++++++++++++  src/main.rs | 17 +++++------------ </code></pre> </div> </div>"	acad::git
"<div class='c1-f'> What does this do if you haven't staged anything since your last commit? </div> <div class='c1-f'> What does this do if you haven't staged anything since your last commit? </div> <div class='c1-f'> What does this do if you have staged something since your last commit? </div> Change the commit message to ""message"" Add staged files to last commit<br/><pre><code data-codetype=""sh"">git commit --amend -m ""message""</code></pre> <span class=""divider"">-></span> {{c1::Changes the commit message to ""message""}} <pre><code data-codetype=""sh"">git commit --amend</code></pre> <span class=""divider"">-></span> {{c1::Allows you to change the commit message}} <pre><code data-codetype=""sh"">git commit --amend</code></pre> <span class=""divider"">-></span> {{c1::Replace that commit with your new commit incl staged files}} <pre><code data-codetype=""sh"">git commit {{c1::--amend}} -m ""message""</code></pre> <pre><code data-codetype=""sh"">git commit {{c1::--amend}}</code></pre>"	acad::git
"<div class='c1-f'> What does this do? </div> Discard changes to file since last commit<br/><pre><code data-codetype=""sh"">git checkout -- &lt;file&gt;</code></pre> <span class=""divider"">-></span> {{c1::discards uncommited changes to file}} <pre><code data-codetype=""sh"">git checkout {{c1::--}} &lt;file&gt;</code></pre> <pre><code data-codetype=""sh"">git {{c1::checkout}} -- &lt;file&gt;</code></pre><br/><div class=""sub""> <div class=""sub c1-b c2-f"" > equivalently: resets file to what it was in the last commit </div> </div>"	acad::git
"<div class='c2-f'> What is this? </div><div class='c1-f'> What is this called? </div><br/>{{c1::remote repository}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A repository hosted somewhere else (normally on some server, though you could also host one on the same computer)}}"	acad::git
"How many remotes can you have? <span class=""divider"">-></span> {{c1::n}}"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> command for? </div><br/>{{c1::<pre><code data-codetype=""sh"">git remote</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::manage git remotes}} <div class='c2-f'> What does this do? </div><div class='c1-f'> How do you do this? </div><br/>{{c1::<pre><code data-codetype=""sh"">git remote -v</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Show the names <b>and URLs</b> of all your remotes}}"	acad::git
"Which arguments go here?<br/><pre><code data-codetype=""sh"">git push {{c1::&lt;remote&gt;}} {{c1::&lt;branch&gt;}}</code></pre> What happens if someone else has pushed a commit you don't have yet, and then you push? <span class=""divider"">-></span> {{c1::Your push will be rejected}} Get any new changes from that remote<br/><pre><code data-codetype=""sh"">git {{c1::fetch}} &lt;remote&gt;</code></pre> Add a remote<br/><pre><code data-codetype=""sh"">git remote add &lt;name&gt; {{c1::&lt;url&gt;}}</code></pre> <pre><code data-codetype=""sh"">git remote add {{c1::&lt;name&gt;}} &lt;url&gt;</code></pre> <pre><code data-codetype=""sh"">git remote {{c1::add}} &lt;name&gt; &lt;url&gt;</code></pre> <pre><code data-codetype=""sh"">git {{c1::remote}} add &lt;name&gt; &lt;url&gt;</code></pre> <div class='c2-f'> What is this? </div><div class='c1-f'> What is this called? </div><br/>{{c1::origin}}  <span class=""divider"">&lt;-&gt;</span> {{c2::default name for the remote you cloned the repo from}} <div class='c2-f'> What does this do? </div><div class='c1-f'> How do you do this? </div><br/>{{c1::<pre><code data-codetype=""sh"">git remote rm &lt;name&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Removes the remote}} <div class='c2-f'> What does this do? </div><div class='c1-f'> How do you do this? </div><br/>{{c1::<pre><code data-codetype=""sh"">git remote rename &lt;from&gt; &lt;to&gt;</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Changes the name you call a remote}} <div class='c1-f'> What does this do? </div><br/><pre><code data-codetype=""sh"">git fetch &lt;remote&gt;</code></pre> <span class=""divider"">-></span> {{c1::Gets any new changes from that remote}}"	acad::git
"<div class='c1-f'> What does this do? </div> Tag the commit that starts with 9fceb02 as v1.2 with an annotated tag <div class='c1-f'> What does this do? </div> Tag the current commit (the HEAD)&nbsp; as v1.4 with an annotated tag (and the message ""my version 1.4"") Tag the current commit (the HEAD)&nbsp; as v1.4 with an annotated tag (and the message ""my version 1.4"") <div class='c1-f'> what does this do </div> List tags that start with v1.8.5 <div class='c1-f'> What does this do? </div> Tag the current commit (the HEAD)&nbsp; as v1.4 with an annotated tag List tags that start with v1.8.5 Tag the current commit (the HEAD)&nbsp; as v1.4-lw with a lightweight tag<br> <div class='c2-f'> What does this do? </div><div class='c1-f'> How do you do this? </div><br/><pre><code data-codetype=""sh"">git tag -a v1.2 9fceb02</code></pre> <span class=""divider"">-></span> {{c1::Tag the commit that starts with 9fceb02 as v1.2 with an annotated tag}} <pre><code data-codetype=""sh"">git tag -a v1.2 {{c1::9fceb02}}</code></pre> <pre><code data-codetype=""sh"">git tag -a v1.4 -m ""my version 1.4""</code></pre> <span class=""divider"">-></span> {{c1::Tag the current commit (the HEAD)&nbsp; as v1.4 with an annotated tag}} <pre><code data-codetype=""sh"">git tag -a v1.4 {{c1::-m ""my version 1.4""}}</code></pre> <pre><code data-codetype=""sh"">git tag -a {{c1::v1.4}} -m ""my version 1.4""</code></pre> <pre><code data-codetype=""sh"">git tag -l ""v1.8.5*""</code></pre> <span class=""divider"">-></span> {{c1::List tags that start with v1.8.5}} <pre><code data-codetype=""sh"">git tag -l OR --list {{c1::""v1.8.5*""}}</code></pre> <pre><code data-codetype=""sh"">git tag v1.4-lw</code></pre> <span class=""divider"">-></span> {{c1::Tag the current commit (the HEAD)&nbsp; as v1.4-lw with a lightweight tag}} <pre><code data-codetype=""sh"">git tag {{c1::-a}} v1.4 -m ""my version 1.4""</code></pre> <pre><code data-codetype=""sh"">git tag {{c1::-l OR --list}} ""v1.8.5*""</code></pre> <pre><code data-codetype=""sh"">git tag {{c1::v1.4-lw}}</code></pre> Annotated tags contain the same info as lightweight tags plus {{c1::tagger}} {{c2::name}}, {{c1::tagger}} {{c2::email}}, {{c3::date}}, message For what use are annotated tags more appropriate? <span class=""divider"">-></span> {{c1::Published usage}} For what use are lightweight tags more appropriate? <span class=""divider"">-></span> {{c1::Private use}} Lightweight tags contain {{c1::a name}} and {{c2::a pointer to the commit}} Why are annotated tags more appropriate for published usage? <span class=""divider"">-></span> {{c1::because they specify the author (amongst other things), and therefore increase transparency}} {{c1::<pre><code data-codetype=""sh"">git tag</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Lists all tags}}"	acad::git
"Push annotated tags only&nbsp;<br/><pre><code data-codetype=""sh"">git push {{c1::--follow-tags}}</code></pre> Push all tags to origin<br/><pre><code data-codetype=""sh"">git push {{c1::--tags}}</code></pre> Push a specific tag<br/><pre><code data-codetype=""sh"">git push {{c1::sometag}}</code></pre> Delete a remote tag<br><pre><code data-codetype=""sh"">git {{c2::push}} {{c3::--delete}} {{c1::&lt;tagname&gt;}}</code></pre> Delete a local tag<br/><pre><code data-codetype=""sh"">git tag {{c1::-d/--delete}} v1.4-lw</code></pre> <div class='c1-f'> what does this do? </div><br/><pre><code data-codetype=""sh"">git push --follow-tags</code></pre> <span class=""divider"">-></span> {{c1::Push annotated tags only&nbsp;}} <div class='c1-f'> What does this do? </div><br/><pre><code data-codetype=""sh"">git push --delete &lt;tagname&gt;</code></pre> <span class=""divider"">-></span> {{c1::Delete the tag tagname}}"	acad::git
"Why is it wrong/ludicrous to say you are detached from your HEAD?  where you are in git is <i>defined</i><b style=""font-style: italic;""> </b>the HEAD Why does git only need a pointer to the tip of a branch to keep track of a branch?  Because each commit has a pointer to the preceeding commit Which commit or branch does the HEAD point to?  The currently checked out one What will the commit the current HEAD (indirectly) is pointing to be to your next commit?  Its parent What type of thing is the HEAD?  A pointer What has happened if the HEAD is pointing directly to a commit?  you are in detached HEAD state What does the HEAD typically point to?  a branch head What does each commit point to, as its 'contents'?  A snapshot The branch head realizing a branch is a pointer to what?  the tip of the branch"	acad::git
"((h:1;::<img src=""sm_branch-and-history.png"">))What happens when you create a new branch? <span class=""divider"">-&gt;</span> {{c1::Git creates a new pointer}}<img src=""sm_tmpthwn8dtg.jpg"">"	acad::git
"<img class=""c1-f c2-b"" src=""sm_branch-and-history.png""><br/>What branch are we currently on? <span class=""divider"">-></span> {{c1::master}}"	acad::git
"((h:1;::<img src=""sm_head-to-testing.png"">))<img class=""c1-f c2-b"" src=""sm_head-to-master.png""><br/>How does this diagram change when you run <pre><code>git checkout testing</code></pre>  <span class=""divider"">-&gt;</span> <span class=""empty-cloze-generation-only"">{{c1::}}</span>"	acad::git
"<img class=""c1-f c2-b"" class=""fullsize-image"" src=""sm_head-to-master.png""><img class=""c1-f c2-b"" class=""fullsize-image"" src=""sm_head-to-testing.png""><br/>How do you get from image one to image two? <span class=""divider"">-></span> {{c1::<pre><code>git checkout testing</code></pre>}}"	acad::git
"<div class='c1-f'> What does the all flag here do? </div> <div class='c1-f'> What does the decorate flag here do? </div> I want to see all commits in all branches I want to see where my heads are!<br/><pre><code data-codetype=""sh"">git log --oneline --all</code></pre> <span class=""divider"">-></span> {{c1::Show you commits of all branches}} <pre><code>git log --oneline --decorate</code></pre> <span class=""divider"">-></span> {{c1::Show you where your heads are (HEAD and branch heads)}} <pre><code>git log --oneline {{c1::--all}}</code></pre> <pre><code>git log --oneline {{c1::--decorate}}</code></pre>"	acad::git
"<div class='c2-f'> What does this do? </div><div class='c1-f'> How do I do this? </div><br/>{{c1::<pre><code>git merge hotfix</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Merge branch hotfix into current branch}}"	acad::git
"((h:1;::<img src=""sm_basic-branching-5.png"">))<img class=""c1-f c2-b"" src=""sm_basic-branching-4.png""><br/>Where will master point after I merged hotfix into master?  <span class=""divider"">-&gt;</span> <span class=""empty-cloze-generation-only"">{{c1::}}</span>"	acad::git
"<img class=""c1-f c2-b"" class=""fullsize-image"" src=""sm_basic-branching-4.png""><img class=""c1-f c2-b"" class=""fullsize-image"" src=""sm_basic-branching-5.png""><br/>What happened? <span class=""divider"">-></span> {{c1::Hotfix was merged into master}}"	acad::git
"How do large projects often use long-running branches? <span class=""divider"">-></span> {{c1::For code in certain states of stability}}"	acad::git
"{{c1::<pre><code>git remote show</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Show a list of all remotes}} {{c1::<pre><code>git remote show &lt;remote&gt;</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Show the details of this remote}}"	acad::git
"<div class='c1-f'> Why do round braces prevent this from being treated as a block statement with no return value? </div><br/><pre><code>var func = () =&gt; <span class="""">({</span> foo: 1 <span class="""">})</span>;</code></pre> <span class=""divider"">-></span> {{c1::Because round braces don't go around block statements, and so the parser concludes it must be an object literal.}}"	acad::js
"<br>---<br>   §§ A ((c:1;::gloss)) is ((c:2;::a brief explanation)), often ((c:3;::placed near the text)) ((c:2;::it is explaining)) §<br>   §§ An ((c:4;::interlinear gloss)) is ((c:5;::a gloss)) that is ((c:6;::placed between lines.)) §<br>   §§ In linguistics, ((c:7;::interlinear glossing)) follows the ((c:8;::Leipzig Glossing Rules)). §<br>   §§ In linguistics, ((c:9;::interlinear glossing following the Leipzig Glossing Rules)) is ((c:10;::morpheme))-by-((c:10;::morpheme)). §<br>   §§ However, since ((c:11;::the exact morphology)) is ((c:12;::not always clear)) or ((c:13;::may be at issue)), ((c:14;::interlinear glossing in linguistics)) is generally ((c:15;::for the readers understanding)), not ((c:16;::to state an analysis)). §<br> ===<br>  <section class=""cloze-group-children hide-if-inactive-children"">   Interlinear glossing according to ((c:17;::the Leipzig Glossing Rules)):   §§ Interlinear glosses are ((c:18;::aligned)) ((c:19;::word-by-word (not morpheme-by-morpheme!))), and in this way ((c:20;::left-aligned)). §<br>   §§ ((c:21;::Morphemes within the same word)) are ((c:22;::separated by hyphen)) both ((c:23;::within the object language)) and ((c:24;::in the gloss)). §<br>   §§ In Interlinear glosses, ((c:25;::grammatical morphemes)) can be rendered by ((c:26;::abbreviated lables (e.g. LOC))) or&nbsp; §<br>   §§ ((c:27;::by a word in the metalanguage (e.g. in))) §<br> In interlienar gloss, ((c:28;::the lables indicating grammatical morphemes)) are ((c:29;::written in caps)), most commonly ((c:30;::in small caps.))   §§ In interlinear gloss, the ((c:31;::most common)) of the abbreviated lables may be ((c:32;::further abbreviated)). §<br>   §§ ((c:33;::Clitic boundaries)) are marked by ((c:34;::an equals sign)). §<br>   §§ In interlinear gloss, if ((c:35;::one element in the object language)) is ((c:36;::rendered by several elements in the metalanguage)), those are ((c:37;::separated in the gloss by periods. (there are also optional further category separations here which use _ \ = ; &gt;)))  §<br>   §§ Things that are ((c:38;::contained in the gloss)) that are ((c:39;::not marked in the object language)) may either ((c:40;::be enclosed by [])) in ((c:40;::the metalanguage)), or ((c:41;::be indicated by ø)) in ((c:41;::the object language)) §<br> </section>  <table>   <thead>     <tr>       <th>Grammatical Item</th>       <th>Abbreviation</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children""> <tr><td>((c:47;::Article))</td> <td>((c:42;::ART))</td></tr> <tr><td>((c:43;::Demonstrative))</td> <td>((c:44;::DET))</td></tr> <tr><td>((c:45;::Honorific))</td> <td>((c:46;::HON))</td></tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}</span><br><div class=""sub""> <table class=""blank-canvas cloze-group hide-if-inactive"" style=""text-align: left"">   <tbody>     <tr><td>My</td><td>s</td><td>Marko</td><td>poexa-l-i</td><td>avtobus-om</td><td>v</td><td>Peredelkino.</td></tr>     <tr> <td>1PL</td><td>COM</td><td>Marko</td><td>go-PST-PL</td><td>bus-INS</td><td>All</td><td>Peredelkino.</td></tr>     <tr><td colspan=""7"">'Marko and I went to Perdelkino by bus.'</td></tr>   </tbody> </table>  <table style=""text-align: left"" class=""blank-canvas cloze-group hide-if-inactive"">   <tbody>     <tr> <td>puer</td> <td>or:</td> <td>puer-Ø</td> </tr> <tr> <td>boy[NOM.SG]</td> <td></td> <td>boy-NOM.SG</td> </tr> <tr> <td>‘boy’</td> <td></td> <td>‘boy’</td> </tr>   </tbody> </table>   </div>"	acad::ling
"<pre><code data-codetype=""text"">*the lady’s a book</code></pre> <span class=""divider"">-&gt;</span> {{c1::That possessive s is a determiner}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessor DPs cannot be replaced by pronouns}} <pre><code data-codetype=""text"">Ann’s car</code></pre><pre><code data-codetype=""text"">She's car</code></pre> <span class=""divider"">-&gt;</span> {{c1::Replace the posessor DP with a pronoun}} <pre><code data-codetype=""text"">The book's the bookmark.</code></pre> <span class=""divider"">-&gt;</span> {{c1::Possessive s is followed by NPs, not by DPs}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::DP}} <pre><code data-codetype=""text"">[the owner of the car]'s mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::It attaches to DPs}} <pre><code data-codetype=""text"">the city’s destruction</code></pre> <span class=""divider"">-&gt;</span> {{c1::general ascription}} <pre><code data-codetype=""text"">the man’s hat</code></pre> <span class=""divider"">-&gt;</span> {{c1::posession&nbsp;}} <pre><code data-codetype=""text"">the owner of the car's mother</code></pre> <span class=""divider"">-&gt;</span> {{c1::<pre><code data-codetype=""text""><mark>the owner of the car</mark>'s mother</code></pre>}} How does English possessive s differ from German genitive -s, in where it attaches? <span class=""divider"">-&gt;</span> {{c1::German genitive -s attaches to nouns, english possessive s to DPs (or NPs, depending on your theory)}} Prove that possessive s is a determiner by inserting other determiners! <span class=""divider"">-&gt;</span> {{c1::*the lady’s a book}} What can't posessor DPs do, but most other DPs can? <span class=""divider"">-&gt;</span> {{c1::Be replaced by a normal pronoun}} What does posessive s attach to? <span class=""divider"">-&gt;</span> {{c1::DPs}} What syntactic category does possessive s belong to? <span class=""divider"">-&gt;</span> {{c1::Determiner}} What type of constitutent is the thing after a posessive s? <span class=""divider"">-&gt;</span> {{c1::A NP (dp theory)}} What type of constitutent is the thing before a posessive s? <span class=""divider"">-&gt;</span> {{c1::A DP}} the children’s toys <span class=""divider"">-&gt;</span> {{c1::the toys of the children}}"	acad::ling::synt
"For NVC to 'work', what is the least amount of people literate in NVC necessary in any given situation? <span class=""divider"">-&gt;</span> {{c1::1}}"	acad::nvc
"Which of the lateral sounds is the smallcaps one? <span class=""divider"">-&gt;</span> {{c1::the voiced velar lateral approximant}} What two pharyngeal sounds both feature IPA symbols containing an h/H? <span class=""divider"">-&gt;</span> {{c1::voiceless pharyngeal trill and fricative}} What two IPA symbols both using the glottal stop character are oriented with the head to the right? <span class=""divider"">-&gt;</span> {{c1::Voiceless pharyngeal and glottal stop/plosive}} What two IPA symbols both using the glottal stop character are oriented with the head to the left? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal trill and fricative}} What two IPA symbols both feature a glottal stop crossed out by a bar? <span class=""divider"">-&gt;</span> {{c1::Pharyngeal voiceless plosive and voiced trill}} What sound is the one whose character is supposedly the third one, besides a fricative and an approximant, that is based off the j, but is actually just a turned f? <span class=""divider"">-&gt;</span> {{c1::voiced palatal plosive}} What place of articulation would you expect ɣ to have, but which does it actually have? <span class=""divider"">-&gt;</span> {{c1::You'd expect it to be uvular (because of χ), but it's actually velar}} What is the order of the hooks (front to back) of n-based consonants? <span class=""divider"">-&gt;</span> {{c1::nɳɲŋ}} What is the only place of articulation for consonants that feature small horizontal bars crossing out symbols normally not so crossed?&nbsp; <span class=""divider"">-&gt;</span> {{c1::Pharyngeal}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Ignoring the voiced palatal plosive, which theoretically also is barred, but is actually a turned f </div> </div> What is the IPA voiced palatal plosive supposedly? <span class=""divider"">-&gt;</span> {{c1::a barred dotless j}} What is the IPA symbol for the voiced palatal plosive actually? <span class=""divider"">-&gt;</span> {{c1::an f turned by 180 degrees}} What do the symbols c, k, q describe in the IPA? <span class=""divider"">-&gt;</span> {{c1::a progression of voiceless plosives}} The voiced velar approximant kinda looks like a turned ___ combined with a turned ___ <span class=""divider"">-&gt;</span> {{c1::h, m}} The symbol for the palatal voiced fricative is just the symbol for what plus a curl? <span class=""divider"">-&gt;</span> {{c1::voiced palatal approximant}} The symbol for the palatal voiced fricative is just the symbol for the palatal voiced approximant plus a? <span class=""divider"">-&gt;</span> {{c1::curl}} Of the two n-like symbols with left-facing hooks, the one who has it further to the right is also the one... <span class=""divider"">-&gt;</span> {{c1::further back}} Of the two n-like symbols with left-facing hooks, the one who has it further to the left is also the one... <span class=""divider"">-&gt;</span> {{c1::further front}} Of the four pharyngeal/glottal voiced/unvoiced fricative symbols, which is the only one not based on h? <span class=""divider"">-&gt;</span> {{c1::Voiced pharyngeal fricative}} Name a portguese word in which the character for the palatal voiceless fricative is also contained! <span class=""divider"">-&gt;</span> {{c1::seleçao}} In how many aspects do barred consonants differ from their non-barred counterparts? <span class=""divider"">-&gt;</span> {{c1::exactly one (so voicedness, place, OR manner)}} For what manner and voicing are g/G only ever used in the IPA? <span class=""divider"">-&gt;</span> {{c1::voiced plosives}} For what kind of sounds is the l/L only ever used? <span class=""divider"">-&gt;</span> {{c1::lateral ones}} All three sounds (including the one that is actually a turned f) based in their IPA symbols off the j are ___ and ___ <span class=""divider"">-&gt;</span> {{c1::palatal and voiced}} All IPA symbols based of a modified version of the glottal stop are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::pharyngeal(epiglottal) or glottal}} <span class=""hide-5"">sounds written with a variant of the small h in the IPA all have what </span><b>manner</b> of articulation? <span class=""divider"">-&gt;</span> {{c1::fricative}} Why is  ɽ (voiced retroflex tap or flap) an exception, in how we would deduce what the alveolar voiced tap or flap is based on it? <span class=""divider"">-&gt;</span> {{c1::Since it's ɾ, but we would expect it to be r}} Which one of the nasals is the one that is spelled with an n, but has no hook? <span class=""divider"">-&gt;</span> {{c1::voiced alveolar etc. nasal}} What reason might one give why the voiced alveolar trill symbol is the one with two 'heads'? <span class=""divider"">-&gt;</span> {{c1::since the tongue hits multiple times}} What number does the voiced postalveolar fricative look kinda similar to? <span class=""divider"">-&gt;</span> {{c1::3}} What might one say the reason is for voiced alveolar etc. tap being the one with one head? <span class=""divider"">-&gt;</span> {{c1::since the tounge hits only once}} What latin letters are all nasal consonant symbols of the IPA similar to? <span class=""divider"">-&gt;</span> {{c1::m or n}} What latin letter are all voiced bilabial sounds besides the nasal similar to? <span class=""divider"">-&gt;</span> {{c1::b/B}} What kind of symbol are 3/5 of the IPA trill letters based on? <span class=""divider"">-&gt;</span> {{c1::smallcaps letters}} What kana does the voiced postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::ろ}} What is/are the exceptions for the ipa symbols of retroflex consonants being based on alveolar ones? <span class=""divider"">-&gt;</span> {{c1::ɽ (voiced retroflex tap or flap)}} What is the IPA voiced labiodental fricative v mostly spelled as in German? <span class=""divider"">-&gt;</span> {{c1::W}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> Wächter, wachs etc. </div> </div> What is the IPA voiced labiodental fricative v mostly spelled as in English? <span class=""divider"">-&gt;</span> {{c1::v}} What is the IPA symbol for the sound that crosslinguistically is often spelled f? <span class=""divider"">-&gt;</span> {{c1::f}} What does the voiced labiodental approximant look kinda similar to (which is also labiodental and voiced)? <span class=""divider"">-&gt;</span> {{c1::the labiodental fricative v}} What do the IPA spellings of the voiced alveolar etc. trill and tap or flap have in common, as regards their Orientation? <span class=""divider"">-&gt;</span> {{c1::they are both right-side up}} What do all symbols for retroflex consonants share in the ipa? <span class=""divider"">-&gt;</span> {{c1::A right-facing bottom hook such as ɭ or ʈ}} What do all IPA spellings of lateral approximants have in common? <span class=""divider"">-&gt;</span> {{c1::They are all spelled with representations of l (english or greek representations)}} What are both bilabilal fricatives written with in the IPA? <span class=""divider"">-&gt;</span> {{c1::Greek letters}} What IPA symbol is the voiced labiodental nasal ɱ based off of? <span class=""divider"">-&gt;</span> {{c1::the voiced bilabial nasal m}} What IPA symbol does the first sound of ふ correspond to? <span class=""divider"">-&gt;</span> {{c1::ɸ}} To which IPA symbol does written letter 'p' in english generally correspond? <span class=""divider"">-&gt;</span> {{c1::also p (voiceless bilabial plosive)}} The voiceless &amp; voiced alveolar fricative IPA symbols are both... <span class=""divider"">-&gt;</span> {{c1::latin letters}} The voiced labiodental nasal uses the same symbol as the voiced bilabial nasal, but with... <span class=""divider"">-&gt;</span> {{c1::a leftwards hook<br><br>}} The symbols for the labiodental fricatives are both? <span class=""divider"">-&gt;</span> {{c1::Latin leters}} The letters used for the retroflex sounds are the same as the ones used for which sounds? <span class=""divider"">-&gt;</span> {{c1::The alveolar ones}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> with the slight exception of ɽ </div> </div> The IPA spelling of the voiced alveolar etc. lateral fricative is like an l and which IPA sound glued together? <span class=""divider"">-&gt;</span> {{c1::Like an l-sound and the voiced postalveolar fricative ʒ}} The IPA spelling of both the voiceless and the voiced alveolar etc. lateral fricative contain in their 'design' what letter? <span class=""divider"">-&gt;</span> {{c1::l}} Since the voiced&nbsp; alveolar etc. approximant ɹ is turned 180°, the retroflex version... (related to orientation) <span class=""divider"">-&gt;</span> {{c1::is also turned 180°}} IPA symbols including variants of the small l are limited to what place? <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar and retroflex sounds}} IPA symbols for the nasals which use the letter m as their basis have which or which place of articulation? <span class=""divider"">-&gt;</span> {{c1::bilabial and labiodental}} How many retroflex consonant symbols have the right-facing hook? <span class=""divider"">-&gt;</span> {{c1::All of them}} How many of the letters for trills in the IPA are smallcaps letters? <span class=""divider"">-&gt;</span> {{c1::3/5}} How does the symbol of the voiced alveolar approximant relate to the symbol for the voiced alveolar trill r? <span class=""divider"">-&gt;</span> {{c1::it's the symbol for the alveolar trill, but turned 180°:&nbsp; ɹ        }} From what language' script is the symbol for the voiced dental fricative derived? <span class=""divider"">-&gt;</span> {{c1::old english / icelandic}} For both the sets of alveolar and postalveolar fricatives, the voiceless sound is spelled (in the IPA) more ___-like and the voiced sound is more ___-like <span class=""divider"">-&gt;</span> {{c1::the voiceless sound is spelled (in the IPA) more s-like and the voiced sound is more z-like}} Besides the voiced alveolar trill r, what other trill does not feature a smallcaps IPA letter? <span class=""divider"">-&gt;</span> {{c1::The voiced pharyngeal/epiglottal trill ʢ}} All sounds spelled with some variant of the small r are either ___ or ___ <span class=""divider"">-&gt;</span> {{c1::dental/alveolar/postalveolar or retroflex}} <div>What greek letter does the voiceless dental fricative use?</div><span class=""divider"">-&gt;</span> {{c1::theta}} <div>The voiceless alveolar lateral fricative is an l with a...</div><span class=""divider"">-&gt;</span> {{c1::little curl}} ((h:1;::<img src=""sm_Suzuki_Violin_No.580.jpg"">))What part of an instrument does the voiceless postalveolar fricative look similar to? <span class=""divider"">-&gt;</span> {{c1::Those s-like things on a violin (called f-holes)}} What symbols are the retroflex right facing lower hooks generally attached to? <span class=""divider"">-&gt;</span> {{c1::The alveolar consonants}} What is the distinctive feature that most epiglottal=pharyngeal consonant symbols share? <span class=""divider"">-&gt;</span> {{c1::a horizontal bar through}}<table> <tbody class=""yesno""> <tr> <th>Place (active) →</th> <th colspan=""4"" scope=""col"">Labial</th> <th colspan=""8"" scope=""col"">Coronal</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Dorsal (rarely coronal)</th> <th colspan=""2"" scope=""col"">Dorsal</th> <th colspan=""2"" scope=""col"">Radical/​Ary­epiglottal</th> <th colspan=""2"" scope=""col"">Ary­epiglottal</th> </tr> <tr> <th>Place (active + passive) →</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Bi­labial</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Labio­dental</th> <th colspan=""6"" rowspan=""2"" scope=""col"">Dental/​Alveolar/​Post­alveolar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Retro­flex</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Palatal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Velar</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Uvular</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Pharyn­geal/​epi­glottal</th> <th colspan=""2"" rowspan=""2"" scope=""col"">Glottal</th> </tr>   <tr><th>Manner ↓</th>   </tr> <tr> <th scope=""row"">Plosive</th> <td>{{c1::p}}</td> <td>{{c2::b}}</td> <td></td> <td></td> <td colspan=""3"">{{c3::t}}</td> <td colspan=""3"">{{c4::d}}</td> <td>{{c5::ʈ}}</td> <td>{{c6::ɖ}}</td> <td>{{c7::c}}</td> <td>{{c8::ɟ}}</td> <td>{{c9::k}}</td> <td>{{c10::ɡ}}</td> <td>{{c11::q}}</td> <td>{{c12::ɢ}}</td> <td>{{c13::ʡ}}</td> <td class=""no""></td> <td>{{c14::ʔ}}</td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Nasal</th> <td></td> <td>{{c15::m}}</td> <td></td> <td>{{c16::ɱ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c17::n}}</td> <td></td> <td>{{c18::ɳ}}</td> <td></td> <td>{{c19::ɲ}}</td> <td></td> <td>{{c20::ŋ}}</td> <td></td> <td>{{c21::ɴ}}</td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Trill</th> <td></td> <td>{{c22::ʙ}}</td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c23::r}}</td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td>{{c24::ʀ}}</td> <td>{{c25::ʜ}}</td> <td>{{c26::ʢ}}</td> <td class=""no""></td> <td class=""no""></td> </tr> <tr> <th scope=""row"">Tap/flap</th> <td></td> <td></td> <td></td> <td></td> <td colspan=""3""></td> <td colspan=""3"">{{c27::ɾ}}</td> <td></td> <td>{{c28::ɽ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral approximant</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3""></td> <td colspan=""3"">{{c58::l}}</td> <td></td> <td>{{c59::ɭ}}</td> <td></td> <td>{{c60::ʎ}}</td> <td></td> <td>{{c61::ʟ}}</td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Lateral fricative</th> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td colspan=""3"">{{c51::ɬ}}</td> <td colspan=""3"">{{c52::ɮ}}</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> <td class=""no""></td> </tr>   <tr> <th scope=""row"">Approximant</th> <td></td> <td></td> <td></td> <td>{{c53::ʋ}}</td> <td colspan=""3""></td> <td colspan=""3"">{{c54::ɹ}}</td> <td>{{c55::ɻ}}</td> <td></td> <td>{{c56::j}}</td> <td></td> <td>{{c57::ɰ}}</td> <td></td> <td></td> <td></td> <td class=""no""></td> <td class=""no""></td> <td></td> </tr>   <tr><td colspan=""5"" class=""no""></td>       <th colspan=""2"">Dental</th> <th colspan=""2"">Alveolar</th> <th colspan=""2"">Post­alveolar</th>   </tr>   <tr> <th scope=""row"">Fricative</th> <td>{{c29::ɸ}}</td> <td>{{c30::β}}</td> <td>{{c31::f}}</td> <td>{{c32::v}}</td> <td>{{c33::θ}}</td> <td>{{c34::ð}}</td> <td>{{c35::s}}</td> <td>{{c36::z}}</td> <td>{{c37::ʃ}}</td> <td>{{c38::ʒ}}</td> <td>{{c39::ʂ}}</td> <td>{{c40::ʐ}}</td> <td>{{c41::ç}}</td> <td>{{c42::ʝ}}</td> <td>{{c43::x}}</td> <td>{{c44::ɣ}}</td> <td>{{c45::χ}}</td> <td>{{c46::ʁ}}</td> <td>{{c47::ħ}}</td> <td>{{c48::ʕ}}</td> <td>{{c49::h}}</td> <td>{{c50::ɦ}}</td> </tr>  </tbody></table> "	acad::ling::phon-both
"Which two features do both sounds spelled with the IPA with (a variant of) ɑ share? <span class=""divider"">-&gt;</span> {{c1::open and back}}    What feature do all vowels share that are written with ligatures in IPA?  They are all front vowels Also either open, near open or open mid What do the IPA vowels written with an i/ɪ all have in common, as it relates to height?  They are somewhere between close and near-close What do the IPA vowels written with an i/ɪ all have in common, as it relates to front-ness  They are somewhere between front and central (both inclusive) What do the IPA symbols for the rounded close-mid and open-mid central vowels have in common?  They are both 'closed' on the outside What do all IPA vowels written with a symbol based of an o (barred or not) (not ligatures) have in common? (two things)  they are all three close-mid and rounded The IPA symbol for the close central unrounded vowel is what, but barred?  close front unrounded The IPA symbol for the close central rounded vowel is what, but barred?  close back rounded How is the Symbol of the rounded version of the central open-mid vowel related to the unrounded version's symbol?  it's the same mirrored epsilon, but connected to form a pretzel How does the IPA symbol for the close central unrounded vowel relate to the IPA symbol for the close front unrounded vowel?  The same, just barred How does the IPA symbol for the close central rounded vowel relate to the IPA symbol for the close back rounded vowel?  The same, just barred How are the close&amp;open-mid front unrounded and close&amp;open-mid central unrounded vowels related to each other?  They are mirrored along the y-axis From the unrounded close-mid central vowel's symbol, how could you generate the rounded version's symbol?  merely close the 'gap' of the mirrored e For the close-mid&amp;open-mid front unrounded and close-mid&amp;open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the right?  the front ones For the close&amp;open-mid front unrounded and close&amp;open-mid central unrounded vowels, which are mirrored, the <b>IPA symbols</b> of which ones are open to the left?  the central ones For the IPA vowel chart, the unroundedversions of vowels are written where (as relates to the pair)?  on the left of the pair For the IPA vowel chart, the rounded versions of vowels are written where (as relates to the pair)?  on the right of the pair What design feature do the IPA symbols of both the unrounded and rounded open-mid back vowel share?  They are rotated 180° latin letters"	acad::ling::phon-both
"how do we match chat/foo/bar and picts/painting/influences/foo/bar with the same rule in a gitignore? <span class=""divider"">-></span> {{c1::**/foo/bar}} how do we match a/x/y/b, a/b, a/x/b with the same rule in a gitignore? <span class=""divider"">-></span> {{c1::a/**/b}} Within gitignore files, what do * and ? not match? <span class=""divider"">-></span> {{c1::The directory separator /}} Within a gitignore, what does '/' do? <span class=""divider"">-></span> {{c1::act as the directory separator}} Within a gitignore,  for foo/bar/moo/, how do I exclude moo from being tracked? <span class=""divider"">-></span> {{c1::moo (or moo/)}} Within a gitignore,  for foo/bar/moo/ (relative to the .gitignore directory), how do I exclude bar/moo? <span class=""divider"">-></span> {{c1::foo/bar/moo}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > or **/bar/moo, if you want to exclude it anywhere </div> </div> Why is there no difference between doc/frotz and /doc/frotz in a gitignore? <span class=""divider"">-></span> {{c1::Since the middle slash already makes it relative to the current directory, the leading shlash has no effect}} When using ""a/**/b"",  how many directories can be between a and b? <span class=""divider"">-></span> {{c1::Infinitely many}} When does a gitignore pattern match only relative to the current directory (the one the .gitignore is in)? <span class=""divider"">-></span> {{c1::if there is a slash anywere but the end (that is, in the beginning or middle)}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > e.g. /foobar or foo/bar or foo/bar/moo/ </div> </div> When does a gitignore pattern match at any depth? <span class=""divider"">-></span> {{c1::If there are no / or only at the end&nbsp;}}<br/><div class=""sub""> <div class=""sub all-b""> also ** patterns ofc </div><div class=""sub c1-b c2-f"" > e.g. foobar or foobar/ </div> </div> In a gitignore, every pattern prefixed with a ! ... <span class=""divider"">-></span> {{c1::marks things to reinclude}} In a gitignore, every pattern not prefixed with a ! ... <span class=""divider"">-></span> {{c1::marks things to exclude}} <div class='c2-f'> When will a gitignore pattern match? </div><div class='c1-f'> If this is true, what will the gitignore pattern match? </div><br/>{{c1::only directories}}  <span class=""divider"">&lt;-&gt;</span> {{c2::there is a '/' at the end}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > e.g. foo/bar/ or foobar/ </div> </div> <div class='c2-f'> When will a gitignore pattern match? </div><div class='c1-f'> If this is true, what will the gitignore pattern match? </div><br/>{{c1::both directories and files}}  <span class=""divider"">&lt;-&gt;</span> {{c2::there is no '/' at the end}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > e.g. foo/bar or foobar </div> </div> <div class='c2-f'> What does this match, in the cases /**/ or **/ or /**? </div><div class='c1-f'> how do I match this </div><br/>{{c1::**}}  <span class=""divider"">&lt;-&gt;</span> {{c2::0 to n directories in a path}} <div class='c1-f'> Why does this match any directory foo with a subdir bar? </div><br/>**/foo/bar <span class=""divider"">-></span> {{c1::Because the **/ says 'as deep as you want'}} <div class='c1-f'> Whithin a gitignore, what does this tell us? </div><br/><pre><code data-codetype=""text"">\!important!.txt</code></pre> <span class=""divider"">-></span> {{c1::exclude !important!.txt}} <div class='c1-f'> Whithin a gitignore, what does this tell us? </div><br/><pre><code data-codetype=""text"">!important!.txt</code></pre> <span class=""divider"">-></span> {{c1::reinclude important!.txt}} <div class='c1-f'> Which files/directories would be included in a commit? </div><br/><pre><code data-codetype=""text"">foobar foobar.txt testf testf.txt</code></pre> <pre><code data-codetype=""text""># .gitignore foobar</code></pre> <span class=""divider"">-></span> {{c1::testf, testf.txt}} <div class='c1-f'> Which files would be included in a commit? </div><br/><pre><code data-codetype=""text"">foobar foobar.txt testf testf.txt</code></pre> <pre><code data-codetype=""text""># .gitignore foobar/</code></pre> <span class=""divider"">-></span> {{c1::testf, testf.txt, foobar.txt}} <div class='c1-f'> What does this match? </div><br/>abc/** <span class=""divider"">-></span> {{c1::everything within the directory abc}} <div class='c1-f'> What does this match in a gitignore? </div><div class='c2-f'> How do we match this in a gitignore? </div><br/>/hello.* <span class=""divider"">-></span> {{c1::any hello-named file in this directory}} Within a gitignore, how do you escape special characters like # or !? <span class=""divider"">-></span> {{c1::\, that is \# or \! etc.}} When does !something in a gitignore to reinclude some file have no effect? <span class=""divider"">-></span> {{c1::When that file's parent directory has been excluded}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > Git doesn’t list excluded directories for performance reasons </div> </div> What does a blank line match in a .gitignore? <span class=""divider"">-></span> {{c1::nothing}} What are blank lines meant to be used for within a gitignore? <span class=""divider"">-></span> {{c1::formatting/readability}} <div class='c1-f'> What does the first line match in this gitignore? </div><br/><pre><code data-codetype=""text""># ignore objects and archives, anywhere in the tree. *.[oa]</code></pre> <span class=""divider"">-></span> {{c1::nothing, it's a comment}}"	acad::git
"Wie sind Prämissen und Konklusion verknüpft? <span class=""divider"">-></span> {{c1::Die Prämissen beweisen die (/garantieren die Wahrheit der) Konklusion}}"	acad::log
"<div class='c1-f'> Welche art ding ist das? </div><br/>Wo ist der Unterschied zwischen einem Argument und einer Erklärung? <span class=""divider"">-></span> {{c1::Das Argument will einen Sachverhalt beweisen, die Erklärung geht von der Wahrheit dieses Sachverhalts schon aus}} Ich spreche fließend Englisch, da ich einige Jahre in<br>London gelebt habe. <span class=""divider"">-></span> {{c1::Eine Erklärung (kein Argument, nimmt die wahrheit des eng sprechen schon an)}} Die Sonne scheint auf- und unterzugehen, weil die Erde sich um sich selbst dreht <span class=""divider"">-></span> {{c1::Eine Erklärung}} Auf die Wahrheit von was verlassen wir uns bei einer Erklärung? <span class=""divider"">-></span> {{c1::die Warheit der 'Konklusion' (des Sachverhaltes = des zu Erklärenden)}}"	acad::log
"What are most ad hominem arguments, as regards their validity? <span class=""divider"">-></span> {{c1::invalid/fallacious}}"	acad::log
"In ad hominem arguments (argumentum ad hominem), in general, what is attacked? <span class=""divider"">-></span> {{c1::The opponent (rather than the opponents arguments)}}"	acad::log
"An argument where speaker attacks the character, motive, or some other attribute of the person making an argument rather than attacking the substance of the argument itself is called? <span class=""divider"">-></span> {{c1::Argumentum ad hominem}}"	acad::log
"The argument/fallacy that discredits the argument of an oponent as hypocritical is called... <span class=""divider"">-></span> {{c1::tu quoque}}"	acad::log
"In a tu quoque, broadly, what is criticised? <span class=""divider"">-></span> {{c1::The hypocrisy of a speaker}}"	acad::log
"Terms of logic in english and german<br/><table>   <thead>     <tr>       <th>en</th>       <th>de</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c1-cloze"">valid</span></td>       <td><span class=""c2-cloze"">gültig</span></td>     </tr>         <tr>       <td><span class=""c3-cloze"">sound</span></td>       <td><span class=""c4-cloze"">schlüssig</span></td>     </tr>         <tr>       <td><span class=""c5-cloze"">if and only if</span></td>       <td><span class=""c6-cloze"">genau dann, wenn</span></td>     </tr>         <tr>       <td><span class=""c7-cloze"">iff.</span></td>       <td><span class=""c8-cloze"">gdw.</span></td>     </tr>             <tr>       <td><span class=""c7-cloze"">singular term</span></td>       <td><span class=""c8-cloze"">singulärer term</span></td>     </tr>                 <tr>       <td><span class=""c7-cloze"">logical connective</span></td>       <td><span class=""c8-cloze"">junktor</span></td>     </tr>        </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::log
"An argument is <b>what</b>&nbsp;iff it is impossible for the premises to be true and the conclusion to be false? <span class=""divider"">-></span> {{c1::valid}}"	acad::log
"Logic abbreviations<br/><table>   <thead>     <tr>       <th></th>       <th></th>       <th></th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c1-cloze"">iff.</span></td>       <td><span class=""c2-cloze"">if and only if</span></td>     </tr>     <tr>       <td><span class=""c3-cloze"">gdw.</span></td>       <td><span class=""c4-cloze"">genau dann, wenn</span></td>     </tr>     <tr>       <td><span class=""c5-cloze"">wff</span></td>       <td><span class=""c6-cloze"">well-formed formula</span></td>     </tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}</span>"	acad::log
"<div class='c2-f'> What is this read as? </div><div class='c1-f'> How is this written in short? </div><br/>{{c1::gdw.}}  <span class=""divider"">&lt;-&gt;</span> {{c2::genau dann, wenn}}"	acad::log
"<div class=""cloze-group hide-if-inactive""><p>If an <span class=""c8-cloze"">argument</span> is <span class=""c2-cloze"">valid</span>, <span class=""c3-cloze"">the conclusion cannot be false</span> <span class=""c1-cloze"">if the premises are true</span>.</p> <p>For an <span class=""c7-cloze"">argument</span> to be <span class=""c4-cloze"">sound</span>, it must first <span class=""c5-cloze"">be valid</span>, in addition, <span class=""c6-cloze"">the premises must be true</span>.</p>   <p>An <span class=""c9-cloze"">argument</span> consists of <span class=""c10-cloze"">premises</span> and <span class=""c11-cloze"">conclusions</span>.</p>   <p>In an <span class=""c15-cloze"">argument</span>, the <span class=""c12-cloze"">truth of the premises</span> intends to <span class=""c13-cloze"">determine</span> <span class=""c14-cloze"">the truth of the conclusion</span>. </p>   <p>In a <span class=""c16-cloze"">deductive argument</span>, the t<span class=""c17-cloze"">ruth of the premises</span> <span class=""c18-cloze""><b>guarantees</b></span>&nbsp;<span class=""c19-cloze"">the truth of the conclusion</span>.</p> <p>An <span class=""c25-cloze"">argument</span> is the claim that given <span class=""c20-cloze"">every member of</span> <span class=""c21-cloze"">a certain premise set</span> <span class=""c22-cloze"">of formulae</span> is <span class=""c23-cloze"">true</span>, <span class=""c24-cloze"">so is the conclusion formula</span>.</p></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}</span>"	acad::log
"<div class='c1-f'> Wie gültig ist dieses Argument? </div><br/>Wovon sind formal gültige Argumente unabhängig? <span class=""divider"">-></span> {{c1::unabhängig von ihrem Inhalt}} Wenn in einem Argument die prämissen falsch sind, kann es was sein, aber nicht was? <span class=""divider"">-></span> {{c1::Gültig, aber nicht schlüssig}} Wenn ein argument allein aufgrund seiner Form gültig ist, heißt es wie? <span class=""divider"">-></span> {{c1::formal gültig}} Was muss ein formal schlüssiges argument sein, außer wahre Prämissen zu haben? <span class=""divider"">-></span> {{c1::formal gültig sein}} Ein argument ist schlüssig, gdw. seine Prämissen wahr sind und zusätzlich? <span class=""divider"">-></span> {{c1::es gültig ist}} Ein argument ist schlüssig, gdw. es gültig ist und zusätzlich? <span class=""divider"">-></span> {{c1::seine Prämissen wahr sind}} Ein argument das gültig ist und dessen Prämissen wahr sind, heißt wie? <span class=""divider"">-></span> {{c1::schlüssig}} Allein aufgrund von was sind fomal gültige argumente gültig? <span class=""divider"">-></span> {{c1::Allein aufgrund ihrer form}} A valid argument with true premises is called? <span class=""divider"">-></span> {{c1::sound}} <pre><code>(1) a ist F. Also: (2) a ist nicht G.</code></pre> <span class=""divider"">-></span> {{c1::Gültig, aber nicht formal gültig}} <pre><code data-codetype=""text"">(1) P. (2) Wenn P, dann Q. Also: (3) Q.</code></pre> <span class=""divider"">-></span> {{c1::Formal gültig}}"	acad::log
"<div class='c2-f'> What does this mean, in natural language? </div><div class='c1-f'> How is this often written in logic? </div><br/>{{c1::¬p}}  <span class=""divider"">&lt;-&gt;</span> {{c2::not p}}"	acad::log
"<div class='c1-f'> Was für ein satz ist dieser Satz? </div> <div class='c1-f'> Was für eine art satz ist das? </div><br/>Mit welchem Symbol wird das Konditional häufig ausgedrückt? <span class=""divider"">-></span> {{c1::→}} Welche Form haben Konditional(sätze) in der natürlichen sprache? (anhand von P und Q) <span class=""divider"">-></span> {{c1::Wenn P, dann Q}} Wenn P, dann Q <span class=""divider"">-></span> {{c1::Ein Konditional(satz)}} Wenn Sie Abitur haben, dürfen Sie studieren. <span class=""divider"">-></span> {{c1::Ein Konditional(satz)}}<br/><div class=""sub""> <div class=""sub c1-f"" > eckig </div> </div>"	acad::log
"<div class='c1-f'> What is P here? </div> <div class='c1-f'> What is Q here? </div> <div class='c1-f'> Was ist hier das Antezedens? </div> <div class='c1-f'> Was ist hier das Konsequens? </div><br/>If P, then Q. <span class=""divider"">-></span> {{c1::The antecedent}} If P, then Q. <span class=""divider"">-></span> {{c1::the consequent}} Wenn P, dann Q. <span class=""divider"">-></span> {{c1::P}} Wenn P, dann Q. <span class=""divider"">-></span> {{c1::Q}}"	acad::log
"<div class='c2-f'> Auf Englisch? </div><div class='c1-f'> Auf Deutsch? </div><br/>{{c1::Notwendige Bedingung}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Necessary condition}} {{c1::Hinreichende Bedingung}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sufficient condition}}"	acad::log
"In einem Konditional verhält sich das Antezedens wie zum Konsequenz (Ist welche Art von Bedingung für)? <span class=""divider"">-></span> {{c1::Das antezedens ist hinreichende Bedingung für das Konsequens}}"	acad::log
"<div class=""cloze-group hide-if-inactive c1-5-unhide""><span class=""c1-cloze"">Modus Ponens</span> is a <span class=""c2-cloze"">rule of inference</span> with the following form: <pre><code data-codetype=""text""><span class=""c3-cloze"">Wenn P, dann Q.</span> <span class=""c4-cloze"">P.</span> <hr><span class=""c5-cloze"">∴ Q.</span></code></pre> </div> <div class=""cloze-group hide-if-inactive cloze-group-children hide-if-inactive-children""> Examples of <span class=""c18-cloze all-unhide"">modus ponens</span>: <pre><code data-codetype=""text""><span class=""c7-cloze"">Es ist 11h.</span> <span class=""c6-cloze"">Wenn es 11h ist, dauert die Vorlesung noch 45 Minuten.</span> <hr><span class=""c8-cloze"">Die Vorlesung dauert noch 45 Minuten.</span></code></pre> <pre><code data-codetype=""text""><span class=""c9-cloze"">Wenn Lina zur Party geht, dann geht Tina nicht zur Party.</span> <span class=""c10-cloze"">Lina geht zur Party.</span> <hr><span class=""c11-cloze"">Tina geht nicht zur Party.</span></code></pre> <pre><code data-codetype=""text""><span class=""c12-cloze"">Wenn ich Kaffee trinke, brauche ich Zucker.</span> <span class=""c13-cloze"">Ich trinke Kaffee.</span> ∴ <span class=""c14-cloze"">brauche ich zucker</span></code></pre> <pre><code data-codetype=""text""><span class=""c15-cloze"">Wenn es regnet, wird die Straße nass.</span> <span class=""c16-cloze"">Es regnet.</span> ∴ <span class=""c17-cloze"">wird die Straße nass</span></code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}</span>"	acad::log
"In einem Konditional verhält sich das Konsequenz wie zum Antezedens (Ist welche Art von Bedingung für)? <span class=""divider"">-></span> {{c1::Das Konsequenz ist notwendige Bedingung für das Antezedens}}"	acad::log
"<div class=""cloze-group hide-if-inactive""><span class=""c1-cloze"">Modus Tollens</span> is a <span class=""c2-cloze"">valid</span> <span class=""c3-cloze"">rule of inference</span> with the following logical form<pre><code data-codetype=""text""><span class=""c4-cloze"">Wenn P, dann Q.</span> <span class=""c5-cloze"">¬Q.</span> <hr><span class=""c6-cloze"">¬P.</span></code></pre> </div> <div class=""cloze-group hide-if-inactive"">Examples of modus tollens:  <pre><code data-codetype=""text""><span class=""c7-cloze"">Wenn es heute schneit, dann können Schweine fliegen.</span> <span class=""c1-cloze"">Schweine können nicht fliegen.</span><hr><span class=""c8-cloze"">Es schneit heute nicht.</span></code></pre> <pre><code data-codetype=""text""><span class=""c9-cloze"">Wenn wir freien Willen haben, dann können wir immer anders handeln.</span> <span class=""c10-cloze"">Wir können nicht immer anders handeln.</span> ∴ <span class=""c1-cloze"">haben wir nicht freien Willen</span> </code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}</span>"	acad::log
"Kontraposition<br/><pre><code data-codetype=""text"">Wenn ¬Q, dann ¬P. <hr>{{c1::Wenn P, dann Q.}}</code></pre>"	acad::log
"Der satz ""Wenn P, dann Q"" kann (ohne negierungen zu nutzen) zu welchem satz umgeformt werden? <span class=""divider"">-></span> {{c1::""Nur wenn Q, dann P""}}"	acad::log
"Der satz ""Nur wenn Q, dann P"" kann (ohne negierungen zu nutzen) zu welchem satz umgeformt werden? <span class=""divider"">-></span> {{c1::Wenn P, dann Q}}"	acad::log
"Fehlschluss: Bejahen des Konsequens<br/><pre><code data-codetype=""text"">Wenn P, dann Q. Q.<hr>{{c1::Also P.}}</code></pre>"	acad::log
"Fehlschluss: Verneinen des Antezedens<br/><pre><code data-codetype=""text"">Wenn P, dann Q. Nicht P.<hr>{{c1::(↯) Also nicht Q.}}</code></pre>"	acad::log
"Wie verhalten sich formal gültige argumente zu gültigen argumenten, re: mengenlehre? <span class=""divider"">-></span> {{c1::Formal gültige argumente sind eine teilmenge aller gültigen Argumente}} Welche zustände können sätze im kontext von argumenten nicht haben? <span class=""divider"">-></span> {{c1::Gültig/Ungültig}} Welche zustände können sätze im kontext von argumenten haben? <span class=""divider"">-></span> {{c1::Wahr oder falsch}} Welche zustände können argumente haben, außer schlüssig oder nicht schlüssig? <span class=""divider"">-></span> {{c1::Gültig oder ungültig}} Welche zustände können argumente haben, außer gültig oder ungültig? <span class=""divider"">-></span> {{c1::schlüssig oder nicht schlüssig}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > und auch nicht schlüssig/ nicht schlüssig </div> </div>"	acad::log
"<div class='c2-f'> In english? </div><div class='c1-f'> In German </div> Kettenschluss<br/>{{c1::Kettenschluss}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Polysyllogism}} <pre><code data-codetype=""text"">Wenn P, dann Q. Wenn Q, dann R.<hr>{{c1::Wenn P, dann R.}}</code></pre><br/><div class=""sub""> <div class=""sub c2-b c1-f"" > also often sorites </div> </div>"	acad::log
"Logical connectives connect one or more formulals into a new formula.  Was sind ""Wenn ..., dann ..."", ""und"", ""oder"", ""nicht""? <span class=""divider"">-&gt;</span> {{c1::Junktoren}}"	acad::log
"¬P ist die <b>was</b>&nbsp;von P? <span class=""divider"">-&gt;</span> {{c1::Die Negation von P}}<br><img src=""sm_tmpcg1be8rx.jpg""><img src=""sm_tmpyhsq8e6j.png"">"	acad::log
"Aus ¬¬P folgt was? <span class=""divider"">-></span> {{c1::P}} <pre><code data-codetype=""text"">P<hr>{{c1::¬}}¬P</code></pre>"	acad::log
"<div class='c1-f'> Was sind 'A' sowie&nbsp; 'B' hier? </div> <div class='c1-f'> Wie heißt diese Verknüpfung? </div><br/>A und B <span class=""divider"">-></span> {{c1::Konjunkte}} A und B <span class=""divider"">-></span> {{c1::Konjunktion}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > ggf auch nur das wort </div> </div>"	acad::log
"Und-einführung<br/><pre><code data-codetype=""text"">P und Q.<hr>{{c1::Q.}}</code></pre><br/><div class=""sub""> <div class=""sub c1-b c2-f"" > oder natürlich auch P </div> </div>"	acad::log
"<div class='c1-f'> Was sind P sowie Q hier? </div> <div class='c1-f'> Was ist diese aussage (oder das ""oder"")? </div><br/>P oder Q. <span class=""divider"">-></span> {{c1::Disjunkte}} P oder Q. <span class=""divider"">-></span> {{c1::Eine Disjunktion}}"	acad::log
"Oder-Einführung<br/><pre><code data-codetype=""text"">Q.<hr>{{c1::P oder Q.}}</code></pre>"	acad::log
"<div class='c2-f'> Symbol für... </div><div class='c1-f'> Symbol für... </div> <div class='c2-f'> Symbol für... </div><div class='c1-f'> Symbol für... </div> <div class='c2-f'> (rundes) Symbol für... </div><div class='c1-f'> Symbol für... </div><br/>{{c1::und}}  <span class=""divider"">&lt;-&gt;</span> {{c2::∧}} {{c1::oder}}  <span class=""divider"">&lt;-&gt;</span> {{c2::∨}} {{c1::Wenn, dann}}  <span class=""divider"">&lt;-&gt;</span> {{c2::⊃}}<br/><div class=""sub""> <div class=""sub all-b""> yes, this does look like the superset operator </div><div class=""sub c2-f c1-b"" > Material conditional </div><div class=""sub c2-b c1-f"" > not the one related to sets </div> </div>"	acad::log
"<div class='c1-f'> Wie heißt dieser schluss? </div><br/><pre><code data-codetype=""text"">P ∨ Q. ¬P.<hr>Q.</code></pre> <span class=""divider"">-></span> {{c1::Disjunktiver Syllogismus}}"	acad::log
"Disjunktiver Syllogismus<br/><pre><code data-codetype=""text"">{{c1::P ∨ Q.}} ¬P.<hr>Q.</code></pre>"	acad::log
"Disjunktiver Syllogismus<br/><pre><code data-codetype=""text"">P ∨ Q. {{c1::¬P.}}<hr>Q.</code></pre>"	acad::log
"Disjunktiver Syllogismus<br/><pre><code data-codetype=""text"">P ∨ Q. ¬P.<hr>{{c1::Q.}}</code></pre>"	acad::log
"Klassisches Dilemma<br/><div class=""cloze-group-children hide-if-inactive-children"">   <p><span class=""c24-cloze"">Dilemma</span> (EN/DE), <span class=""c24-cloze"">klassisches dilemma</span> (DE only), in the logical sense is a <span class=""c26-cloze"">valid</span> <span class=""c25-cloze"">inference rule (or set of inference rules, to be precise).</span></p> <div>   The <span class=""c18-cloze c19-scr"">constructive</span> (or <span class=""c19-cloze c18-scr"">positive</span>) <span class=""c20-cloze"">dilemma</span> is:  <pre><code data-codetype=""text""><span class=""c1-cloze"">P∨Q.</span> <span class=""c2-cloze"">P→R.</span> <span class=""c3-cloze"">Q→R.</span><hr><span class=""c4-cloze"">R.</span></code></pre> </div> <div>   The <span class=""c21-cloze c20-scr"">destructive</span> (or <span class=""c22-cloze c21-scr"">negative</span>) <span class=""c23-cloze"">dilemma</span> is: <pre><code data-codetype=""text""><span class=""c27-cloze"">P→Q.</span> <span class=""c28-cloze"">P→R.</span> <span class=""c29-cloze"">¬Q∨¬R.</span><hr><span class=""c30-cloze"">¬P.</span></code></pre> </div> <p>There are also variants <span class=""c13-cloze"">of both types of dilemmata</span> which have <span class=""c14-cloze"">the conditionals have different consequents</span> (e.g. <span class=""c15-cloze c14-scr"">P→R, Q→S</span>), and therefore <span class=""c16-cloze"">the conclusion is a disjunction of these different consequents</span> (<span class=""c17-cloze c16-scr"">∴ R ∨ S</span>)</p> <p>The <span class=""c5-cloze"">dilemma's</span> <span class=""c6-cloze"">two disjuncts</span> are known as <span class=""c7-cloze"">horns</span>.</p> <p>To <span class=""c8-cloze"">reject a dilemma</span>, one can <span class=""c9-cloze"">refute either of the horns</span>, or <span class=""c10-cloze"">refute the disjunction itself</span>. </p> <p><span class=""c11-cloze"">Refuting the disjunction of a dilemma</span> is known as <q><span class=""c12-cloze"">escaping (between) the horns of the dilemma</span></q></p></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}</span>"	acad::log
"<div class='c2-f'> Logical symbol for? </div><div class='c1-f'> Logical symbol for? </div> <div class='c2-f'> Allcaps logical name for? </div><div class='c1-f'> Allcaps logical name for? </div><br/>{{c1::⊕}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Exclusive or}} {{c1::Exclusive or}}  <span class=""divider"">&lt;-&gt;</span> {{c2::XOR}}"	acad::log
"<pre><code data-codetype=""text"">P⊕Q {{c1::P}}<hr>¬Q</code></pre>"	acad::log
"<pre><code data-codetype=""text"">P⊕Q P<hr>{{c1::¬Q}}</code></pre>"	acad::log
"Prämissen, die man ergänzen muss, um das Argument formal gültig zu machen, heißen wie? <span class=""divider"">-></span> {{c1::Implizite prämissen}}"	acad::log
"Prämissen, mit denen man was tun mus, um das Argument formal gültig zu machen, heißen implizite prämissen? <span class=""divider"">-></span> {{c1::Sie ergänzen}}"	acad::log
"Zu welchem Zweck ergänzt man implite prämissen? <span class=""divider"">-></span> {{c1::Um das Argument formal gültig zu machen}}"	acad::log
"The principle requiring interpreting any argument in the best, strongest possible interpretation is called what? <span class=""divider"">-></span> {{c1::Principle of charity}}"	acad::log
"In general, the principle of charity requires that we interpret arguments how? <span class=""divider"">-></span> {{c1::In the best, strongest way possible}}"	acad::log
"When does the principle of charity apply? <span class=""divider"">-></span> {{c1::When interpreting arguments etc.}}"	acad::log
"When is a tautology true? <span class=""divider"">-></span> {{c1::Always}}"	acad::log
"A sentence that is always true (due to its logical form, not dus to some weird contingency) is called what? <span class=""divider"">-></span> {{c1::a tautology}}"	acad::log
"A sentence that is always false due to the rules of logic is called what? <span class=""divider"">-></span> {{c1::a contradiction}}"	acad::log
"A contradiction takes on what truth value? <span class=""divider"">-></span> {{c1::False (always)}}"	acad::log
"<div class='c1-f'> What is this sentence? </div><br/>Es gibt intelligentes Leben auf anderen Planeten, oder es gibt kein intelligentes Leben auf anderen Planeten. <span class=""divider"">-></span> {{c1::a Tautology}}"	acad::log
"<div class='c1-f'> What is this sentence? </div><br/>Es gibt intelligentes Leben auf anderen Planeten, und es gibt kein intelligentes Leben auf anderen Planeten. <span class=""divider"">-></span> {{c1::A contradiction}}"	acad::log
"<div class='c1-f'> What law does this sentence express? </div><br/>P xor not P. <span class=""divider"">-></span> {{c1::The law of the excluded middle}}"	acad::log
"<div class='c2-f'> In eng? </div><div class='c1-f'> In de? </div><br/>{{c1::Satz vom ausgeschlossenen Dritten}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Law of the excluded middle}}<br/><div class=""sub""> <div class=""sub c2-f c1-b"" > selterner auch gesetz der ausgeschlossenen mitte </div> </div>"	acad::log
"Under the law of the excluded middle, how are P and not P related? <span class=""divider"">-></span> {{c1::Exactly one must be true}}"	acad::log
"Under the law of the excluded middle, either P is true, or... <span class=""divider"">-></span> {{c1::not P is true}}"	acad::log
"<div class='c2-f'> In de? </div><div class='c1-f'> In en? </div><br/>{{c1::law/principle of noncontradiction}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Satz vom ausgeschlossenem Widerspruch}}"	acad::log
"<div class='c1-f'> What is this expressing? </div><br/>¬(p ∧ ¬p) <span class=""divider"">-></span> {{c1::The law of non-contradiction}}"	acad::log
"The law of noncontradiction states that what and what cannot be true at the same time? <span class=""divider"">-></span> {{c1::P and not P}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > any proopsition and its negation </div> </div>"	acad::log
"Was sagt aristoteles über jemanden, der den satz vom ausgeschlossenen widerspruch verneint? <span class=""divider"">-></span> {{c1::Wie unterscheidet er sich denn dann von den Pflanzen?}}"	acad::log
"Wann darf man eine Tautologie als implizite Prämisse einführen? <span class=""divider"">-></span> {{c1::immer}}"	acad::log
"Bei der logischen reduktio ad absurdum, was wollen wir als vorletzte konklusion haben? <span class=""divider"">-></span> {{c1::Eine Kontradiktion}}"	acad::log
"Bei der logischen reduktio ad absurdum, was folgern wir aus der Kontradiktion? <span class=""divider"">-></span> {{c1::Das die hypothetisch angenommene prämisse falsch ist}}"	acad::log
"Bei der reduktio ad absurdum, was nehmen wir zunächst an? <span class=""divider"">-></span> {{c1::Eine prämisse}}"	acad::log
"Bei der reduktio ad absurdum, was machen wir am ende mit der prämisse, die wir zunächst nur angenommen hatten? <span class=""divider"">-></span> {{c1::Wir weisen sie zurück}}"	acad::log
"<div class='c1-f'> Welches argument ist das? </div><br/><pre><code data-codetype=""text"">P (Annahme) ... <hr>Q und nicht Q.<hr>Nicht P.</code></pre> <span class=""divider"">-></span> {{c1::Reduktio ad absurdum}}"	acad::log
"Reductio ad absurdum<br/><pre><code data-codetype=""text"">P (Annahme) ... <hr>{{c1::Q und nicht Q.}}<hr>Nicht P.</code></pre>"	acad::log
"Reductio ad absurdum<br/><pre><code data-codetype=""text"">P (Annahme) ... <hr>Q und nicht Q.<hr>{{c1::Nicht P.}}</code></pre>"	acad::log
"Reductio ad absurdum<br/><pre><code data-codetype=""text"">P ({{c1::Annahme}}) ... <hr>Q und nicht Q.<hr>Nicht P.</code></pre>"	acad::log
"Was müssen wir treffen, um später auf ein Konditionalsatz schließen zu können? <span class=""divider"">-></span> {{c1::Eine Annahme treffen}}"	acad::log
"Wenn wir für ein Konditional argumentieren und eine annahme treffen, was machen wir dann? <span class=""divider"">-></span> {{c1::So lange schließen, bis wir zum konsequenz kommen}}"	acad::log
"Wenn-Einführung<br/><pre><code data-codetype=""text"">{{c1::P.}} ...<hr>Q.<hr>Wenn P, dann Q.</code></pre>"	acad::log
"Wenn-Einführung<br/><pre><code data-codetype=""text"">P. ...<hr>{{c1::Q.}}<hr>Wenn P, dann Q.</code></pre>"	acad::log
"Wenn-Einführung<br/><pre><code data-codetype=""text"">P. ...<hr>Q.<hr>{{c1::Wenn P, dann Q.}}</code></pre>"	acad::log
"<div class='c1-f'> Wie heißt das hier? </div><br/><img class=""c1-f c2-b"" src=""sm_paste-0dfc0a39b97ceb35118c25dece0a48a7c7ded29a.jpg""><br/> <span class=""divider"">-></span> {{c1::Wahrheitstafel/tabelle}}"	acad::log
"Was übrigbleibt, wenn man von einem Aussagesatz den Inhalt 'abzieht', heißt wie? <span class=""divider"">-></span> {{c1::Logische form}}"	acad::log
"Die logische Form eines satzes ist der satz minus was? <span class=""divider"">-></span> {{c1::den Inhalt}}"	acad::log
"<div class='c1-f'> Logische form des satzes? </div><br/>Wenn es schneit, dann ist es kalt. <span class=""divider"">-></span> {{c1::Wenn P, dann Q.}}"	acad::log
"Wenn man eine Wahrheitstafel nutzt, um ein Argument zu überprüfen, und es keine Kombination gibt, in der die Prämissen wahr sind, aber die Konklusion falsch, was ist dann der fall? <span class=""divider"">-></span> {{c1::Das argument ist gültig}} Wenn man eine Wahrheitstafel nutzt, um ein Argument zu überprüfen, in welcher situation (Re: Prämissen und Konklusion) wissen wir, ob das argument gültig ist? <span class=""divider"">-></span> {{c1::Wenn es keine Kombination gibt, in der die Prämissen wahr sind, aber die Konklusion falsch}}"	acad::log
"Wie wird die verbindung zwischen zwei variablen mittels des Konditionals oft genannt? <span class=""divider"">-></span> {{c1::Materiale implikation}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > starts w m </div> </div>"	acad::log
"Was kann das konsequenz eines konditionals sein, wenn das antezendens falsch ist? <span class=""divider"">-></span> {{c1::alles}}"	acad::log
"Was kann das konsequenz eines konditionals sein, wenn das antezendens wahr ist? <span class=""divider"">-></span> {{c1::Jede wahre aussage}}"	acad::log
"Das Paradox der materialen Implikation kommt daher, dass das Antezedens und Konsequenz nur wie, aber nicht wie verbunden sind? <span class=""divider"">-></span> {{c1::nur wahrheitswerttechnisch, aber nicht kausal/semantisch}}"	acad::log
"<div class='c1-f'> Wofür ist das ein beispiel? </div><br/>Wenn 2+2=4 ist, dann liegt Berlin in Deutschland. <span class=""divider"">-></span> {{c1::Das Paradox der materialen Implikation}}"	acad::log
"Was bezeichnet ein singulärer Term? <span class=""divider"">-></span> {{c1::Genau einen Gegenstand}}"	acad::log
"Ein Ausdruck, der genau einen gegenstand bezeichnet, heißt wie? <span class=""divider"">-></span> {{c1::Singulärer Term}}"	acad::log
"In der Logik macht ein Prädikat was? <span class=""divider"">-></span> {{c1::Etwas über einen oder merhere Gegenstand aussagen}}"	acad::log
"In der traditionellen Logik heißt das ding, was etwas über einen oder mehrere Gegenstand aussagt, wie? <span class=""divider"">-></span> {{c1::Prädikat}}"	acad::log
"<div class='c1-f'> Was ist/sind hier singuläre term(e)? </div><br/>Sokrates lacht? <span class=""divider"">-></span> {{c1::Sokrates}}"	acad::log
"<div class='c1-f'> Was ist/sind hier Prädikat(e)? </div><br/>Sokrates lacht <span class=""divider"">-></span> {{c1::lacht}}"	acad::log
"<div class='c2-f'> Über was sagt das etwas aus? </div><div class='c1-f'> Wie heißt ein solches Prädikat? </div><br/>{{c1::einstelliges Prädikat}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sagt etwas über <b>einen</b>&nbsp;gegenstand aus}}"	acad::log
"<div class='c2-f'> Über was sagt das etwas aus? </div><div class='c1-f'> Wie heißt ein solches Prädikat? </div><br/>{{c1::zweistelliges Prädikat}}  <span class=""divider"">&lt;-&gt;</span> {{c2::sagt etwas über (das Verhältnis zwischen) zwei Gegenstände(n) aus.}}"	acad::log
"<div class='c2-f'> Englisch? </div><div class='c1-f'> Deutsch? </div><br/>Beispiele für Quantoren? <span class=""divider"">-></span> {{c1::Alle, einige, keine, etc.}} {{c1::Quantor}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Quantifier}}"	acad::log
"<img class=""c1-f c2-b"" src=""sm_paste-ff6d086464b1137323b6d3584f15a7751b272c93.jpg""><br/>Die Extension eines Prädikates ist __ der Gegenstände, auf die es zutrifft? <span class=""divider"">-></span> {{c1::die Menge}} Die Extension eines Prädikates ist die Menge von was? <span class=""divider"">-></span> {{c1::der Gegenstände, auf die es Zutrifft}} Die Intension eines Prädikates ist/sind was? <span class=""divider"">-></span> {{c1::die Merkmale, aufgrund deren das Prädikat auf diese Dinge zutrifft.}} Die Menge der Gegenstände, auf die ein Prädikat zutrifft, heißt wie? <span class=""divider"">-></span> {{c1::Extension}} Die Merkmale, aufgrund derer das Prädikat zutrifft, heißt wie? <span class=""divider"">-></span> {{c1::Die Intension (des Prädikats)}} Was ist hier die Extension von 'ist gelb'? <span class=""divider"">-></span> {{c1::Die beiden linken objekte}} Was ist hier die Intension von 'ist gelb'? <span class=""divider"">-></span> {{c1::Sendet licht mit einer bestimmten wellenlänge aus etc.}}"	acad::log
"<div class='c1-f'> Wie liest man das? </div><br/>P → R <span class=""divider"">-></span> {{c1::Wenn P, dann R}}"	acad::log
"<div class='c1-f'> How is this read (in english)? </div><br/>P → R <span class=""divider"">-></span> {{c1::If P, then R.}}"	acad::log
"A definition that works by listing every object falling under it is called... <span class=""divider"">-&gt;</span> {{c1::an extensional definition}} A definition that works by specifiying the necessary and sufficient conditions for the use of the term is a... <span class=""divider"">-&gt;</span> {{c1::an intensional definition}} An intensional definition gives the meaning of a term by specifying it's ___ and ___ ___? <span class=""divider"">-&gt;</span> {{c1::necessary and sufficient conditions}} For an extensional definition, what do we list? <span class=""divider"">-&gt;</span> {{c1::every object that falls under the definition}}"	acad::phil
"Im generellen, wie verhalten sich Intension und Extension? <span class=""divider"">-></span> {{c1::Die Intension bestimmt die Extension}}"	acad::log
"In der logik sind zwei begriffe mit der selben intension was? <span class=""divider"">-></span> {{c1::Synonyme}}<br/><div class=""sub""> <div class=""sub c1-f"" > cointensional isn't a thing </div> </div>"	acad::log
"In der logik haben synonyme das/dieselbe was? <span class=""divider"">-></span> {{c1::Intension}}"	acad::log
"Was kann man mit synonymen in der argumentrekonstruktion machen? <span class=""divider"">-></span> {{c1::Sie füreinander austauschen}}"	acad::log
"In einer argumentrekonstruktion, was sollte man für synonyme verwenden? <span class=""divider"">-></span> {{c1::Immer denselben begriff}}"	acad::log
"In einer argumentrekonstruktion kann ein begriff mit was ohne probleme ersetzt werden? <span class=""divider"">-></span> {{c1::einem Synonym}}"	acad::log
"Zwei Ausdrücke, die dieselbe Extension haben, heißen wie? <span class=""divider"">-></span> {{c1::koextensional}} Zwei koextensionale Ausdrücke haben die/dasselbe was? <span class=""divider"">-></span> {{c1::Extension}}"	acad::log
"In der Argumentrekonstruktion, was tut man, wenn man koextensionale aber nicht synonyme terme füreinander ersetzt? <span class=""divider"">-></span> {{c1::man begeht einen fehler}}"	acad::log
"Ein ausdruck, der mehr als als eine Intension hat, heißt wie? <span class=""divider"">-></span> {{c1::mehrdeutig/homonym/äquivok/ambig}} Was hat ein mehrdeutiger/homonymer/äquivoker/ambiger begriff? <span class=""divider"">-></span> {{c1::Mehr als eine Intension}}"	acad::log
"If two sentences are contradictory, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::nothing, they never have the same truth value}} If two sentences are contradictory, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::they can neither be both true at the same time nor both false at the same time}} If two sentences are contrary, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::both false&nbsp;}} If two sentences are contrary, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::both True}} If two sentences are subcontrary, what <b>can</b> they both be at the same time? <span class=""divider"">-></span> {{c1::both true}} If two sentences are subcontrary, what can't they both be at the same time? <span class=""divider"">-></span> {{c1::both false}} Two sentences that cannot be false but can be true at the same time are? <span class=""divider"">-></span> {{c1::subcontrary}} Two sentences that cannot be true but can be false at the same time are? <span class=""divider"">-></span> {{c1::contrary}} Two sentences that cannot be true nor false at the same time are? <span class=""divider"">-></span> {{c1::contradictory}}<br/><div class=""sub""> <div class='sub f'> Aristotelian (syllogistic) logic </div> <div class='sub f'> Aristotelian (syllogistic) logic </div><div class=""sub c1-b c2-f"" > One always true, one is always false </div> <div class='sub f'> Aristotelian (syllogistic) logic </div> </div>"	acad::log
"Was ist ein gutes mittel, um ein argument (dessen gültigkeit wir nicht leicht ermitteln können) als ungültig aufzuzeigen? <span class=""divider"">-></span> {{c1::Ein gegenmodell}} Wenn man mittels eines gegenmodells einen argument als ungültig erweisen will, was muss dann wahr sein, was falsch? <span class=""divider"">-></span> {{c1::Die Prämissen wahr, aber die Konklusion falsch}}"	acad::log
"If a statement is subaltern to another statement, that means that if the latter is true, then... <span class=""divider"">-></span> {{c1::the former must also be}} If a statement is subaltern to another statement, that means that if the latter must be true when? <span class=""divider"">-></span> {{c1::If the former is true}} The relationship which says that the truth of 'All F are G.' guarantees the truth of 'Some F are G.' in the square of opposition is called... <span class=""divider"">-></span> {{c1::Subalternation}}"	acad::log
"<div class='c1-f'> Wie heißt das? </div><br/><img class=""c1-f c2-b"" src=""sm_paste-fb611f5eecdef2a8a7c547df2a5e07ed3c5de226.jpg""><br/> <span class=""divider"">-></span> {{c1::Das logische Quadrat}}"	acad::log
"<div class='c1-f'> What is this called? </div><br/><img class=""c1-f c2-b"" src=""sm_paste-b7e01d02e1a865ba2e26744ce49721b25b686690.jpg""><br/> <span class=""divider"">-></span> {{c1::Square of Opposition}}"	acad::log
"In natürlicher Sprache sagt der allquantor was aus? <span class=""divider"">-></span> {{c1::Für alle/jedes x gilt}}"	acad::log
"<div class='c1-f'> Was ist das? </div><br/>Für alle/jedes x gilt <span class=""divider"">-></span> {{c1::Der Allquantor}}"	acad::log
"<div class='c1-f'> Wie heißt dieser Schluss? </div><br/><pre><code data-codetype=""text"">Alles ist F. <hr>a ist F.</code></pre> <span class=""divider"">-></span> {{c1::Allbeseitigung}}"	acad::log
"Allbeseitigung<br/><pre><code data-codetype=""text"">Alles ist F. <hr>{{c1::a ist F.}}</code></pre>"	acad::log
"Gegenbeispiel<br/><pre><code data-codetype=""text"">Der Mord an Schatow ist nicht erlaubt.<hr>{{c1::Nicht alles ist erlaubt.}}</code></pre>"	acad::log
"<div class='c1-f'> Was für ein Schluss ist das? </div><br/><pre><code data-codetype=""text"">Der Mord an Schatow ist nicht erlaubt.<hr>Nicht alles ist erlaubt.</code></pre> <span class=""divider"">-></span> {{c1::Gegenbeispiel}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > Aristotelian logic </div><div class=""sub c1-b c2-f"" > this is called a gegenbeispiel, but not all gegenbeispiele are like this i think </div> </div>"	acad::log
"What is begging the question a near-synonym for? <span class=""divider"">-></span> {{c1::Circular reasoning}}"	acad::log
"How does begging the question relate to circular reasoning? <span class=""divider"">-></span> {{c1::A near-synonym}}"	acad::log
"In circular reasoning / begging the question, what is the relationship between the conclusion and one of the premises? <span class=""divider"">-></span> {{c1::They are the same}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > That is, our conclusion is part of our premises </div> </div>"	acad::log
"How is a circular argument formally? <span class=""divider"">-></span> {{c1::formally valid}}"	acad::log
"What is the defect in a circular argument? (Why is it a problem if an argument is circular?) <span class=""divider"">-></span> {{c1::It does not add new information}}"	acad::log
"An argument where the conclusion is contained in the premises is known as what? <span class=""divider"">-></span> {{c1::circular/question-begging}}"	acad::log
"Der Wahrheitswert eines analytischen Satzes ergibt sich wie? <span class=""divider"">-></span> {{c1::(allein) aus den darin ausgedrückten Begriffen}} Der Wahrheitswert eines synthetischen Satzes ergibt sich wie nicht? <span class=""divider"">-></span> {{c1::nicht allein aus den darin ausgedrückten Begriffen}} Ein Satz, dessen Wahrheitswert <b>nicht&nbsp;</b>aus den darin ausgedrückten Begriffen ergibt, heißt wie? <span class=""divider"">-></span> {{c1::synthetisch}} Ein Satz, dessen Wahrheitswert sich allein aus den darin ausgedrückten Begriffen ergibt, antstatt von dem 'state of the world' abzuhängen, heißt wie? <span class=""divider"">-></span> {{c1::analytisch}}"	acad::log
"<div class='c2-f'> Wie heißt das auch? </div><div class='c1-f'> Wie heißt das auch? </div> <div class='c2-f'> Was ist das? </div><div class='c1-f'> Wie heißt das? </div><br/>Das Agrippa/Münchhausen-Trilemma sagt, dass&nbsp;die Begründung einer Aussage unweigerlich entweder einem {{c1::unendlichen Regress}}, einem {{c2::Zirkel}}, oder {{c3::unbegründeten ersten Prinzipen}} endet. Wenn das Münchhausen-Trilemma schlüssig ist, was ist dann der fall? <span class=""divider"">-></span> {{c1::Man kann nichts wissen}} Wenn jede begründung eine weitere begründung braucht, wie vermeiden wir einen unendlichen regress, wenn nicht mittels eines zirkels? <span class=""divider"">-></span> {{c1::Mittels unbegründeter erster prinzipien}} Wenn jede begründung eine weitere begründung braucht, wie vermeiden wir einen unendlichen regress, wenn nicht mittels unbegründeter erster prinzipien? <span class=""divider"">-></span> {{c1::mittels eines Zirkels}} Wenn jede begründung eine weitere begründung braucht, wo enden wir dann? <span class=""divider"">-></span> {{c1::In einem unendlichen regress}} Worin besteht das grund-problem des Münchhausen-trilemmas? <span class=""divider"">-></span> {{c1::Jede Begründung braucht eine weitere begründung}} {{c1::Agrippa-Trilemma}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Münchhausen-Trilemma}} {{c1::Trilemma}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Dilemma mit drei Hörnern}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > Genauer, für alle P kann ich nicht wissen dass P </div> <div class=""sub c1-b c2-f"" > fundamentalismus/foundationalism </div> <div class=""sub c1-b c2-f"" > = regress problem/argument </div> </div>"	acad::log
"Ein schluss von einigen elementen auf eine größere regel/wahrheit heißt? <span class=""divider"">-></span> {{c1::Induktion}} In the narrow sense, an induction is reasoning from some examples to what? <span class=""divider"">-></span> {{c1::to a broader truth/statement}} In the narrow sense, an induction is reasoning from what to a broader truth? <span class=""divider"">-></span> {{c1::Some examples}} Welche art von Schluss mit -uktion ist in der weiten lesart der Induktion erhalten, in der engen aber nicht? <span class=""divider"">-></span> {{c1::Abduktion}} Wie kann man induktion als begriff nutzen, bezüglich darauf, was er einschließt? <span class=""divider"">-></span> {{c1::Auf eine enge und eine weite weise}}"	acad::log
"Ein argument, dass den Anspruch erhebt, gültig (die wahrheit der prämissen garantiert die wahrheit der Konklusion) zu sein, heißt wie? <span class=""divider"">-></span> {{c1::deduktiv}}"	acad::log
"Wie ist in einem gültigen deduktiven argument das Verhältnis zwischen Prämissen und Konklusion? <span class=""divider"">-></span> {{c1::Die Wahrheit der Prämissen <b>garantiert</b> die Wahrheit der Konklusion}}"	acad::log
"Wie ist in einem guten induktiven argument das Verhältnis zwischen Prämissen und Konklusion? <span class=""divider"">-></span> {{c1::Die Wahrheit der Prämissen macht die Wahrheit der Konklusion <b>wahrscheinlich</b>}}"	acad::log
"In einem weiten sinne, wie wird induktiv verwendet? <span class=""divider"">-></span> {{c1::Für gute nicht-deduktive argumente}}"	acad::log
"Im generellen, auf welche menge an fällen müssen Induktive schlüsse i.e.s. basieren? <span class=""divider"">-></span> {{c1::Auf der Basis von hinreichend vielen}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > und repräsentativen </div> </div>"	acad::log
"The fallacy where one thinks that a temporal relationship implies a causal one is called? <span class=""divider"">-></span> {{c1::Post hoc ergo propter hoc}}"	acad::log
"If a thing (statement, conclusion, argument...) is ampliative, what does it do, relative to what we knew before? <span class=""divider"">-></span> {{c1::Add to our knowledge}} If something (a statement, argument, conclusion ...) adds to our knowledge, relative to what we knew before, what do we call that thing? <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"What kind of <b>argument/method of reasoning</b> is not ampliative? <span class=""divider"">-></span> {{c1::deductive reasoning}}"	acad::log
"What kind of feature do inductive arguments have, if they are good (in comparison to deductive arguments) <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"If an argument is synthetic, it is also... (relative to if it adds knowledge) <span class=""divider"">-></span> {{c1::ampliative}}"	acad::log
"For the Post hoc ergo propter hoc fallacy,  we conclude that something is causally related based on what? <span class=""divider"">-></span> {{c1::Based on a temporal relationship}}"	acad::log
"In day-to-day usage, correlation does not imply causation is used to talk abou what? <span class=""divider"">-></span> {{c1::Any error where people see causality although there might be none}}"	acad::log
"In correlation implies causation used in the narrow sense, we assume that the relation of two events how implies causation? <span class=""divider"">-></span> {{c1::their co-occurence}}"	acad::log
"<div class='c2-f'> What is this fallacy also known as? </div><div class='c1-f'> What is this fallacy also known as? </div><br/>{{c1::correlation implies causation (narrow sense)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::cum hoc ergo propter hoc}}"	acad::log
"<div class='c2-f'> What is this also known as? </div><div class='c1-f'> What is this also known as? </div> <div class='c1-f'> Was für ein Schluss ist das? </div><br/>{{c1::Abduktion}}  <span class=""divider"">&lt;-&gt;</span> {{c2::schluss auf die beste erklärung}} <pre><code data-codetype=""text"">P. Die beste Erklärung dafür, dass P, ist Q.<hr>Q.</code></pre> <span class=""divider"">-></span> {{c1::Schluss auf die beste Erklärung (Abduktion)}}"	acad::log
"An argument that is based on the fact that a certain thing cannot be explained without F is called a... <span class=""divider"">-></span> {{c1::(explanatory) indispensablity argument}}"	acad::log
"An argument that is based on the fact that a certain thing <b>can</b> be explained without F is called a... <span class=""divider"">-></span> {{c1::(explanatory) dispensablity argument}}<br/><div class=""sub""> <div class=""sub c1-f"" > () d... </div> </div>"	acad::log
"How can we characterize the relationship between an argument by analogy and an inductive argument, if we see inductive arguments widely? <span class=""divider"">-></span> {{c1::a subtype of inductive arguments}} How can we characterize the relationship between an argument by analogy and an inductive argument, if we see inductive arguments narrowly? <span class=""divider"">-></span> {{c1::a different argument type}}"	acad::phil
"In an analogy-argument, why do we think the certain characteristic is shared between the two things? <span class=""divider"">-></span> {{c1::because of all the other things they share}} In an analogy-argument, what does one thing have (which we don't know for the other)? <span class=""divider"">-></span> {{c1::a certain characteristic}} In an analogy-argument, what do the two things being compared have? <span class=""divider"">-></span> {{c1::similar characteristics}}"	acad::phil
"Was muss die Konklusion  eines Arguments A sein, damit man sagen kann dass A eine Prämisse P (eines anderen Arguments) stützt? <span class=""divider"">-></span> {{c1::P}} Was muss die Konklusion&nbsp; eines Arguments A sein, damit man sagen kann dass e A eine Prämisse P (eines anderen Arguments) angreift? <span class=""divider"">-></span> {{c1::¬P}} Was muss gleich P sein,&nbsp;damit man sagen kann dass ein Argument A eine Prämisse P (eines anderen Arguments) stützt? <span class=""divider"">-></span> {{c1::die Konklusion von A}} Was muss gleich ¬P sein,&nbsp;damit man sagen kann dass ein Argument A eine Prämisse P (eines anderen Arguments) angreift? <span class=""divider"">-></span> {{c1::die Konklusion von A}} Wenn ein Argument A als Konklusion P hat, und P eine Prämisse eines anderen Arguments ist, was tut dann A im bezug auf P? <span class=""divider"">-></span> {{c1::Es stützt P}} Wenn ein Argument A als Konklusion ¬P hat, und P eine Prämisse eines anderen Arguments ist, was tut dann A im bezug auf P? <span class=""divider"">-></span> {{c1::Es greift P an}}"	acad::phil
"The burden of proof is the requirement to do provide what for ones position? <span class=""divider"">-></span> {{c1::sufficient proof}} What claim does shifting the burden of proof involve, as regards what another person has to do, in comparison to oneself? <span class=""divider"">-></span> {{c1::The other person has to prove their position, not oneself}} What claim does shifting the burden of proof involve, as regards what happens to the obligation to prove the position a certain person holds? <span class=""divider"">-></span> {{c1::It is shifted to another person}} What is the obligation on a party in a dispute to provide sufficient warrant for their position called? <span class=""divider"">-></span> {{c1::Burden of proof}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > It is unclear how much this a fallacy or not </div> </div>"	acad::phil
"Ein gegenmodell hat die/dasselbe was wie zu dem Argument, das wir als ungültig erweisen wollen? <span class=""divider"">-></span> {{c1::dieselbe&nbsp; logische form}} Ein gegenmodell verhält sich von der logischen form her wie zu dem Argument, das wir als ungültig erweisen wollen? <span class=""divider"">-></span> {{c1::dieselbe&nbsp; logische form}}"	acad::log
Arguments from authority cite {{c1::cite an authority qua authority}} to support their claim. Arguments from authority may or may not be fallacious. An argument from ignorance (aka argumentum ad ignorantiam) claims that because it has not yet been proven false/true, a proposition is true/false	acad::phil
"What does (the fallacy of) equivocation take advantage of, in the properties of a term? <span class=""divider"">-></span> {{c1::It has two different intensions}}"	acad::phil
"If you have an invalid argument, what can you do to make it valid? <span class=""divider"">-></span> {{c1::Add one or more premises}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > but this may just shift it to become unsound </div> </div> If you have an invalid argument, and you have added one or more premises to make it valid, how might this just have moved the problem? <span class=""divider"">-></span> {{c1::this may just shift it to become unsound instead}}"	acad::log
"What should a good intensional definition do, besides include everything that is part of the definiendum? <span class=""divider"">-></span> {{c1:: exclude everything that should not be part of the definiendum}} What should a good intensional definition do, besides exclude everything that should not be part of the definiendum? <span class=""divider"">-></span> {{c1::include everything that is part of the definiendum}} The process by which we make the meaning of a certain term more clear and defined, as well as such a definition is/are called? <span class=""divider"">-></span> {{c1::explication}} In an explication, what do we do with a term? <span class=""divider"">-></span> {{c1::We make it clearer and more defined}} A definition has to capture the ___ and ___ conditions <span class=""divider"">-></span> {{c1::the necessary and sufficient conditions}} <div class='c1-f'> What kind of definition is this? </div><br/>Suppose we say that to love someone is to be willing to die for that person.  <span class=""divider"">-></span> {{c1::A stipulative definition}} How does the meaning gained by means of a stipulative definition relate to the conventional meaning of that word? <span class=""divider"">-></span> {{c1::It may be the same, or may not}} Besides trying to define a word in regards to how its actually used (Begriffsanalyse), how can you also define it? <span class=""divider"">-></span> {{c1::stipulative&nbsp;}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > you are stipulating what it should mean </div> </div> A definition that gives a term a new meaning is called? <span class=""divider"">-></span> {{c1::stipulative}} In a genus-differentia definition, what is the genus? <span class=""divider"">-></span> {{c1::The kind of thing it is}} In a genus-differentia definition, what is the differentia? <span class=""divider"">-></span> {{c1::What separates from other members of the genus}} A definition that specifies both the general kind and the difference from that kind is called what? <span class=""divider"">-></span> {{c1::A genus-differentia definition}} <div class='c1-f'> What kind of definition is this? </div><br/>Der Mensch ist das vernunftbegabte Lebewesen. <span class=""divider"">-></span> {{c1::A genus-differentia definition}} <table class=""cloze-group hide-if-inactive"">   <thead>     <tr><th>Word</th>     <th>Meaning</th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:1;::definiendum))</td> <td>((c:2;::Something to be defined))</td></tr>     <tr><td>((c:3;::definiens))</td> <td>((c:4;::Something by which something is defined))</td></tr>   </tbody> </table>  <br>---<br> <blockquote>   An elephant is a large gray animal native to Asia and Africa. </blockquote> <table>   <thead>     <tr><th>Part of sentence</th>     <th>Name</th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:7;::elephant))</td> <td>((c:5;::definiendum))</td></tr> <tr><td>((c:6;::a large gray animal native to Asia and Africa))</td> <td>((c:8;::definiens))</td></tr>   </tbody> </table> ===<br> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::phil
"¬¬a{{c1::=}}a a ∧ b {{c1::=}} b ∧ a<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > conjunction is commutative </div> </div> Since a&nbsp;∨ b =  b&nbsp;∨ a  , we know that the disjunction is what? <span class=""divider"">-></span> {{c1::the disjunction is commutative}} Since a ∧ b =  b ∧ a  , we know that the conjunction is what? <span class=""divider"">-></span> {{c1::the conjunction is commutative}} Since a&nbsp;∨ a = a&nbsp; , we know that the disjunction is what? <span class=""divider"">-></span> {{c1::idempotent}} Since a&nbsp;∧ a = a&nbsp; , we know that the conjunction is what? <span class=""divider"">-></span> {{c1::idempotent}} If we're using logical operations, but using 1 and 0 for true and false, what are we doing? <span class=""divider"">-></span> {{c1::boolean algebra}} Given that&nbsp;&nbsp;we are doing boolean algebra, what can we say about&nbsp;¬1? <span class=""divider"">-></span> {{c1::0}} Given that we are doing boolean algebra, what can we say about&nbsp;¬0? <span class=""divider"">-></span> {{c1::1&nbsp;}} Boolean algebra uses logical operations, but assigns which values for true and false? <span class=""divider"">-></span> {{c1::True = 1, False = 0}} <div class='c2-f'> Logical form for? </div><div class='c1-f'> Using an abbreviation instead of a symbol? </div><br/>{{c1::P iff Q}}  <span class=""divider"">&lt;-&gt;</span> {{c2::P ⇔/↔/≡ Q}} <div class='c2-f'> Because it is distributive, this is... (use left-distributivity in this example) </div><div class='c1-f'> Because it is distributive, this is...  </div><br/>{{c1::(a ∨ b) ∧ (a ∧ c)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a ∨ (b ∧ c)}}<br/><div class=""sub""> <div class=""sub c2-f c1-b"" > has a mistake </div> </div> <div class='c2-f'> Because it is distributive, this is... (use left-distributivity in this example) </div><div class='c1-f'> Because it is distributive, this is...  </div><br/>{{c1::(a ∧ b) ∨ (a ∧ c)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a ∧ (b ∨ c)}} <div class='c1-f'> What property does this logical rule of replacement demonstrate? </div><br/>a ∨ (b ∧ c) = (a ∨ b) ∧ (a ∧ c) <span class=""divider"">-></span> {{c1::distributive}}<br/><div class=""sub""> <div class=""sub all-b""> Specifically, this is left-distributive, but of course it is also right-distributive </div> </div> <div class='c1-f'> What property does this logical rule of replacement demonstrate </div><br/>a ∧ (b ∨ c) = (a ∧ b) ∨ (a ∧ c) <span class=""divider"">-></span> {{c1::distributive}}<br/><div class=""sub""> <div class=""sub all-b""> Specifically, this is left-distributive, but of course it is also right-distributive </div> </div> <div class='c1-f'> What property are we demonstrating here, in general? </div><br/><pre><code data-codetype=""text"">x * (y + z) = (x * y) + (x * z)</code></pre> <span class=""divider"">-></span> {{c1::distributivity}} <div class='c1-f'> Dieser Satz enthält welchen Junktor? </div><br/>Der Mond ist genau dann eine Lichtquelle, wenn Isaak Newton ein Deutscher war. <span class=""divider"">-></span> {{c1::ein Bikonditional}} a&nbsp;∨ ¬a = <span class=""divider"">-></span> {{c1::1}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∨ 1 = <span class=""divider"">-></span> {{c1::1}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∨ 0 = <span class=""divider"">-></span> {{c1::a}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∧ 1 = <span class=""divider"">-></span> {{c1::a}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a&nbsp;∧ 0 = <span class=""divider"">-></span> {{c1::0}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> a ∧ ¬a = <span class=""divider"">-></span> {{c1::0}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > boolean arithmetic </div> </div> Law of absorption<br/><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-b91f1f3ef5a7d024ab7d9809566477f8f4f61292.jpg""><br/>a ∨ {{c1:: (a ∧ b)}} = a<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > an or between these two images </div> </div> Law of absorption<br/><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-b91f1f3ef5a7d024ab7d9809566477f8f4f61292.jpg""><br/>a ∨ (a ∧ b) ={{c1:: a}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > an or between these two images </div> </div> Law of absorption<br/><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-786c8d4b84a26f1c89add25b8c7b39231d83693c.jpg""><br/>a ∧{{c1:: (a ∨ b)}} = a<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > an and between these two images </div> </div> Law of absorption<br/><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-1c947170b1d5aeae8413e0c3e3ac5d3200336651.jpg""><img class=""c1-b c2-f"" class=""fullsize-image"" src=""sm_paste-786c8d4b84a26f1c89add25b8c7b39231d83693c.jpg""><br/>a ∧ (a ∨ b) ={{c1:: a}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > an and between these two images </div> </div> <div class='c1-f'> Why is this called the law of absorption? </div><br/>a ∨ (a ∧ b) = a <span class=""divider"">-></span> {{c1::Because (a ∧ b) is irrellevant to the truth of the statement (it is absorbed)}} De Morgan's laws<br/>((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬({{c1::a ∨ b}}) = ¬a ∧ ¬b De Morgan's laws<br/>((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬(a ∨ b) = ¬a {{c1::∧}} ¬b De Morgan's laws<br/>((h:1;::<img src=""sm_paste-87f82c8bc2ffe19dffb8d515df1f34adc25358ea.jpg"">))¬(a ∨ b) = {{c1::¬a}} ∧ {{c1::¬b}} De Morgan's laws<br/>((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬({{c1::a ∧ b}}) = ¬a ∨ ¬b De Morgan's laws<br/>((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬(a ∧ b) = ¬a  {{c1::∨ }} ¬b De Morgan's laws<br/>((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">))¬(a ∧ b) = {{c1::¬a}} ∨ {{c1::¬b}} De Morgan's laws<br/>((h:1;::<img src=""sm_paste-3952e7d66acf502e703013c22262d134b705fb6f.jpg"">)){{c1::¬}}(a ∧ b) = ¬a ∨ ¬b <div class='c1-f'> What are these laws known as? </div><br/>¬(a ∨ b) = ¬a ∧ ¬b ; ¬(a ∧ b) = ¬a ∨ ¬b <span class=""divider"">-></span> {{c1::De Morgan's laws}} What property does putting on socks have, but putting on underwear and trousers doesn't? <span class=""divider"">-></span> {{c1::commutative}} Though ambiguous, the symbols used for the biconditional are mostly  {{c1::↔}},  {{c2::≡}},  {{c3::⇔}}. P ↔ Q {{c1::⇔}} Q ↔ P<br/><div class=""sub""> <div class=""sub all-b""> commutative </div> </div> Less precisely, what is the biconditional sometimes called? <span class=""divider"">-></span> {{c1::Equivalence}} <div class='c2-f'> What is this often read as? </div><div class='c1-f'> What is the symbol for this, at least often? </div><br/>{{c1::≢}}  <span class=""divider"">&lt;-&gt;</span> {{c2::is not equivalent/identical to}} <div class='c2-f'> What is this often read as? </div><div class='c1-f'> What is the symbol for this, at least often, that doesn't include an arrow? </div><br/>{{c1::≡}}  <span class=""divider"">&lt;-&gt;</span> {{c2::is equivalent/identical to}} <div class='c2-f'> Venn diagram for? (two circles) </div><div class='c1-f'> Venn diagram for? </div><br/>((h:2;::<img src=""sm_paste-56260f5a54106342986fad6da5ccc5bb8b08460b.jpg"">)){{c1::Biconditional}}  <span class=""divider"">&lt;-&gt;</span> {{c2::}} <div class='c2-f'> Allcaps notation </div><div class='c1-f'> Allcaps notation for? </div><br/>{{c1::Biconditional}}  <span class=""divider"">&lt;-&gt;</span> {{c2::XNOR}} <div class='c1-f'> What logical connective (junktor) are these often used for? </div><br/>↔, ≡, ⇔ <span class=""divider"">-></span> {{c1::The biconditional}} In standard form, what almost always precedes the conclusion? <span class=""divider"">-></span> {{c1::Some sort of indication that it is indeed the conclusion}} In standard form, what often preceeds the premises as well as the the conclusion? <span class=""divider"">-></span> {{c1::Numbers}} In standard form, what sometimes accompanies the conclusion, besides an indication that it is indeed the conclusion? <span class=""divider"">-></span> {{c1::From which premises it's coming}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > that is, they are numbered </div> </div> <div class=""c1-f""> An argument that is written like this or similar is in what form? </div><br><pre><code data-codetype=""text"">1. Humans are mortal. 2. Socrates is human. 3. Therefore, Socrates is mortal (by 1 and 2).</code></pre> <span class=""divider"">-&gt;</span> {{c1::Standard form}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> normal form is probably wrong, even though that <b>was</b>&nbsp;used in my logic course&nbsp; </div> </div> <div class='c1-f'> Wofür ist das manchmal ein synonym? </div><br/>Folgerichtig <span class=""divider"">-></span> {{c1::gültig}} What conditions are abbreviated by if and only if? <span class=""divider"">-></span> {{c1::The necessary and sufficient conditions}} Q is necessary and sufficient for P can also be said (using a way of speaking commonly used in definitions)? <span class=""divider"">-></span> {{c1::P if and only if Q}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > Q if and only if P </div> </div>"	acad::phil
"<div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c1-f""> What feature does this tree exhibit? </div> <div class=""c2-f""> Languages that are this are also... </div><div class=""c1-f""> Languages that are this are also... </div><br><img class=""c1-f c2-b"" src=""sm_paste-f8905a83ae65ccc1c0f94347a99ffd017cf2efee.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-4481fdfb6ba20a69bb29540e2b14cb74632e1211.jpg""> <img class=""c1-f c2-b"" src=""sm_paste-f407ff4ff31634a63b3dff9684044951e1ae2379.jpg""><br><span class=""divider"">-&gt;</span> {{c1::(fully) left-branching}} <span class=""divider"">-&gt;</span> {{c1::(fully) right-branching}} <span class=""divider"">-&gt;</span> {{c1::mostly right-branching}} An example for what kind of branching is japanese? <span class=""divider"">-&gt;</span> {{c1::left-branching}} In left-branching/ languages, what will happen if we draw a syntax tree? <span class=""divider"">-&gt;</span> {{c1::It will branch/grow to the left}} What is one of the most rigidly left-branching language? <span class=""divider"">-&gt;</span> {{c1::japanese}} What's the problem with saying a language is left-branching/right-branching? <span class=""divider"">-&gt;</span> {{c1::It is more a tendency than it is a rule, mostly}} {{c1::left-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-final}} {{c1::right-branching}}  <span class=""divider"">&lt;-&gt;</span> {{c2::head-initial}}"	acad::ling
"<div class=""c1-f""> Under the more wide definition, what is the predicate here? </div> <div class=""c1-f""> Under the more narrow definition, what is the predicate here? </div> <div class=""c1-f""> How are these often called in short? </div><br><pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard Fread.}} <pre><code data-codetype=""text"">Bill heard Fred</code></pre> <span class=""divider"">-&gt;</span> {{c1::heard}} In grammar, a predicate either connects the subject to an idea ('what the subject is like'), or is...? <span class=""divider"">-&gt;</span> {{c1::something that says something about a subject}} In grammar, a predicate is either the thing that says something about the subject, or the thing that connects what to what? <span class=""divider"">-&gt;</span> {{c1::the subject to an idea ('what the subject is like')}} In grammar, a predicate is either the thing that says something about the subject, or what, in relation to the the subject and an idea ('what the subject is like')? <span class=""divider"">-&gt;</span> {{c1::It connects the subject to an idea ('what the subject is like')}} In grammar, either (a) something that says something about a subject or (b) something that links something a subject and what that subject is like is called... <span class=""divider"">-&gt;</span> {{c1::a predicate}} In grammar, what is the problem with the term predicate? <span class=""divider"">-&gt;</span> {{c1::It has two competing definitions}} In english, what are the non-lexical verbs that don't take objects? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs are required to use negation? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} In english, what types of verbs go before the subject DP in question inversion? <span class=""divider"">-&gt;</span> {{c1::auxiliary verbs}} Why does auxiliary being equivalent to auxiliary verb not cause confusion? <span class=""divider"">-&gt;</span> {{c1::Because there are no other kinds of auxiliary words}} auxiliary verbs <span class=""divider"">-&gt;</span> {{c1::auxiliaries}} In the circumstances where do and have aren't auxiliaries (and also aren't lexical), what are they? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Light verbs are different from auxiliary verbs how? <span class=""divider"">-&gt;</span> {{c1::Can't do the syntactical stuff auxes can}} Light verbs are different from lexical verbs how? <span class=""divider"">-&gt;</span> {{c1::Little semantic content}} Verbs that have little semantic content but are not auxiliaries due to syntactic concerns are called what? <span class=""divider"">-&gt;</span> {{c1::light verbs}} Relationship between auxiliaries and modals in set notation? <span class=""divider"">-&gt;</span> {{c1::modals ⊊ auxiliaries}} What property do modal verbs express? <span class=""divider"">-&gt;</span> {{c1::Modality}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> competing definitions </div> <div class=""sub c1-b c2-f""> Question inversion, negation etc. </div> <div class=""sub c1-b c2-f""> auxiliaries ⊋ modals </div> </div>"	acad::ling
"With whom is the regulative - constitutive rule distinction most famously (though not uncontroversially) associated? <span class=""divider"">-></span> {{c1::Searle}} Following Searle (though now common), what kind of rule is  <q>Officers must wear ties at dinner</q> ? <span class=""divider"">-></span> {{c1::regulative}} Following Searle (though now common), what kind of rule is  <q>Never chew with your mouth open</q> ? <span class=""divider"">-></span> {{c1::regulative}} Following Searle (though now common), what kind of rule is  <q>Bishops move only diagonally</q> ? <span class=""divider"">-></span> {{c1::constitutive}} Following Searle (though now common), what kind of rule is  <q>A touchdown is scored when a player has possession of the ball in the opponents’ end zone while a play is in progress</q> ? <span class=""divider"">-></span> {{c1::constitutive}} Following Searle (though now common), what kind of rule follows the formula <q>X counts as Y in context C</q> <span class=""divider"">-></span> {{c1::constitutive}} Following Searle (though now common), what kind of rule follows the formula <q>(If C) do X</q>? <span class=""divider"">-></span> {{c1::regulative}} Following Searle (though now common), a rule that regulates existing forms of behavior is called what? <span class=""divider"">-></span> {{c1::regulative}} Following Searle (though now common), a rule that creates or defines new forms of behavior is called what? <span class=""divider"">-></span> {{c1::constitutive}} Following Searle (though now common), a regulative rule does what to what? <span class=""divider"">-></span> {{c1::regulates existing forms of behavior}} Following Searle (though now common), a constititive rule does what? <span class=""divider"">-></span> {{c1::creates new forms of behavior}} Following Searle (though now common),  a regulative rule.<br/><q>({{c1::If C}}) do X</q> Following Searle (though now common),  a regulative rule.<br/><q>(If C) {{c1::do X}}</q> Following Searle (though now common),  a constitutive rule.<br/><q>{{c1::X}} counts as Y in context C</q> Following Searle (though now common),  a constitutive rule.<br/><q>X {{c1::counts as Y}} in context C</q> Following Searle (though now common),  a constitutive rule.<br/><q>X counts as Y {{c1::in context C}}</q>"	acad::phil
"<div class='c2-f'> What is this often contrasted against? </div><div class='c1-f'> What is this often contrasted against? </div> <div class='c1-f'> Name a few sub-areas that fall under this umbrella </div> <div class='c1-f'> Name a few sub-areas that fall under this umbrella </div> <div class='c1-f'> What is this often considered a part of? </div><br/>{{c1::Theoretical philosohpy}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Practical philosophy}} Theoretical philosohpy <span class=""divider"">-></span> {{c1::Epistemology, Metaphysics, Philosophy of math/science/language/mind}} Practical philosohpy <span class=""divider"">-></span> {{c1::Ethics, Aesthetics, Political Philosophy}} Metaphysics <span class=""divider"">-></span> {{c1::Theoretcial philosophy}} Ethics <span class=""divider"">-></span> {{c1::Practical philosophy}} Epistemology <span class=""divider"">-></span> {{c1::Theoretcial philosophy}} Aesthetics <span class=""divider"">-></span> {{c1::Practical philosophy}}"	acad::phil
"What might be the type of the token""my bycicle"" <span class=""divider"">-&gt;</span> {{c1::bycicle generally}} The ontological relationship between phoneme and phone is&nbsp; <span class=""divider"">-&gt;</span> {{c1::a type - token relationship}}<br><div class=""sub""> <div class=""sub c1-f""> or any emic/etic relationship </div><div class=""sub c1-f c2-b""> unless you have some sophisticated criticism of the concept of a phoneme or phone </div> </div> Plato's theory of ideas might be an example of what kind of relationship? <span class=""divider"">-&gt;</span> {{c1::Type - token}} In the type-token distinction, what is the type? <span class=""divider"">-&gt;</span> {{c1::a general sort of thing}} In the type-token distinction, what is the token in relation to the type? <span class=""divider"">-&gt;</span> {{c1::an instance of a type}} If an object A belongs to another object B, what is the relationship between them, formally? <span class=""divider"">-&gt;</span> {{c1::B has-a A}}<br><div class=""sub""> <div class=""sub c1-f""> B ... A </div> </div> If B's intension implies A's intension, what ontological relationship do they have? <span class=""divider"">-&gt;</span> {{c1::A is-a B }} From whom is the ""type-token"" formulation? <span class=""divider"">-&gt;</span> {{c1::Charles Sanders Peirce}} A token, is what in relation to its type? <span class=""divider"">-&gt;</span> {{c1::Is an instance of}} A thing A has a is-a relationship with something B when, related to their intensions? <span class=""divider"">-&gt;</span> {{c1::B's intension implies A's intension}} A subclass has what kind of relationship with its superclass? <span class=""divider"">-&gt;</span> {{c1::is-a}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Not exactly the OOP usage (though similar) </div> </div> A hyponym has what kind of relationship with its hypernym? <span class=""divider"">-&gt;</span> {{c1:: is-a }} A ___class has a is-a of relationship with its ___class? <span class=""divider"">-&gt;</span> {{c1::subclass, superclass}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Not exactly the OOP usage (though similar) </div> </div> In some sense (ignoring things such as static methods), the relationship between class and object in OOP is what? <span class=""divider"">-&gt;</span> {{c1::Type - token (instance-of)}}"	acad::log
At its most general, parsing is taking strings and extracting information. In programming, parsing is often used for extracting a bit of useful data out of a string. In natural and computer languages, parsing takes a series of tokens and transforms them into some kind of data structure. In natural and computer languages, parsing is also called syntax/syntactic analysis. The data structure that parsing results in dependss on the input data. Parsing a CSV file may result in a list of records. Parsing natural or programming/markup/whatever languages often results in a tree. This tree is called a parse tree for programming/markup/whatever languages and syntax tree for natural language. The tokens for parsing/syntactic analysis in the lexical analysis sense are generated by lexical analysis/tokenization. After parsing/syntactic analysis comes semantic analysis. a parse tree is the result of {{c1::a derivation}} of a context-free grammar. {{c1::a syntax tree}} is a form of parse tree most common in linguistics. AST|Abstract syntax tree {{c1::}} more on ASTs, parse trees	acad::inf
"<div class=""c1-f""> What is true about any conclusion here? </div><br><pre><code data-codetype=""text"">1) 10$ was spent on apples and oranges. 2) 1 apple costs $1 3) 1 orange costs $2</code></pre> <span class=""divider"">-&gt;</span> {{c1::It is underdetermined by the evidence}} Assume Tarou and Hanako are throwing stones. In what case would the result of shattering the window be overdetermined? <span class=""divider"">-&gt;</span> {{c1::If both threw a stone at the window at the same time, and any one would be enough to shatter the window}} If a <b>conclusion</b> is underdetermined, then a specific set of evidence does what, but doesn't guarantee any specific conclusion? <span class=""divider"">-&gt;</span> {{c1::eliminates some possiblities}} If a conclusion is underdetermined, then a specific set of evidence eliminates some possiblities, but what? <span class=""divider"">-&gt;</span> {{c1::But doesn't guarantee any specific conclusion}} If a explanandum is underdetermined, specific combination of facts (or similar) do what but do not sufficiently explain an explanandum?&nbsp; <span class=""divider"">-&gt;</span> {{c1::provide some explanation}} If a explanandum is underdetermined, specific combination of facts (or similar) provide some explanation but what?&nbsp; <span class=""divider"">-&gt;</span> {{c1::do not sufficiently explain an explanandum}} If a specific combination of facts (or similar) are enough to eliminate some possibilities but not to reach a definite conclusion, what can we say the conclusion is? <span class=""divider"">-&gt;</span> {{c1::underdetermined}} If a specific combination of facts (or similar) provide some explanation but do not sufficiently explain an explanandum, what can we say the explanandum is? <span class=""divider"">-&gt;</span> {{c1::underdetermined}} If something is overdetermined, then there are two or more&nbsp;conditions/explanations/etc., all of which are what? <span class=""divider"">-&gt;</span> {{c1::sufficient to account for/determine the event}} If something is overdetermined, then there are what, all of which are sufficient to account for/determine the event? <span class=""divider"">-&gt;</span> {{c1::two or more conditions/explanations/etc.}} In terms of constraints and a solution, something is underdetermined when it has too few constraints to specify what? <span class=""divider"">-&gt;</span> {{c1::an unique solution}} In terms of constraints and a solution, something is underdetermined when it has what to specify a unique solution? <span class=""divider"">-&gt;</span> {{c1::too few constraints}}"	acad::phil
An {{c1::explanandum}} is explained by an {{c2::explanans}}.	acad::phil
"In general, when did the heyday of postmodernism as an intellectual movement start? <span class=""divider"">-></span> {{c1::1970ies}} Since when has postmodernism in a wide sense probably been declining? <span class=""divider"">-></span> {{c1::Since the early 2000s}}"	acad::phil
"technologcial determinism states that technology determines what? <span class=""divider"">-&gt;</span> {{c1::social reality (or similar, history etc.)}} What larger sociohistoric way of looking at the world is McLuhans idea ""the medium is the message"" probably a form of? <span class=""divider"">-&gt;</span> {{c1::Technological determinism}} In <q>The medium is the message</q>, how is the message often <b>but falsely</b> understood? <span class=""divider"">-&gt;</span> {{c1::As content/information}} In <q>The medium is the message</q>, how is the medium often <b>but falsely </b>understood? <span class=""divider"">-&gt;</span> {{c1::As mass media}} If smartphones are the medium, what might be the message, related to built environments? <span class=""divider"">-&gt;</span> {{c1::the arrangement to have power access for example}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> but is this really the change in scale? </div> </div> From when is McLuhan's phrase <q>The medium is the messge</q>? <span class=""divider"">-&gt;</span> {{c1::early 1960s (1964)}} For McLuhan, the content of any given medium is always what kind of thing? <span class=""divider"">-&gt;</span> {{c1::another medium}} For McLuhan, (the invention of) electrical light is what, related to medium and content? <span class=""divider"">-&gt;</span> {{c1::a medium without content}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> luhan calls it a medium without a message, but that's him using his terminology inconsistently </div> </div> For McLuhan, ""the medium is the message"" is exemplified in the example of automation because <b>what</b> changed our relations to another and to ourselves more than <b>what</b>? <span class=""divider"">-&gt;</span> {{c1::The change in human work more than the mass of produced cadillacs}} By whom is the phrase <q>The medium is the messgae</q>? <span class=""divider"">-&gt;</span> {{c1::Marshall McLuhan}} <q>The medium is the message</q> is originally from which book? <span class=""divider"">-&gt;</span> {{c1::<cite>Understanding Media</cite> (1964)}} <q>The medium is the message</q> is often<b> but mostly falsely</b> understood how, in laymans terms? <span class=""divider"">-&gt;</span> {{c1::The channel supersedes the content}} What does McLuhan think about the effect of the content (in our, not in his sense)? <span class=""divider"">-&gt;</span> {{c1::It is incidental}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> But not, as is often claimed, that it does not exist </div> </div> The theory that technology determines social reality (history, ...) is known as what? <span class=""divider"">-&gt;</span> {{c1::technologcial determinism}} If smartphones are the medium, what might be the message, related to pants? <span class=""divider"">-&gt;</span> {{c1::Pocket size}} For McLuhan, why would a hammer be a medium? <span class=""divider"">-&gt;</span> {{c1::Because it's an extension of ourselves (our abilities)}} For McLuhan, what would most major technologies be? <span class=""divider"">-&gt;</span> {{c1::media}} For McLuhan, what is the content of writing? <span class=""divider"">-&gt;</span> {{c1::language}} For McLuhan, what is a message in terms change of human affairs? <span class=""divider"">-&gt;</span> {{c1::Change in scale or pace}} For McLuhan, what is a medium? <span class=""divider"">-&gt;</span> {{c1::Any extension of ourselfves}} For McLuhan, what do we often see about a medium (what is obvious about a medium)? <span class=""divider"">-&gt;</span> {{c1::it's content}} For McLuhan, what do we often not see about a medium? <span class=""divider"">-&gt;</span> {{c1::the message}} For McLuhan, what did the railway not change? <span class=""divider"">-&gt;</span> {{c1::The possibility of getting from point a to point b}} For McLuhan, what <b>did</b> the railway change, in a first step? <span class=""divider"">-&gt;</span> {{c1::The speed of transportation}} For McLuhan, what <b>did</b> the railway change, by increasing the speed of transportation? <span class=""divider"">-&gt;</span> {{c1::the possible human functions, new kinds of cities, work, leasure}} For McLuhan, the new functions of human existance such as large cities enabled by the railway would be what, in relation to the railway? <span class=""divider"">-&gt;</span> {{c1::The railway's message}} For McLuhan, language is an extension of ourselves why? <span class=""divider"">-&gt;</span> {{c1::Because it extends our thoughts to others}} For McLuhan, it is important to separate message and what? <span class=""divider"">-&gt;</span> {{c1::content}} For McLuhan, any change of the pace or scale of human affairs is what? <span class=""divider"">-&gt;</span> {{c1::a message}} For McLuhan, a message changes the pace or scale of what? <span class=""divider"">-&gt;</span> {{c1::human affairs}} Change in human affairs for mcluhan is more or less the same as the change in relations to whom? <span class=""divider"">-&gt;</span> {{c1::those we have to others or to ourselves}}  What is the problem, related to McLuhans hot/cool distinction, related to artsy movies? <span class=""divider"">-&gt;</span> {{c1::There are artsy movies that are very cool}} According to McLuhan, movies are what kind of media? <span class=""divider"">-&gt;</span> {{c1::Hot media}} According to McLuhan, how do the two aspects of hot/cool media relate? <span class=""divider"">-&gt;</span> {{c1::The engagment or lack of engagement of the senses determines the engagement of the audience by necessity}} According to McLuhan, comic books are what kind of media? <span class=""divider"">-&gt;</span> {{c1::cool media}} <div class=""c2-f""> According to McLuhan, media that is this relates how to participation? </div><div class=""c1-f""> According to McLuhan, media that requires this much participiation is called? </div><br>{{c1::Hot media}}  <span class=""divider"">&lt;-&gt;</span> {{c2::less}} <div class=""c2-f""> According to McLuhan, media that is this relates how to audience participation? </div><div class=""c1-f""> According to McLuhan, media that requires this much participiation is called? </div><br>{{c1::Cool media}}  <span class=""divider"">&lt;-&gt;</span> {{c2::more}} <div class=""c2-f""> According to McLuhan, media that is this engages what, sensorily, and how? </div><div class=""c1-f""> According to McLuhan, media that engage the participant in this way are called? </div><br>{{c1::Hot media}}  <span class=""divider"">&lt;-&gt;</span> {{c2::one sense completely}} <div class=""c2-f""> According to McLuhan, media that is this engages what, sensorily, and how? </div><div class=""c1-f""> According to McLuhan, media that engage the participant in this way are called? </div><br>{{c1::Cool media}}  <span class=""divider"">&lt;-&gt;</span> {{c2::many senses less completely}}"	acad::phil
"Two languages descended from a common ancestor genetically are called what? <span class=""divider"">-></span> {{c1::sister languages}} Languages related through descent from a common ancestor are said to constitute what? <span class=""divider"">-></span> {{c1::A language family}} Languages descended from a ancestor are known as what, in relation to that ancestor?&nbsp; <span class=""divider"">-></span> {{c1::daughter languages}} Daughter languages are descended genetically from what? <span class=""divider"">-></span> {{c1::A parent/ancestor language}} <br>Sister languages are descended from a common ancestor how? <span class=""divider"">-></span> {{c1::genetically}}"	acad::ling
"keyword to start espanso <span class=""divider"">-></span> {{c1::espanso start}} Where is espanso configured? <span class=""divider"">-></span> {{c1::.yml files}} Installing an espanso package <span class=""divider"">-></span> {{c1::espanso install &lt;name&gt;}} <div class='c2-f'> Is called? </div><div class='c1-f'> What does this do in espanso? </div><br/>{{c1::The thing that will do the replacement of any espanso match}}  <span class=""divider"">&lt;-&gt;</span> {{c2::replace}} <div class='c2-f'> Is called? </div><div class='c1-f'> What does this do in espanso? </div><br/>{{c1::The thing that will be replaced in any espanso match}}  <span class=""divider"">&lt;-&gt;</span> {{c2::trigger}} <div class='c1-f'> What is this? </div><br/>{{c1::keyword for my keyword expansion manager}}  <span class=""divider"">&lt;-&gt;</span> {{c2::espanso}}"	acad::espanso
"The basic unit of espanso is? <span class=""divider"">-></span> {{c1::a match}}"	acad::espanso
"The property of a match that contains the variables is {{c1::vars}}, which is a sequence. For any item in the array&nbsp;<code>vars</code>:, the property&nbsp; we will use to refer to it later is... <span class=""divider"">-></span> {{c1::name}}<br/><div class=""sub""> <div class=""sub c1-f"" > e.g.  <pre><code>    trigger: ""caps:""     replace: ""{{ca}}::psych""     vars:        - ...</code></pre> ===<br> <div class='c1-f'> Syntax for what? </div><br/>{{c1::Syntax for inserting variables into <code>replace</code>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::{{somevar}}}}<br/><br>---<br> <pre><code>  -      trigger: ""cach:""     replace: ""{{ca}}::chem""</code></pre> ===<br> <div class='c1-f'> Syntax for what? </div><br/>{{c1::In <code>replace</code>, representing where the cursor should go}}  <span class=""divider"">&lt;-&gt;</span> {{c2::$|$ }}<br/><br>---<br> <pre><code>- triggers: [""-dl&gt;-""]   replace: ""&lt;dl&gt;$|$&lt;/dl&gt;"" </code></pre> ===<br> <div class='c1-f'> Property that does what? </div><br/>{{c1::Property of a match signifying that it should only match if surrounded by word separators}}  <span class=""divider"">&lt;-&gt;</span> {{c2::word: true}}<br/><br>---<br> <pre><code>  - trigger: ""ther""     replace: ""there""     word: true</code></pre> ===<br>"	acad::espanso
"The {{c1::propagate_case}} property (of the matches sequence) will {{c2::match on}} and {{c3::preserve}} {{c4::any case}}, so that <span class=""c5-scr"">{{c5::""alh"" will expand to ""although"", ""Alh"" will expand to ""Although"" and ""ALH"" will expand to ""ALTHOUGH""}}</span><br/><br>---<br> <pre><code>  - trigger: ""alh""     replace: ""although""     propagate_case: true</code></pre> ===<br>"	acad::espanso
"<br>---<br>   §§ Property of match that ((c:1;::expands into an image))  is ((c:2;::image_path)). you pass it ((s:2;s:1;:: ((c:3;::the path to the image)))) §<br> ===<br> ---<br> <pre><code>  - trigger: "":cat""     image_path: ""/path/to/image.png""</code></pre> ===<br> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}</span>"	acad::espanso
within espanso itself, the {{c1:: $CONFIG }} variable resolves to {{c2::the path of the config file}}	acad::espanso
"The {{c1::<code>script</code>}} type for espanso allows {{c2::running external scripts}} using {{c3::different programming languages::which kind of scripts can run?}} <span class=""c1-scr c2-scr c3-scr"">(however, {{c4::there's a different type for shell scripts}}). You do this by providing {{c5::an <code>args</code> sequence}}&nbsp;to <code>{{c6::params}}</code>, containing {{c7::the programming language}} and then {{c8::the path to the script}}, which can contain {{c9::%CONFIG% (I know, why not $CONFIG)}} to {{c10::refer to your config dir.}}</span><br/><br>---<br> <pre><code>- trigger: "":pyscript""   replace: ""{{output}}""   vars:     - name: output       type: script       params:         args:           - python           - /path/to/your/script.py</code></pre> ===<br>"	acad::espanso
"the type for {{c3::running a shell (e.g. bash) command}} in espanso is <code>{{c4::shell}}</code>. To {{c2::specify the command}}, you use {{c1::the <code>cmd</code> property of <code>params</code>}}, to {{c5::specify the shell to run in (e.g. sh, bash, powershell),}} use t{{c6::he <code>shell</code> property of <code>params</code>}}, to {{c7::trim the output of spaces/newlines}}, use {{c8::the boolean <code>trim</code> property of <code>params</code>}}, to {{c9::populate espansos log for debugging purposes}}, use {{c10::the boolean <code>debug</code> property of <code>params</code>}} <br>---<br> <pre><code data-codetype=""yaml"">- trigger: "":ip""   replace: ""{{output}}""   vars:     - name: output       type: shell       params:         cmd: ""curl 'https://api.ipify.org'""         debug: false         trim: false         shell: bash</code></pre> ===<br>"	acad::espanso
"Use <code>{{c1::type: date}}</code> to include {{c2::date and time}} (using {{c3::rust's <code>chrono</code>}}&nbsp;as the backend). {{c4::<code>params: { format:</code>}} allows you to {{c5::specify a format string}}, following {{c6::<span class=""c3-scr""><code>chrono</code></span>'s}}&nbsp;syntax<br/><br>---<br> <pre><code>- trigger: "":reversed""   replace: ""Reversed {{myshell}}""   vars:     - name: mytime       type: date       params:         format: ""%H:%M""</code></pre> ===<br>"	acad::espanso
"{{c1::Global variables}} are specified within {{c2::default.yml}}, in {{c3::the <code>global_vars</code> sequence}} and work {{c4::like any other variable}} (i.e. {{c5::can be referred to in {{}​} without needing to be specified within vars}}) Espanso variables are evaluated {{c1::top}} to {{c1::bottom}}, {{c2::global variables}} before {{c2::local ones}}. if you specify a variable with {{c3::type: ""global""}}, you make this {{c4::evaluate at that point and not earlier}}.<br><br>---<br><pre><code># Considering the following global variable global_vars:   - name: ""reversed""     type: shell     params:       cmd: ""echo $ESPANSO_VARNAME | rev""  matches:   - trigger: "":rev""     replace: ""{{reversed}}""     vars:       - name: ""varname""         type: echo         params:           echo: ""hello""       - name: ""reversed""         type: ""global""</code></pre>===<br> <div class=""c2-f""> what does this allow you to do? </div><div class=""c1-f""> How do you do this? </div><br>{{c1::Specify a specific variable of type global, that corresponds to the global variable}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Evaluate a global variable later}} <div class=""c1-f""> Container for what? </div><br>{{c1::Container for global variables in espanso}}  <span class=""divider"">&lt;-&gt;</span> {{c2::global_vars}}"	acad::espanso
In general, any espanso {{c1::component file}} should start with {{c2::<code>name: somename</code>}} and then contain {{c3::parent: default}} if we {{c4::want to merge it into the default namespace}}. {{c5::All individiual replace entries}} are contained in {{c6::the matches array}}	acad::espanso
"To {{c2::apply configs to specific apps but not others}}, use {{c1::app filters}}. <span class=""c1-scr c2-scr"">These come in {{c3::three::amount}} flavors: <span class=""c3-scr""><span class=""c6-scr c7-scr c8-scr c9-scr""><code>{{c4::filter_title}}</code>, which uses {{c5::the window title (or the App identifier on mac)}}</span>, <span class=""c4-s5-scr c8-9-scr""><code>{{c6::filter_exec}}</code>, which uses {{c7::the path of the applications executable}}</span>, and <span class=""c4-7-scr""><code>{{c8::filter_class}}</code>, which only really works {{c9::on linux}}</span>. <span class=""c4-9-scr"">Any of these take a {{c10::string}} or {{c10::regex}} value to {{c11::match}}, and addtionally allow the {{c12::vertical bar}} to {{c13::provide a list of applications}}. <span class=""c10-scr c11-scr c12-scr c13-scr"">To {{c15::help detect the filter_whatever}}, expanso comes with the command line util <code>{{c14::espanso detect}}</code></span></span></span></span>"	acad::espanso
"when you have multiple triggers, what's the keyword? <span class=""divider"">-></span> {{c1::triggers}} <pre><code data-codetype=""yaml"">- {{c1::trigger}}: "":foo""   {{c2::replace}}: ""Lorem {{bar}}""   {{c3::vars}}:     {{c4::- }} {{c5::name}}: bar       {{c6::type}}: quuz       {{c7::params}}: ...</code></pre> What do you need to do after installing an espanso package?&nbsp;{{c1::espanso restart}} What can you do if you want to organize your espanso? <span class=""divider"">-></span> {{c1::multiple yml files}} The {{c4::<code>trigger</code>}} property defines {{c5::the thing to match on}} for espanso; <span class=""c4-scr c5-scr"">Passing a {{c1::sequence}} to {{c2::<code>trigger</code><b>s</b>&nbsp;(instead of trigger)}}&nbsp;allows us to {{c3::have multiple triggers}}</span><br/><br>---<br> <pre><code>- triggers: [""hello"", ""hi""]   replace: ""world""</code></pre> ===<br>"	acad::espanso
"In contemporary ontology, what might we call the thing that we says has relationships, properties, is a type of something, etc.? <span class=""divider"">-></span> {{c1::an object}} In contemporary ontologies, things such as 'being red' might be considered what, in relation to an object? <span class=""divider"">-></span> {{c1::a property}} In contemporary ontologies, things such as 'being a son to fitzwalter' might be considered what, in relation to an object? <span class=""divider"">-></span> {{c1::a relation}}"	acad::phil
"Abductive reasoning<br><pre><code data-codetype=""text"">{{c1::(1) a -&gt; b}} (2) b (3) Therefore: a</code></pre> Abductive reasoning<br><pre><code data-codetype=""text"">{{c1::(1) Alle bohnen aus dem sack sind weiß}} (2) Diese bohnen sind weiß (3) Therefore: Diese bohnen sind aus dem sack</code></pre> Abductive reasoning<br><pre><code data-codetype=""text"">(1) a -&gt; b {{c1::(2) b}} (3) Therefore: a</code></pre> Abductive reasoning<br><pre><code data-codetype=""text"">(1) a -&gt; b (2) b {{c1::(3) Therefore: a}}</code></pre> Abductive reasoning<br><pre><code data-codetype=""text"">(1) Alle bohnen aus dem sack sind weiß {{c1::(2) Diese bohnen sind weiß}} (3) Therefore: Diese bohnen sind aus dem sack</code></pre> Abductive reasoning<br><pre><code data-codetype=""text"">(1) Alle bohnen aus dem sack sind weiß (2) Diese bohnen sind weiß {{c1::(3) Therefore: Diese bohnen sind aus dem sack}}</code></pre>"	acad::phil
"The most common thought experiment used to raise questions about identity over time is what? <span class=""divider"">-&gt;</span> {{c1::The ship of theseus}} In the ship of theseus, the rotting parts were restored somehow, and a new ship built from these parts (in the same shape etc.). What can we ask about this restored ship? <span class=""divider"">-&gt;</span> {{c1::Is it the same as the original ship of theseus?}} In the ship of theseus, the rotting parts were restored somehow, and a new ship built from these parts (in the same shape etc.). What can we ask if we say that this restored ship is indeed the original? <span class=""divider"">-&gt;</span> {{c1::What about the other ship that has had its parts slowly replaced?}} In the ship of theseus, what can we additionally stipulate, besides the ship of theseus gradual part replacement? <span class=""divider"">-&gt;</span> {{c1::The rotting parts were restored somehow, and a new ship built from these parts (in the same shape etc.)}} In the ship of theseus, what can we ask about it after all the parts have been replaced? <span class=""divider"">-&gt;</span> {{c1::is it still the same ship?}} In the ship of theseus, what can we ask about it if we say it has become a new ship after all the parts were replaced? <span class=""divider"">-&gt;</span> {{c1::when did it change to become not the ship of theseus anymore?}} In the ship of theseus, what happens to the ship, after a while of parts beginning to rot and being replaced? <span class=""divider"">-&gt;</span> {{c1::Every part of the ship has been replaced}} In the ship of theseus, what happens to the ship, slowly? <span class=""divider"">-&gt;</span> {{c1::Parts begin to rot and be replaced}}"	acad::phil
"The doctrine which maintains that only statements that are empirically verifiable (i.e. verifiable through the senses) are cognitively meaningful, or else they are truths of logic (tautologies) is called what? <span class=""divider"">-&gt;</span> {{c1::Verificationsim (or similar, e.g. verificationism)}} <br>Falsifiablity is the ability of something to be&nbsp;what? <span class=""divider"">-></span> {{c1::contradicted by evidence}} According to verificationism, what is a statement that is not a truth of logic or empirically verifiable? <span class=""divider"">-></span> {{c1::meaningless}} Falsificationism is a response to Verificationism by whom? <span class=""divider"">-></span> {{c1::Karl Popper}} The ability of something to be contradicted by evidence is known as what? <span class=""divider"">-></span> {{c1::Falsifiability}} To replace verificationism, what did Karl Popper suggest? <span class=""divider"">-></span> {{c1::Falsificationism}} What is the problem verficationism has, related to generalizations? <span class=""divider"">-></span> {{c1::all generalizations are unverifiable (and therefore meaningless)}} When was logical empiricism/positivism active, roughly? <span class=""divider"">-></span> {{c1::second quarter of the 20th century (1925-1950)}} (logical) positivism as an epistemological theory says that all genuine knowledge is built on sensory experience interpreted how? <span class=""divider"">-></span> {{c1::reason/logic}} (logical) positivism as an epistemological theory says that all genuine knowledge is built on what? <span class=""divider"">-></span> {{c1::Sensory experience}} Durkheims theories of how society works, e.g. mechanistic and organic can be considered part of which sociological movement? <span class=""divider"">-></span> {{c1::positivisim}} Positivism as a sociological theory holds that society is what? <span class=""divider"">-></span> {{c1::governed according to general laws}} The movement that holds the verification principle that all knowledge is derived from experience and its interpretation through reason/logic is known as? <span class=""divider"">-></span> {{c1::(logical) positivism/empiricism}} The position that society operates according to general laws is known as what? <span class=""divider"">-></span> {{c1::positivism}} Which branch of theoretical philosophy does (logical)&nbsp;positivism treat with disdain? <span class=""divider"">-></span> {{c1::Metaphysics}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > Verification principle </div> </div>"	acad::phil
"What does née indicate? <span class=""divider"">-></span> {{c1::birth name of someone (usually the maiden name)}} How do you indicate the birth name of someone (usually the maiden name)? <span class=""divider"">-></span> {{c1::née}}"	acad::phil
"According to the HMC,&nbsp; where can I only move? <span class=""divider"">-&gt;</span> {{c1::The position which has IP as its complement}} If english lexical verbs wanted to move to C in y/n questions, what would have to happen first? <span class=""divider"">-&gt;</span> {{c1::It would have to move to I}}"	acad::ling::synt
"What language I speak is a Topic-prominent language? <span class=""divider"">-></span> {{c1::Japanese}} Topic, comment, presupposition,&nbsp; focus etc., are part of which linguistic concept/subarea? <span class=""divider"">-></span> {{c1::Information structure}} The way information is packaged/structured within a sentence is known as what? <span class=""divider"">-></span> {{c1::Information structure}} Information structure as a part of linguistics is about what? <span class=""divider"">-></span> {{c1::How we structure information (esp. in relation to existing information)}} In information structure, the thing that is new or <b>contrastive</b> information is called what? <span class=""divider"">-></span> {{c1::focus}} In information structure, focus is what kind of information? <span class=""divider"">-></span> {{c1::new or contrastive information}} Terms used roughly synonymously: {{c1::comment}}, {{c2::rheme}} Semantically, what is the theme? <span class=""divider"">-></span> {{c1::'The point of departure' = the starting point of the sentence}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> Semantically, what is the rheme? <span class=""divider"">-></span> {{c1::'The destination' = the point where the sentence goes beyond the departure point}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > not sure if true </div> </div> In information structure, a clause is divided into what? <span class=""divider"">-></span> {{c1::Theme and rheme (Topic and comment)}} How does topic - comment relate to syntactic relations and semantic roles? <span class=""divider"">-></span> {{c1::Distinct from both}} <div class='c2-f'> Other name for? </div><div class='c1-f'> Other name for? </div><br/>{{c1::Topic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Theme}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Topic/Theme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is being talked about}} <div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Comment/Rheme}}  <span class=""divider"">&lt;-&gt;</span> {{c2::What is said about the topic/theme}} <div class='c2-f'> Is called? </div><div class='c1-f'> Is? </div><br/>{{c1::A language that organizes its syntax so that sentences have a topic - comment (theme - rheme) structure&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Topic-prominent language}} What is the problem with distinguising focus, givenness, topic, rheme, etc.? <span class=""divider"">-></span> {{c1::Theory-ladenness/controversy}} Topicalization is moving something to the front of the sentence and thus doing what? <span class=""divider"">-></span> {{c1::Marking it as the topic}} Topicalization is making something the topic how? <span class=""divider"">-></span> {{c1::Moving something to the front of the sentence}} The opposite of focus is what? <span class=""divider"">-></span> {{c1::givenness}} The movement of a constituent to the front of the clause and concomittantly establishing it as the topic/theme is known as what? <span class=""divider"">-></span> {{c1::Topicalization}} Moving something to the beginning of a sentence is known as what? <span class=""divider"">-></span> {{c1::fronting}} Fronting is doing what (in syntax)? <span class=""divider"">-></span> {{c1::Moving a constituent to the beginning of the sentence}} <div class=""c2-f""> Are examples of? </div><div class=""c1-f""> What are examples of this? </div><br>{{c1::This is a <em>salad</em> salad; Do you <em>like</em>&nbsp;like him? I talked to him that week, but I didn't talk to him talk to him.}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Contrastive focus reduplication}}"	acad::ling
"The classical analysis of knowledge is said to be which analysis? <span class=""divider"">-&gt;</span> {{c1::Justified True Belief}}<br><div class=""sub""> <div class=""sub c1-f""> although it probably isn't actually </div> </div>"	acad::phil
"<div class='c2-f'> Meaning? </div><div class='c1-f'> Name? </div><br/>{{c1::Incommensurable}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Having no common measure}}<br/><div class=""sub""> <div class='sub f'> In a non-philosophical general sense </div> </div>"	acad::phil
"<div class='c1-f'> What might these be seen as? </div> <div class='c2-f'> Is called? </div><div class='c1-f'> Is, according to kuhn? </div> <div class='c2-f'> Is called? </div><div class='c1-f'> Is? </div><br/>The germ theory of disease, Galen's miasma theory. <span class=""divider"">-></span> {{c1::paradigms (kuhn)}} After a new paradigm is adopted, what happens to the process of how it was adopted (Kuhn)? <span class=""divider"">-></span> {{c1::<span class=""aside"">it is institutionalized and thus</span> the revolutionary process is obscured}} After extraordinary research, what is eventually adopted (Kuhn)? <span class=""divider"">-></span> {{c1::a new paradigm}} Following Kuhn, if it is impossible to understand/neatly translate one paradigm to the conceptual framework of another paradigm, that thing is known as what? <span class=""divider"">-></span> {{c1::Incommensurable}} Following Kuhn, two things are incommensurable if it is impossible to do what with one of those things? <span class=""divider"">-></span> {{c1::understand/neatly translate one paradigm to the conceptual framework of another paradigm}} For Kuhn, what are the differing Paradigms? <span class=""divider"">-></span> {{c1::incommensurable}} In the philosophical sense, by whom was the term Incommensurable popularized? <span class=""divider"">-></span> {{c1::Thomas Kuhn}} Under what does normal science happen according to Kuhn? <span class=""divider"">-></span> {{c1::A paradigm}} What accumulates during normal science according to Kuhn? <span class=""divider"">-></span> {{c1::Anomalies}} What do scientists do when enough anomalies have accrued and a crisis is happening, according to Kuhn? <span class=""divider"">-></span> {{c1::Engage in extraordinary (=exploratory) research}} What happens when enough anomalies have accrued, according to Kuhn, which then leads to (or is then characterized by) extraordinary science? <span class=""divider"">-></span> {{c1::Science is thrown into crisis}} What is the main work of Thomas Kuhn? <span class=""divider"">-></span> {{c1::The Structure of Scientific Revolutions}} What might be the most famous kuhnian scientific revolution? <span class=""divider"">-></span> {{c1::The transition between the worldview of Newtonian gravity and general relativity.}} What willingness characterizes extraordinary research, according to kuhn? <span class=""divider"">-></span> {{c1::The willingness to try anything, to debate over fundamentals}} When was the The Structure of Scientific Revolutions published? <span class=""divider"">-></span> {{c1::early 1960s (1962)}} {{c1::Period where a paradigm shift happens}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Scientific revolution}} {{c1::Period where science go about their day-to-day work (within a paradigm)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Normal science}}"	acad::phil
"<div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Essentialism}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The view that objects have essential properties}}<br/><div class=""sub""> <div class='sub f'> Metaphysics </div> </div>"	acad::phil
"<div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Essentialism}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A lifestyle that seeks to minimize nonessentials in order to focus on what is important.}}<br/><div class=""sub""> <div class='sub f'> Lifestyle </div> </div>"	acad::phil
"<div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Essentialism}}  <span class=""divider"">&lt;-&gt;</span> {{c2::There are things that are wrong in an absolute/essential sence}}<br/><div class=""sub""> <div class='sub f'> Ethics </div> </div>"	acad::phil
"<div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Essentialism}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Social groups (e.g. gender) have essential traits}}<br/><div class=""sub""> <div class='sub f'> 'sociology' </div> </div>"	acad::phil
"<div class='c2-f'> Is? </div><div class='c1-f'> Is called? </div><br/>{{c1::Essentialize}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Characterize a trait as intrinsic to a particular type of thing}}<br/><div class=""sub""> <div class='sub f'> philosophy, esp. feminism </div> </div>"	acad::phil
"As what might we see presenteeism and the ideas it imparts, since it's not particularly coupled with reality?  as a sign For Hofbauer 2008, how do we learn 'inkorporiertes geschlechterwissen', after ahildren watch their parents do certain practices (even if the parents aren't aware of it) and learns them as propensities?  The child reproduces these propensities For Hofbauer 2008, how do we learn 'inkorporiertes geschlechterwissen', after ahildren watch their parents do certain practices (even if the parents aren't aware of it)?  These become the propensities/roles the child learns For Hofbauer 2008, how do we learn 'inkorporiertes geschlechterwissen', in a first step?  Children watch their parents do certain practices (even if the parents aren't aware of it) For Hofbauer 2008, what is the tricky thing about things like presenteeism and its relation with gender, in relation to how children learn it?  Children can't not see that someone is doing presenteeism If presenteeism is the signifier, what is the signified?  The willingness to work Since presenteeism results in promotions / job security, what happens?  competitive presenteeism What if not economic, what sort of value does presenteeism have for Hofbauer?  a social value What is the economic value of presenteeism in Hofbauer's view?  none What is the purpose of presenteeism in Hofbauers sense?  Be seen at work What is the social value of presenteeism for the person doing presenteeism?  Rewards in the form of promotions/job security What is the social value of presenteeism for the superiors of the person doing presenteeism?  Be able to rely on that employees ability to actually invest more time when necessary Which group does presenteeism more than which group?  Men more than women  long working hours and sacrifice for work   Masculinity  shorter working hours and being combinable with a private life   Femininity If reproductive labor is necessary, according to Hofbauer (2008), what is sufficient to cause it to be done by one person and not another?  a small difference in propensity / feeling of obligation What does competitive presenteeism do to people who have less time to cache in, according to Hofbauer (2008)?  They have to fold earlier and probably will not be considered for promotion as often What does corporate presenteeism cause, according to Hofbauer (2008), related to women?  Women to be systematically underrepresented in higher-ranking management positions Where do women acquire the small difference in preferences/feeling of obligation necessary for gendered labor division via the necessity of reproductive labor? As inkorporiertes wissen as per her mechanism Which group of people has less time to cache in for competitive presenteeism, as per Hofbauer (2008)?  women Why is a small difference in propensity enough to produce gendered labor division, according to Hofbauer (2008)?  Because someone has to do it"	acad::phil
"a derivation is what (related to formal grammars) to arrive at a string? <span class=""divider"">-&gt;</span> {{c1::&nbsp;an application of the production rules&nbsp;}} a derivation is an application of the production rules of a formal grammar to what? <span class=""divider"">-&gt;</span> {{c1::arrive at a (well-formed) word}} With what tool is the syntax of a formal language often formally&nbsp;defined? <span class=""divider"">-&gt;</span> {{c1::formal grammar}} When have we finished derivation? <span class=""divider"">-&gt;</span> {{c1::When we've arrived at a string with no more nonterminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> When generating a string using a formal grammar, where do we start? <span class=""divider"">-&gt;</span> {{c1::at the start symbol}} What parts do production rules of formal grammars consist of, fundamentally? <span class=""divider"">-&gt;</span> {{c1::a left-hand and a right-hand side}} What languages do regular grammars generate? <span class=""divider"">-&gt;</span> {{c1::regular languages}} What kind of thing can an alphabet be, in the context of formal languages? <span class=""divider"">-&gt;</span> {{c1::any set}} What is the alphabet of formal languages most of the time? <span class=""divider"">-&gt;</span> {{c1::a character set of some sort}} What does a formal grammar produce in terms of a formal language? <span class=""divider"">-&gt;</span> {{c1::A formal grammar generates the formal language}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> well, precisely it generates the set of well-formed words that make up the formal language </div> </div> What do we do with nonterminals in the course of derivation? <span class=""divider"">-&gt;</span> {{c1::replace them with further production rules}} The {{c1::syntax}} of {{c2::formal languages}} is said to be {{c4::the structure}} of {{c4::well-formed words}} in a language (however it's not a {{c3::rigurously defined}} term), and contrasted with {{c5::semantics}}. It may be defined via {{c6::a formal grammar}}. The {{c7::grammar}} of a {{c2::formal language}} is {{c8::merely a synonym}} for {{c6::formal grammar}}. The syntax governing a meta-language {{c1::metasyntax}} The start symbol is a kind of what? <span class=""divider"">-&gt;</span> {{c1::nonterminal}} The semantics of a formal language expresses what? <span class=""divider"">-&gt;</span> {{c1::What the words mean}} The rules that formal grammars consist of are known as what? <span class=""divider"">-&gt;</span> {{c1::production rules}} The production rules of a formal language are made up of {{c1::nonterminal symbols}}, {{c2::terminal symbols}} and {{c3::a start symbol}} Something {{c1::well-formed}} {{c4::comforms to}} {{c2::the rules/grammar/syntax}} of a given {{c3::system/<b>formal</b> language}} In the production rules of formal languages, what appears on the left side? <span class=""divider"">-&gt;</span> {{c1::a non-terminal}}<br><div class=""sub""> <div class=""sub f""> Context-free and reuglar only </div> </div> In the production rules for regular grammars, what may appear on the right (right-regular only)? <span class=""divider"">-&gt;</span> {{c1::terminal nonterminal}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> Both right-regular and left-regular can just have a terminal </div> </div> In the production rules for regular grammars, what may appear on the right (after the -&gt;) (left-regular only)? <span class=""divider"">-&gt;</span> {{c1::nonterminal terminal}} In the production rules for regular grammars, what may always appear on the right (both left- and right regular) ? <span class=""divider"">-&gt;</span> {{c1::a single terminal}} In the production rules for context-free grammars, what may appear on the right? <span class=""divider"">-&gt;</span> {{c1::any sequence of terminals and nonterminals}} In the production rules for context-free grammars, what may appear on the left? <span class=""divider"">-&gt;</span> {{c1::a single nonterminal}} In the case of a finite formal language, how can we theoretically specify the language? <span class=""divider"">-&gt;</span> {{c1::List all well-formed words}} In formal languages, what are well-formed words sometimes further assembled to? <span class=""divider"">-&gt;</span> {{c1::They are assembled to well-formed expressions}} In a formal language, what are words made of? <span class=""divider"">-&gt;</span> {{c1::characters/elements from its alphabet}} How large is the size of the alphabet of a formal language? <span class=""divider"">-&gt;</span> {{c1::finite}} Formal languages are separated by size in... <span class=""divider"">-&gt;</span> {{c1::finite and infinite langauges}} Any well-formed&nbsp;string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a well-formed word/formula}} Any string from the alphabet of a given formal language is called what? <span class=""divider"">-&gt;</span> {{c1::a word}} A formal language consists of what? <span class=""divider"">-&gt;</span> {{c1::a set of well-formed words}} <div class=""c2-f""> What will be done with these, in the course of derivation? </div><div class=""c1-f""> Are called? </div><br>{{c1::nonterminal symbol}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(Things that)&nbsp;will be replaced by further production rules}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Synonym? </div><div class=""c1-f""> Synonym? </div><br>{{c1::syntactic varialble}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminal}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Symbolizes? </div><div class=""c1-f""> Is symbolized by? </div><br>{{c1::Σ}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The alphabet of a formal language}}<br><div class=""sub""> <div class=""sub f""> In formal languages </div> </div> <div class=""c2-f""> Symbolizes what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::S}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the start symbol}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::lowercase letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::terminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Symbolize what? </div><div class=""c1-f""> Are written how? </div><br>{{c1::Capital letters}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nonterminals}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Is symbolized by? </div><div class=""c1-f""> Symbolizes? </div><br>{{c1::Empty word}}  <span class=""divider"">&lt;-&gt;</span> {{c2::e/ε}}<br><div class=""sub""> <div class=""sub f""> formal grammar </div> </div> <div class=""c2-f""> Are? </div><div class=""c1-f""> Are called (besides and more specifically than letter/character/element)? </div><br>{{c1::terminal symbols}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the fundamental elements of the formal language (part of the alphabet)}}<br><div class=""sub""> <div class=""sub f""> formal grammar context </div> </div> <div class=""c2-f""> Are what, in relation to automatons? </div><div class=""c1-f""> Are what, in terms of chomsky's hierarchy? </div><br>{{c1::context-free languages}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The languages that can be recognized by a pushdown automaton}} <div class=""c1-f""> What is this? </div><br>Left -&gt; Right <span class=""divider"">-&gt;</span> {{c1::a production rule}}<br><div class=""sub""> <div class=""sub f""> formal grammars </div> </div> <div class=""c1-f""> Is? </div><br>Something that conforms to the grammar of the formal language of which it is a part <span class=""divider"">-&gt;</span> {{c1::Something that is well-formed}} <div class=""c1-f""> Is called? </div><br>An application of the production rules of a formal grammar to arrive at a string <span class=""divider"">-&gt;</span> {{c1::a derivation}}"	acad::ling
"Why would gramscians say we think the things are normal that we think are normal? <span class=""divider"">-></span> {{c1::Through manipulation of society by the ruling classes}} What school of thought was gramsci a part of? <span class=""divider"">-&gt;</span> {{c1::Marxism}} Cultural hegemony establishes the ruling classes norms, values and ideas as normal, inevitable, apolitical<br>Cultural hegomony achieves the normalizing of the ruling classes norms {{c1::through manipulation of the culture (what one might call propaganda)}}<br>Cultural hegemony was introduced by Antonio Gramsci<br>Linguistic hegemony is a form of / variation on&nbsp;{{c1::Cultural hegemony}}"	acad::phil
"In contrast to nominalists, who think universals are names for sets only, what do conceptualists think about universals? <span class=""divider"">-></span> {{c1::That they exist in the mind (but more than just sets)}}"	acad::phil
"What is the name of the position re:universals that thinks that they exist in the mind (not in the world, but more than mere set names)? <span class=""divider"">-></span> {{c1::conceptualism}}"	acad::phil
"for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is 𝛿? <span class=""divider"">-&gt;</span> {{c1::the state transition function&nbsp;}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is Σ? <span class=""divider"">-&gt;</span> {{c1::The input alphabet (same as for a formal language)}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is s0? <span class=""divider"">-&gt;</span> {{c1::the initial state}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is S? <span class=""divider"">-&gt;</span> {{c1::set of states}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> for the deterministic finite-state machine's (Σ, S, s0, 𝛿, F), what is F? <span class=""divider"">-&gt;</span> {{c1::the set of final states}}<br><div class=""sub""> <div class=""sub c1-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> a finite state machine, if {{c3::it doesn't have a transition for an input}}, is {{c1::either said to fail}}&nbsp; or {{c2::goes to a failure state}} What kind of storage does a FSA have? <span class=""divider"">-&gt;</span> {{c1::no storage}} What is a deterministic FSA in relation to its corresponding non-deterministic FSA most often? <span class=""divider"">-&gt;</span> {{c1::more complex}} What can any non-deterministic FSA be transformed into? <span class=""divider"">-&gt;</span> {{c1::a deterministic FSA}} Nonterminals ∩ Terminals =  <span class=""divider"">-&gt;</span> {{c1::ø}} In a finite state machine, each transition merely depends on the {{c1::current state}} and the {{c2::input}} In a classic formalization, a formal grammar G consists of the 4-tuple ({{c1::Set of}} {{c2::nonterminals}}, {{c1::set of}} {{c3::terminals}}, {{c1::set of}} {{c4::production rules}}, {{c5::start symbol}}) A transducer is a FSA that accepts input (like an acceptor) and then... <span class=""divider"">-&gt;</span> {{c1::generates output}} A FSA that accepts input (like an acceptor) but then generates an output is known as what? <span class=""divider"">-&gt;</span> {{c1::a transducer}} <div class=""c2-f""> Rough synonym? </div><div class=""c1-f""> Rough synonym? </div><br>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Finite state automaton}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div><br>A -&gt; aB or A -&gt; Ba <span class=""divider"">-&gt;</span> {{c1::regular grammars / languages}} <div class=""c1-f""> are the most sophisticated production rules which kind of grammars/languages allow? </div><br>A -&gt; BbcCdCCBaA... <span class=""divider"">-&gt;</span> {{c1::context-free grammars / languages}} <div class=""c1-f""> Short for? </div><br>FSM/FSA <span class=""divider"">-&gt;</span> {{c1::Finite state machine / automaton}} What does a finite-state machine do in response to some inputs? <span class=""divider"">-&gt;</span> {{c1::transition}} The input is a well-formed word if what and the input is over&nbsp;&nbsp;(in a deterministic finite-state machine that is acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::we've reached a final state<br>}} The input is a well-formed word if we've reached a final state and what (in a deterministic finite-state machine that is a acceptors/detectors/recognizers)? <span class=""divider"">-&gt;</span> {{c1::the input is over&nbsp;<br><br>}} If we've reached a final state and the input is over in a deterministic finite-state machine that is a acceptors/detectors/recognizers, then what is the case?&nbsp; <span class=""divider"">-&gt;</span> {{c1::the input is contained in the language}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> the input is a well-formed word </div> </div> For a deterministic finite-state acceptor machine, what is the relationship between F (set of final states) and S (set of states)? <span class=""divider"">-&gt;</span> {{c1::F ⊆ S}} For a deterministic finite-state acceptor machine, the state transition function produces what? <span class=""divider"">-&gt;</span> {{c1::the transitions}} Definition of a deterministic finite-state machine = ({{c1::Σ}},  {{c2::S}},  {{c3::s0}},  {{c4::𝛿}},  {{c5::F}}) <sub>technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM</sub> At any given time, an automaton is what? <span class=""divider"">-&gt;</span> {{c1::In a given state}} At any given time, an automaton is in how many states? <span class=""divider"">-&gt;</span> {{c1::exactly one}} <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div><br>{{c1::non-deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::there is more than one}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> it is ambiguous </div> </div> <div class=""c2-f""> If an automaton is this, then what is true about the transition from one state to another? </div><div class=""c1-f""> If for an automaton ___ transition from one state to another, then it is called? </div><br>{{c1::deterministic}}  <span class=""divider"">&lt;-&gt;</span> {{c2::It is unambiguous (the combination of input + state produces exactly one possible transition)}} <img class=""c1-f c2-b"" src=""sm_Turnstile_state_machine_colored.svg""><br>What are the transitions here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::all the arrows}} What are the states&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Locked and unlocked}} What are the inputs&nbsp; here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Push and Coin}} What are the arrows here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::transitions}} What are Push and Coin here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::Inputs}} What are Locked and Unlocked here (this is a finite-state machine)? <span class=""divider"">-&gt;</span> {{c1::states}} <img class=""c1-f c2-b"" src=""sm_220px-DFAexample.svg.png""><br>What is S1 here probably? <span class=""divider"">-&gt;</span> {{c1::a final state}} <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Turing machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::recursively enumerable languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a turing machine is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Pushdown automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-free languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a pushdown automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Linear bounded automaton}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Context-sensitive languages}}<br><div class=""sub""> <div class=""sub c2-f c1-b""> needs support in terms of what a linear bounded automaton is </div> </div> <div class=""c2-f""> Can recognize which languages? </div><div class=""c1-f""> Can be recognized by what? </div><br>{{c1::Finite state machine}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Regular languages}} <div class=""c1-f""> What does this define? </div><br>(Σ,  S,  s0,  𝛿,  F) <span class=""divider"">-&gt;</span> {{c1::a deterministic finite-state machine}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> technically only for acceptors/detectors/recognizers, although most of it should also hold for other FSM </div> </div> ((h:1;::<img src=""sm_220px-DFAexample.svg.png"">))How are final states in FSM acceptors often designated? <span class=""divider"">-&gt;</span> {{c1::Double circle}}"	acad::inf
"In most contexts, what is the difference between 'program' and 'application'? <span class=""divider"">-></span> {{c1::They are synonyms}} If we're differentiating, a program that is directly used by an user is known as what? <span class=""divider"">-></span> {{c1::an application}} If we're differentiating between program and application, what is the difference (using set operators)? <span class=""divider"">-></span> {{c1::application ⊊ program}} If we're differentiating between program and application, an application is a program that... <span class=""divider"">-></span> {{c1::is aimed at (interfaced by) an user}}"	acad::inf
"The two functionally complete logical connectives are {{c1::NAND}} and {{c2::NOR}} NAND and NOR are the only two logical connectives that are what? <span class=""divider"">-&gt;</span> {{c1::functionally complete}} {{c1::¬(A OR B)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NOR B}} {{c1::¬(A AND B)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NAND B}} <img class=""c2-f c1-b"" src=""sm_Nand.jpg""><br>{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NAND B}} <img class=""c2-f c1-b"" src=""sm_1280px-Venn1000.svg.jpg""><br>{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A NOR B}} "	acad::log
A functionally complete set is a&nbsp;set of logical connectives (including singletons) that can be used to {{c1::express any possible logical connective}}	acad::log
"flip-flops are a type of what? <span class=""divider"">-&gt;</span> {{c1::circuit}} What is a very simple ciruit for saving one bit? <span class=""divider"">-&gt;</span> {{c1::An (SR) flip-flop}} The most simple type of flip-flop is what flip-flop? <span class=""divider"">-&gt;</span> {{c1::SR flip-flop}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with two of which or which gates? <span class=""divider"">-&gt;</span> {{c1::NAND or NOR gates}} SR/<span style=""text-decoration-line: overline;"">SR</span>&nbsp;flipflops can be created with how many NAND or NOR gates? <span class=""divider"">-&gt;</span> {{c1::two}} How much information can a flip-flop store? <span class=""divider"">-&gt;</span> {{c1::one bit}} How many stable states does a flip-flop have? <span class=""divider"">-&gt;</span> {{c1::two}} <div class=""c2-f""> Near-synyonym? </div><div class=""c1-f""> Near-synonym? </div><br>{{c1::Flip-flop}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Latch}}<br><div class=""sub""> <div class=""sub c2-f""> L... </div> </div> SR flip-flop <span class=""divider"">-&gt;</span> {{c1::Set-Reset Flipflop}} As what thing is a transistor often used? <span class=""divider"">-&gt;</span> {{c1::As a switch}}"	acad::inf
"since GPL forces you to license software built of this with the same rights, it has what attribute? <span class=""divider"">-></span> {{c1::copyleft}} What do you have to do with software using the GPL related to the source code? <span class=""divider"">-></span> {{c1::include it with it (or otherwise make it publicly available)}} What can you do related to redistributing GPL software? <span class=""divider"">-></span> {{c1::you can redistribute it}} What can you do related to changing GPL software? <span class=""divider"">-></span> {{c1::modify it however you like}} I write MyCoolTokenizer with a copyleft-including license. You use MyCoolTokenizer in MyCoolFrequencyAnalyzer. What do you have to do? <span class=""divider"">-&gt;</span> {{c1::Give the users of MyCoolFrequencyAnalyzer the same freedoms MyCoolTokenizer allows.}} How can you sell things licensed with the GPL, if you comply with the license terms? <span class=""divider"">-></span> {{c1::however you want}} If you modify GPL software, what do you have to do with those changes? <span class=""divider"">-&gt;</span> {{c1::make them available}}<br><div class=""sub""> <div class=""sub c1-f""> Unless only you use the changes </div> </div>"	acad::inf
grep [{{c1::OPTIONS}}] {{c2::PATTERN}} [{{c3::FILE...}}]	acad::inf
"Why can't a directory contain two files with the same name, internally (unix)? <span class=""divider"">-&gt;</span> {{c1::Because it can't map one name to two diffeerent inodes}} When you open a file on unixy systems, the kernel {{c1::creates a file descriptor}} for the file using (amongst other things) the relevant the {{c2::inode}} When is the inode table created? <span class=""divider"">-&gt;</span> {{c1::at fs creation time}} What uniquely identifies an inode? <span class=""divider"">-&gt;</span> {{c1::the inode number}} What thing does chmod edit, linux-internally? <span class=""divider"">-&gt;</span> {{c1::the inode}} What sort of things does the inode store, for example? <span class=""divider"">-&gt;</span> {{c1::types, permissions, link count, owner, group owner...}} What is inode in the unix fs probably short for? <span class=""divider"">-&gt;</span> {{c1::index node}} What does the inode contain about a file? <span class=""divider"">-&gt;</span> {{c1::its metadata}} The metadata of a file is contained where? (unix) <span class=""divider"">-&gt;</span> {{c1::its inode}} The inode table takes up about how much storage space, relative to the file system? <span class=""divider"">-&gt;</span> {{c1::about 1%}} The inode table is a property of what? <span class=""divider"">-&gt;</span> {{c1::a file system}} The inode table contains what? <span class=""divider"">-&gt;</span> {{c1::all possible inode numbers}} The inode number uniquely identifies what? <span class=""divider"">-&gt;</span> {{c1::an inode}}<br><div class=""sub""> <div class=""sub c1-f""> think </div> </div> The fact that there is a limited number of inode numbers which are determined at fs creation time means that what is possible? <span class=""divider"">-&gt;</span> {{c1::Its possible to run out of inode numbers (and thus the ability to create no files)}} The amount of entries in the inode table is fixed when? <span class=""divider"">-&gt;</span> {{c1::at inode table creation time (=fs creation time)}} Oddly, what does an inode explicitly not contain? <span class=""divider"">-&gt;</span> {{c1::the file name}} Inode numbers are unique where? <span class=""divider"">-&gt;</span> {{c1::the file system}} In linux, what does any file have (to identify it and store metadata)? <span class=""divider"">-&gt;</span> {{c1::an associated inode}} How is the inode associated with the files contents? <span class=""divider"">-&gt;</span> {{c1::pointers}} All possible inode numbers are contained where? <span class=""divider"">-&gt;</span> {{c1::the inode table}} <div class=""c2-f""> Command for what? </div><div class=""c1-f""> Command for? </div><br>{{c1::df}}  <span class=""divider"">&lt;-&gt;</span> {{c2::report disk space usage}} <div class=""c2-f""> Sometimes (but incorrectly) shortened to? </div><div class=""c1-f""> Sometimes incorrectly short for? </div><br>{{c1::inode number}}  <span class=""divider"">&lt;-&gt;</span> {{c2::inode}} {{c1::2}}  <span class=""divider"">&lt;-&gt;</span> {{c2::/ (root)}} {{c1::1}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Bad blocks indication thingy}} {{c1::0}}  <span class=""divider"">&lt;-&gt;</span> {{c2::NULL (no inode)}} If linux finds an inode without a filename (that is referenced in no directory), where does it put it? <span class=""divider"">-&gt;</span> {{c1::lost+found}}"	acad::inf
"<div class=""c2-f""> What does this <code>gzip</code> option do?<br> </div><div class=""c1-f""> <code>gzip</code> option for this? </div><br>{{c1::<code>-d</code> / --decompress / --uncompress}}  <span class=""divider"">&lt;-&gt;</span> {{c2::unzip =&nbsp; decompress}}"	acad::inf
"The type of waiting that can be stopped by getting a signal is what? <span class=""divider"">-&gt;</span> {{c1::Interruptible waiting}} In unix, a process can be {{c1::running/runnable}}, {{c2::waiting}}, {{c3::stopped}}, or {{c4::zombie}}. A waiting process can either be what or whatß <span class=""divider"">-&gt;</span> {{c1::uninterruptible or interruptible}} A running process is either {{c1::the current process}} or {{c2::waiting to be assigned to one of the cpus}} A process that is either the current process or waiting to be assigned one of the CPUs is known as what? <span class=""divider"">-&gt;</span> {{c1::running}}"	acad::inf
"§§ ((c:8;::Observations)) are the ((c:9;::1st)) ((c:10;::component)) of ((c:11;::NVC)).  §<br> §§ The ((c:12;::life-alienated/violent version)) of ((c:13;::observations)) are ((c:14;::evaluations)). §<br> §§ ((c:15;::Observations)) and ((c:15;::evaluations)) make up ((c:17;::the totality)) of ((c:16;::possible statements 'about the world')). §<br> §§ Mixing ((c:18;::evaluations)) and ((c:18;::observations)) will lead to ((c:19;::confusion)). §<br> §§ ((c:20;::Observations)) are anything that ((c:21;::can be directly experienced ('that a camera would see'))). §<br> §§ ((c:22;::Evaluations)) are anything that ((c:23;::relies on our interpretations of the world)). §<br>  <table class=""cloze-group hide-if-inactive"">   <thead>     <tr>       <th>((c:6;::Evaluations))</th>       <th>((c:7;::Observations))</th>     </tr>   </thead>   <tbody>     <tr>       <td>         <table>           <tbody>             <tr>               <td>((c:1;::confusing predition with certainty))</td>               <td>((c:2;::presumption of insight into other's mental states))</td>               <td>((c:3;::not being specific about referents))</td>               <td>((c:4;::use of evaluative words))</td>               <td>((c:5;::use of quantifiers non-literally))</td>             </tr>           </tbody>         </table>       </td>       <td></td>     </tr>   </tbody> </table>  §§ About ((c:24;::more subjective things)), ((c:25;::observations)) ((c:26;::emphasize the situatedness of one's position (I didn't see you close the door &lt;-&gt; you didn't close the door))) §<br> §§ To ((c:27;::make an evaluation)) while ((c:28;::communicating non-violently)), ((c:29;::indicate that you are making an evaluation (This is however not a free pass to evaluate))) §<br> §§ ((c:30;::Quantifiers)) are ((c:31;::observations)) when ((c:32;::literally true)), and ((c:31;::evaluations)) when ((c:32;::they are not literally true)). §<br>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>   "	acad::nvc
"<table>   <thead>     <tr>       <th>Example</th>       <th>Thing that is evaluative, if any?</th>       <th>Form of evaluation, if any?</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>   <td>Doug procrastinates.</td>     <td><span class=""c1-cloze all-scr"">procrastinates</span></td>   <td><span class=""c2-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Doug only studies for exams the night before.</td>     <td><span class=""c3-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c4-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Hank Smith is a poor soccer player.</td>     <td><span class=""c5-cloze all-scr"">poor</span></td>   <td><span class=""c6-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Hank Smith has not scored a goal in twenty games.</td>     <td><span class=""c7-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c8-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>If you don’t eat balanced meals, your health will be impaired.</td>     <td><span class=""c9-cloze all-scr"">If ... will be impaired</span></td>   <td><span class=""c10-cloze all-scr"">confusing predition with certainty</span></td> </tr> <tr>   <td>If you don’t eat balanced meals, I fear your health may be impaired.</td>     <td><span class=""c11-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c12-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Jim is ugly.</td>     <td><span class=""c13-cloze all-scr"">ugly</span></td>   <td><span class=""c14-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>Jim’s looks don’t appeal to me.</td>     <td><span class=""c15-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c16-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>Your brow is furrowed.</td>     <td><span class=""c17-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c18-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>You're thinking of him again.</td>     <td><span class=""c19-cloze all-scr"">whole sentence</span></td>   <td><span class=""c20-cloze all-scr"">presuming to have insight into other's mental states</span></td> </tr>  <tr>   <td>“Pam was first in line every day this week.”</td>     <td><span class=""c21-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c22-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Sam didn’t ask for my opinion during the meeting.”</td>     <td><span class=""c23-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c24-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Yesterday evening Nancy bit her fingernails while watching television.”</td>     <td><span class=""c25-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c26-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“Henry is aggressive.”</td>     <td><span class=""c27-cloze all-scr"">aggressive</span></td>   <td><span class=""c28-cloze all-scr"">use of evaluative words</span></td> </tr>  <tr>   <td>“Janice works too much.”</td>     <td><span class=""c29-cloze all-scr"">too much</span></td>   <td><span class=""c30-cloze all-scr"">non-literal use of quantifiers</span></td> </tr>   <tr>   <td>“John was angry with me yesterday for no reason.”</td>     <td><span class=""c31-cloze all-scr"">for no reason (also angry)</span></td>   <td><span class=""c32-cloze all-scr"">presuming insight into other's mental state</span></td> </tr>  <tr>   <td>“Luke told me I didn’t look good in yellow.”</td>     <td><span class=""c33-cloze all-scr"">none (observation only)</span></td>   <td><span class=""c34-cloze all-scr"">none (observation only)</span></td> </tr>  <tr>   <td>“My aunt complains when I talk with her.”&nbsp;</td>     <td><span class=""c35-cloze all-scr"">complain</span></td>   <td><span class=""c36-cloze all-scr"">evaluative words or presuming insight into other's mental states</span></td> </tr>  <tr>   <td>“My father is a good man.”</td>     <td><span class=""c37-cloze all-scr"">good man</span></td>   <td><span class=""c38-cloze all-scr"">evaluative words</span></td> </tr>  <tr>   <td>“My son often doesn’t brush his teeth.”</td>     <td><span class=""c39-cloze all-scr"">often</span></td>   <td><span class=""c40-cloze all-scr"">non-literal quantifier (often cannot be literal, as it is undetermined)</span></td> </tr>    </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}</span>"	acad::nvc
"<table>   <thead>     <tr>       <th>Example</th>       <th>Expresses</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>   <td>I'm sad.</td>     <td><span class=""c1-cloze"">a feeling.</span></td> </tr>  <tr>   <td>“<mark>I feel scared</mark> when you say that.”</td>     <td><span class=""c2-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I’m happy</mark> that you can come.”</td>     <td><span class=""c3-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I’m sad</mark> that you’re leaving.”</td>     <td><span class=""c4-cloze"">A feeling</span></td> </tr>  <tr>   <td>“<mark>I feel good</mark> about what you did for me.”</td>     <td><span class=""c5-cloze"">A feeling (but quite vaguely)</span></td> </tr>  <tr>   <td>“I feel like hitting you.”</td>     <td><span class=""c6-cloze"">A thought</span></td> </tr>  <tr>   <td>“I feel misunderstood.”</td>     <td><span class=""c7-cloze"">A thought</span></td> </tr>  <tr>   <td>“I’m worthless.”</td>     <td><span class=""c8-cloze"">A thought</span></td> </tr>  <tr>   <td>“When you don’t greet me, <mark>I feel neglected.</mark>”</td>     <td><span class=""c9-cloze"">A  thought</span></td> </tr>  <tr>   <td>“You’re disgusting.”</td>     <td><span class=""c10-cloze"">A thought (or perhaps an evaluation, not that that distinction matters much)</span></td> </tr>  <tr>   <td>“I feel Amy has been pretty responsible.”</td>     <td><span class=""c11-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel I am constantly on call.”</td>     <td><span class=""c12-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel as if I’m living with a wall.”</td>     <td><span class=""c13-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel it is useless.”</td>     <td><span class=""c14-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel like a failure.”</td>     <td><span class=""c15-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel my boss is being manipulative.”</td>     <td><span class=""c16-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel that you should know better.”</td>     <td><span class=""c17-cloze"">a thought (not a feeling)</span></td> </tr>  <tr>   <td>“I feel you don’t love me.”</td>     <td><span class=""c18-cloze"">A thought (not a feeling)</span></td> </tr>    </tbody> </table><br><div class=""sub""> <div class=""sub c1-b c2-f""> although, since the need is nit being expressed, the sentence as a whole may still be violen </div> <div class=""sub c1-b c2-f""> although of course the need is kinda missing </div> </div>"	acad::nvc
"<div class='c1-f'> What form of evaluation is this? </div><br/>You seldom do what I want. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>You are always busy. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>Whenever I have observed Jack on the phone, he has spoken for at least thirty minutes. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div><br/>The last three times I initiated an activity, you said you didn’t want to do it. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div><br/>She is never there when she’s needed. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>Immigrants don’t take care of their property. <span class=""divider"">-></span> {{c1::failure to be specific about referents}} <div class='c1-f'> What form of evaluation is this? </div><br/>I have not seen the immigrant family living at 1679 Ross shovel the snow on their sidewalk. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div><br/>He frequently comes over. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>He comes over at least three times a week. <span class=""divider"">-></span> {{c1::none}}"	acad::nvc
"When requests are reformulated to being positive, precise, and actionable, what may they turn out to be? <span class=""divider"">-></span> {{c1::very different then what their abstract formulation implied}}"	acad::nvc
"After being put into clear positive actionable language, what did a specific father's request to ""show a little responsibility"" morph into? <span class=""divider"">-></span> {{c1::""Well, it doesn't sound so good, but when I say that I want responsibility, what I really mean is that I want him to do what I ask, without question - to jump when I say jump, and to smile while doing it""}}<br/><div class=""sub""> <div class=""sub c2-b"" > which of course isn't actually responsibility </div> </div>"	acad::nvc
"Using clear positive actionable language makes it clear what we're requesting of others, but what does it also do? <span class=""divider"">-></span> {{c1::Clarify what we want (are requesting) for ourselves}}"	acad::nvc
"When would we be likely to request honesty from a listener? <span class=""divider"">-&gt;</span> {{c1::After we've expressed ourself vulnerably}} What might even a sentence seemingly requesting nothing actually be requesting? <span class=""divider"">-&gt;</span> {{c1::something like an acknowledgement that one was heard/understood}} What does Marshall Rosenberg argue relative to how many things we say are requesting something? <span class=""divider"">-&gt;</span> {{c1::all things}} What can you request to help to make sure communication is not being misunderstood (is being accurately recieved)? <span class=""divider"">-&gt;</span> {{c1::requesting a reflection}} In general, when we're requesting honesty, we might want to know {{c1::what the listener is feeling/needing/observing)}}, {{c2::what the listener is thinking}}, or {{c3::if the listener would be willing to take a particular action = a normal request}} If not accompanied by the speakers (observations, )feelings and needs (the other three components), what may genuine requests sound like? <span class=""divider"">-&gt;</span> {{c1::demands}} Genuine requests may sound like demands when it is unaccompanied by what? <span class=""divider"">-&gt;</span> {{c1::If not accompanied by the other 3 components}} Even in normal conversation, what increases the likelyhood that the person will respond in a way that would help you in the moment (empathy, honesty, an acknwledgement...)? <span class=""divider"">-&gt;</span> {{c1::Making the relevant request}}"	acad::nvc
"Requesting a reflection might sound something like? <span class=""divider"">-></span> {{c1::Could you tell me what you just heard me say?}}"	acad::nvc
"Where is it especially important to know what you are requesting with a specific beitrag? <span class=""divider"">-></span> {{c1::In groups}}"	acad::nvc
"In groups, how is a lot of time often wasted, related to NVC requests? <span class=""divider"">-></span> {{c1::when speakers are not certain what they are wanting ('requesting' in NVC parlance)}}"	acad::nvc
"what would having bas-concousness involve? <span class=""divider"">-></span> {{c1::making clear when a question etc. has been adequately answered (and moving on is possible)}}"	acad::nvc
"making clear when a question etc. has been adequately answered (and moving on is possible) might be called what? <span class=""divider"">-></span> {{c1::bas-consciousness}}"	acad::nvc
"<div class='c1-f'> What form of evaluation is this? </div><br/>You seldom do what I want. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>You are always busy. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>Whenever I have observed Jack on the phone, he has spoken for at least thirty minutes. <span class=""divider"">-></span> {{c1::none, is an observation}} <div class='c1-f'> What form of evaluation is this? </div><br/>The last three times I initiated an activity, you said you didn’t want to do it. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div><br/>She is never there when she’s needed. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}} <div class='c1-f'> What form of evaluation is this? </div><br/>Immigrants don’t take care of their property. <span class=""divider"">-></span> {{c1::not being specific about referents}} <div class='c1-f'> What form of evaluation is this? </div><br/>I have not seen the immigrant family living at 1679 Ross shovel the snow on their sidewalk. <span class=""divider"">-></span> {{c1::none}} <div class='c1-f'> What form of evaluation is this? </div><br/>I cannot recall your ever writing to me. <span class=""divider"">-></span> {{c1::none&nbsp;}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > I mean, since this is a claim about remembering, it technically isn't an evaluation, but it's a little sketchy to me </div> </div> <div class='c1-f'> What form of evaluation is this? </div><br/>He frequently comes over. <span class=""divider"">-></span> {{c1::use of quantifiers non-literally}}"	acad::nvc
"What phrase denying choice&nbsp; always (as far as I can see) indicates life-alienating communication? <span class=""divider"">-></span> {{c1::""have to""}}"	acad::nvc
"Us talking in terms of ""have to"" is what form of communication (top-level distinction)? <span class=""divider"">-></span> {{c1::Life-alienating communication}}"	acad::nvc
"How does life-alienating communication go through the world looking at what happens/why things happen/what should happen (what does it use as a frame of reference)? <span class=""divider"">-></span> {{c1::In terms of 'who is what'}}"	acad::nvc
"<q>Who is what</q> is life-alienating communication's what?&nbsp; <span class=""divider"">-></span> {{c1::way of looking at the world / frame of reference}}"	acad::nvc
"Why is life-alienating communication tragic? <span class=""divider"">-></span> {{c1::because the needs behind it will probably not be met}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, what can this 'what' be (three possible values, of which one is rare) <span class=""divider"">-></span> {{c1::too much or too little (or rarely, exactly right)}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > can be as in this is how it is, this isn't how it should be (in fact it is the opposite) </div> </div>"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, who is the frame of reference for 'too much' or 'too little'? <span class=""divider"">-></span> {{c1::Ourselves}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, if someone does something more than us, they are doing it how? <span class=""divider"">-></span> {{c1::too much}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, if someone does something less than us, they are doing it how? <span class=""divider"">-></span> {{c1::too little}}"	acad::nvc
"When we think in terms of ""who is what"" in life-alienating communication, (according to me) besides everything everyone else does either being too much or too little, what could also be the case? <span class=""divider"">-></span> {{c1::everything I do is either too much or too little}}"	acad::nvc
"The fact that we see the what in ""who is what"" = life-alienating communication always as either too much or too little in comparison with ourselves means that we are invested in communicating this how? <span class=""divider"">-></span> {{c1::with comparisons (to ourselves) only}}"	acad::nvc
"Instead of recieving empathy, what is often the default (and mostly life-alienating) response? <span class=""divider"">-></span> {{c1::to offer help (=advice/reassurance)}}"	acad::nvc
"offering help (=advice/reassurance) instead of offering empathy = paraphrasing (through the four components) is mostly what kind of communication? <span class=""divider"">-></span> {{c1::life-alienating}}"	acad::nvc
"offering help (=advice/reassurance) instead of empathy = paraphrasing (through the four components) often feels what (for the reciever)? <span class=""divider"">-></span> {{c1::painful, frustrating, helpless}}"	acad::nvc
"If we're listening to what people are thinking and trying to understand that intellectually, what does that make a lot harder? <span class=""divider"">-></span> {{c1::Trying to sense their feelings and needs the compassionate communication way}}"	acad::nvc
"As always, what do we want to make sure about whom the questions in paraphrasing are imputing the ownership of the four components to? <span class=""divider"">-></span> {{c1::the relevant (in this case the other) person}}"	acad::nvc
"The act of paraphrasing, esp. through the four components, generally makes the other person feel how? <span class=""divider"">-></span> {{c1::very relieved}}"	acad::nvc
the more {{c1::emotionally charged a situation}}, the more it will likely it will be helpful to use hte nvc tools of {{c2:: paraphrasing/reflections}}	acad::nvc
"Sometimes, instead of reflecting one or more of the four components, what might a paraphrase be? <span class=""divider"">-></span> {{c1::A repetition of what they said}}"	acad::nvc
"At the point where a reflection is repeating what the other person just said, which three theories/practices overlap? <span class=""divider"">-></span> {{c1::NVC, the mirror from never split the difference, and repetition (meisner)}}"	acad::nvc
"In general, NVC makes some exchanges take longer than they normally would, however, what might take even longer? <span class=""divider"">-></span> {{c1::Going on without understanding each other}}"	acad::nvc
"For the empathizing half of NVC, what might moving too quickly cause, related to the thoughts of the other person? <span class=""divider"">-></span> {{c1::The thought that you just want rid of them}}"	acad::nvc
"For the empathizing half of NVC, what might moving too quickly cause, related to the depth of the feelings/needs? <span class=""divider"">-></span> {{c1::those very deep down might remain undiscovered}}"	acad::nvc
"What is an expressed feeling/need (even if expressed in a life-alienating way) often (only), in relation to more things? <span class=""divider"">-></span> {{c1::the tip of the iceberg}}"	acad::nvc
"If we stay in the giving empathy half of NVC longer, what will often emerge? <span class=""divider"">-></span> {{c1::deeper feelings/needs}}"	acad::nvc
"What will often happen to the bodies of both people engaged in NVC once the thing has been explored and empathized with all the way down? <span class=""divider"">-></span> {{c1::palpable release of tension}}"	acad::nvc
related to the person talking if engaged in NVC, once the thing has been explored and empathized with all the way down, they will often stop   {{c1:: talking}}	acad::nvc
"If we can't empathize with someone despite our efforts, what is this a sign of? <span class=""divider"">-></span> {{c1::That we need empathy ourselves}}"	acad::nvc
"If we are desperately needing empathy ourselves, what can we often not do? <span class=""divider"">-></span> {{c1::give empathy}}"	acad::nvc
"Besides other people, who can give you empathy? <span class=""divider"">-></span> {{c1::you yourself}}"	acad::nvc
"What is the (perhaps) best option if you yourself are needing empathy too much to hear the other person (in a given situation)? <span class=""divider"">-></span> {{c1::give yourself empathy}}"	acad::nvc
"If you're in a situation where the other person is needing empathy, but you just can't give it right now, what is a possible safeword-like mechanism? <span class=""divider"">-></span> {{c1::screaming nonviolently}}"	acad::nvc
"If you're in a situation where the other person is needing empathy, and you are too and even screaming nonviolently won't help, what should you probably do? <span class=""divider"">-></span> {{c1::remove yourself from the situation}}"	acad::nvc
"Nonviolently screaming involves what without using life-alienated communication such as blaming? <span class=""divider"">-></span> {{c1::Expressing your pain}}"	acad::nvc
"Nonviolently screaming involves expression pain without what? <span class=""divider"">-></span> {{c1::without life-alienated elements (e.g. blame)}}"	acad::nvc
"Expressing your (large amount) of pain non-violently without life-alienated elements (e.g.) blame is known as what? <span class=""divider"">-></span> {{c1::screaming non-violently}}"	acad::nvc
"<div class='c1-f'> What is this answer doing (and what might be better, if anything)? </div><br/><q>How could I do something so stupid?</q> - <q>Nobody is perfect, you're too hard on yourself</q> <span class=""divider"">-></span> {{c1::offering help (better: paraphrasing = empathizing)}}"	acad::nvc
"how does recieving true empathy feel? <span class=""divider"">-></span> {{c1::very good}}"	acad::nvc
"What happens to our perception after we've recieved empathy? <span class=""divider"">-></span> {{c1::It shifts, often dramatically}}"	acad::nvc
"Often, what we require to have our problems begin to be solvable is just... <span class=""divider"">-></span> {{c1::recieving empathy properly}}"	acad::nvc
"In hierarchical relationships, what might present an additional hurdle to empathizing? <span class=""divider"">-></span> {{c1::It's harder (in different ways) to empathize with people above you in hierarchy}}"	acad::nvc
"The more we empathize, the more we will feel what, related to things that will then help us open up ourselves? <span class=""divider"">-></span> {{c1::safe (to be vulnerable)}}"	acad::nvc
"in NVC, the more we feel safe (to be vulnerable), the more we will be able to do what? <span class=""divider"">-></span> {{c1::Make ourselves vulnerable by expressing ourselves in NVC}}"	acad::nvc
"What shouldn't you do with 'but'? <span class=""divider"">-></span> {{c1::Don't put your 'but' in people's faces}}"	acad::nvc
"What might be one of the most life-alienating ways to respond to somebody? <span class=""divider"">-></span> {{c1::but}}"	acad::nvc
"Counterintuitively (well, not actually, but y'know), whom might it be most difficult to give empathy? <span class=""divider"">-></span> {{c1::those closest to us}}"	acad::nvc
"Often, what can using NVC do to a lifeless conversation where you're not quite sure why a person is droning on about sth? <span class=""divider"">-></span> {{c1::revive it}}"	acad::nvc
"If you're having a boring conversation where you seem to be stuck, what might you do (using NVC)? <span class=""divider"">-></span> {{c1::interrupt with empathy}}"	acad::nvc
"If silence comes from another person in an NVC exchange, what can it be wise to do? <span class=""divider"">-></span> {{c1::empathize with that silence (as if it was something the person had said)}}"	acad::nvc
"When we communicate with <b>ourselves</b> in life-alienating ways, what will it be hard to do? <span class=""divider"">-></span> {{c1::engage in compassionate communication with others}}"	acad::nvc
"Quote about noticing the special thing <span class=""divider"">-></span> {{c1::<q>I want him to know exactly the special thing he is or else he won’t notice it when it starts to go.</q>}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" >  Herb Gardner, A Thousand Clowns </div> </div>"	acad::nvc
"Quote about humans and chairs <span class=""divider"">-></span> {{c1::<q>And I want him to know the subtle, sneaky, important reason why he was born a human being and not a chair.</q>}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" >  Herb Gardner, A Thousand Clowns </div> </div>"	acad::nvc
"Marshall says that trying to change ourselves by talking to ourselves in life-alienating ways is how effective? <span class=""divider"">-></span> {{c1::unlikely to be effective}}"	acad::nvc
"Marshall says that trying to change ourselves by talking to ourselves in life-alienating ways does what, even if it happens to be effective? <span class=""divider"">-></span> {{c1::infuse our success with that kind of energy}}"	acad::nvc
"To Marshall, what kind of (self) communication is shame? <span class=""divider"">-></span> {{c1::Another form of life-alienating communication}}"	acad::nvc
"If we act from life-alienating motives in our individual lives, then what will that do even to seemingly separate spheres and interactions? <span class=""divider"">-></span> {{c1::infuse them with that energy}}"	acad::nvc
"Instead of telling ourselves what to do in life-alienating ways, what would be a more effective and joyful way to go about it? <span class=""divider"">-></span> {{c1::embracing our unmet needs (that make us want to do these things)}}"	acad::nvc
"Should belongs to what half of communication? <span class=""divider"">-></span> {{c1::life-alienating}}"	acad::nvc
"When we engage with ourselves in life-alienating communication, what would probably be better? <span class=""divider"">-></span> {{c1::engage withourselves via compassionate communication}}"	acad::nvc
"What has made it nearly impossible to only ever act in accordance with compassionate communication? <span class=""divider"">-></span> {{c1::our high level of training in life-alienating communication}}"	acad::nvc
"According to NVC, how many things are there that we have to do? <span class=""divider"">-></span> {{c1::0}}"	acad::nvc
"When we do something that makes us unhappy with ourselves, according to NVC, what would the best step to take probably be? <span class=""divider"">-></span> {{c1::do some NVC mourning}}"	acad::nvc
"When we do something that makes us unhappy with ourselves, after we've done some NVC mourning, what is that followed by? <span class=""divider"">-></span> {{c1::NVC self-forgiveness}}"	acad::nvc
"NVC mourning -&gt; NVC forgiveness is something we primarily do when? <span class=""divider"">-></span> {{c1::when we've done something that makes us less than happy with ourselves}}"	acad::nvc
"In NVC mourning, we try and connect with what stimulated by past actions we now regret? <span class=""divider"">-></span> {{c1::Our feelings and unmet needs}}"	acad::nvc
"In NVC mourning, we try and connect with our feelings and unmet needs stimulated by what? <span class=""divider"">-></span> {{c1::past actions we now regret}}"	acad::nvc
"Connecting with our feelings and unmet needs stimulated by past actions we now regret is what? <span class=""divider"">-></span> {{c1::NVC mourning}}"	acad::nvc
"Focusing on the actions we now regret and asking ourselves which needs we were trying to meet when we were taking those actions is what? <span class=""divider"">-></span> {{c1::NVC self-forgiveness}}"	acad::nvc
"NVC self-forgiveness involves focusing on <b>what</b> and asking ourselves which needs we were trying to meet when we were doing <b>that</b>? <span class=""divider"">-></span> {{c1:: the actions we now regret}}"	acad::nvc
"NVC self-forgiveness involves focusing on the actions we now regret and asking ourselves what? <span class=""divider"">-></span> {{c1::which needs we were trying to meet when we were taking those actions}}"	acad::nvc
"in going through NVC mourning and self-forgiveness, which two things are we trying to hold? <span class=""divider"">-></span> {{c1::both the part of us that regrets the action and the part of us that took the action in the first place}}"	acad::nvc
"Ideas such as that all forms of have to and should are life-alienating and thus doing anything is a choice gives rise to which idea (of Marshall Rosenberg) about what to do and not to do? <span class=""divider"">-></span> {{c1::Don't do anything that isn't play}}"	acad::nvc
"According to NVC, since any action we take is being done to meet some needs, what doesn't exist? <span class=""divider"">-></span> {{c1::things we have to do}}"	acad::nvc
"To create clarity why we are doing things, and if we could meet our needs better somehow, we can take sentences including have to and... <span class=""divider"">-></span> {{c1::substitute 'choose to'}}"	acad::nvc
"To create clarity why we are doing things, and if we could meet our needs better somehow, we can take sentences including have to, substitute 'choose to', and ... <span class=""divider"">-></span> {{c1::add the need (or need-like) you are trying to meet}}"	acad::nvc
"What does Marshall claim about hurting people (in a wide sense) and expressing anger? <span class=""divider"">-></span> {{c1::it's too superficial}}"	acad::nvc
"for NVC, money is not what, but rather what? <span class=""divider"">-></span> {{c1::not a need, but only one of many strategies for meeting needs}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem a lot like needs (and may be strategies for meeting needs), but which do what? <span class=""divider"">-></span> {{c1::often don't end up enriching life}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem like what, but which often don't end up enriching life? <span class=""divider"">-></span> {{c1::seem a lot like needs (and may be strategies for meeting needs)}}"	acad::nvc
"Marshall lists a set of common reasons for acting that seem a lot like needs (and may be strategies for meeting needs), but which often don't end up enriching life. What would be some examples? <span class=""divider"">-></span> {{c1::Money, approval, escaping punishment, avoiding shame/guilt, sense of duty}}"	acad::nvc
"Marshall Rosenberg claims that anger stems from what? <span class=""divider"">-&gt;</span> {{c1::our judgements of ""who-is-what"" and concomittant too much/littleness}}<br><div class=""sub""> <div class=""sub c1-f c2-b""> besides other feelings &amp; unmet needs? </div> </div>"	acad::nvc
"Saying something like ""You know, you are really a killer of the planet, you have no right to abuse the land in this way"" will not get us towards our goal of environmental protection because what generally does not get us closer to our goals? <span class=""divider"">-></span> {{c1::life-alienating communication}}"	acad::nvc
Expressing anger the NVC way:<br>1. {{c1::Stop. Breathe.}}<br>2. {{c2::Identify our judgmental thoughts.}}<br>3. {{c3::connect with and Express our feelings and unmet needs.}}	acad::nvc
"When we are angry, besides the needs that caused us to be angry, what do is our need probably? <span class=""divider"">-></span> {{c1::For the other person to truly hear our need}}"	acad::nvc
"For the other person to truly hear our pain (in an event that made us angry), what do we need to do (high-level view)? <span class=""divider"">-></span> {{c1::Engage with them in a NVC process}}"	acad::nvc
"Since NVC can be difficult, what do we need to do while using it, especially if we're not used to it? <span class=""divider"">-></span> {{c1::take our time}}"	acad::nvc
"more specifically, for conflict resolution using NVC, we {{c1::hear their needs}}, {{c2::express our own needs}}, and {{c3::make sure that we've accurately heard each other}}, and only then we try to move on to {{c4::requests=resolution}}"	acad::nvc
"If we're engaging in an NVC process, we want to hear the things the other party says in terms of the four components regardless of? <span class=""divider"">-></span> {{c1::what they're actually saying / how they're saying it}}"	acad::nvc
"When someone is incapable of hearing the other person in terms of feelings and needs even when expressed as such, what might be the case? <span class=""divider"">-></span> {{c1::might be in too much pain (and thus themselves need empathy)}}"	acad::nvc
"If a person is in too much pain to be able to hear anyone else's feelings and needs, what is often necessary? <span class=""divider"">-></span> {{c1::giving this person empathy first}}"	acad::nvc
"if you're mediating a conflict with NVC, and one of the parties accuses you of favoritism because you spend too much time with the other party, what might you need to give them? <span class=""divider"">-></span> {{c1::first-aid empathy}}"	acad::nvc
"If a situation gets too heated and verfahren, what might you need to do as NVC mediator? <span class=""divider"">-></span> {{c1::Interrupt}}"	acad::nvc
"If we interrupt in NVC meditation, what is the goal? <span class=""divider"">-></span> {{c1::to restore the process}}"	acad::nvc
"What is the only time physical force is justified in NVC? <span class=""divider"">-></span> {{c1::to prevent imminent danger}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > for no other reason! </div> </div>"	acad::nvc
"<div class='c1-f'> How are these sentence expressing appreciation? </div><br/>""You did a good job on that report."", ""You are a very sensitive person."", ""It was kind of you ot offer me a ride home last evening."" <span class=""divider"">-></span> {{c1::They're expressing appreciation in a life-alienating way}}"	acad::nvc
"If someone tells us <q>no</q>, instead of reacting hurt or trying to convince etc, what does NVC advise us to do? <span class=""divider"">-></span> {{c1::treat it like any other expression (and hear the feelings, needs behind it etc.)}}"	acad::nvc
"In assessing if something is life-alienated, what is the relevance of the statement being positive (you're beautiful) or negative (you're ugly)? <span class=""divider"">-></span> {{c1::generally, no difference}}"	acad::nvc
"Like any important NVC message, what can be difficult about NVC appreciaton-expressing? <span class=""divider"">-></span> {{c1::It often feels scary and vulnerable}}"	acad::nvc
"the fact that a base feature is used to conferr a social property and that this is how the social property is constructed, thus becoming socially significant is an idea that Ásta calls what? <span class=""divider"">-></span> {{c1::social construction as social significance}}"	acad::phil
"Besides obviously socially constituted things such as a move in chess, what can searle's account of constitution also explain? <span class=""divider"">-></span> {{c1::less obviously social things such as physical things being used in a certain way}}"	acad::phil
"Having red hair is probably what kind of property, and being a redhead is probably what kind of property? <span class=""divider"">-></span> {{c1::a natural property, a social property}}<br/><div class=""sub""> <div class=""sub c1-f"" > Asta </div> </div>"	acad::phil
"What Khalidian account of social categories/properties is conferralism committed to? <span class=""divider"">-></span> {{c1::botht their existence and their membership is dependent on subjects}}"	acad::phil
"Many historians (CJ coventry, david olusoga) argue that the new term cancel culture hides what? <span class=""divider"">-></span> {{c1::that this is probably a way older phenomenon}} Someone who is subjected to the ostracism of cancel culture is said to be what? <span class=""divider"">-></span> {{c1::cancelled}} The practice of of publicly criticizing people for violating accepted behavioural standards is sometimes called what? <span class=""divider"">-></span> {{c1::callout culture}} callout culture is the practice&nbsp; of doing publicly criticizing people  why? <span class=""divider"">-></span> {{c1::for violating accepted behavioural standards (esp. in regards to social justice)}} callout culture is the practice&nbsp; of doing what for violating accepted behavioural standards? <span class=""divider"">-></span> {{c1::publicly criticizing people }} cancel culture is a stronger version (involving osctracisim) of what? <span class=""divider"">-></span> {{c1::callout culture}} cancel culture is a stronger version (involving what) of callout culture? <span class=""divider"">-></span> {{c1::osctracisim}} what is a stronger version (involving osctracisim) of callout culture? <span class=""divider"">-></span> {{c1::cancel culture}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > the term itself is charged though </div> </div>"	acad::phil
"Women's language containing the injunction against strong language and the resulting double bind may even cause people to view her how (if she obeys the gender prescriptions)? (Lakoff 1975) <span class=""divider"">-&gt;</span> {{c1::as less of a person/individual}} (Following lakoff) What are some examples of masculinity being the standard even for equality, related to language? <span class=""divider"">-&gt;</span> {{c1::It is highly valued (at least relatively) for women to start speaking more powerful mens language, but not men women's language}} Whil Robin Lakoff's introspective/native-speaker intuition data in&nbsp; Language and Womans place limits the scope of analysis to white, educated, middle-class women, she claims what? <span class=""divider"">-&gt;</span> {{c1::that it will hold most of the time for most english speakers}} What is the stereotype re color lexicon size and gender? <span class=""divider"">-&gt;</span> {{c1::Women use more distinct color terms}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> via Lakoff 1975, but common </div> </div> Lakoff 1975's fundamental idea of the double bind starts with the insight that there are some forms of language use which do what? <span class=""divider"">-&gt;</span> {{c1::confer real-world advantages}} Lakoff 1975's fundamental idea of the double bind starts with the insight that being conferred advantages can be based on what? <span class=""divider"">-&gt;</span> {{c1::one's language use}} Lakoff 1975 says that if men overhear women talk about 'trivial' topics such as shades of color, what will their reaction be? <span class=""divider"">-&gt;</span> {{c1::amusement/contempt}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> even though it is of course the division into genderlects that have rendered it something 'women talk about' in the first place! </div> </div> Lakoff 1975 argues that women having larger (but supposedly useless) lexica of colors&nbsp; is emblematic of which trend? <span class=""divider"">-&gt;</span> {{c1::that women's areas of concern are (or are supposed to be) trivial}} Lakoff 1975 argues that as a part of the female genderlect being weaker,&nbsp; men relegate to the female genderlect which topics? <span class=""divider"">-&gt;</span> {{c1::topics that they consider trivial}} For Lakoff 1975, the male lect containing strong/useful forms, and the female lect less so sets up which situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} For Lakoff 1975, language use can create real-world benefits, which relate how to genderlects? <span class=""divider"">-&gt;</span> {{c1::the male lect gets the powerful/useful forms}} According to lakoff, women's language norms create what kind of unavoidable situation? <span class=""divider"">-&gt;</span> {{c1::a double bind}} The stereotype of women not being able to make decisions, be changeable, etc. comes from where, according to Lakoff (1975)?  discouragement of women to contradict men, and thus having to be extra careful Lakoff (1975) argues that women use what things (for example) to weaken the potential strength/conflict-proneness of their statement?  Tag questions, hedges, statements-as-questions-by-intonation Lakoff (1975) argues that women use things like tag questions, statements with the intonation of questions and hedges why?  to weaken the potential strength/conflict-proneness of their statement Since women's language contains the injunction against strong language, she will either be censured as unwomanly (as usual for this type of double bind), or she will (the other side of the double bind)?  (Lakoff 1975)  not be able to assert her opinions as strongly"	acad::ling
"<div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::discussion about a discussin, discourse about discourse}}  <span class=""divider"">&lt;-&gt;</span> {{c2::metadiscourse}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > has a different meaning in linguistics </div> </div>"	acad::phil
"to create a new thing using a constructor, use what? <span class=""divider"">-&gt;</span> {{c1::the <code>new</code> keyword}} the <code>__proto__</code> property refers to what? <span class=""divider"">-&gt;</span> {{c1::the prototype of the current object}} null sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::at the top}} if you want to use the constructor of a given object <q>someObject</q>, what do you call? <span class=""divider"">-&gt;</span> {{c1::<code>new someObject.constructor()</code>}} getPrototypeOf() gets what? <span class=""divider"">-&gt;</span> {{c1::the actual prototype (__proto__)}} __proto__ is nice to access the prototype, but is what...? <span class=""divider"">-&gt;</span> {{c1::non-standard}} Why do functions have properties, how is that even possible? <span class=""divider"">-&gt;</span> {{c1::functions are Objects}} Whose <code>prototype</code> property contains the constructor property? <span class=""divider"">-&gt;</span> {{c1::that of a constructor function}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> but isn't anything that has this property automatically a constructor??????? </div> </div> Which JS methods <b>will</b> be inherited by things that are instances of from the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the <code>prototype</code> property}} Which JS methods <b>will not</b>&nbsp;be inherited by things that instantiate the relevant thing? <span class=""divider"">-&gt;</span> {{c1::things defined on the thing directly}} Where can you find the constructor that was used to create a given object? <span class=""divider"">-&gt;</span> {{c1::its constructor property (which it is actually on its __proto__, as you would expect)}} When will JS walk up the prototype chain to find a method? <span class=""divider"">-&gt;</span> {{c1::if the relevant Object does not have it}} What's the problem of declaring properties on the constructor prototype? <span class=""divider"">-&gt;</span> {{c1::<code>this</code> will not have the correct scope}} What sits at the top of the prototype chain? <span class=""divider"">-&gt;</span> {{c1::null}} What is super confusing abut the <code>prototype</code> property in JS? <span class=""divider"">-&gt;</span> {{c1::it does not refer to the actual prototype -.-}} What does the 2nd-to-top element of the prototype chain have as its prototype? <span class=""divider"">-&gt;</span> {{c1::<font face=""monospace"">null}} What does the  <code>prototype</code> property of a constructor function definitely contain? <span class=""divider"">-&gt;</span> {{c1::the constructor property}} What are JS functions actually, internally? <span class=""divider"">-&gt;</span> {{c1::Objects}} The whole class syntax is what, related to how JS inheritance and objects actually work? <span class=""divider"">-&gt;</span> {{c1::syntactic sugar}} The methods defined in the <code>prototype</code> property have what characteristic?  <span class=""divider"">-&gt;</span> {{c1::Will be inherited}} The fact that if an object has a property with a certain name, properties with the same name further up the prototype chain will not be visited is known as what? <span class=""divider"">-&gt;</span> {{c1::prototype shadowing}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> cf name shadowing </div> </div> The <code>prototype</code> does not refer to the prototype of an object, instead, what does? <span class=""divider"">-&gt;</span> {{c1::the <code>__proto__</code> property}} More standard way to access the actual prototype of the Object? <span class=""divider"">-&gt;</span> {{c1::getPrototypeOf()}} If you want to find out what the name of the constructor function that someObject was created with is, what would you do? <span class=""divider"">-&gt;</span> {{c1::<code>someObject.constructor.name</code>}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which is obv not defined on someObject itself, but further up the prototype chain </div> </div> If we wanted to delete a method from all instances of something, where would we remove it from? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function (or the __proto__ of any of the objects, since someObj.__proto__ == constructorOfObj.prototype)}} If we wanted all instances of something to gain a method, where would we add it? <span class=""divider"">-&gt;</span> {{c1::the prototype of the constructor function}} If we delete something from the prototype of the constructor, where is it deleted? <span class=""divider"">-&gt;</span> {{c1::from all instances}} If we call a method on something that doesn't have that method, what does JS do? <span class=""divider"">-&gt;</span> {{c1::walk up the prototype chain until it finds it}} If we add something to the prototype of the constructor, who can then access it? <span class=""divider"">-&gt;</span> {{c1::any instance}} <div class=""c2-f""> What does this sometimes also indicate? </div><div class=""c1-f""> How is this sometimes indicated, esp in ECMAScript design documents? </div><br>{{c1::[[Prototype]]}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the actual prototype}} having prototypes of prototypes in JS establishes what? <span class=""divider"">-&gt;</span> {{c1::the prototype chain}} What is the prototype chain? <span class=""divider"">-&gt;</span> {{c1::the prototypes of prototypes (__proto__) etc.}} The mechanism that handles JS inheritance is what? <span class=""divider"">-&gt;</span> {{c1::prototype}} if bar's <code>prototype</code> property is foo's prototype (__proto__), then... <span class=""divider"">-&gt;</span> {{c1::foo is an instance of bar}} When does a function become a constructor? <span class=""divider"">-&gt;</span> {{c1::When it is called with the new operator}} What is the performance impact of traversing the prototype chain? <span class=""divider"">-&gt;</span> {{c1::can be signifcant}} What do almost all JS objects inherit from? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} What do all functions inherit from? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}} What are almost all JS objects instances of? <span class=""divider"">-&gt;</span> {{c1::Object}} What are all arrays instances of (directly)? <span class=""divider"">-&gt;</span> {{c1::Array}} The first argument Object.create takes is... <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) it will have&nbsp;}} In JS, foo is an instance of bar if bar's what is foo's what? <span class=""divider"">-&gt;</span> {{c1::bar's <code>prototype</code> property is foo's prototype (__proto__)}} Function.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} For Object.create, the thing to use as prototype (__proto__) goes where? <span class=""divider"">-&gt;</span> {{c1::first argument}} Creating an object and specifying which prototype (__proto__) you want explicitly is done how? <span class=""divider"">-&gt;</span> {{c1::Object.create}} Any function that you call with the new operator is what, in JS? <span class=""divider"">-&gt;</span> {{c1::a constructor}} A constructor is what which you call with the new operator? <span class=""divider"">-&gt;</span> {{c1::a function}} <div class=""c2-f""> Object.prototype method for? </div><div class=""c1-f""> Object.prototype method for? </div><br>{{c1::hasOwnProperty}}  <span class=""divider"">&lt;-&gt;</span> {{c2::seeing if the property is not inherited or inherited}} <div class=""c1-f""> What will this be? </div><br>Object.create(Array.prototype).__proto__  <span class=""divider"">-&gt;</span> {{c1::Array.prototype including methods such as push...}} <div class=""c1-f""> What will Array.prototype be to the newly created object? </div><br>Object.create(Array.prototype) <span class=""divider"">-&gt;</span> {{c1::__proto__}}</font> Which kind of functions do not have a <code>prototype</code> property? <span class=""divider"">-&gt;</span> {{c1::arrow functions}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which is why they can't be used as constructors </div> </div> Which <b>kind of </b>functions <b>can</b> you call with <code>new</code> to create a new instance? <span class=""divider"">-&gt;</span> {{c1::any function that is not an arrow function}} When you create an object with object literal syntax in JS, what is its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} When you create an object with object literal syntax in JS, what constructor is used? <span class=""divider"">-&gt;</span> {{c1::the Object() constructor}} When functions are being used as constructors, where will the objects created by them have the things that were defined on constructor.prototype? <span class=""divider"">-&gt;</span> {{c1::their prototype (__proto__)}} When functions are being used as constructors, the prototype of the constructor function becomes what?  <span class=""divider"">-&gt;</span> {{c1::the prototype (__proto__) of the new object }} When functions are being used as constructors, the prototype (__proto__) of the new object will be equal to what? <span class=""divider"">-&gt;</span> {{c1::the <code>prototype</code> of the constructor function}} What sits at the second position of the prototype chain, below null? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Object.prototype sits where, as relates to the prototype chain? <span class=""divider"">-&gt;</span> {{c1::one below the top (below null)}} If you don't {{c1::supply a constructor to a <code>class</code> declaration}}, <span class=""c4-5-scr"">the constructor will be {{c2::an empty constructor}} if it is a {{c3::base class}}</span>, and <span class=""c2-3-scr"">{{c4::one that just calls the constructor of the parent class}} if it is a {{c5::derived class}}</span>. Array.prototype has what as it's prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Object.prototype}} Any given function has what as its prototype  (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Function.prototype}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> Any given array has what as its prototype (__proto__)? <span class=""divider"">-&gt;</span> {{c1::Array.prototype}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> which itself has a __proto__ of Object.prototype </div> </div> <div class=""c1-f""> Why doesn't this work? </div><br><pre><code>let temp = () =&gt; 5; new temp;</code></pre> <span class=""divider"">-&gt;</span> {{c1::arrow functions cannot be used as constructors}} The <code>typeof</code> things like <code>Array</code>, <code>Object</code>, <code>Function</code> is what? <span class=""divider"">-></span> {{c1::function}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > they are classes (in a sense) but classes are functions </div> </div>"	acad::js
"A table in latex is created by the tabular environment.  the tabular environment has a very specific syntax. Matrix syntax is similar to  {{c1::tabular syntax}} The call to \begin{tabular} takes an additional argument,  Defining {{c3::multiple columns}} within a {{c4::tabular}} argument: {{c5::*}} {{c6::{}} {{c1::amount}} {{c6::} }}{{c6::{}} {{c2::type}} {{c6::}&nbsp;}}&nbsp;<br><div class=""sub""> spacing is for anki clozes, not for latex </div> ((h:2;::<img src=""sm_147px-Multicolumn.svg.png"">))In comparison with normal columns, what do paragraph columns do?  wrap \multicolumn{ num_cols }{ alignment }{ contents } to wrap text within a table, what kind of columns should you use?  paaragraph columns cline{&lt;start&gt;-&lt;end&gt;}   generate a partial horizontal line from start to end multicolumn   create a collumn that is broader than one paragraph column of width width   p{width} tabular   a table<div class=""sub""> <div class=""sub c1-f""> syntax in html is what? (different from this) </div> <div class=""sub all-b""> the table environment is used for something different </div> </div> <div class=""c2-f""> Latex package for? </div><div class=""c1-f""> Latex package for? </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div><br>{{c1::longtable}}  <span class=""divider"">&lt;-&gt;</span> {{c2::allow tables to flow over page boundaries}}<br><div class=""sub""> <div class=""sub f""> package longtable </div> </div> <div class=""c2-f""> Environment that delimits what? </div><div class=""c1-f""> Is indicated by which environment? </div> <div class=""c2-f""> Indicate what? </div><div class=""c1-f""> Are indicated how? </div><br>((h:2;::<img src=""sm_5da95a8e56e67d6b497a09183e429c5d961f7323.svg"">)){{c1::matrix (and derivatives, pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a matrix&nbsp;}} {{c1::the letters in front of the matrix environment (pmatrix, bmatrix...)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the braces surrounding a matrix}}<br><div class=""sub""> <div class=""sub all-b""> the table environment is used for something different </div> </div>"	acad::latex
Internally, a Promise has the properties {{c1::[[PromiseState]]}} and {{c2::[[PromiseResult]]}}	acad::js
"\{{c1::stackrel}}{{c2::{top}{bot} }} will {{c3::render the top text above the bottom text}} In Latex, there are a bunch of commands starting with \text (which I will call \textwhatever) that indicate different fontstyles: \textbf, \textit, \textrm (roman), \texttt (monospace), \textsc (smallcaps) If you try to type text in a math env as-is, it will look weird, as latex is formatting it for math. To insert text in a math environment, you can use any of \mathwhatever, \textwhatever, or just \text. It is generally advised that you use \text or \textwhatever within math environments when you want to write text, and \mathwhatever when you want to write math that just happens to be in roman letters. For many but not all \textwhatever font formatting commands, latex has corresponding \mathwhatever fonts (e.g. \mathrm, \math. The \mathwhatever fonts only work within a math environment. The \textwhatever fonts also work within a math environment. Within a math environment, there are some differences between \mathwhatever and \texthatever:  \mathwhatever uses the defined math font and \textwhatever uses the defined text font (which may be different) \mathwhatever does not preserve spaces within, but \textwhatever does. you can nest \textwhatevers but not \mathwhatevers. some text styles only exist as \mathwhatevers, e.g. mathfrak (Fraktur), mathbb (Blackboard bold)  In math environments, besides using \textbf or \mathbf, you can bold symbols by using \boldsymbol or \pmb 'poor man's bold' (which however only works by duplicating characters 3 times slightly offset)  frac{a}{b}   fraction (bruch)||<img src=""sm_JFBz6.png""> sqrt[root]{math}   square root (wurzel) \sum_lower^upper  There are also commands for math functions that are pure text (e.g. sin, lim), which have the advantage over just typing the characters that proper formatting is guaranteed  For commands (esp. math) that take something lower, it is often indicated {{c1::_{foo}}} For commands (esp. math) that take something upper, it is often indicated {{c1::^{foo}}}  \bar{foo}|ad a bar on top of letter <div class='c2-f'> What does this indicate? </div><div class='c1-f'> How do we indicate this in latex? </div><br/>{{c1::x^{n}}}  <span class=""divider"">&lt;-&gt;</span> {{c2::x<sup>n</sup>}}<br/><div class=""sub""> <div class=""sub c2-f c1-b"" > for single characters {} are optional </div> </div> <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_403-4037364_6848425-integral-symbol.png"">)) ((h:2;::<img src=""sm_1200px-Greek_uc_sigma.svg.png"">)){{c1::int}}  <span class=""divider"">&lt;-&gt;</span> {{c2::integral}} {{c1::sum}}  <span class=""divider"">&lt;-&gt;</span> {{c2::render a sum}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_uNgnp.png"">)){{c1::overbrace}}  <span class=""divider"">&lt;-&gt;</span> {{c2::horizontal curly brace on top}} <div class='c2-f'> What does this command do? </div><div class='c1-f'> Command for this? </div><br/>((h:2;::<img src=""sm_binomial-coefficient-formula.png"">)){{c1::binom}}  <span class=""divider"">&lt;-&gt;</span> {{c2::binomial coefficient}}"	acad::latex
"Instead of writing key: function(... for methods, what can you write, in ES6? <span class=""divider"">-></span> {{c1::key(...}}"	acad::js
"When run on what will <pre><code data-codetype=""sh"">git branch -d </code></pre> fail? <span class=""divider"">-></span> {{c1::not fully merged branch}}"	acad::git
"<img src=""sm_tmp0ejxsp3b.png""> 1|Untracked 2|Unmodified 3|Modified 4|staged 5|add the file 6|edit the file  7|stage the file 8|remove the file 9|commit"	acad::git
"For git, the HEAD represents whose location? <span class=""divider"">-&gt;</span> {{c1::your location}} When you're on a branch, the HEAD is pointing to a branch reference, which is pointing to? <span class=""divider"">-&gt;</span> {{c1::the commit on the top of the branch (branch tip)}}"	acad::git
"Detached head state is when your HEAD is pointing to what? <span class=""divider"">-></span> {{c1::to a commit directly}}"	acad::git
"((h:1;::<img src=""sm_branch-and-history.png"">))When you create a new branch, the newly created pointer (the branch reference) points to what? <span class=""divider"">-></span> {{c1::the current commit the HEAD is indirectly pointing to}}"	acad::git
"In git, the cost of creating a branch is equivalent to what? <span class=""divider"">-></span> {{c1::the cost of creating a pointer}}"	acad::git
"<div class='c2-f'> short for? </div><div class='c1-f'> Short? </div><br/>{{c1::--oneline}}  <span class=""divider"">&lt;-&gt;</span> {{c2::--pretty=oneline --abbrev-commit}}"	acad::git
"<div class=""c2-f""> Allows us to do what? </div><div class=""c1-f""> How do we do this? </div><br>{{c1::process.exitCode}}  <span class=""divider"">&lt;-&gt;</span> {{c2::set the eventual exit code}}"	acad::node
"In contrast to most things, what does <code>process</code> not need to be? <span class=""divider"">-></span> {{c1::required=imported}}"	acad::node
"<div class='c2-f'> Nodejs library for? </div><div class='c1-f'> Nodejs library for? </div><br/>{{c1::inquirer.js}}  <span class=""divider"">&lt;-&gt;</span> {{c2::A collection of common interactive command line user interfaces. }} <div class='c2-f'> Nodejs library for? </div><div class='c1-f'> Nodejs library for? </div><br/>{{c1::citation.js}}  <span class=""divider"">&lt;-&gt;</span> {{c2::citation management in JS&nbsp;}} <div class='c2-f'> Nodejs library for? </div><div class='c1-f'> Nodejs library for? </div><br/>{{c1::chalk}}  <span class=""divider"">&lt;-&gt;</span> {{c2::command line output coloring}} <div class='c2-f'> Builtin nodejs library for? </div><div class='c1-f'> Builtin nodejs library for? </div><br/>{{c1::readline}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Read  from streams (such as STDIN)}} <div class=""c2-f""> Nodejs library for? </div><div class=""c1-f""> Nodejs library for? </div><br>{{c1::progress}}  <span class=""divider"">&lt;-&gt;</span> {{c2::ascii progress bar}}"	acad::node
"<div class='c2-f'> Allows you to do what? </div><div class='c1-f'> Via what do we do that? </div><br/>{{c1::module.exports = foo}}  <span class=""divider"">&lt;-&gt;</span> {{c2::set exactly one object as an export}}"	acad::node
"<div class='c2-f'> Allows you to do what? </div><div class='c1-f'> Is done how? </div><br/>{{c1::exports.foo = bar}}  <span class=""divider"">&lt;-&gt;</span> {{c2::export bar as foo}}"	acad::node
"<div class=""c1-f""> Does what? </div><br>{{c1::npm install a&nbsp; package at a specific version}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<code>npm install &lt;package&gt;@&lt;version&gt; </code>}}"	acad::node
"you can only require() what kind of packages? (related to install location) <span class=""divider"">-></span> {{c1::local packages}} What can't you do with global packages in node? <span class=""divider"">-></span> {{c1::require() them}} Since you can't require() global packages, what are they mainly useful for? <span class=""divider"">-></span> {{c1::cli tools}}"	acad::node
"besides running CLI tools, what is npx specifically often used for? <span class=""divider"">-></span> {{c1::running node at a specific version}}  Using npx avoids which problem? <span class=""divider"">-></span> {{c1::not having local packages on the PATH}}"	acad::node
"To get latex citations etc to work (when compiling), first...  pdf make (<code>pdflatex</code>) To get latex citations etc to work, first run the pdf maker (pdflatex), then run the citation processor, then...  run the pdf maker twice To get latex citations etc to work, first run the pdf maker, then  run the citation processor Latex' convention of naming everything to do with citation bibliography&lt;whatever&gt; reflects what usage of the word bibliography?  the wide sense (synonym to works cited / references) \usepackage[style=foo]{biblatex}   (biblatex) set the citation style to foo printbibliography   (biblatex) add a works cited/references section BibTeX is a {{c1::file format (.bib)}} as well as {{c2::a latex citation processor}} Common packages for citation management in latex are {{c1::biblatex}} and {{c2::natbib}} Common processors for .bib files for latex are {{c1::BibTeX}} and {{c2::biber}} In latex, what generally glues our latex file and our citations (in the .bib file) together?  a certain (citation) processor In latex, where do we generally save our citations?  a separate (.bib) file The confusing thing about BibTeX being two things is that even if you do what, you still use BibTeX the file format?  use a different processor The confusing thing about BibTeX being two things is that even if you use a different processor, you still?  use the .bib format biblatex is <b>most commonly </b>used with what as the processing program?  biber biblatex requires what as the processing program?  nothing in particular natbib requires what as the processing program?  BibTeX addbibresource   (biblatex) command to specify the location for your .bib file<div class=""sub""> <div class=""sub c1-b c2-f""> (well, biber does also support other formats) <br><img src=""sm_tmprbsz3kbb.jpg""><br></div> </div> <div class=""c1-f""> What's the problem? </div>What happens if you try to use e.g. biber with a file with file ending?  it'll not work (try to find files that don't exit) biber foo.tex  Call biber without extension (biber foo) if you call biber, the argument you call it with has what characteristic?  don't include file extension <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div>footnote{foo}   create a footnote containing foo<div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div><br> cite{foo}   cite a specific work with label foo footcite{foo}   cite a specific work with label foo in as a foot note nocite{foo}   add a specific work with label foo into the references/works cited section without referring to it in the text parencite{foo}   cite a specific work with label foo in parentheses textcite{foo}   cite a specific work with label foo in-text with parenthesees areound <b>a specific part</b> <div class=""c2-f""> What does this command do? </div><div class=""c1-f""> Command for this? </div><br>appendix   generate an appendix"	acad::latex
"Why will a tab freeze if you run code that takes very long?  because JS is single threaded and thus has to process the message to comopletion Why is the timeout we give setTimeout only a minimum time?  because its put at the end of the message queue and thus might take longer Why are we guaranteed that the things we are using from our function will not change 'behind our backs' while the function is running?  because we will always finish processing the curreent message (and thus the current stack contents) before we do anything else When the event loop processes a message in the message queue, what does it do?  calls the corresponding function What runs on JS's single thread hosts the event loop. The event loop processes the message queue Once the event loop has called the function of a message, when is it done?  when the call stack is empty Once the event loop has called the function of a message, what will it do with subsequent function calls within?  new stack frame on the stack In JS, stack frames are called execution contexts.  Each execution context contains a scope chain, which is a lists of lexical scopes from inner to outer. A lexical environment is a structure that holds identifiers and the variables/functions they refer to. What does setTimeout do with its function argument? (JS-internal view)  adds a new message with this function at the end of the message queue What does each  message in the message queue have associated with it?  a function Until the stack is empty, what can't we do?  start processing a new message In browsers generally each tab has  its own heap, stack and message queue If there's something on the stack, then what are we doing?  processing a message in the message queue How is JS threaded?  single-theaded Besides the heap and call stack, what does JS also have, as a core part of the implementation?  the message queue"	acad::js
"to add something to the evenet queue of another runtime, what method can one use? <span class=""divider"">-></span> {{c1::window.postMessage()}}"	acad::js
CORS|Cross-Origin Resource Sharing	acad::js
"the little secondary queue that will (probably) run after the current function finishes? <span class=""divider"">-></span> {{c1::Promise job/microtask queue}}"	acad::js
"the promise job/microtask queue (also has other names) is a secondary queue that will run when? <span class=""divider"">-></span> {{c1::as soon as the current message is processed (or otherwise soon, the specs aren't in agreement/clear)}}"	acad::js
precedence of <b>nodejs</b> queues: {{c1::process.nextTick}} queue &gt; {{c2::promises microtask}} queue &gt; {{c3::setTimeout (with a timeout of 0)}} queue ≈ {{c4::setImmediate}} queue	acad::js
"Function to add things to be executed at the end of the current message? <span class=""divider"">-&gt;</span> {{c1::process.nextTick(callback)}}"	acad::js
"process.nextTick(callback) adds things to be executed when? <span class=""divider"">-></span> {{c1::at the end of the current message}}"	acad::js
"what do we pass to process.nextTick() to be executed at the end of the current message? <span class=""divider"">-></span> {{c1::a callback}}"	acad::js
setImmediate() is similar to {{c2::process.nextTick()}} but {{c1::runs later (with lower priority)}}	acad::js
the callback provided to http.createServer (that reacts to request events) is provided two objects when called, a {{c1::http.IncomingMessage}} object, and a {{c2::http.ServerResponse}}	acad::js
"Bootstrap is what, for CSS (mostly)? <span class=""divider"">-></span> {{c1::a framework}}"	acad::bootstrap
"Bootstrap is a framework for what? <span class=""divider"">-></span> {{c1::CSS (mostly)}}"	acad::bootstrap
"The most common CSS framework (as of 2021) is what? <span class=""divider"">-></span> {{c1::Bootstrap}}"	acad::bootstrap
"<div class=""c2-f""> Bootstrap mixin for? </div><div class=""c1-f""> Bootstrap mixin for? </div><br>{{c1::@include media-breakpoint-up(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Devices larger than the breakpoint foo}} <div class=""c2-f""> Bootstrap mixin for? </div><div class=""c1-f""> Bootstrap mixin for? </div><br>{{c1::@include media-breakpoint-only(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Devices correspoinding to the breakpoint foo}} <div class=""c2-f""> Bootstrap mixin for? </div><div class=""c1-f""> Bootstrap mixin for? </div><br>{{c1::@include media-breakpoint-down(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Devices smaller than the breakpoint foo}} <div class=""c2-f""> Bootstrap mixin for? </div><div class=""c1-f""> Bootstrap mixin for? </div><br>{{c1::@include media-breakpoint-between(foo, bar)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Devices between the breakpoints foo and bar}} What do you use to refer to breakpoints in Bootstrap 5? <span class=""divider"">-&gt;</span> {{c1::@include (SASS)}}"	acad::bootstrap
"Breakpoints are designed to hold containers whose widths are? <span class=""divider"">-></span> {{c1::multiples of twelve}}"	acad::bootstrap
"bootstrap containers are the fundamental unit when? <span class=""divider"">-></span> {{c1::when using the bootstrap default grid system}}"	acad::bootstrap
"When you use the bootstrap grid system, what is the fundamental (lowest) element? <span class=""divider"">-></span> {{c1::bootstrap containers}}<br/><div class=""sub""> <div class=""sub c1-f"" > (although not&nbsp; always necessary) </div> </div>"	acad::bootstrap
"Boostrap containers are what, as regards the layout of the site? <span class=""divider"">-></span> {{c1::the fundamental (lowest) unit}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > (although not always necessary) </div> </div>"	acad::bootstrap
"((h:1;::<img src=""sm_2021-06-22--17-57-51-screenshot.png"">)).container-fluid has what width no matter the breakpoint? <span class=""divider"">-></span> {{c1::width: 100% (no spacing)}}"	acad::bootstrap
"The way boostrap is layed out, the style for what is the baseline? <span class=""divider"">-></span> {{c1::the style for the smallest device (breakpoint)}}"	acad::bootstrap
"The way boostrap is layed out, the style for the smallest device (breakpoint) is the baseline, and things for larger breakpoints are? <span class=""divider"">-></span> {{c1::layered on top}}"	acad::bootstrap
Containers are, depending on the exact class, either {{c1::100% of the page}}, or {{c2::100% with some spacing left and right}}	acad::bootstrap
"((h:1;::<img src=""sm_2021-06-22--17-57-51-screenshot.png"">))The container that has no spacing (width 100%) no matter the breakpoint is? <span class=""divider"">-></span> {{c1::.container-fluid}}"	acad::bootstrap
"<div class='c2-f'> Will have some spacing left and right when? </div><div class='c1-f'> Which container is this? </div><br/>((h:all;::<img src=""sm_2021-06-22--17-57-51-screenshot.png"">)){{c1::.container}}  <span class=""divider"">&lt;-&gt;</span> {{c2::spacing left and right at any breakpoint (besides extra small)}}"	acad::bootstrap
"<div class='c2-f'> Will have some spacing left and right when? </div><div class='c1-f'> Which container is this? </div><br/>((h:all;::<img src=""sm_2021-06-22--17-57-51-screenshot.png"">)){{c1::.container-&lt;foo&gt;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::spacing left and right at any breakpoint larger than foo}}"	acad::bootstrap
"Bootstraps grid is built with which css technology? <span class=""divider"">-></span> {{c1::flexbox}}"	acad::bootstrap
"for more complex layouts using columns, you can... <span class=""divider"">-></span> {{c1::nest them}} To specify relative width of columns, what do we specify? <span class=""divider"">-></span> {{c1::the number of column units it should span}} In the bootstrap grid, a row contains how many columns (the unit of measurement)? <span class=""divider"">-></span> {{c1::12}} In general, what does a bootstrap row contain? <span class=""divider"">-></span> {{c1::n columns}} In general, what does a bootstrap container contain? <span class=""divider"">-></span> {{c1::n rows}} If we don't give a column a number of columns to span (max 12), what will it do? <span class=""divider"">-></span> {{c1::simply autoresize depending on how many columns there are}} Bootstrap rows are contained within what (generally)? <span class=""divider"">-></span> {{c1::containers/other columns}} Bootstrap columns are generally contained within what? <span class=""divider"">-></span> {{c1::rows}} <div class='c2-f'> class for? </div><div class='c1-f'> what does this class say? </div><br/>{{c1::column should take up 7 measurement columns from the large breakpoint on up}}  <span class=""divider"">&lt;-&gt;</span> {{c2::col-lg-7}} <div class='c2-f'> class for? </div><div class='c1-f'> what does this class say? </div><br/>{{c1::column should take up 4 measurement columns}}  <span class=""divider"">&lt;-&gt;</span> {{c2::col-4}} <div class='c2-f'> Says what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.row-cols-n}}  <span class=""divider"">&lt;-&gt;</span> {{c2::this row should consist of n columns}} <div class='c2-f'> Is done how, for bootstrap? </div><div class='c1-f'> Does what, for bootstrap columns? </div><br/>{{c1::specify how many columns (the unit) a specific column should be wide}}  <span class=""divider"">&lt;-&gt;</span> {{c2::-n}} <div class='c2-f'> Is done how, for bootstrap? </div><div class='c1-f'> Does what, for bootstrap columns? </div><br/>{{c1::specify from which breakpoint on the rule should apply}}  <span class=""divider"">&lt;-&gt;</span> {{c2::-breakpoint}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > e.g. .col-lg, .container-sm </div> </div> <div class='c2-f'> Bootstrap class for what? </div><div class='c1-f'> Bootstrap class for? </div><br/>{{c1::.row}}  <span class=""divider"">&lt;-&gt;</span> {{c2::rows}} <div class='c1-f'> What is the white box here, probably? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::a container}} <div class='c1-f'> What are the 6 individual gray boxes here, probably? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::columns}} <div class='c1-f'> What are the 2 contiguous gray boxes here, probably? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::rows}} <div class='c1-f'> Is set on which element </div><br/>.row-cols-n <span class=""divider"">-></span> {{c1::the row}} <div class='c1-f'> How many containers are there here? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::1}} <div class='c1-f'> How many <code>.row</code>s are there here (probably)? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::2}} <div class='c1-f'> How many <code>.col*</code>s are there here? </div><br/><img class=""c1-f c2-b"" src=""sm_2021-06-22--18-07-08-screenshot.png""><br/> <span class=""divider"">-></span> {{c1::6}}"	acad::bootstrap
"How do you modify bootstrap breakpoint behavior? <span class=""divider"">-></span> {{c1::SASS variables}}"	acad::bootstrap
"<div class='c2-f'> Class for? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-22--22-27-33-screenshot.png"">)){{c1::row-align-(start|center|end)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Vertically align rows}}"	acad::bootstrap
"<div class='c2-f'> Utility for? </div><div class='c1-f'> Utility for? </div><br/>((h:2;::<img src=""sm_2021-06-22--22-28-34-screenshot.png"">)){{c1::align-self-(start|center|end)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Vertically align columns (specified on the column itself)}}"	acad::bootstrap
"Ithe bootstrap utilities for alignment are named how? <span class=""divider"">-></span> {{c1::As the flexbox properties (obviously, as are all utilities)}}"	acad::bootstrap
"<div class='c1-f'> What does this prove about the property names of the boostrap grid adjustments? </div><br/><pre><code>&lt;div class=""container""&gt;   &lt;div class=""row justify-content-start""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt;   &lt;div class=""row justify-content-center""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt;   &lt;div class=""row justify-content-end""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt;   &lt;div class=""row justify-content-around""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt;   &lt;div class=""row justify-content-between""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt;   &lt;div class=""row justify-content-evenly""&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;     &lt;div class=""col-4""&gt;       One of two columns     &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;</code></pre> <span class=""divider"">-></span> {{c1::same name as css flex props<br>}}"	acad::bootstrap
"More than 12 column units in a row -&gt; ? <span class=""divider"">-></span> {{c1::wrap}}"	acad::bootstrap
"Bootstrap wrapping when? <span class=""divider"">-></span> {{c1::more than 12 column units in row}}"	acad::bootstrap
"Bootstrap force break within row how? <span class=""divider"">-></span> {{c1::width: 100% element}}"	acad::bootstrap
"width: 100% element does what within row? <span class=""divider"">-></span> {{c1::force break}}"	acad::bootstrap
"Range for bootstrap order classes values? <span class=""divider"">-></span> {{c1::1-5}}"	acad::bootstrap
"Special values for bootstrap order classes values <span class=""divider"">-></span> {{c1::order-first, order-last}}<br/><div class=""sub""> <div class=""sub c1-f"" > Think! </div> </div>"	acad::bootstrap
"<div class='c2-f'> Bootstrap includes these by way of? </div><div class='c1-f'> Are what, for bootstrap? </div><br/>{{c1::common UI elements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::components}}"	acad::bootstrap
The syntax of the .{{c2::offset*}} classes is the same as the .{{c3::col*}} classes, but instead controlls {{c1::their left margin}}	acad::bootstrap
"Using .col* classes outside of a row does what? <span class=""divider"">-></span> {{c1::just that width}}"	acad::bootstrap
"If you want an element to be a specific width in bootstrap, what can you do, even outside of a row? <span class=""divider"">-></span> {{c1::set the relevant .col* class}}"	acad::bootstrap
"<div class='c2-f'> What does this do? </div><div class='c1-f'> Bootstrap class for? </div><br/>{{c1::.ms-[breakpoint-]auto}}  <span class=""divider"">&lt;-&gt;</span> {{c2::maximize margin start of column (left in ltr)}}"	acad::bootstrap
"<div class='c2-f'> What does this do? </div><div class='c1-f'> Bootstrap class for? </div><br/>{{c1::.me-[breakpoint-]auto}}  <span class=""divider"">&lt;-&gt;</span> {{c2::maximize margin end of column (right in ltr)}}"	acad::bootstrap
"<div class='c2-f'> Is called? </div><div class='c1-f'> Are what? </div><br/>{{c1::padding between columns (or between rows, if specified on them)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::gutters}}"	acad::bootstrap
"<div class='c1-f'> Have what width by default? </div><br/>gutters <span class=""divider"">-></span> {{c1::1.5rem (24px) }}<br/><div class=""sub""> <div class=""sub all-b""> not $spacer, which is 1 rem </div> </div>"	acad::bootstrap
"<div class='c2-f'> control what? </div><div class='c1-f'> Are controlled by which classes? </div><br/>{{c1::.gx-*}}  <span class=""divider"">&lt;-&gt;</span> {{c2::horizontal gutters}}"	acad::bootstrap
"<div class='c2-f'> control what? </div><div class='c1-f'> Are controlled by which classes? </div><br/>{{c1::.gy-*}}  <span class=""divider"">&lt;-&gt;</span> {{c2::vertical gutters}}"	acad::bootstrap
"<div class='c2-f'> control what? </div><div class='c1-f'> Are controlled by which classes? </div><br/>{{c1::.g-*}}  <span class=""divider"">&lt;-&gt;</span> {{c2::horizontal and vertical gutters}}"	acad::bootstrap
"To control the gutters of a row... <span class=""divider"">-></span> {{c1::add the gutter class to the row}}"	acad::bootstrap
"<div class='c2-f'> does what? </div><div class='c1-f'> Is done by which class? </div><br/>{{c1::.g-0}}  <span class=""divider"">&lt;-&gt;</span> {{c2::no gutters}}"	acad::bootstrap
"For the gutter specifiers, after the g-/gx-/gy- comes? <span class=""divider"">-></span> {{c1::a factor of increase/decrease (1-5, 3 is default)}}"	acad::bootstrap
"<div class='c2-f'> Is called? </div><div class='c1-f'> Is what, for bootstrap? </div><br/>{{c1::bootstraps css reset}}  <span class=""divider"">&lt;-&gt;</span> {{c2::reboot}}"	acad::bootstrap
"In general, what CSS unit does Bootstrap use as a unit of calculation (esp. internally)? <span class=""divider"">-></span> {{c1::rem}}"	acad::bootstrap
"Why have system UI fonts become more popular for web design since the late 2010s? <span class=""divider"">-></span> {{c1::System UI fonts (Roboto, San Francisco, Fira Sans, Segoe etc.) became more pretty}}"	acad::bootstrap
"In general, how does Bootstrap do vertical margins by default? <span class=""divider"">-></span> {{c1::margin-bottom only}}"	acad::bootstrap
"Why did Bootstrap choose to only use margin-bottom (by default)? <span class=""divider"">-></span> {{c1::to prevent margin collapsing&nbsp;}}"	acad::bootstrap
"What does bootstrap use for fonts by deafult? <span class=""divider"">-></span> {{c1::a native font stack}}"	acad::bootstrap
"<div class='c2-f'> Bootstrap class for? </div><div class='c1-f'> Bootstrap class for? </div><br/>{{c1::text-muted}}  <span class=""divider"">&lt;-&gt;</span> {{c2::muted (as in, more gray, less exiting) text}}"	acad::bootstrap
"<div class='c2-f'> Bootstrap class for? </div><div class='c1-f'> Bootstrap class for? </div><br/>((h:2;::<img src=""sm_2021-06-22--23-59-09-screenshot.png"">)){{c1::display-n (e.g. display-1)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::headings that are more fancy/opinionated}}<br/><div class=""sub""> <div class=""sub c2-f"" > think, what might it be obvious to assume this is, but it isn't </div> </div>"	acad::bootstrap
"<div class='c2-f'> Bootstrap class for? </div><div class='c1-f'> Bootstrap class for? </div><br/>((h:2;::<img src=""sm_2021-06-22--23-59-52-screenshot.png"">)){{c1::.lead}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a paragraph that stands out}}"	acad::bootstrap
"<div class='c2-f'> Bootstrap class for? </div><div class='c1-f'> Bootstrap class for? </div><br/>((h:2;::<img src=""sm_2021-06-23--00-08-02-screenshot.png"">)){{c1::.alert (and the styling classes .alert-whatever)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::alerts}}"	acad::bootstrap
"Why has mobile first become so important in the recent years? <span class=""divider"">-></span> {{c1::more than 50% of traffic is mobile (since about 2016)}}"	acad::bootstrap
"Using bootstrap, what is used as selector (pretty much always)? <span class=""divider"">-></span> {{c1::classes}}"	acad::bootstrap
"<div class='c1-f'> Why does this selector not fit with the Bootstrap philosophy? </div><br/>input[type=""text""]  <span class=""divider"">-></span> {{c1::bootstrap would generally only use class selectors}}"	acad::bootstrap
"In general, components in Bootstrap are defined by what? <span class=""divider"">-></span> {{c1::a class}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > e.g. btn </div> </div>"	acad::bootstrap
"In general, components in Bootstrap are specialized by what? <span class=""divider"">-></span> {{c1::a modifier class}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > e.g. btn-primary </div> </div>"	acad::bootstrap
"<div class='c1-f'> What kind of thing is this definining, in bootstrap? </div><br/>.btn (or .card, .offcanvas) <span class=""divider"">-></span> {{c1::a component}}"	acad::bootstrap
"<div class='c1-f'> what would a class that specializes this bootstrap component look like? </div><br/>.btn&nbsp; <span class=""divider"">-></span> {{c1::.btn-foo}}"	acad::bootstrap
"In general, what does bootstrap use over what, regarding web technologies? <span class=""divider"">-></span> {{c1::HTML/CSS over JS}}"	acad::bootstrap
"Bootstrap: Common CSS key-value pairs are provided as classes that are called? <span class=""divider"">-></span> {{c1::Utilities}}"	acad::bootstrap
"Bootstrap: Utilities are common CSS key-value pairs are provided as? <span class=""divider"">-></span> {{c1::classes}}"	acad::bootstrap
"Bootstrap: Utilities are what are provided as classes? <span class=""divider"">-></span> {{c1::common CSS key-value pairs}}"	acad::bootstrap
"<div class='c2-f'> Syntax for? </div><div class='c1-f'> Syntax for what (Bootstrap)? </div><br/>{{c1::Bootstrap utilities}}  <span class=""divider"">&lt;-&gt;</span> {{c2::key-value (e.g. opacity-0)}}"	acad::bootstrap
Z-index in bootstrap exists on two scales: {{c1::within elements (for :hover, :active, :focus) }} and {{c2::for overlay components (modals, tooltips, etc.)}}	acad::bootstrap
"Some bootstrap components have overlapping borders and thus have what, to prevent problems? <span class=""divider"">-></span> {{c1::an z-index}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" >  (esp :hover, :active/.active, :focus) </div> </div>"	acad::bootstrap
"Some bootstrap states (esp :hover, :active/.active, :focus) have a z-index to prevent problems arising from what? <span class=""divider"">-></span> {{c1::overlapping borders}}"	acad::bootstrap
"<div class='c2-f'> Have what range of z-indices? </div><div class='c1-f'> What has these kind of z-indices in bootstrap? </div><br/>{{c1::Bootstrap components with z-index to prevent border problems (esp :hover, :active/.active, :focus)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::0-3}}"	acad::bootstrap
"<div class='c2-f'> Have what range of z-indices? </div><div class='c1-f'> What stuff has these z-indices in bootstra? </div><br/>{{c1::Bootstrap UI overlay components}}  <span class=""divider"">&lt;-&gt;</span> {{c2::1000-1080}}<br/><div class=""sub""> <div class=""sub all-b""> fairly arbitrary </div> </div>"	acad::bootstrap
"Bootstrap UI overlay components have z-indices why? <span class=""divider"">-></span> {{c1::to be displayed above other stuff (modals etc.)}}"	acad::bootstrap
"In general, when using bootstrap, what should you use instead of custom styles, to change a few css props? <span class=""divider"">-></span> {{c1::utilities}}"	acad::bootstrap
"<div class='c1-f'> What is the problem, from the view of bootstrap? </div><br/>foo &gt; bar <span class=""divider"">-></span> {{c1::try to avoid descendant selectors (and other combining selectors)}}"	acad::bootstrap
"<div class='c2-f'> Is? </div><div class='c1-f'> Is what? </div><br/>{{c1::Bootstrap icon set}}  <span class=""divider"">&lt;-&gt;</span> {{c2::bootstrap-icons}}"	acad::bootstrap
"To modify bootstrap behavior by using you own sass=scss code, what do you do? <span class=""divider"">-></span> {{c1::import bootstrap in your custom scss file}}"	acad::bootstrap
"<div class='c2-f'> Are contained where? </div><div class='c1-f'> Contains what? </div><br/><img class=""c2-f c1-b"" src=""sm_2021-06-24--03-21-47-screenshot.png""><br/>{{c1::bootstraps colors}}  <span class=""divider"">&lt;-&gt;</span> {{c2::$theme-colors map}}"	acad::bootstrap
"color swatch name syntax (bootstrap):&nbsp; <span class=""divider"">-></span> {{c1::$&lt;color&gt;-&lt;weight&gt;}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > e.g. $indigo-500 </div> </div>"	acad::bootstrap
"<div class='c2-f'> Are stored in which SCSS construct? </div><div class='c1-f'> Stores bootstraps what? </div><br/>{{c1::Bootstrap utilities}}  <span class=""divider"">&lt;-&gt;</span> {{c2::$utilities (is a map)}}"	acad::bootstrap
"To edit the bootstrap $utilities map, you first... <span class=""divider"">-></span> {{c1::import the file (_utilities.scss)}}"	acad::bootstrap
"If you want to add utilities to the $utilities map, what do you do? <span class=""divider"">-></span> {{c1::merge your custom map with the $utilities map (via map-merge())}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > e.g. <pre><code>$utilities: map-merge(   $utilities,   (     ""cursor"": (       property: cursor,       class: cursor,       responsive: true,       values: auto pointer grab,     )   ) );</code></pre> </div> </div>"	acad::bootstrap
"&nbsp;the $utilities thingy to generate the bootstrap utilities is made up of what? <span class=""divider"">-></span> {{c1::a list of maps}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > <pre><code>$utilities: (   ""opacity"": (     property: opacity,     values: (       0: 0,       25: .25,       50: .5,       75: .75,       100: 1,     )   )   ...</code></pre> </div> </div>"	acad::bootstrap
"&nbsp;the $utilities map to generate the bootstrap utilities is made up of maps with the required keys <code>property</code> and... <span class=""divider"">-></span> {{c1::<code>values</code>}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > <pre><code>$utilities: (   ""opacity"": (     property: opacity,     values: (       0: 0,       25: .25,       50: .5,       75: .75,       100: 1,     )   )   ...</code></pre> </div> </div>"	acad::bootstrap
"&nbsp;the $utilities map to generate the bootstrap utilities is made up of maps with the required keys <code>values</code> and... <span class=""divider"">-></span> {{c1::<code>property</code>}}<br/><div class=""sub""> <div class=""sub c1-b c2-f"" > <pre><code>$utilities: (   ""opacity"": (     property: opacity,     values: (       0: 0,       25: .25,       50: .5,       75: .75,       100: 1,     )   )   ...</code></pre>` </div> </div>"	acad::bootstrap
"<div class='c1-f'> What css would this bootstrap utility result in? </div><br/><pre><code>$utilities: (   ""opacity"": (     property: opacity,     values: (       0: 0,       25: .25,       50: .5,       75: .75,       100: 1,     )   )  );</code></pre> <span class=""divider"">-></span> {{c1::<pre><code>.opacity-0 { opacity: 0; } .opacity-25 { opacity: .25; } .opacity-50 { opacity: .5; } .opacity-75 { opacity: .75; } .opacity-100 { opacity: 1; }</code></pre>}}"	acad::bootstrap
"spacer classes can either be have what as their first character (e.g. ?t-2 or ?x-lg-4)? <span class=""divider"">-></span> {{c1::m or p (e.g. mt-2 or px-lg-4)}}"	acad::bootstrap
"spacer classes can either have a p or m as their first character, which stands for? <span class=""divider"">-></span> {{c1::padding / margin}}"	acad::bootstrap
"spacer classes have what as their second character? <span class=""divider"">-></span> {{c1::a specifier to what to apply the padding/margin}}"	acad::bootstrap
"<div class='c2-f'> set what, as the second character for spacer classes? </div><div class='c1-f'> Are set with what as the second character, with spacer classes? </div><br/>{{c1::t / b}}  <span class=""divider"">&lt;-&gt;</span> {{c2::top / bottom}}"	acad::bootstrap
"<div class='c2-f'> set what, as the second character for spacer classes? </div><div class='c1-f'> Are set with what as the second character, with spacer classes? </div><br/>{{c1::s / e}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start / end (left and right, depending on LTR or RTL)}}"	acad::bootstrap
"<div class='c2-f'> set what, as the second character for spacer classes? </div><div class='c1-f'> Are set with what as the second character, with spacer classes? </div><br/>{{c1::y / x}}  <span class=""divider"">&lt;-&gt;</span> {{c2::both top/bottom or both left/right}}"	acad::bootstrap
"<div class='c2-f'> set what, as the second character for spacer classes? </div><div class='c1-f'> Are set with what as the second character, with spacer classes? </div><br/>{{c1::no character}}  <span class=""divider"">&lt;-&gt;</span> {{c2::all four sides}}"	acad::bootstrap
for scales of values, bootstrap has {{c1::5}} as the {{c2::highest}}, {{c1::1}} as the {{c2::lowest}} (with an actual value), and {{c1::3}} as the {{c2::default/middle}} value	acad::bootstrap
"<div class='c2-f'> Utility setting what to what (follows a set of rules)? </div><div class='c1-f'> Utility setting this to this (follows a set of rules)? </div><br/>{{c1::.mt-0}}  <span class=""divider"">&lt;-&gt;</span> {{c2::margin top to 0}}"	acad::bootstrap
"<div class='c2-f'> Utility setting what to what (follows a set of rules)? </div><div class='c1-f'> Utility setting this to this (follows a set of rules)? </div><br/>{{c1::.ms-1}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(LTR) margin left to .25 of $spacer}}"	acad::bootstrap
"<div class='c2-f'> Utility setting what to what (follows a set of rules)? </div><div class='c1-f'> Utility setting this to this (follows a set of rules)? </div><br/>{{c1::.p-3}}  <span class=""divider"">&lt;-&gt;</span> {{c2::all padding to $spacer}}"	acad::bootstrap
"<div class='c2-f'> Utility setting what to what (follows a set of rules)? </div><div class='c1-f'> Utility setting this to this (follows a set of rules)? </div><br/>{{c1::.mx-auto}}  <span class=""divider"">&lt;-&gt;</span> {{c2::set horizontal margins to auto (horizontally center element)}}"	acad::bootstrap
"<div class='c1-f'> default value of? </div><br/>$spacer <span class=""divider"">-></span> {{c1::1rem}}"	acad::bootstrap
"Things like spacing utilities, gutters depend internally on what? <span class=""divider"">-></span> {{c1::$spacer}}"	acad::bootstrap
"<div class='c2-f'> Are all types of what? </div><div class='c1-f'> Some examples? </div><br/>{{c1::primary, secondary, success, danger, warning, info, light, dark...}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Bootstrap  theme-color variable names}}"	acad::bootstrap
"<div class='c2-f'> Do what? </div><div class='c1-f'> How do? </div><br/>((h:all;::<img src=""sm_2021-06-26--14-24-54-screenshot.png"">)){{c1::.bg-&lt;theme-color&gt; (e.g. .bg-primary, .bg-success)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::set the background to a specific color-type}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.bg-gradient}}  <span class=""divider"">&lt;-&gt;</span> {{c2::add a gradient over the color (semitransparent white to nothing)}}<br/><div class=""sub""> <div class=""sub all-b""> often used in combination with the bg-&lt;color-type&gt; classes like so: .bg-&lt;color-type&gt;.bg-gradient </div> </div>"	acad::bootstrap
"<div class='c2-f'> Bootstrap map for? </div><div class='c1-f'> Bootstrap map name for? </div><br/>{{c1::$theme-colors}}  <span class=""divider"">&lt;-&gt;</span> {{c2::all of the theme colors such as primary, secondary, sucess, etc.}}"	acad::bootstrap
"<div class='c2-f'> &nbsp;are generated from which file? </div><div class='c1-f'> Is used to generate what? </div><br/>{{c1::Bootstrap utilities}}  <span class=""divider"">&lt;-&gt;</span> {{c2::_utilities.scss}}"	acad::bootstrap
"<div class='c2-f'> These are created with which class? (are which component) </div><div class='c1-f'> This component looks how? </div><br/><img class=""c2-f c1-b"" src=""sm_Bootstrap-5-Custom-Badges.png""><br/>{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::.badge}}"	acad::bootstrap
"<div class='c2-f'> bootstrap utility for? </div><div class='c1-f'> bootstrap utility for? </div><br/>{{c1::.position-&lt;positon-type&gt;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::position: &lt;position-type&gt; (e.g. absolute, sticky, etc)}}"	acad::bootstrap
"<div class='c2-f'> bootstrap utility for? </div><div class='c1-f'> bootstrap utility for? </div><br/>((h:2;::<img src=""sm_2021-06-26--14-39-48-screenshot.png"">)){{c1::.(top/bottom/start/end)-0/50/100}}  <span class=""divider"">&lt;-&gt;</span> {{c2::position something 0/50/100% from the top/bottom/start/end}}"	acad::bootstrap
"<div class='c2-f'> bootstrap utility for? </div><div class='c1-f'> bootstrap utility for? </div><br/>((h:2;::<img src=""sm_2021-06-26--14-41-22-screenshot.png"">))((h:2;::<img src=""sm_2021-06-26--14-41-22-screenshot.png"">)){{c1::translate-middle(-x/-y/ø)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::applies the transformations translateX(-50%) and/or translateY(-50%) (centers the element relative to its absolute position)}}"	acad::bootstrap
"<div class='c2-f'> Would be done where, for bootstrap? </div><div class='c1-f'> What could you do here, for example? </div><br/>{{c1::add some position values, e.g. so you can do .top-25}}  <span class=""divider"">&lt;-&gt;</span> {{c2::$position-values}}"	acad::bootstrap
"<div class='c2-f'> Class for this kind of rounding? </div><div class='c1-f'> Would look like what? </div><br/><img class=""c2-f c1-b"" src=""sm_2021-06-26--14-43-22-screenshot.png""><br/>{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::.rounded-pill}}"	acad::bootstrap
"<div class='c2-f'> is done how, in bootstrap? </div><div class='c1-f'> does what? </div><br/>{{c1::change the thing that is between breadcrumbs}}  <span class=""divider"">&lt;-&gt;</span> {{c2::$breadcrumb-divider}}<br/><div class=""sub""> <div class=""sub c2-f"" > e.g. home / foo or home &gt; foo </div> </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-26--15-16-03-screenshot.png"">)){{c1::.btn-group}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a group of buttons, that are not separated by spacing}}"	acad::bootstrap
"<div class='c2-f'> Do what? </div><div class='c1-f'> How do? </div><br/>((h:2;::<img src=""sm_2021-06-26--15-12-57-screenshot.png"">)){{c1::.btn-outline-&lt;color-type&gt; (e.g. .btn-outline-primary, .btn-outline-success)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::create a button with a specific color, but only outlined}}"	acad::bootstrap
"<div class='c2-f'> creates what? </div><div class='c1-f'> is created how? </div><br/>{{c1::data-bs-toggle=""button""}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a button that can be toggled}}"	acad::bootstrap
"<div class='c2-f'> creates what? </div><div class='c1-f'> is created how? </div><br/>((h:2;::<img src=""sm_2021-06-26--15-12-12-screenshot.png"">))((h:2;::<img src=""sm_2021-06-26--15-12-17-screenshot.png"">)){{c1::.btn-lg, .btn-sm}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a large/small button, respectively}}"	acad::bootstrap
"<div class='c2-f'> Do what? </div><div class='c1-f'> How do? </div><br/>((h:all;::<img src=""sm_2021-06-26--14-24-54-screenshot.png"">)){{c1::.btn-&lt;color-type&gt; (e.g. .btn-primary, .btn-success)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::create a button with a specific color}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-26--15-04-53-screenshot.png"">)){{c1::.btn}}  <span class=""divider"">&lt;-&gt;</span> {{c2::styling a button}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-26--15-16-18-screenshot.png"">)){{c1::.btn-group-vertical}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a group of buttons, that are not separated by spacing, stacked <b>vertically</b>}}"	acad::bootstrap
"In general, what does bootstrap use to style forms? <span class=""divider"">-></span> {{c1::the default html elements and attributes}}"	acad::bootstrap
"For what related to forms does bootstrap use custom classes? <span class=""divider"">-></span> {{c1::things forms don't have a html attribute/element for/extra styling}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-text}}  <span class=""divider"">&lt;-&gt;</span> {{c2::text within a form}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > that is, e.g. labels or other descriptive text </div> </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-control}}  <span class=""divider"">&lt;-&gt;</span> {{c2::apply some default styling to &lt;input&gt; and &lt;textarea&gt;}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-control-lg/sm}}  <span class=""divider"">&lt;-&gt;</span> {{c2::.form-control (styling of input/textarea etc) but large/small}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-control-color}}  <span class=""divider"">&lt;-&gt;</span> {{c2::add some styling to the &lt;input type=""color""&gt; which would otherwise do weird stuff}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-select}}  <span class=""divider"">&lt;-&gt;</span> {{c2::apply some default styling to selects}}<br/><div class=""sub""> <div class=""sub all-b""> again also exists in sm and lg variants </div> </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.form-check-inline}}  <span class=""divider"">&lt;-&gt;</span> {{c2::additionall class to specify that checkboxes should be inline}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.btn-check}}  <span class=""divider"">&lt;-&gt;</span> {{c2::checkbox that renders as a .btn}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--14-34-40-screenshot.png"">)){{c1::.form-switch}}  <span class=""divider"">&lt;-&gt;</span> {{c2::additionall class to specify that checkbox should be rendered as switches}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-06-43-screenshot.png"">)){{c1::.form-range}}  <span class=""divider"">&lt;-&gt;</span> {{c2::apply some default styling to ranges}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-08-59-screenshot.png"">)){{c1::.input-group}}  <span class=""divider"">&lt;-&gt;</span> {{c2::group multiple inputs into a single line}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > exists also -lg and -sm variants </div> </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-08-59-screenshot.png"">)){{c1::.input-group-text}}  <span class=""divider"">&lt;-&gt;</span> {{c2::create these by default gray textboxes for input fields}}<br/><div class=""sub""> <div class=""sub all-b""> any line here is an input group, so... </div> </div>"	acad::bootstrap
"((h:1;::<img src=""sm_2021-06-27--10-08-59-screenshot.png"">))((h:1;::<img src=""sm_2021-06-27--10-14-25-screenshot.png"">))((h:1;::<img src=""sm_2021-06-27--10-14-33-screenshot.png"">))With which inputs can you use input groups? <span class=""divider"">-></span> {{c1::most inputs, you can mix&amp;match like crazy}} ((h:1;::<img src=""sm_2021-06-26--14-34-43-screenshot.png"">))By default, what shape do badges have? <span class=""divider"">-></span> {{c1::rectangular}} ((h:1;::<img src=""sm_2021-06-24--03-24-45-screenshot.jpg"">))the scale 100-900 for color originates from which design project? <span class=""divider"">-></span> {{c1::material design}} ((h:1;::<img src=""sm_2021-06-24--03-24-45-screenshot.jpg"">))the scale 100-900 for color is probably derived from what? <span class=""divider"">-></span> {{c1::font-weight}} ((h:1;::<img src=""sm_2021-06-24--03-24-45-screenshot.jpg"">))Following material design, the scale 100-900 names what eg in bootstrap? <span class=""divider"">-></span> {{c1::different variants (mostly light-darkness) of the same color}} ((h:1;::<img src=""sm_2021-06-24--03-24-45-screenshot.jpg"">))Besides its default colors (-warning, -alert etc.), bootstrap also includes <span class=""divider"">-></span> {{c1::a whole host of color swatches}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-21-28-screenshot.png"">))((h:2;::<img src=""sm_2021-06-27--10-22-23-screenshot.png"">)){{c1::.form-floating}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(<b>parent</b> of) a label that appears instead of a placeholder when focused}}"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-06-27--10-21-28-screenshot.png""><img class=""c1-f c2-b"" src=""sm_2021-06-27--10-22-23-screenshot.png""><br/>what do we specify .form-floating on for this effect? <span class=""divider"">-></span> {{c1::the parent}}"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-06-27--10-21-28-screenshot.png""><img class=""c1-f c2-b"" src=""sm_2021-06-27--10-22-23-screenshot.png""><br/>what does the input need to have for this&nbsp; effect? <span class=""divider"">-></span> {{c1::a placeholder}}"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-06-27--10-21-28-screenshot.png""><img class=""c1-f c2-b"" src=""sm_2021-06-27--10-22-23-screenshot.png""><br/>Where do we provide the floating text? <span class=""divider"">-></span> {{c1::a &lt;label&gt;}}"	acad::bootstrap
"For the auto HTML validation, what does bootstrap require, so that it will style it? <span class=""divider"">-></span> {{c1::a .was-validated on the parent}}"	acad::bootstrap
"a .was-validated class on the parent is required for what kind of validation? (bootstrap) <span class=""divider"">-></span> {{c1::HTML validation}}"	acad::bootstrap
"<div class='c2-f'> Is done with which classes? </div><div class='c1-f'> Allow styling what? </div><br/>{{c1::custom validation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::.is-valid, .is-invalid}}"	acad::bootstrap
"<div class='c1-f'> Is an API for what? </div><br/>{{c1::JS api for form validation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Constraint validation API}}"	acad::js
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-47-10-screenshot.png"">)){{c1::.spinner-border}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a spinner&nbsp;}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-06-27--10-47-57-screenshot.png"">))((h:2;::<img src=""sm_2021-06-27--10-48-07-screenshot.png"">)){{c1::.spinner-grow}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a spinner that grows instad of spinning}}"	acad::bootstrap
"How do we color the spinners? <span class=""divider"">-></span> {{c1::via .text-&lt;color&gt;}}"	acad::bootstrap
"Structure of toasts<br><img class=""c1-f c2-b"" src=""sm_2021-06-27--10-53-16-screenshot.png""><br><pre><code>{{c1::.toast-container}}   {{c2::.toast}}     {{c3::.toast-header}}     {{c4::.toast-body}}</code></pre><br><div class=""sub""> <div class=""sub c1-f c2-b""> everything is optional </div> </div>"	acad::bootstrap
"To specify tooltips, you need to give them a {{c1::data-bs}}-{{c2::toggle}}=""{{c3::tooltip}}"", a {{c1::data-bs}}-{{c2::placement}}=""{{c4::top/rigbt/bottom/left}}"", and a {{c5::title}}=""{{c6::this will appear as the tooltip}}""."	acad::bootstrap
Possible parts of a card in bootstrap, all optional:  <pre><code>{{c1::.card-group}}       {{c2::.card}}         {{c3::.card-header}}           {{c4::.card-header-tabs/pills}}         {{c5::.card-img-top/bottom}}         {{c6::.card-body}}           {{c7::.card-title}}           {{c8::.card-subtitle}}           {{c9::.card-text}}           {{c10::.card-link}}         {{c11::.card-footer}}</code></pre>	acad::bootstrap
within a {{c4::.card}}, with {{c2::.card-img}} (on the {{c3::image}}) and {{c2::.card-img-overlay}} (on the {{c3::content}}), the image will be {{c1::the background of the card}}	acad::bootstrap
"structure of a list group<br/><img class=""c1-f c2-b"" src=""sm_2021-06-27--11-36-24-screenshot.png""><br/><pre><code>{{c1::.list-group}}<br>  .list-group-item<br>  ...</code></pre>"	acad::bootstrap
"structure of a list group<br/><img class=""c1-f c2-b"" src=""sm_2021-06-27--11-36-24-screenshot.png""><br/><pre><code>.list-group   {{c1::.list-group-item}}   ...</code></pre>"	acad::bootstrap
"Bootstrap tables are only styled if you add... <span class=""divider"">-></span> {{c1::.table to it}}"	acad::bootstrap
"You can apply the table-&lt;theme-color&gt; to {{c1::tables}}, {{c2::rows}}, and {{c3::single cells}}<br/><div class=""sub""> probably also columns, but the docs did not specify </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.table-responsive}}  <span class=""divider"">&lt;-&gt;</span> {{c2::table that scrolls if container is too small}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.table-hover}}  <span class=""divider"">&lt;-&gt;</span> {{c2::enable hovered-over rows to be highlighted}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-41-21-screenshot.png"">)){{c1::.table-sm}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a small table}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-38-36-screenshot.png"">)){{c1::.table-borderless}}  <span class=""divider"">&lt;-&gt;</span> {{c2::table no border no cry}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-38-01-screenshot.png"">)){{c1::.table-bordered}}  <span class=""divider"">&lt;-&gt;</span> {{c2::enable borders on a table}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-36-12-screenshot.png"">))((h:2;::<img src=""sm_2021-07-03--19-36-22-screenshot.png"">)){{c1::.table-striped}}  <span class=""divider"">&lt;-&gt;</span> {{c2::make the table striped}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-31-04-screenshot.png"">)){{c1::.table-&lt;color-variant&gt;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::make the whole table or the relevant part of table the specified color-variant}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--19-44-52-screenshot.png"">)){{c1::.btn-toolbar}}  <span class=""divider"">&lt;-&gt;</span> {{c2::parent of a set of button groups}}"	acad::bootstrap
"How do <code>btn-group</code>s and <code>input-group</code>s interact? <span class=""divider"">-></span> {{c1::you can mix and match them}}"	acad::bootstrap
"btn-groups act similarly to what? <span class=""divider"">-></span> {{c1::input groups}}"	acad::bootstrap
"to work, what does one element of a carousel need to have, to start out with? <span class=""divider"">-></span> {{c1::.active}}"	acad::bootstrap
classes for carousel - most parts optional: <pre><code>{{c1::.carousel.slide}}   {{c2::.carousel-indicators}}     {{c3::buttons... (have data-bs-target, data-bs-slide-to)}}   {{c4::.carousel-inner}}     {{c5::.carousel-item}}       {{c6::img.d-block.w-100}}       {{c7::.carousel-caption}}   {{c8::.carousel-control-prev}}     {{c9::.carousel-control-prev-icon}}   {{c8::.carousel-control-next}}     {{c9::.carousel-control-next-icon}}</code></pre>	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.carousel-fade}}  <span class=""divider"">&lt;-&gt;</span> {{c2::crossfade carousel instead of sliding}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--20-21-14-screenshot.png"">)){{c1::.btn-close}}  <span class=""divider"">&lt;-&gt;</span> {{c2::close button}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--20-21-05-screenshot.png"">)){{c1::.btn-close-white}}  <span class=""divider"">&lt;-&gt;</span> {{c2::close button for dark backgrounds}}"	acad::bootstrap
"((h:all;::<img src=""sm_2021-07-03--23-11-52-screenshot.png"">))((h:all;::<img src=""sm_2021-07-03--23-12-01-screenshot.png"">))To create a button that {{c1::collapses and uncollapes}} an element, this button needs a {{c2::data-bs-target}} of {{c3::the ID of the thing to collapse}}, and a {{c4::data-bs-toggle}} of {{c5::""collapse""}}"	acad::bootstrap
Most simple dropdown: <pre><code>{{c1::.dropdown}}    {{c2::.btn}}{{c3::.dropdown-toggle}}   {{c4::.dropdown-menu}}     {{c5::.dropdown-item}}     ...</code></pre>	acad::bootstrap
"<div class=""c2-f""> Class for what? </div><div class=""c1-f""> Class for? </div><br>{{c1::.dropdown-menu-start/.dropdown-menu-end}}  <span class=""divider"">&lt;-&gt;</span> {{c2::(LtR) left/rightalign the dropdown menu relative to the button}}<br><div class=""sub""> <div class=""sub c1-f""> Think pls <br><img src=""sm_2021-07-03--23-43-15-screenshot.png""><img src=""sm_2021-07-03--23-42-41-screenshot.png""><br></div> </div>"	acad::bootstrap
"To create a {{c6::split dropdown button}}, where {{c5::only the part with the arrow thing actually triggers the dropdown}}, add {{c4::a button}}, and then {{c3::a second button}} with {{c2::.dropdown-toggle}} and {{c1::.dropdown-toggle-split}}<br/><div class=""sub""> <pre><code>&lt;!-- Example split danger button --&gt; &lt;div class=""btn-group""&gt;   &lt;button type=""button"" class=""btn btn-danger""&gt;Action&lt;/button&gt;   &lt;button type=""button"" class=""btn btn-danger dropdown-toggle dropdown-toggle-split"" data-bs-toggle=""dropdown"" aria-expanded=""false""&gt;     &lt;span class=""visually-hidden""&gt;Toggle Dropdown&lt;/span&gt;   &lt;/button&gt;   &lt;ul class=""dropdown-menu""&gt;     &lt;li&gt;&lt;a class=""dropdown-item"" href=""#""&gt;Action&lt;/a&gt;&lt;/li&gt;     &lt;li&gt;&lt;a class=""dropdown-item"" href=""#""&gt;Another action&lt;/a&gt;&lt;/li&gt;     &lt;li&gt;&lt;a class=""dropdown-item"" href=""#""&gt;Something else here&lt;/a&gt;&lt;/li&gt;     &lt;li&gt;&lt;hr class=""dropdown-divider""&gt;&lt;/li&gt;     &lt;li&gt;&lt;a class=""dropdown-item"" href=""#""&gt;Separated link&lt;/a&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/div&gt;</code></pre> </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.dropdown-item-text}}  <span class=""divider"">&lt;-&gt;</span> {{c2::non-interactive dropdown items}}"	acad::bootstrap
"to have interactive dropdown elements, use what as the html element? <span class=""divider"">-></span> {{c1::a/button}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-03--23-37-51-screenshot.png"">))((h:2;::<img src=""sm_2021-07-03--23-38-01-screenshot.png"">))((h:2;::<img src=""sm_2021-07-03--23-38-10-screenshot.png"">)){{c1::.dropend/dropstart/dropup}}  <span class=""divider"">&lt;-&gt;</span> {{c2::make the dropdown open (LtR) right/left/up instead}}"	acad::bootstrap
Bootstrap progress bars: <pre><code>{{c1::.progress}}   {{c2::.progress-bar}}</code></pre>	acad::bootstrap
"For bootstrap progress bars, specify the progress of the progress bar by... <span class=""divider"">-></span> {{c1::specifying the width (of .progress-bar)}}"	acad::bootstrap
"<div class='c1-f'> What would this render as? </div><br/>((h:1;::<img src=""sm_2021-07-03--23-49-03-screenshot.png"">))<pre><code>&lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" aria-valuenow=""0"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 25%"" aria-valuenow=""25"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 50%"" aria-valuenow=""50"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 75%"" aria-valuenow=""75"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 100%"" aria-valuenow=""100"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt;</code></pre>  <span class=""divider"">-&gt;</span> <span class=""empty-cloze-generation-only"">{{c1::}}</span>"	acad::bootstrap
"To put text within the bootstrap progress bar... <span class=""divider"">-></span> {{c1::put it between the tags (of the element creating the progress bar)}}"	acad::bootstrap
"To change the height of the bootstrap progress bar... <span class=""divider"">-></span> {{c1::set the height on the .progress wrapper}}"	acad::bootstrap
"<div class='c1-f'> How do we make this show text within the progress bar (e.g. 25)? </div><br/><pre><code data-codetype=""html"">&lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 25%;"" aria-valuenow=""25"" aria-valuemin=""0"" aria-valuemax=""100""&gt;&lt;/div&gt; &lt;/div&gt;</code></pre> <span class=""divider"">-></span> {{c1::<pre><code>&lt;div class=""progress""&gt;   &lt;div class=""progress-bar"" role=""progressbar"" style=""width: 25%;"" aria-valuenow=""25"" aria-valuemin=""0"" aria-valuemax=""100""&gt;25%&lt;/div&gt; &lt;/div&gt;</code></pre>}}"	acad::bootstrap
"how do we create a split progress bar? <span class=""divider"">-></span> {{c1::multiple .progress-bar within .progress}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--00-25-32-screenshot.png"">)){{c1::.progress-bar-striped}}  <span class=""divider"">&lt;-&gt;</span> {{c2::create a striped progress bar}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.progress-bar-animated}}  <span class=""divider"">&lt;-&gt;</span> {{c2::create an animated progress bar (prob should also be striped)}}"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-07-04--00-43-18-screenshot.png""><br/><pre><code data-codetype=""html"">&lt;button type=""button"" class=""btn btn-lg btn-danger""    data-bs-toggle=""{{c1::popover}}"" title=""Popover title""    data-bs-content=""And here's some amazing content. It's very engaging. Right?""&gt;   Click to toggle popover&lt;/button&gt; </code></pre>"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-07-04--00-43-18-screenshot.png""><br/><pre><code>&lt;button type=""button"" class=""btn btn-lg btn-danger""    data-bs-toggle=""popover"" {{c1::title}}=""Popover title""    data-bs-content=""And here's some amazing content. It's very engaging. Right?""&gt;   Click to toggle popover&lt;/button&gt; </code></pre>"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-07-04--00-43-18-screenshot.png""><br/><pre><code data-codetype=""html"">&lt;button type=""button"" class=""btn btn-lg btn-danger""    {{c1::data-bs-toggle}}=""popover"" title=""Popover title""    data-bs-content=""And here's some amazing content. It's very engaging. Right?""&gt;   Click to toggle popover&lt;/button&gt; </code></pre>"	acad::bootstrap
"<img class=""c1-f c2-b"" src=""sm_2021-07-04--00-43-18-screenshot.png""><br/><pre><code Data-Codetype=""html"">&lt;button type=""button"" class=""btn btn-lg btn-danger""    data-bs-toggle=""popover"" title=""Popover title""    {{c1::data-bs-content}}=""And here's some amazing content. It's very engaging. Right?""&gt;   Click to toggle popover&lt;/button&gt; </code></pre>"	acad::bootstrap
"((h:all;::<img src=""sm_2021-07-04--00-52-27-screenshot.png"">))<pre><code>{{c1::.pagination}}   {{c2::.page-item}}      {{c3::a.page-link}}   ...</code></pre>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--01-28-57-screenshot.png"">)){{c1::.nav-justified}}  <span class=""divider"">&lt;-&gt;</span> {{c2::foce the nav children to take up the whole space, but all the same amount}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--01-27-57-screenshot.png"">)){{c1::.nav-fill}}  <span class=""divider"">&lt;-&gt;</span> {{c2::foce the nav children to take up the whole space, but proportionally based on their size}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--01-24-37-screenshot.png"">)){{c1::.nav-pills}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nav using pills}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--01-23-22-screenshot.png"">)){{c1::.nav-tabs}}  <span class=""divider"">&lt;-&gt;</span> {{c2::nav using tabs}} ((h:all;::<img src=""sm_2021-07-04--01-22-28-screenshot.png"">))Bootstrap nav structure: <pre><code>{{c1::.nav}}   {{c2::.nav-item}}     {{c3::.nav-link}}   ...</code></pre>"	acad::bootstrap
In general, for {{c1::most all}} Bootstrap components etc., you can use {{c2::.active}}/{{c2::.disabled}} to show that something is {{c3::currently active}}/{{c3::cannot be interfaced with}}.	acad::bootstrap
"What elements do you need to use to create an actionable list group (which can't you use?)? <span class=""divider"">-></span> {{c1::a/button (can't just use li)}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.list-group-item-action}}  <span class=""divider"">&lt;-&gt;</span> {{c2::make <b>buttons/a </b>children in a list group work a little better}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--16-48-57-screenshot.png"">)){{c1::.list-group-item-&lt;theme-color&gt;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specify that the list group item should have the specified theme color}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--16-48-51-screenshot.png"">)){{c1::.list-group-horizontal}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specify that the list group should have a horizontal layout}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--16-48-19-screenshot.png"">)){{c1::.list-group-numbered}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specify that the list group should have items which are numbered}} <div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--16-48-11-screenshot.png"">)){{c1::.list-group-flush}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specify that the list group should be flush with the surrounding content}}<br/><div class=""sub""> <div class=""sub c2-b c1-f"" > e.g. for placing it within a card </div> </div>"	acad::bootstrap
Modal structure: <pre><code>{{c1::.modal}}   {{c2::.modal-dialog}}     {{c3::.modal-content}}       {{c4::.modal-header}}         {{c5::.modal-title}}       {{c6::.modal-body}}       {{c7::.modal-footer}}</code></pre>	acad::bootstrap
"To trigger a modal from e.g. a button, specify data-bs-toggle as what? <span class=""divider"">-></span> {{c1::modal}}"	acad::bootstrap
"To trigger a modal from e.g. a button, specify what as ""modal""? <span class=""divider"">-></span> {{c1::data-bs-toggle}}"	acad::bootstrap
General navbar structure: <pre><code>{{c1::.navbar}}   {{c2::.container-fluid}}     ... content</code></pre>	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--17-51-01-screenshot.png"">)){{c1::.navbar-brand}}  <span class=""divider"">&lt;-&gt;</span> {{c2::your brand logo/name in a navbar}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--17-51-48-screenshot.png"">)){{c1::.navbar-nav}}  <span class=""divider"">&lt;-&gt;</span> {{c2::container for nav items in a navbar}}"	acad::bootstrap
navbar items structure: <pre><code>{{c1::.navbar-nav}}   {{c2::.nav-item}}     {{c3::.nav-link}}   ...</code></pre>	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>((h:2;::<img src=""sm_2021-07-04--17-51-48-screenshot.png"">)){{c1::.navbar-text}}  <span class=""divider"">&lt;-&gt;</span> {{c2::freeform text within a navbar}}"	acad::bootstrap
To create a button that {{c3::show-hides the navbar at smaller sizes}}, as a child of the {{c4::.container-fluid}}, add: <pre><code>{{c1::.navbar-toggler}}   {{c2::.navbar-toggler-item}}</code></pre>	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.navbar-collapse}}  <span class=""divider"">&lt;-&gt;</span> {{c2::mark a navbar that will collapse if its content no longer fits}}"	acad::bootstrap
"<div class='c2-f'> Is done via what component? </div><div class='c1-f'> Does what? </div><br/>((h:all;::<img src=""sm_2021-07-04--18-29-47-screenshot.jpg"">)){{c1::Show-hiding things from a part of the viewport (e.g. android-like sidebars)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::offcanvas}}"	acad::bootstrap
"Offcanvas structure: <pre><code>{{c1::.offcanvas}}   {{c2::.offcanvas-header}}     {{c3::.offcanvas-title}}   {{c4::.offcanvas-body}}</code></pre><br/><div class=""sub""> offcanvas being those slideins </div>"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.offcanvas-start/end/top/bottom}}  <span class=""divider"">&lt;-&gt;</span> {{c2::show the offcanvas from the (LtR) left/right/top/bottom}}"	acad::bootstrap
"<div class='c2-f'> creates what? </div><div class='c1-f'> is created how? </div><br/>{{c1::data-bs-spy=""scroll""}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a container that will be scrollspied (switching as it is scrolled)}}"	acad::bootstrap
The {{c4::scrollspy items in the list group or nav}} have a {{c1::href}} that refers to the {{c2::id}} {{c3::of the spied items}}	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.clearfix}}  <span class=""divider"">&lt;-&gt;</span> {{c2::apply a clearfix to the relevant option}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.link-&lt;theme-color&gt;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::links with the specified theme color}}"	acad::bootstrap
Bootstrap helper for aspect ratio: {{c1::ratio-}}{{c2::幅}}{{c3::x}}{{c2::高さ}}	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.stretched-link}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a link that makes its parent clickable}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.text-truncate}}  <span class=""divider"">&lt;-&gt;</span> {{c2::truncate text with an ellipsis}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.img-fluid}}  <span class=""divider"">&lt;-&gt;</span> {{c2::responsive images}}"	acad::bootstrap
"<div class='c2-f'> Class for what? </div><div class='c1-f'> Class for? </div><br/>{{c1::.img-thumbnail}}  <span class=""divider"">&lt;-&gt;</span> {{c2::slightly rounded thumbnail image}}"	acad::bootstrap
Figures: <pre><code>{{c1::.figure}}   {{c2::.figure-img}}   {{c3::.figure-caption}}</code></pre>	acad::bootstrap
"<div class='c2-f'> bootstrap utility for? </div><div class='c1-f'> bootstrap utility for? </div><br/>{{c1::.fw-bold/normal...}}  <span class=""divider"">&lt;-&gt;</span> {{c2::make text bold etc.}}"	acad::bootstrap
"<div class='c2-f'> bootstrap utility for? </div><div class='c1-f'> bootstrap utility for? </div><br/>{{c1::.text-start/end/center}}  <span class=""divider"">&lt;-&gt;</span> {{c2::align the text with the start/end/center}}"	acad::bootstrap
"In bootstrap, how do you change attributes (e.g text alignment) at specific sizes <span class=""divider"">-></span> {{c1::Using breakpoints, als always}}"	acad::bootstrap
"the {{c1::define()}} method of window.customElements takes the arguments 1) {{c2::what the name of the element will be}}, 2) the {{c3::class}} that will {{c4::define its behavior}}, 3) (optional) an {{c5::object}} {{c6::specifying what it extends}} The two types of custom elements are customized built-in elements and... <span class=""divider"">-&gt;</span> {{c1::autonomous custom elements}} The two types of custom elements are autonomous custom elements and... <span class=""divider"">-&gt;</span> {{c1::customized built-in elements}} In general, regardless of what, the class defining a custom element should at least extend something like HTMLElement? <span class=""divider"">-&gt;</span> {{c1::the extends parameter (3rd arg to define)}} In general, regardless of the extends parameter (3rd arg to define), the class defining a custom element should do what? <span class=""divider"">-&gt;</span> {{c1::(at least) extend something like e.g. HTMLElement}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div><br>{{c1::customized built in elements, e.g. foo-bar that extends p}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;p is=""foo-bar""&gt;&lt;/p&gt;}} <div class=""c2-f""> You would use these in html how? </div><div class=""c1-f""> Custom elements you use like this are what kind of custom elements? </div><br>{{c1::autonomous custom elements, e.g. foo-bar}}  <span class=""divider"">&lt;-&gt;</span> {{c2::&lt;foo-bar ...&gt;&lt;/foo-bar&gt;}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div><br>{{c1::if you<b>&nbsp;do not</b> specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::an autonomous custom element}} <div class=""c2-f""> What kind of element are you specifying in this case? </div><div class=""c1-f""> what about your call to define() specifies if it is this or not? </div><br>{{c1::if you specify the 3rd argument to customElements.define (the one with extends)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a customized built-in element}} <div class=""c2-f""> Function of window.customElements for? </div><div class=""c1-f""> Function of window.customElements for? </div><br>{{c1::define()}}  <span class=""divider"">&lt;-&gt;</span> {{c2::definining a new custom element}} <div class=""c1-f""> what's the problem with this custom element? </div><br>&lt;wordcount&gt; <span class=""divider"">-&gt;</span> {{c1::must include at least a -&nbsp;}} <div class=""c1-f""> have what restriction in their name? </div><br>custom elements <span class=""divider"">-&gt;</span> {{c1::must include at least one -}}"	acad::js
"Function to set an attribute (e.g. href) on an <code>Element</code>? <span class=""divider"">-></span> {{c1::setAttribute}} Function to remove an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::removeAttribute}} Function to get an attribute (e.g. href) from an <code>Element</code>? <span class=""divider"">-></span> {{c1::getAttribute}}"	acad::js
"<div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div><br/>{{c1::whenDefined(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get a promise that resolves when foo is defined}} <div class='c2-f'> Function of window.customElements for? </div><div class='c1-f'> Function of window.customElements for? </div><br/>{{c1::get(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get the constructor of the custom element named foo}}"	acad::js
"{{c3::&lt;template&gt;}} contains HTML that won't {{c1::be rendered immediately}}, but {{c2::can be used from JS (often multiple times)}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::part(foo)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::element within shadow tree that has part=""foo""}} <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow hosts}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host-context(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which has a <b>ancestor!!!!</b> some-selector}}<br><div class=""sub""> <div class=""sub all-b""> :host-context(.mine) matches <pre><code>&lt;h1 class=""mine""&gt;   ...     &lt;some-shadow-host&gt;</code></pre> </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::host(some-selector)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::selects shadow host which matches some-selector}}<br><div class=""sub""> <div class=""sub all-b""> :host(.mine) matches &lt;some-shadow-host class=""mine""&gt; </div><div class=""sub c2-b c1-f""> (a regular DOM node that the shadow DOM is attached to.) </div> </div> <div class=""c2-f""> pseudo-class that matches what? </div><div class=""c1-f""> Are matched how? </div><br>{{c1:::defined}}  <span class=""divider"">&lt;-&gt;</span> {{c2::custom elements that are already defined}}<br><div class=""sub""> <div class=""sub c2-b c1-f""> useful for showing placeholder stuff </div> </div> <div class=""c2-f""> is selected how? </div><div class=""c1-f""> selects what? </div><br>{{c1::part=""foo""}}  <span class=""divider"">&lt;-&gt;</span> {{c2:::part(foo)}} <div class=""c2-f""> Solves what problem? </div><div class=""c1-f""> Is solved by what? </div><br>{{c1::the part property&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::targeting things within shadow DOMs (mostly components}} interestingly, what can you do with custom elements before you define them? <span class=""divider"">-&gt;</span> {{c1::already use them in the html}} Within a custom element, what can we have, that makes it particularly useful? <span class=""divider"">-&gt;</span> {{c1::child elements}} Where are the lifecycle callbacks for custom elements defined? <span class=""divider"">-&gt;</span> {{c1::in the class that defines the custom elements}} To what do you most commonly attach a shadow root? <span class=""divider"">-&gt;</span> {{c1::a custom element}} In the constructor for a custom element, what should you do, first thing? <span class=""divider"">-&gt;</span> {{c1::call super(props) (to make sure that the correct prototype chain is established)}} <div class=""c2-f""> are called when? </div><div class=""c1-f""> What is called then? </div><br>{{c1::lifecycle callbacks}}  <span class=""divider"">&lt;-&gt;</span> {{c2::when the custom element changes in relation to the DOM (e.g. connected or disconnected from the DOM)}}<br><div class=""sub""> <div class=""sub f""> Fot custom elements </div><div class=""sub c2-f""> be a little specific </div> </div> <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div><br>{{c1::connected/disconnectedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::connected to/ disconnected from the DOM}} <div class=""c2-f""> Are called when a custom element is? </div><div class=""c1-f""> Which lifecycle callbacks are called then? </div><br>{{c1::adoptedCallback}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moved to a new document}} <b>custom elements</b> have are four {{c1::lifecycle callbacks}}, {{c2::connectedCallback}}, {{c3::disconnectedCallback}}, {{c4::adoptedCallback}}, {{c5::attributeChangedCallback}}   3.2.2. Selecting Shadow Hosts from within a Shadow Tree A shadow host is outside of the shadow tree it hosts, and so would ordinarily be untargettable by any selectors evaluated in the context of the shadow tree (as selectors are limited to a single tree), but it is sometimes useful to be able to style it from inside the shadow tree context.  For the purpose of Selectors, a shadow host also appears in its shadow tree, with the contents of the shadow tree treated as its children. (In other words, the shadow host is treated as replacing the shadow root node.)  When considered within its own shadow trees, the shadow host is featureless. Only the :host, :host(), and :host-context() pseudo-classes are allowed to match it.  Why is the shadow host so weird? The shadow host lives outside the shadow tree, and its markup is in control of the page author, not the component author.  It would not be very good if a component used a particular class name internally in a shadow tree stylesheet, and the page author using the component accidentally also used the same class name and put it on the shadow host. Such a situation would result in accidental styling that is impossible for the component author to predict, and confusing for the page author to debug.  However, there are still some reasonable use-cases for letting a stylesheet in a shadow tree style its shadow host. (For example, the component might want to be laid out as a flexbox, requiring the shadow host to be set to display: flex.) So, to allow this situation but prevent accidental styling, the shadow host appears but is completely featureless and unselectable except through :host and its related functional forms, which make it very explicit when you’re trying to match against markup provided by the page author. How can you prevent FOUC with custom elements? <span class=""divider"">-&gt;</span> {{c1:::defined (and specifically :not(:defined))}} {{c1::custom elements}} are HTML elements that have their own {{c2::name}} and {{c3::custom functionality}}. The {{c1::Web Components::w...}} suite consists of {{c2::Custom elements}}, {{c3::Shadow DOM}} and {{c4::HTML templates}} <div class=""c2-f""> returns something of the type? </div><div class=""c1-f""> The most common and relevant element of this type is? </div><br>{{c1::window.customElements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::CustomElementRegistry}} <div class=""c1-f""> When can you already use this? </div><br><pre><code>&lt;share-buttons&gt;   &lt;social-button type=""twitter""&gt;&lt;a href=""...""&gt;Twitter&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""fb""&gt;&lt;a href=""...""&gt;Facebook&lt;/a&gt;&lt;/social-button&gt;   &lt;social-button type=""plus""&gt;&lt;a href=""...""&gt;G+&lt;/a&gt;&lt;/social-button&gt; &lt;/share-buttons&gt; </code></pre> <span class=""divider"">-&gt;</span> {{c1::even before these custom elements are defined}}"	acad::inf
"What do we do with the content templates in JS, so we can use it elswhere (without fucking the template up)? <span class=""divider"">-></span> {{c1::call cloneNode on it}}"	acad::js
"often, it makes sense to use templates as what? <span class=""divider"">-></span> {{c1::the shadow dom of custom elements}} attachShadow takes an argument which is what? <span class=""divider"">-></span> {{c1::an options object}}<br/><div class=""sub""> <div class=""sub all-b""> yes, it doesn't take an argument of a shadow tree to directly attach, you have to do that later </div> </div> attachShadow takes an argument which is an options object with the key(s)? <span class=""divider"">-></span> {{c1::mode}} You can access the {{c3::shadow root}} of an element via {{c2::the shadowRoot property (of any given element)}}, but only if {{c1::its mode = ""open""}} When rendering, what happens to the shadow tree? <span class=""divider"">-></span> {{c1::it's attached at the shadow host}} What kind of elements already use the shadow DOM in the background? <span class=""divider"">-></span> {{c1::things like &lt;video&gt; (e.g. its controls)}} To what can you attach a shadow root? <span class=""divider"">-></span> {{c1::any <code>Element</code>}} Once you've created a shadow root, how do you add children etc? <span class=""divider"">-></span> {{c1::just as you would for any normal DOM element}} Method of any <code>Element</code> to attach a shadow root? <span class=""divider"">-></span> {{c1::attachShadow}} <div class='c2-f'> What would you use? </div><div class='c1-f'> Allows us to do what? </div><br/>{{c1::To encapsulate part of the DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the root node of the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow root}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the point where the regular DOM ends ant the shadow DOM begins}}  <span class=""divider"">&lt;-&gt;</span> {{c2::shadow boundary}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the dom node that a shadow DOM is attached to}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a shadow host}} <div class='c2-f'> Is known as what? </div><div class='c1-f'> Is what? </div><br/>{{c1::the DOM tree inside the shadow DOM}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow tree}} <div class='c2-f'> Does what? </div><div class='c1-f'> How do we do this, for a given shadow root? </div><br/>{{c1::the mode option&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::specifies if JS written in the main page can access it}}<br/><div class=""sub""> <div class='sub f'> of the options object of attachShadow </div> </div> Why might you want to use web components without the shadow DOM, for example? <span class=""divider"">-></span> {{c1::e.g. you <i>want</i>&nbsp;styles to propagate}} The {{c1::normal DOM}}, when {{c2::in contrast to the shadow DOM}}, is sometimes called {{c3::the light DOM}}? During composition, things with {{c1::slot=""foo""}} replace {{c3::slots}} with {{c2::name=""foo""}} in the {{c4::shadow DOM}}. <div class='c2-f'> go where? </div><div class='c1-f'> What things related to slots are here? </div><br/>{{c1::&lt;slot&gt; elements}}  <span class=""divider"">&lt;-&gt;</span> {{c2::somewhere within the shadow DOM}} <div class='c2-f'> Are problems that what solves? </div><div class='c1-f'> What are some exampls of problems that this solves? </div><br/>{{c1::competing styles, multiple IDs}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the shadow DOM}} If there are multiple elements in light DOM {{c1::with the same slot name}}, they are {{c2::appended into the slot, one after another}}. <div class='c2-f'> go/are in(to) which DOM? </div><div class='c1-f'> What things related to slots are here? </div><br/>{{c1::elements with slot=""something""}}  <span class=""divider"">&lt;-&gt;</span> {{c2::are in the light DOM}}"	acad::js
"Lakoff 1975 says that women's language involves what, related to swearing? <span class=""divider"">-&gt;</span> {{c1::swearing is not womanly}} If the point about 'woman's domain being the trivial' holds, then the double bind is that she can either either participate in men's areas of interest and be censured, or talk about what (which causes what)? <span class=""divider"">-&gt;</span> {{c1::talk about women's things (which are 'trivial' and will be laughed at and ignored)}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either use the male forms and face censure for acting outside her gender norms, or? <span class=""divider"">-&gt;</span> {{c1::face the disadvantages of using a lect with less power}} For Lakoff 1975, the double bind coming from the male lect containing strong/useful forms, and the female lect less so is that women can either face the disadvantages of using a lect with less power, or? <span class=""divider"">-&gt;</span> {{c1::use the male forms and face censure for acting outside her gender norms}} For Lakoff 1975, language use can create real-world benefits, of which the male lect gets the powerful/useful forms, and the female lect? <span class=""divider"">-&gt;</span> {{c1::gets the weak forms}}"	acad::ling
"The most common type of {{c5::test doubles}} (arranged alphabetically) are {{c1::dummys}}, {{c2::fakes}}, {{c3::mocks}}, and {{c4::stubs}} As test doubles, {{c3::stubs}} use {{c4::predefined answers}} to {{c5::simulate what a method would actually do&nbsp;}}<br/><div class=""sub""> <div class=""sub all-b"">dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly</div> </div> As test doubles, {{c3::mocks}} make sure that {{c2::the method was actually called}} on {{c1::the mock}}&nbsp;in the way {{c4::it shoud}}<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::fakes}} have {{c2::working implementations}} but {{c2::use some kind of shortcut}} (e.g. {{c1::database in memory}})<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div> As test doubles, {{c3::dummys}} are {{c2::passed}} but {{c2::never used}} (e.g. {{c1::used to fill param lists}})<br/><div class=""sub""> dummys are passed but never used (dummys are dummys because they don't do anything), fakes have working implementations but use some shortcut (fakes are fakes because they fake a part of the implementation), stubs use predefined answers (stubs are called stubs because they are method stubs), mocks make sure that the method was called on it properly </div>"	acad::inf
"foo.{{c3::tagName}} (or .{{c3::nodeName}}) will get the {{c2::name of the html tag}} {{c1::in allcaps}} foo.{{c1::tagName}} and foo.{{c1::nodeName}} are the same, except that {{c1::nodeName}} will return {{c2::#text for text nodes}} Why have I never heard of the capturing phase until today (19.07.2021)? <span class=""divider"">-&gt;</span> {{c1::Because by default, events are registered for the bubbling phase}} The on&lt;event&gt; prop can't do what, what other methods of adding event handlers can? <span class=""divider"">-&gt;</span> {{c1::add multiple event handlers}} Inverse of addEventListener? <span class=""divider"">-&gt;</span> {{c1::removeEventListener}} Generally, DOM Events have three phases: The {{c1::capturing phase}}, the {{c2::target phase}}, and the {{c3::bubbling phase}} Function that allows adding multiple events: element.{{c1::addEventListener}}({{c2::event}}, {{c3::handler}}, {{c4::options}}) Event delegation only works due to what? <span class=""divider"">-&gt;</span> {{c1::event bubbling}} By default, which events bubble? <span class=""divider"">-&gt;</span> {{c1::most but not all (e.g. focus)}} By default, events become what kind of events? <span class=""divider"">-&gt;</span> {{c1::events that trigger during the bubbling phase}} Behavior pattern for {{c5::event delegation}}: Add {{c3::custom attribute}} to element that {{c4::describes behavior}}, add event listener on {{c1::document (or other high elem)}} that {{c2::tests for attribute}} (and then handles the changes) {{c1::If we pass an object/class as an event handler}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the handleEvent() function}} {{c1::stop further event bubbling&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.stopPropagation()}} {{c1::stop default browser actions for event (e.g. going to link when clicking on it)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::event.preventDefault()}}  {{c1::make an event trigger during the capturing phase}}  <span class=""divider"">&lt;-&gt;</span> {{c2::3rd arg of addEventListener {capture: true}}}"	acad::inf
"<div class='c2-f'> method for? </div><div class='c1-f'> does what? </div><br/>{{c1::Object.entries(someObj)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::get array of [key, value] pairs}}"	acad::js
for await of allows you to iterate over an {{c2::async iterable object}}, to use it, insert {{c1::an await between for and the rest of the iteration statement}}	acad::js
{{c1::Object.fromEntries}} takes an argument that is an {{c2::iterator}} of {{c3::[key, value]}} and {{c4::transforms it into an object&nbsp;}}	acad::js
"Why can't you misformat something using prettier? <span class=""divider"">-&gt;</span> {{c1::since it formats your code automatically}} Which languages does prettier support? <span class=""divider"">-&gt;</span> {{c1::a lot of different web-related ones (JS, Angular, Vue, JSX, CSS, SCSS, JSON, YAML etc. etc.)}} What does prettier do with the stuff you give it? <span class=""divider"">-&gt;</span> {{c1::formats it according to its rules}}"	acad::js
"the {{c3::deviceorientation}} event contains four values, {{c1::absolute}}, {{c2::alpha}}, {{c4::beta}}, and {{c5::gamma}} for the deviceorientation events, the things they can be relative to is the {{c1::screen}} on your mobile device, and the {{c2::keyboard}} on your laptop (generally) Why might your laptop have acceleration sensors? <span class=""divider"">-></span> {{c1::protect HDD when fallign}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""sm_beta2.png"">)){{c1::beta (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the x axis&nbsp;}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""sm_alpha.png"">)){{c1::alpha (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the z axis}} <div class='c2-f'> represents orientation changes where? </div><div class='c1-f'> Orientation changes around this axis are represented by what? </div><br/>((h:all;::<img src=""gamma.png"">)){{c1::gamma (of deviceorientation event)}}  <span class=""divider"">&lt;-&gt;</span> {{c2::around the y axis&nbsp;}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div><br/>{{c1::deviceorientation}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Device orientation changes (in alpha, beta, gamma)}} <div class='c2-f'> Is an event sent when? </div><div class='c1-f'> Which event is sent in this case? </div><br/>{{c1::devicemotion}}  <span class=""divider"">&lt;-&gt;</span> {{c2::moving your device (accelerometer changes)}}"	acad::js
"within npm scripts, we can access all our {{c2::dependencies}} {{c1::binaries}} without {{c3::specifying the full path}} to run your {{c2::npm scripts}}, you use {{c1::npm run/run-script}} npm scripts is often used for what kind of things? <span class=""divider"">-&gt;</span> {{c1::building, testing, etc.}} npm scripts is a tool to run scripts in what language/env? <span class=""divider"">-&gt;</span> {{c1::Shell scripts}} in what file(s) do you define your npm scripts? <span class=""divider"">-&gt;</span> {{c1::in your package.json}} Where in your package.json do you define your npm scripts? <span class=""divider"">-&gt;</span> {{c1::in the ""scripts"" field}} For long scripts, what can we (kinda obviously) do within npm scripts? <span class=""divider"">-&gt;</span> {{c1::put them in extra files and run those}} <div class=""c2-f""> How do? </div><div class=""c1-f""> What do? </div><br>{{c1::defining a npm script called lint which runs eslint}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code>{     ""scripts"": {         ""lint"": ""eslint .""     } }</code></pre>}} npm {{c5::lifecycle}} scripts (non-deprecated): {{c1::prepare}}, {{c2::prepublishOnly}}, {{c3::prepack}}, {{c4::postpack}} npm {{c3::scripts}} names are often written {{c2::foo:bar}} (this is {{c1::only a convention, however}}) <div class=""c2-f""> Makes available what to npm scripts? </div><div class=""c1-f""> Is made available how to npm scripts? </div><br>{{c1::$npm_package_foo}}  <span class=""divider"">&lt;-&gt;</span> {{c2::package.json key foo}} <div class=""c2-f""> Makes available what to npm scripts? </div><div class=""c1-f""> Is made available how to npm scripts? </div><br>{{c1::$npm_config_foo}}  <span class=""divider"">&lt;-&gt;</span> {{c2::certain config values}} <div class=""c2-f""> Is actually an alias for? </div><div class=""c1-f""> Has the somewhat shorter alias? </div> <div class=""c2-f""> Is a shorter alias for? </div><div class=""c1-f""> Shorter alias for this? </div> <div class=""c2-f""> Is actually an alias for? </div><div class=""c1-f""> Has the somewhat shorter alias? </div> <div class=""c2-f""> Is actually an alias for? </div><div class=""c1-f""> Has the somewhat shorter alias? </div> <div class=""c2-f""> Is actually an alias for? </div><div class=""c1-f""> Has the somewhat shorter alias? </div> <div class=""c2-f""> Is actually an alias for? </div><div class=""c1-f""> Has the radically shorter alias? </div><br>{{c1::npm build&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm run/run-script build}} {{c1::npm run}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm run-script}} {{c1::npm start&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm run/run-script start}} {{c1::npm stop&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm run/run-script stop}} {{c1::npm test&nbsp;}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm run/run-script test}} {{c1::npm t}}  <span class=""divider"">&lt;-&gt;</span> {{c2::npm test}} if we prefix our npm scripts name (e.g. foo) with {{c3::pre}}/{{c3::post}} (so {{c3::pre}}/{{c3::post}}foo), then npm will run it {{c1::before/after}} foo {{c2::automatically}} besides {{c3::custom}} npm scripts, npm also has {{c1::lifecycle scripts}}, which run at {{c2::particular, predefined times}} <div class=""c1-f""> What will happen if we npm run hello? </div><br><pre><code>{     ""scripts"": {         ""prehello"": ""echo \""Preparing greeting\"""",         ""hello"": ""echo \""Hello World\"""",         ""posthello"": ""echo \""Greeting delivered\""""     } }</code></pre> <span class=""divider"">-&gt;</span> {{c1::echo those three lines in order}} <div class=""c1-f""> What are pre and posthello doing here? </div><br><pre><code>{     ""scripts"": {         ""prehello"": ""echo \""Preparing greeting\"""",         ""hello"": ""echo \""Hello World\"""",         ""posthello"": ""echo \""Greeting delivered\""""     } }</code></pre> <span class=""divider"">-&gt;</span> {{c1::setting up things to auto run before after hello}}"	acad::node
"the parameters taken by {{c1::fetch()}} and the {{c2::Request constructor}} are {{c3::identical}} (except that you can pass a {{c2::Request}} object to {{c1::fetch}} {{c4::instead of the 'proper' parameters}}) <div class='c2-f'> fetch()/new Request() key for? </div><div class='c1-f'> fetch()/new Request() key for? </div><br/>{{c1::method}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the HTTP method to use}} <div class='c2-f'> fetch() options object/new Request() key for? </div><div class='c1-f'> fetch() options object/new Request() key for? </div><br/>{{c1::headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::the headers to use}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.status}}  <span class=""divider"">&lt;-&gt;</span> {{c2::HTTP status code}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.ok}}  <span class=""divider"">&lt;-&gt;</span> {{c2::whether the status code was ok (200-299)}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.headers}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The HTTP headers returned}} <div class='c2-f'> Response (returned via the fetch api) property for? </div><div class='c1-f'> Response (returned via the fetch api) property for? </div><br/>{{c1::Response.body}}  <span class=""divider"">&lt;-&gt;</span> {{c2::body returned}}"	acad::js
"WebAssembly and JS are meant to... <span class=""divider"">-></span> {{c1::work together}} One of main problematic implications of {{c3::WebAssembly}} is that it allows running code on your computer which is {{c2::not easily inspectable}} because {{c1::compiled}}, thus potentially hiding {{c4::malware}}, preventing {{c5::adblockers etc.}} from applying, and in a notable case, being used for {{c6::crypto mining}} JS can access WebAssembly via... <span class=""divider"">-></span> {{c1::the WebAssembly JavaScript API}}"	acad::inf
"<div class='c2-f'> Is? </div><div class='c1-f'> Is what, for webpack? </div><br/>{{c1::webpack default output dir}}  <span class=""divider"">&lt;-&gt;</span> {{c2::dist}} <div class='c2-f'> Is? </div><div class='c1-f'> Is what, for webpack? </div><br/>{{c1::webpack default entry point}}  <span class=""divider"">&lt;-&gt;</span> {{c2::src/index.js}} <div class='c2-f'> Is? </div><div class='c1-f'> Is what, for webpack? </div><br/>{{c1::webpack default config file}}  <span class=""divider"">&lt;-&gt;</span> {{c2::webpack.config.js}}"	acad::webpack
{{c3::Webpack}} starts building its {{c1::dependency graph}} at&nbsp; {{c2::the entry point}}.	acad::webpack
Within the {{c1::webpack.config.js}}, the {{c3::configs}} are specified as {{c2::properties of module.exports = {... }}	acad::webpack
Specify the {{c1::entry point(s)}} of webpack by {{c2::setting the entry property in its config}}	acad::webpack
Specify the {{c1::outpuit dir}} of webpack by {{c2::setting the output property in its config}}, which is an object that {{c3::itself has a bunch of fields}}	acad::webpack
Using the {{c2::dependency graph}}, webpack generates one or more {{c1::bundles}}	acad::webpack
The things that go in {{c1::the output directory}} of webpack are {{c2::bundles}}	acad::webpack
In webpack, {{c3::any of the various forms of modules}} (e.g. {{c3::JS, node, CSS, Sass, Web Assembly, etc.}}) are all considered {{c1::modules}}, as are {{c2::assets}}	acad::webpack
In webpack, natively only {{c1::JS}} and {{c2::JSON}} are supported, to {{c5::allow parsing}} of {{c3::other file types}}, you need to use a {{c4::loader}}	acad::webpack
to specify a {{c1::loader}}, within the {{c2::rules array}} of the {{c3::modules prop}} within the config, you specify a {{c4::regex}} as the {{c5::test}} property, and a {{c6::use}} property wherein {{c7::you specify the actual loader}}	acad::webpack
to {{c3::extend webpack functionality}} beyond just loaders, you use {{c1::plugins}}, which are specified in the {{c1::plugins}} {{c2::array}} of the config, and need to be {{c4::created using <code>new</code>}}	acad::webpack
to specify whether you are currently creating for a {{c2::development}} or a {{c2::production}} environment, you use {{c1::mode}}	acad::webpack
Besides the shorthand of {{c1::just specifying a string}} as the entry property, you may {{c2::specify an array of entry points}}, or an {{c3::object}}.	acad::webpack
If you specify {{c5::an object}} as the value of entry, every {{c3::key}} defines {{c4::the name of an entry point}}, which then itself may contain {{c2::only the path of the entry point}}, or may itself be {{c1::an object}}	acad::webpack
{{c3::module.exports.entry.foo}} may contain {{c4::an object}} which may in turn define things like other {{c1::entry points to depend on}}, {{c2::modules to require}}, etc.	acad::webpack
if you have {{c1::multiple entry points}} that create {{c2::multiple bundles}}, you should use {{c3::substitution}}, which is marked by {{c4::[foo]}} and may either be {{c5::name}}, {{c6::id}}, or {{c7::contenthash}}	acad::webpack
The <code>{{c1::__webpack_public_path__}}</code>&nbsp;variable allows you to set {{c2::the URL}} that {{c3::output files}} will have {{c4::dynamically at runtime.}}	acad::webpack
if your assets {{c2::have a different URL publically then on your machine}}, within the {{c3::output}} key you can specify the {{c1::publicPath}} variable	acad::webpack
Besides just allowing the parsing of files, webpack {{c1::loaders}} can also {{c2::transform}} them	acad::webpack
Loaders can be loaded from {{c2::the config file}}, but also {{c3::inline}}, where they are specified within {{c4::the relevant import statement}} of the language (which is however {{c1::dicouraged}})	acad::webpack
Webpack extensibility is in the form of {{c1::loaders}} and {{c2::plugins}}.	acad::webpack
Internally, webpack {{c5::plugins}} are {{c1::classes}}, which {{c2::have a method apply}}, which {{c3::recieves an argument of the compiler}}, which one {{c4::can then hook into}}	acad::webpack
Since webpacks {{c2::config}} is a {{c1::js}} file, more specifically a {{c1::commonjs module}}, you can {{c3::require other modules}}, and do {{c4::anything else you might do in a js file}}, including {{c4::generating the config dynamically}}	acad::webpack
webpack uses {{c1::enhanced-resolve}} for {{c2::module path resolution}}	acad::webpack
In webpack, besides specifying a {{c3::relative}} or {{c4::absolute}} path for {{c5::modules}}, you may also specify one that is relative to {{c2::directories}} specified in {{c2::resolve.modules}} (this version does not&nbsp;&nbsp;{{c1::take a leading slash of any kind}} when specified)&nbsp;	acad::webpack
"to specify {{c2::what you're developing for}} (eg. {{c3::node, electron, web...}}), specify the {{c1::target}} key"	acad::webpack
"To {{c1::connect the modularized code you've generated}}, webpack has a {{c2::runtime}}, which is managed by {{c3::the manifest}}."	acad::webpack
In the webpack {{c1::runtime}}, any {{c2::module import/require}} statements become {{c3::<code>__webpack_require__</code>  calls}} internally.	acad::webpack
"HMR is short for? <span class=""divider"">-></span> {{c1::Hot module replacement}}"	acad::webpack
{{c1::tree shaking}} is a JS term for {{c2::dead code elimination}}	acad::webpack
"<div class=""c2-f""> What is this visually describing? </div><div class=""c1-f""> How might we visualize how this work? </div><br><img class=""c2-f c1-b"" src=""sm_2021-07-31--14-53-45-screenshot.jpg""><br>{{c1::}}  <span class=""divider"">&lt;-&gt;</span> {{c2::webpack}}"	acad::webpack
"Currently, what does webpack do with module requiring, in the background? <span class=""divider"">-></span> {{c1::transpiles it}}"	acad::webpack
"<div class='c2-f'> Does what? </div><div class='c1-f'> loader for? </div><br/>{{c1::style-loader}}  <span class=""divider"">&lt;-&gt;</span> {{c2::Inlines css}}"	acad::webpack
"<div class=""c2-f""> Does what? </div><div class=""c1-f""> loader for? </div><br>{{c1::css-loader}}  <span class=""divider"">&lt;-&gt;</span> {{c2::resolves things like @import and url() within css files}}"	acad::webpack
to load css with webpack, you use {{c1::style-loader}} first and {{c2::css-loader}} second	acad::webpack
Before webpack {{c1::5::version}}, one would have used {{c2::different kind of loaders}} for {{c3::assets}} (e.g. {{c3::images, fonts, the like}}) with webpack {{c1::5::version}}, one instead uses {{c4::the type key}}, which uses {{c5::asset modules}} in the background	acad::webpack
for webpack assets, type: {{c1::asset}} {{c2::autochooses between data URI and separate file}}&nbsp; for webpack assets, type: {{c1::asset/source}} {{c2::exports the source code of the asset}}&nbsp; for webpack assets, type: {{c1::asset/resource}} {{c2::emits a separate file}} and {{c2::exports the url}} for webpack assets, type: {{c1::asset/inline}} {{c2::emits a data URI}}&nbsp;	acad::webpack
"for webpack {{c3::assets (images, videos, etc.)}}, you {{c1::import them}} the {{c2::same way you'd import anything else}}"	acad::webpack
By default, loaders for {{c2::data files}} ({{c2::tsv, xml}} etc.) will parse to {{c1::JSON}}	acad::webpack
{{c1::html-webpack-plugin}} simplifies {{c2::creating html files for webpack}}, for instance {{c3::generating an index.html with your modules}}	acad::webpack
{{c3::generate-webpack-config}} is a tool to {{c4::autogenerate the most common webpack configs}}, either run on {{c2::the cli}}, or via {{c1::the site}}	acad::webpack
to {{c2::clean output folder on build}}, use {{c1::clean: true}}	acad::webpack
Source maps are easy to use since {{c1::they are natively supported in most devtools}}	acad::webpack
To generate a {{c3::sourcemap}} in webpack, set the {{c2::devtools}} key to one of the something-{{c1::source-map}} options&nbsp;	acad::webpack
the {{c1::--watch}} flag of {{c2::webpack}} will {{c3::refresh files on save}}, but {{c3::you will still have to reload yourself}}	acad::webpack
"Using JSX with React is... <span class=""divider"">-&gt;</span> {{c1::optional}}"	acad::react
"How mutable are React elements? <span class=""divider"">-&gt;</span> {{c1::immutable}}"	acad::react
When React sees an {{c1::element representing a user-defined component}}, it passes JSX {{c2::attributes}} and {{c3::children}} to it as {{c4::a single object}}. We call this object “{{c5::props}}”.	acad::react
the only time we can assign to {{c1::this.state}} is in the the {{c2::constructor}}	acad::react
In the react {{c2::component constructor}}, we always need to call {{c1::super(props)}} first	acad::react
{{c2::outputting}} the {{c3::virtual representation of a component}} into the {{c4::final UI representation}} (most often the {{c4::actual DOM}}) is known as {{c1::mounting}}	acad::react
Within the component class, besides {{c1::lifecycle}} methods, constructors etc., we can add {{c2::custom}} methods	acad::react
within class components, {{c2::outside of the constructor}}, you can {{c3::only change state}} via {{c1::setState()}}	acad::react
both {{c2::this}}.{{c1::props}} and {{c2::this}}.{{c1::state}} may be updated {{c3::asynchronously}}, if you want to make sure that {{c4::things are updated in the correct order}}, pass a {{c5::callback}}	acad::react
if you use {{c1::setState}}, but only {{c2::specify some of the keys}}, they will be {{c3::merged in to the previous state object}}	acad::react
If we take a function, e.g. {{c1::a method}} of {{c1::an object}}, and {{c2::assign it to e.g. a variable}} (or {{c2::pass it as a param}}), and then {{c4::call it later}}, it will use {{c3::whatever <code>this</code> is in scope}}, instead of {{c3::the <code>this</code>}}&nbsp;of {{c1::the object}} or similar	acad::js
To make sure react {{c5::event handlers}} {{c1::get the correct <code>this</code>}}, you need to {{c2::<code>bind</code> them in the constructor}}, or use {{c3::public class fields}}/{{c4::arrow functions}} (which have their own downsides)	acad::react
To {{c3::pass arguments}} to React {{c4::event handlers}}, use {{c1::anonymous functions}} or {{c2::bind}}	acad::react
To {{c2::conditionally render things}}, use {{c1::native JS constructs such as if, ternary, log-op}}	acad::react
For easy list generation, it is often idiomatic in react to {{c1::return JSX}} from a {{c2::map function}}	acad::react
In react, a {{c1::controlled component}} has react as {{c2::the only thing managing its behavior}}, making its content {{c3::reflect the react state}}, and having {{c4::react update it}} based on {{c5::events}} (e.g. {{c5::onchange}})	acad::react
"what would you set to this.state.somekey to have a input type=""text"" be a controlled component? <span class=""divider"">-></span> {{c1::value}}"	acad::react
In React, the content of a {{c1::textarea}} does not live {{c2::between its tags}}, but instead {{c3::in a value attribute}}	acad::react
In React, which <code>{{c1::&lt;option&gt;}}</code> is selected is not specified by {{c2::a <code>selected</code> attr}}&nbsp;on {{c2::the <code>&lt;option&gt;</code>}}, but by {{c3::a <code>value</code> attr}}&nbsp;on {{c3::the <code>&lt;select&gt;</code> tag}}	acad::react
{{c1::formik}} and {{c2::react-hook-form}} are the most popular {{c3::react form libraries}}	acad::react
{{c1::Lifting state up}} is putting {{c2::state}} that {{c3::needs to be shared}} in {{c4::the closest common ancestor}} When lifting state up, the {{c1::state changes}} are then {{c2::passed back down}} as {{c3::props}} To {{c1::lift state up}} in react, {{c2::child components}} {{c4::should not}} depend on {{c3::state}} anymore, but on {{c3::props}} If child components have to {{c2::handle events}} when {{c1::lifting state up}}, the {{c3::event handlers}} should be {{c4::passed in}}, so they can {{c5::change the correct state}}	acad::react
{{c1::react-devtools}} are specific devtools that should make {{c2::inspecting react a lot easier}}	acad::react
In sharing information, react prefers {{c1::composition}} over {{c1::inheritance}}	acad::react
Whatever you {{c2::put in between}}&nbsp; {{c3::JSX component opening&amp;closing tags}} gets {{c4::passed on to the component}} as {{c1::props.children}}	acad::react
"<div class='c1-f'> What provides the props.children here? </div><br/><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::html content within &lt;FancyBorder&gt; tags}}"	acad::react
"<div class=""c1-f""> What does the content between &lt;FancyBorder&gt; tags do? </div><br><pre><code>function WelcomeDialog() {   return (     &lt;FancyBorder color=blue&gt;       &lt;h1 className=Dialog-title&gt;         Welcome       &lt;/h1&gt;       &lt;p className=Dialog-message&gt;         Thank you for visiting our spacecraft!       &lt;/p&gt;     &lt;/FancyBorder&gt;   ); } </code></pre> <span class=""divider"">-&gt;</span> {{c1::becomes accessible as props.children}}"	acad::react
"In react, {{c1::inheritance}}-like behavior is achieved by {{c2::the more general component}} {{c3::recieving props from}} {{c2::the more specific component}}<br/><div class=""sub""> <div class=""sub all-b""><pre><code>function FancyBorder(props) {   return (     &lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;       {props.children}     &lt;/div&gt;   ); } </code></pre></div> </div>"	acad::react
The steps react recommends to building an react app: {{c1::create a mockup of your site -}}&gt; {{c2::iidentify components}} -&gt; {{c3::build a static verion in react}} -&gt; {{c4::find out all the things that need state}} -&gt; {{c5::find out who should own the state}} -&gt; {{c6::add a way for handling changes}}<br>	acad::react
"<span class=""line"">The shape that a specific character/grapheme takes in a specific typeface/writing style/writing system is known as a {{c1::letterform}}.</span> "	acad::ling
In contrast to {{c3::most HTML attributes in react}}, {{c2::aria attributes}} are written in {{c1::kebab-case}}	acad::react
"In react, you can use {{c2::Context}} to {{c3::store global data}}, but you should {{c1::think if there isn't a better way to do it first}}"	acad::react
"In react, to create a Context object, call {{c1::React.}}{{c2::createContext}}{{c3::(defaultValue)}}<br/><div class=""sub""> <pre><code>const ThemeContext = React.createContext('light'); </code></pre> </div>"	acad::react
In react, everything {{c2::nested within}} a {{c1::context provider}} has acces to {{c3::the Context}} with {{c3::the specified value}}	acad::react
To instantiate a context provider of context Foo within JSX, use {{c1::&lt;}}{{c2::Foo.Provider}}{{c3:: value={somevalue} }}{{c1::&gt;&nbsp;}}	acad::react
In react, a component with a {{c1::render prop}} takes a {{c2::function}} that {{c2::returns}} a {{c3::react element}} and {{c3::calls it (the function)}} instead of {{c4::implementing its own render logic}}	acad::react
"While it's ideomatic to call a {{c1::render prop}} {{c2::<code>render</code>}}, any prop that {{c3::is a function}} and {{c4::another component uses to know what to render}} is a {{c1::render prop}}"	acad::react
"<div class='c1-f'> What are we doing here? </div><br/><pre><code>class MouseTracker extends React.Component {   render() {     return (       &lt;div&gt;         <mark>&lt;Mouse render={mouse =&gt; (           &lt;Cat mouse={mouse} /&gt;         )}/&gt;</mark>       &lt;/div&gt;     );   } } </code></pre> <span class=""divider"">-></span> {{c1::creating a render prop}}"	acad::react
"You're not limited to putting {{c2::other elements}} within {{c3::the component tags}} to pass it as props.children, you can also {{c1::insert arbitray {someJS} }} in here."	acad::react
"within {{c1::&lt;SomeContext.}}{{c2::Consumer&gt;}} tags, you can {{c3::specify a function}} that takes {{c4::the value of the closest provider}} and returns {{c5::react elements/JSX to render}}<br/><div class=""sub""> <pre><code>&lt;MyContext.Consumer&gt;   {value =&gt; /* render something based on the context value */} &lt;/MyContext.Consumer&gt; </code></pre> </div>"	acad::react
the {{c1::useState}} function returns an {{c2::array of length 2}}, {{c2::[0]}} being {{c3::the current state}}, and {{c2::[1]}} being {{c3::the function to change the state}}	acad::react
"<pre><code>function Example() {   // Declare a new state variable, which we'll call count   const {{c1::[count, setCount]}} = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre>"	acad::react
"<div class='c1-f'> What are we using here to manage state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::hooks}}"	acad::react
"<div class='c1-f'> What is count doing here, related to state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::representing the current state}}"	acad::react
"<div class='c1-f'> What is setCount doing here, related to state? </div><br/><pre><code>function Example() {   // Declare a new state variable, which we'll call count   const [count, setCount] = useState(0);    return (     &lt;div&gt;       &lt;p&gt;You clicked {count} times&lt;/p&gt;       &lt;button onClick={() =&gt; setCount(count + 1)}&gt;         Click me       &lt;/button&gt;     &lt;/div&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::changing it}}"	acad::react
Before {{c2::hooks}}, if you were writing a {{c1::function component}} and needed {{c3::e.g. state}}, we would have to have {{c4::converted it to a class component}}	acad::react
"the hook {{c1::useState}} takes an argument of {{c2::the inital value}}<br/><div class=""sub""> <div class=""sub all-b"">both useEffect and useContext take different arguments</div> </div>"	acad::react
the values of variables that we {{c2::assign the useState() return values to}} are preserved even {{c1::after the function exits}}	acad::react
{{c3::the useState function}} is a {{c2::Hook}} called the {{c1::State}} {{c2::Hook}}	acad::react
{{c1::useEffect}} takes {{c2::a callback}} to specify the side effect {{c1::useEffect}} runs {{c2::asynchronously}}, if you need a {{c2::blocking}} version, use {{c3::useLayoutEffect}} instead {{c1::useEffect}} is called when? {{c2::after every render}} (by default) {{c1::useEffect}} is a {{c2::Hook}} that allows you to do {{c3::side effects}} such as {{c3::changing the DOM}} from a {{c4::function component}}	acad::react
if you {{c1::return a callback from}} {{c2::useEffect}}, React will run it {{c3::before any new render (and before finally dismounting)}}	acad::react
to {{c1::clean up}} useEffect stuff, <b>return</b> {{c2::a callback from it}}	acad::react
"since you can {{c1::call useEffect multiple times}}, it's recommended to call it based on {{c2::separate concerns}}, not just {{c3::cram everything the component should do into the same useEffect}}"	acad::react
The {{c1::optional}} {{c2::second argument}} to useEffect is {{c3::an array of states}} - useEffect will only be called if {{c4::one of the values}} in {{c3::the array}} changed,&nbsp;	acad::react
When {{c2::specifying the array optional secondary arg}} for useEffect, you need to include {{c1::any states you will use in the array,}} or it will {{c3::use outdated values}}	acad::react
While you can {{c2::pass an empty array}} to useEffect as the second arg, causing it to {{c3::only run once on mount}} (and {{c3::the return value once on unmount}}), it is {{c1::generally discouraged}}	acad::react
You can only call {{c2::hooks}} from React {{c3::function components}} (not {{c3::plain JS functions}}, even if {{c3::called from react components}}), or from {{c1::custom Hooks}}	acad::react
You can only call {{c2::hooks}} {{c3::at the top level,}} that is not in {{c3::loops,}} {{c3::conditions}}, or {{c3::nested functions}}, because React {{c1::relies on the order in which the Hooks are called to determine which state is what}}	acad::react
"<div class='c1-f'> What's the problem here? </div><br/><pre><code>     if (name !== '') {     useEffect(function persistForm() {       localStorage.setItem('formData', name);     });   }</code></pre> <span class=""divider"">-></span> {{c1::call hooks only at toplevel}}"	acad::react
a {{c3::custom hook}} is a JS {{c4::function}} whose name {{c2::starts with use}} and which may {{c1::call other hooks}}	acad::react
in contrast to {{c2::built-in hooks}}, {{c2::custom hooks}} can {{c1::take any arguments}} and {{c1::return anything}}	acad::react
"{{c4::custom hooks}} are meant for {{c3::reusing logic}}, which you can't just {{c1::do via a normal function}}, since {{c2::normal functions can't call the built-in hooks}}"	acad::react
conventionally, {{c1::the first value returned}} from {{c3::useState}} is called {{c4::e.g. foo}}, and {{c1::the second value}} is then called {{c2::setFoo}}	acad::react
"when we're generalizing over all {{c2::foos}} and {{c2::setFoos}} we might {{c3::get from useState}}, we call them {{c1::state}} and {{c1::setState}}"	acad::react
{{c4::setState}} may take a value, or a {{c1::callback}} which {{c2::recieves the previous value}} and {{c3::returns the next value}}	acad::react
if you want to specify {{c1::an inital state}} that is {{c2::complicated}}, instead of {{c3::passing useState a value}}, you may also {{c3::pass it a callback}}	acad::react
within {{c1::the render function}}&nbsp;≈ {{c2::the main body of a function component}} (≈ outside of&nbsp;{{c2:: useEffect and similar}})&nbsp;respectively, you may not do things {{c3::that cause side effects&nbsp;}}	acad::react
{{c1::useContext}} is a {{c2::hook}} that {{c3::takes SomeContext}} and {{c3::returns the value for that SomeContext}} (the one determined by {{c4::the nearest SomeContext.Provider}})	acad::react
"SInce in react-bootstrap {{c1::.key-value often becomes key=""value""}}, to {{c2::add new key=""value"" pairs}}, {{c3::add new .key-value classes}}"	acad::react
"{{c1::until which breakpoint on the container will follow the 100% plus padding thing}} is set in react-bootstrap by {{c2::the fluid=""breakpoint"" prop}}"	acad::react
"Pretty much all styling frameworks have chosent the concept of breakpoints to abstract over width-based media queries. Breakpoints specify specific width ranges. Common breakpoint names: Extra small|no name (default)|Tailwind, Chakra, Bootstrap Small|sm|Tailwind, Chakra, Bootstrap Medium|md|Tailwind, Chakra, Bootstrap Large|lg|Tailwind, Chakra, Bootstrap Extra large|xl|Tailwind, Chakra, Bootstrap Extra extra large|2xl|Tailwind, Chakra Extra extra large|xxl|Bootstrap. For pretty much all frameworks, breakpoints select this size and up. The reason breakpoints generally select this size and up in most frameworks is that they are mobile first Since breakpoints generally select this size and up, you need to overwrite breakpoints for larger sizes if you want it to only apply to one size. &lt;img class=""w-16 md:w-32 lg:w-48"" src=""...""&gt; You specify that you want selector foo to apply to breakpoint bar (and up) like so  Bootstrap|.foo-bar Tailwind|bar:foo &lt;img class=""w-16 md:w-32 lg:w-48"" src=""...""&gt;  In tailwind, you can use the same syntax that is used for breakpoints for states (such as e.g. hover) <pre><code>&lt;button class=""bg-red-500 hover:bg-red-700 ...""&gt;   Hover me &lt;/button&gt;</code></pre>  {{c1::}}"	acad::chakra-ui
{{c1::Next.js}} is a {{c2::framework}} for {{c3::react}}	acad::nextjs
In next.js, any {{c1::react component}} {{c3::exported}} from a {{c2::.js}}({{c2::x}}) or {{c2::.ts}}({{c2::x}}) file in {{c4::the pages directory}} is {{c5::a page}}	acad::nextjs
By default, {{c1::next.js}} {{c2::pre-renders}} ({{c2::generates the HTML of in advance}}) {{c3::every page}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getStaticPaths}} claim to only run {{c2::during build time}}, but {{c3::actually also can run during runtime}} if using {{c4::Incremental Static Regeneration}}	acad::nextjs
the three functions (which are all a{{c2::sync}}) for {{c1::fetching data}} in next.js are {{c3::getStaticProps}}, {{c4::getStaticPaths}}, {{c5::getServerSideProps}}	acad::nextjs
{{c1::getStaticProps}} and {{c1::getServerSideProps}} will both pass the value {{c4::in the props key}} of {{c5::the return value}} to the {{c2::react component}} {{c3::defining the page}}	acad::nextjs
to {{c1::add custom stylesheets}} you <code>{{c2::import}}</code> them in {{c3::pages/_app.js}} ({{c4::and only there!}}) {{c6::stylesheets from npm modules}} can be {{c2::imported}} {{c5::anywhere}}	acad::nextjs
in nodejs, {{c1::event emitters}}&nbsp;have {{c2::an <code>on</code> method}} (<code>{{c1::someEventEmtter}}.{{c2::on(...}}</code>), which takes {{c3::a string of the event to listen to}}, and {{c4::a callback for the listener&nbsp;}}	acad::node
"in the nodejs readline module, the {{c1::'line'}} {{c2::event is emitted}} whenever {{c3::an input stream encounters a newline}}"	acad::node
"in the nodejs {{c2::readline}} module, the {{c1::'close'}} event is emitted whenever {{c3::an input stream ends}}"	acad::node
"Writing files asyncly in node: <code>{{c1::fs (or whatever other name we've require('fs')d)}}.{{c2::writeFile}}({{c3::path}}, {{c4::content}}, {{c5::options?}}, {{c6::errCallback}})</code>"	acad::node
no matter what {{c1::optional chaining}} you use, if you {{c2::call}} a thing as {{c2::a method}} that is {{c2::in fact a property}} you will always get {{c3::a TypeError}}	acad::js
"JSON Schema: <pre><code>  ...   ""type"": {{c1::""object""}},   {{c2::""properties""}}: {     ""productId"": {       ""description"": ""The unique identifier for a product"",       ""type"": ""integer""     }   },</code></pre> JSON Schema toplevel:  <pre><code>{   {{c1::""$schema""}}: ""https://json-schema.org/draft/2020-12/schema"",   {{c2::""$id""}}: ""https://example.com/product.schema.json"",   {{c3::""title""}}: ""Product"",   {{c4::""description""}}: ""A product in the catalog"",   {{c5::""type""}}: ... }</code></pre>"	acad::js
<code>yq {{c1::-P/--prettyPrint}}</code> outputs {{c2::nice and pretty output}}	acad::node
"to {{c1::only allow unique items in arrays (to make it a set, I guess)}} in json schema, specify <code>{{c2::""uniqueItems"": true}}</code> to specify that a JSON Schema value {{c1::has children}}, use {{c2::the <code>properties</code> key}} the {{c3::top-level}} {{c1::type}} key provides a {{c2::type for the top-level object}} the {{c2::top-level object}} in a {{c3::JSON schema document}} has a few {{c1::metadata/general description}} keys the JSON schema keys {{c1::min/maxItems}} say {{c2::how many items an item of type array can have}} the JSON schema keys <code>{{c2::(exclusive)}}{{c1::m/Minimum}}</code> and <code>{{c2::(exclusive)}}{{c1::m/Maximum}}</code> describe {{c3::the relevant kind of minimum/maximums of the values}} the JSON schema key {{c2::type}} tells us {{c1::what datatype the value should be}} the JSON schema key {{c2::<code>required</code>}} is an {{c3::array}} saying {{c1::which children must be present}} the JSON schema key {{c2::<code>description</code>}} provides {{c1::a short description of the value}} JSON schema usually is written in what? <span class=""divider"">-&gt;</span> {{c1::in JSON itself}} JSON schema <b>can be </b>written in what? <span class=""divider"">-&gt;</span> {{c1::many different markup languages (although normally it's written in JSON)}} Common Schema for JSON? <span class=""divider"">-&gt;</span> {{c1::json schema}} the {{c1::dependentRequired}} key in json schema takes an {{c2::object}} where for every given {{c2::key}} there is {{c3::an array}} of other propetries which are {{c4::then also required}} if the {{c4::key is specified}} To express a more detailed conditional relationship in JSON schema, you can use the {{c1::""if""}}, {{c2::""then""}}, and {{c3::""else""}} keywords If {{c1::credit_card is present}}, {{c1::billing_address is also required}} (JSON Schema): <pre><code>{   ""properties"": {     ""name"": { ""type"": ""string"" },     ""credit_card"": { ""type"": ""number"" },     ""billing_address"": { ""type"": ""string"" }   },    ""required"": [""name""],    {{c2::""dependentRequired""}}: {     {{c3::""credit_card""}}: {{c4::[""billing_address""]}}   } }</code></pre>"	acad::inf
"<div class='c1-f'> For next.js, what will About become? </div><br/><pre><code>function About() {   return &lt;div&gt;About&lt;/div&gt; }  export default About</code></pre> <span class=""divider"">-></span> {{c1::a page}}"	acad::nextjs
"By default, what decides the route of a next.js page? <span class=""divider"">-></span> {{c1::the filename}}"	acad::nextjs
Converting {{c2::static HTML websites}} (either from {{c2::SSR}} or {{c2::statically generated}}) into {{c3::dynamic web pages}} via {{c4::client-side JS}} is known as {{c1::hydration}}.	acad::nextjs
The functions for getting data, getServerSideProps/getStaticPaths/getStaticProps are functions that are {{c1::written}} and {{c2::exported}} by {{c3::you}} for {{c4::any page that needs them}}	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} recieve {{c2::a single argument}} <code>{{c3::context}}</code>	acad::nextjs
Both {{c1::getServerSideProps}} and {{c1::getStaticProps}} return a {{c2::props object}} that {{c3::the react component}} implementing the page will recieve	acad::nextjs
Next.js itself is built on top of {{c1::node.js}}	acad::nextjs
Nextjs supports {{c2::modern browsers}} + {{c1::IE11}} by default	acad::nextjs
create-next-app supports using {{c1::typescript}} with the {{c2::--ts}}/{{c2::--typescript}} flag	acad::nextjs
the getStatic/ServersSide... functions have {{c1::TS types}} that are {{c2::the same but capitalized (UpperCamelCase)}}	acad::nextjs
"<div class='c1-f'> What will every page now have? </div><br/><pre><code>import Layout from '../components/layout'  export default function MyApp({ Component, pageProps }) {   return (     &lt;Layout&gt;       &lt;Component {...pageProps} /&gt;     &lt;/Layout&gt;   ) } </code></pre> <span class=""divider"">-></span> {{c1::the same global layout}}"	acad::nextjs
"If you want to have some stuff that every page of your next.js website will have, what should you do? <span class=""divider"">-></span> {{c1::override the global App component}}"	acad::nextjs
If you want to have {{c5::different layouts}} for {{c5::different pages}}, you need to attach a <code>{{c1::getLayout}}</code> {{c1::method}} to the {{c2::function implementing your page}}, which takes an argument of {{c3::the page}}, and returns {{c4::the page with whatever modifications}}.	acad::nextjs
"<div class='c1-f'> What are we doing here? </div><br/><pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> <span class=""divider"">-></span> {{c1::defining a layout for this page specifically}}"	acad::nextjs
Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... {{c1::Page}}.getLayout = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... Page.{{c1::getLayout}} = function(page) {   return // {page} surrounded by some other stuff </code></pre> Define a layout for this page specifically<br/><pre><code>//... imports export default function Page() {   //... Page.getLayout = function(page) {   return // {{c1::{page} surrounded by some other stuff}} </code></pre>	acad::nextjs
"What's the benefit of specifying layouts for individual pages, instead of just also returning this from the main component? <span class=""divider"">-&gt;</span> {{c1::react will be able to tell what changed and thus enable more SPA-like operation}}"	acad::nextjs
"Next.js {{c1::auto-optimizes your images}} if you specify them using the {{c2::<code>Image</code> component}}&nbsp;in {{c3::next/image}} <div class='c1-f'> What would we have to do to use this? </div><br/><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>import Image from 'next/image' </code></pre>}} <div class='c1-f'> What is the advantage of specifying images like this in next.js? </div><br/><pre><code>&lt;Image   src=""/me.png""   alt=""Picture of the author""   width={500}   height={500} /&gt; </code></pre> <span class=""divider"">-></span> {{c1::uses built-in compression, lazy-loading etc}} <div class='c1-f'> Allows us to do what? </div><br/><pre><code>module.exports = {   images: {     domains: ['example.com'],   }, }</code></pre> <span class=""divider"">-></span> {{c1::use next.js image component with external images}} (next.js) For production, it is recommended that you install the npm package <code>{{c1::sharp}}</code> for {{c2::<code>Image</code> component minification}}"	acad::nextjs
By default, next.js only allows images {{c1::in the project itself}} to be used {{c2::for the Image component}}, if you want to use others, specify the {{c3::domain}} in {{c4::{images:}} {{c5::{domains:}} [...	acad::nextjs
to change how next.js {{c1::image optimization}} works, specify {{c2::{images:}} {{c3::{loader:}} 	acad::nextjs
Next.js auto {{c2::inlines}} {{c1::font}} css	acad::nextjs
{{c1::next/head}} contains a component for {{c2::appending things to the &lt;head&gt;}}.	acad::nextjs
The {{c1::first contentful paint}} is when the {{c2::first piece of DOM content}} (which elements are exactly considered is more complicated) loaded, relative to {{c3::when the page first started loading}}	acad::js
"<div class='c1-f'> How do we react to the service worker being created? </div><br/><pre><code> navigator.serviceWorker.register('/example/sw.js')</code></pre> <span class=""divider"">-></span> {{c1::via a then() (or any other way we can respond to a promise)}}"	acad::js
"To do stuff in the service worker once {{c2::it's been installed}}, add an event listener for the {{c1::<code>install</code>}} event.<br/><div class=""sub""> <div class=""sub all-b""><pre><code>self.addEventListener('install', function(event) {   // Perform install steps });</code></pre></div> </div>"	acad::js
To {{c1::add something to the microtask queue}}, use {{c2::queueMicrotask()}}.	acad::js
the <code>{{c1::install}}</code> and <code>{{c1::activate}}</code> events of service workers are/conform to the interface <code>{{c2::ExtendableEvent}}</code>	acad::js
"the {{c1::ExtendableEvent}} interface has a method {{c2::waitUntil}}(), which prevents the service worker from being treated as {{c4::successfully installed}} until {{c3::the passed promise resolves successfully}}<br/><div class=""sub"">  This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated. </div>"	acad::js
the {{c1::ExtendableEvent.waitUntil}}() method is mainly used so that the service worker is not {{c2::considered installed}} until {{c3::all the caches it needs are populated}}.	acad::js
"{{c1::CacheStorage (normally as <code>caches</code>).open(somename)}}&nbsp;returns {{c4::a Promise}} that resolves to {{c5::the Cache object}} matching {{c2::the name passed}}, or {{c3::creates it if it does not exist}} {{c1::CacheStorage (normally as <code>caches</code>).match(someRequest)}} is a convenience method that looks if {{c2::the someRequest is cached}} in {{c3::any of the caches}} the <code>{{c1::Cache}}</code> interface is meant to store <code>{{c2::Request}}</code> / <code>{{c2::Response}}</code> pairs since there can be more than one <code>Cache</code>, you {{c1::get a specific <code>Cache</code>}}&nbsp;via the <code>{{c2::CacheStorage}}</code> interface, which can be accessed via {{c3::the global <code>caches</code> property}} for the Cache API, the {{c1::retrieval}} functions are {{c2::match}} for a {{c4::single item}} and {{c2::match}}{{c3::All}} for {{c4::an array}}. Arguments are ({{c5::request}}, {{c5::options}}) for the Cache API, the {{c1::add}}/{{c1::addAll}} methods take a {{c2::request object}}, {{c3::fetch the response}}, and then {{c4::add the response to the cache}}. for the Cache API, if something {{c2::returns something}}, it does so in the form of {{c1::a promise}} What is the Cache API/interface distinct from? <span class=""divider"">-></span> {{c1::HTTP caching}} By whom is the <code>Cache</code> managed? <span class=""divider"">-></span> {{c1::primarily by you, the dev}}<br/><div class=""sub""> <div class=""sub c1-f c2-b"" > the one that stores Request / Response object pairs </div> </div>"	acad::js
the primary use of the {{c1::activate}} event of service workers is to {{c2::clean up}} from {{c3::a previous service worker}} If your service worker has {{c1::previously been installed}}, and then a {{c2::new version}} of the worker is available on {{c3::refresh or page load}}, the new version is {{c4::installed in the background}}, but not {{c5::yet activated}}. After a service worker is {{c1::active}} and the user {{c2::navigates to a different page}} or {{c2::refreshes}}, the {{c3::service worker}} will begin to receive {{c4::fetch}} events	acad::js
"If you add a new service worker, what might you do with the <code>Cache</code> used? <span class=""divider"">-></span> {{c1::use a new <code>Cache</code>}}<br/><div class=""sub""> <div class=""sub c1-f"" > esp. if they are incompatible </div> </div>"	acad::js
"What should you definitely do when reacting to the activate event in service workers? <span class=""divider"">-></span> {{c1::remove old caches}}"	acad::js
"{{c1::web app manifests}} are usually called {{c2::manifest}}.{{c3::webmanifest}}/.{{c3::json}} {{c1::Progressive web app}} is not {{c2::an official term}}, but refers to creating {{c3::a flexible, adaptable app}} using {{c4::web technologies}} (though {{c5:: there have been a few technologies that have become very intertwined with it (service workers, web app manifests, etc.)}}) within a web app manifest,&nbsp; the <code>{{c1::scope}}</code> property manages {{c2::which URLs are considered to be within your app}} within a web app manifest, you must provide {{c2::at least one}} of {{c1::<code>short_name</code>}} or {{c1::<code>name</code>}}, which appear {{c3::in the installation screen}} and {{c3::most other places where space is limited}}, respectively within a web app manifest, the <code>{{c1::start_url}}</code> property is used to determine {{c2::from where the app starts}} within a web app manifest, the <code>{{c1::icons}}</code> property is an {{c2::array}} of {{c2::objects}}, each representing {{c3::an icon for launchers, etc.}} within a web app manifest, the <code>{{c1::display}}</code> property is used to determine {{c2::how the apps start (e.g. in fullscreen / back buttons, etc.)}} within a web app manifest, the <code>{{c1::background_color}}</code> property is mainly used for {{c2::the startup splash screen}} within a web app manifest, for the <code>{{c1::display}}</code> property <code>{{c2::fullscreen}}</code> shows {{c6::no UI}}, <code>{{c3::standalone}}</code> shows {{c6::only the OS UI (works as a normal app would)}}, <code>{{c4::minimal-ui}}</code> {{c7::additionally shows some nav elements (back/reload) but no address bar}}, and <code>{{c5::browser}}</code> {{c7::gives you a standard browser experience}} within a web app manifest, each object within the array of&nbsp;<code>{{c1::icons}}</code> property can have the keys {{c2::sizes}}, {{c3::src}}, {{c4::type}}, and {{c5::purpose (esp. used for adapting e.g. to monochrome or maskable icons)}} The {{c1::web app manifest}} is a {{c2::JSON}} file that tells the browser about your {{c3::Progressive Web App}} and how it {{c4::should behave}}&nbsp;when {{c5::installed on the user's desktop or mobile device.}}"	acad::js
"((h:all;::<img src=""8mkBdT3O0FZLo0PUppvv.png"">))within a web app manifest,&nbsp; the <code>{{c1::theme_color}}</code> property manages {{c2::the color of the bars/notification shade, etc.}}"	acad::js
"to define {{c1::app shortcuts}}, use the {{c2::shortcuts}} property in the web manifest ((h:all;::<img src=""F4TsJNfRJNJSt2ZpqVAy.png"">))"	acad::js
"((h:all;::<img src=""appshell.png"">))An {{c1::app shell}} is a way to build a {{c2::PWA}} and involves {{c4::aggressively caching}}&nbsp; {{c3::the common UI}} and {{c4::dynamically loading}} {{c3::the content}} using JS"	acad::js
The {{c1::Push}} API&nbsp;allows web apps to get messages {{c2::pushed from a server}}, whether or not the web app is {{c3::in the foreground / even currently loaded}}	acad::js
"One of the major problems with {{c1::classful IP}} addresses was that the {{c2::host identifier namespace}} was either {{c3::to small}} or {{c3::too large}} (either {{c4::~65k}} or {{c4::~16 million}} addresses) In the form of NAT where the combination of IP address and port number is used to identify the recipient, the {{c1::port}} is necessary because otherwise the router {{c2::would not have any idea for whom the packet is intended}} In general, {{c1::IPv6}} addresses are written in {{c2::hexadecimal}}, in {{c3::8}} {{c4::groups}} of {{c3::16}} {{c4::bits}} each Class {{c1::A}} IP addresses would have had the {{c2::first octet}} (minus {{c8::bit header}} {{c3::1<sub>2</sub>}}) as a {{c7::network prefix}}, Class {{c1::B}} the {{c2::first two octets}} (minus {{c8::bit header}} {{c3::10<sub>2</sub>}}), class {{c1::C}} the {{c2::first three octets}} (minus {{c8::bit header}} {{c3::110<sub>2</sub>}}), while bit header {{c4::111<sub>2</sub>}} was {{c5::left unused for the time}} and later {{c6::used for multicast addressing}} the {{c1::process of forming a supernet (creating larger CIDR blocks)}} is called {{c2::supernetting}} or {{c3::prefix}}/{{c3::route}}&nbsp;{{c4::aggregation}}/{{c5::summarization}} if {{c4::CIDR notation}} is used with {{c1::no IP address}}, it describes networks with {{c2::the relevant split}} between {{c3::network prefix and host identifier}} because of possible ambiguity of having {{c2::colons within the host of}} {{c1::URLs}}, when within {{c1::URLs}}, {{c3::IPv6 addresses}} should be {{c4::enclosed in square brackets}} The {{c1::bitmask}} that when applied with bitwise {{c2::AND}} yields {{c3::the network prefix}} of a IP address is known as {{c4::a subnet mask}}, and is often written in {{c5::dot-decimal notation}} CIDR notation allow you to indicate the {{c1::beginning address of an entire network}} using a {{c2::host identifier of 0}} (you can also {{c3::just leave it out}}) <div class=""c2-f""> if this is CIDR notation, which IP addresses does this describe? </div><div class=""c1-f""> How would we describe this in CIDR notation? </div><br>{{c1::198.51.100(.0)/24}}  <span class=""divider"">&lt;-&gt;</span> {{c2::IP addresses  198.51.100.0 to 198.51.100.255}} <div class=""c2-f""> if this is CIDR notation, what does this describe? </div><div class=""c1-f""> How would we describe this in CIDR notation? </div><br>{{c1::198.51.100.14/24}}  <span class=""divider"">&lt;-&gt;</span> {{c2::The IP address 198.51.100.14 with the network prefix 198.51.100(.0)}} <div class=""c2-f""> What is this? </div><div class=""c1-f""> Imagine one! </div><br>{{c1::2001:0db8:85a3:0000:0000:8a2e:0370:7334}}  <span class=""divider"">&lt;-&gt;</span> {{c2::an IPv6 address}} <div class=""c2-f""> Subnet mask for (CIDR notation)? </div><div class=""c1-f""> Subnet mask for this CIDR notation? </div><br>{{c1::255.255.255.0}}  <span class=""divider"">&lt;-&gt;</span> {{c2::123.123.123(.0)/24}}<br><div class=""sub""> <div class=""sub c2-b""> or any other numbers for the first 3 obv </div> </div> if you want to zero out a certain set of bits, with what do you AND? <span class=""divider"">-&gt;</span> {{c1::A binary number that has zeros in these locations}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> basically bitmasking </div> </div> if you want to zero out a certain set of bits, how do you use a a binary number that has zeros in these locations? <span class=""divider"">-&gt;</span> {{c1::AND}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> basically bitmasking </div> </div> Using what operation and what binary number can you easily check the parity of a binary number? <span class=""divider"">-&gt;</span> {{c1::AND 0...01}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> basically bitmasking </div> </div> If you AND 0...1 with a given binary number, what result indicates it's even? <span class=""divider"">-&gt;</span> {{c1::0...0}}<br><div class=""sub""> <div class=""sub c1-b c2-f""> basically bitmasking </div> </div> a {{c1::bitmask}} using bitwise {{c2::AND}} gets {{c3::a subset of bits}} a {{c1::bitmask}} is using {{c2::bitwise operations}} to {{c3::get the value of certain bits}}"	acad::inf
a {{c1::private network}} is a computer network that uses {{c2::a private address space}} of {{c3::IP addresses}}, most often used for {{c4::LANs}}	acad::inf
{{c1::TCP}} requires the {{c2::reciever}} to respond with an {{c3::acknowledgement message}} for {{c4::each message}}, and the {{c2::client}} must {{c5::retransmit the packet}} if {{c6::a certain amount of time passes}} without recieving this {{c3::acknowledgement message}} {{c1::TCP}} but not {{c1::UDP}} can deal with / solve {{c2::packets arriving out of order}}, {{c3::lost packets (retransmits them)}}, {{c4::error detection}}, {{c5::flow &amp; congestion control}} the {{c1::TCP}} {{c5::segment header}} contains {{c2::9}} {{c3::1-bit flags}} amongst which are the ones used for {{c4::connection management (handshake, termination, etc.)}} TCP: Before a client attempts to connect with a server, the server must first {{c2::bind to and listen at a port}} to open it up for connections: this is called a {{c1::passive open}}. Once the {{c1::passive open}} is established, a client may establish a connection by initiating an {{c3::active open}} using {{c4::the three-way (or 3-step) handshake}} &nbsp;{{c1::UDP}} can be significantly {{c2::faster}} than {{c1::TCP}} because {{c1::TCP}} may wait seconds for {{c3::out-of-order messages or retransmissions of lost messages, etc.}} The TCP {{c1::sequence number}} should be {{c2::unpredictable}}, or it is vulnerable to {{c3::TCP sequence prediction}} attacks, where the attacker {{c4::substitutes the packets}}. TCP uses a {{c1::sequence number}} in the header to determine {{c2::the order of the bytes}} to allow {{c3::the data to be reconstructed}} if {{c4::out of order}}.&nbsp;	acad::inf
"<div class='c1-f'> When should the parentheses be here? </div><br/><pre><code>const layout = (props) =&gt; {   return (     &lt;Aux&gt;     ...     &lt;/Aux&gt;   ) }</code></pre> <span class=""divider"">-></span> {{c1::if the JSX returned is more than one line}}"	acad::react
Normally you can only return {{c1::one element}} as a react component, but you may want to return {{c1::multiple elements}} without {{c2::a wrapper.}} for this, you can use {{c3::&lt;React.Fragment&gt;}}...{{c3::&lt;/React.Fragment&gt;}} or the short syntax {{c4::&lt;&gt;}}...{{c4::&lt;/&gt;}}	acad::react
"<div class='c1-f'> This is shorthand for? </div><br/><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::<pre><code>render() {   return (     &lt;React.Fragment&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/React.Fragment&gt;   ); } </code></pre>}}"	acad::react
"<div class='c1-f'> What would happen if we didn't include the &lt;&gt;...&lt;/&gt;? </div><br/><pre><code>render() {   return (     &lt;&gt;       &lt;ChildA /&gt;       &lt;ChildB /&gt;       &lt;ChildC /&gt;     &lt;/&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::it wouldn't work}}"	acad::react
"<div class='c1-f'> What's missing here? </div><br/><pre><code>render() {   return (     &lt;ChildA /&gt;     &lt;ChildB /&gt;     &lt;ChildC /&gt;   ); } </code></pre> <span class=""divider"">-></span> {{c1::the children should be wrapped in a fragment}}"	acad::react
For Chakra UI to {{c3::work correctly}}, you need to set up the {{c1::ChakraProvider}} at {{c2::the root of your application}}.	acad::chakra-ui
create-react-app&nbsp; Custom Templates are always named in the format {{c1::cra-template-[template-name]}}, however you only need to provide the {{c2::template-name}} to the {{c3::creation command}}.	acad::react
set create-react-app {{c2::templates}} by using {{c1::--template foo}}	acad::chakra-ui
"Customizing the {{c2::chakra}} {{c1::theme}} <pre><code>{{c3::import}} {{c4::{ extendTheme } }} {{c3::from}} {{c5::""@chakra-ui/react""}}  //... const/let theme {{c6::= extendTheme}}(/* things to change (is an {{c7::object}}) */) //... {{c8::&lt;ChakraProvider}} {{c9::theme={theme}&gt;}}</code></pre>"	acad::chakra-ui
"the {{c1::resetCSS}} prop of {{c2::ChakraProvider}} automatically includes a {{c3::&lt;CSSReset /&gt;}} the {{c1::portalZIndex}} prop of {{c2::ChakraProvider}} is a {{c3::common z-index to use for <code>Portal</code>}} the {{c1::colorModeManager}} prop of {{c2::ChakraProvider}} is a {{c3::container to persist a users' color mode preference in}}"	acad::chakra-ui
"The {{c1::<code>as</code>}} prop is a feature of chakra components that allows you to pass {{c2::an HTML tag}} or {{c3::component}}, which allows you to {{c4::use all of that things props}}<br><div class=""sub""> <div class=""sub all-b""><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre></div> </div>"	acad::chakra-ui
"<div class='c1-f'> What does the 'as' here allow you to do? </div><br/><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::act as an &lt;a&gt; as well}}"	acad::chakra-ui
"<div class='c1-f'> Why does e.g. href here work? </div><br/><pre><code>&lt;Button as=""a"" target=""_blank"" variant=""outline"" href=""https://chakra-ui.com""&gt;   Hello &lt;/Button&gt;</code></pre> <span class=""divider"">-></span> {{c1::the as=""a"" allows it to work as an &lt;a&gt; as well}}"	acad::chakra-ui
chakra does most of {{c2::its config}} in the the {{c1::<code>config</code> property of <code>theme</code>}}	acad::chakra-ui
 Chakra stores the color mode in the browser in {{c1::localStorage}}	acad::chakra-ui
{{c1::Color mode}} is chakras way for managing {{c2::light and dark mode}}. It accepts the values {{c3::light}}, {{c3::dark}}, and {{c3::system}}	acad::chakra-ui
the {{c5::<code>config</code> property of <code>theme</code>}} takes {{c1::<code>initialColorMode</code>}} to tell the app {{c2::in which color mode to start}}, and {{c3::<code>useSystemColorMode</code>}} {{c4::whether to respond to the color theme system preference}}	acad::chakra-ui
{{c1::&lt;ColorModeScript&gt;}} is necessary {{c2::for color mode in chakra to work}}, and needs to be {{c3::one of the first things in the &lt;body&gt;}}	acad::chakra-ui
{{c1::useColorMode}} is a React {{c2::hook}} that gives you access to {{c3::colorMode}}, {{c3::toggleColorMode}}	acad::chakra-ui
{{c1::useColorModeValue}} is a React hook used to {{c2::change any value or style based on the color mode}}. It {{c4::takes 2 arguments}}: {{c3::the value in light mode}}, and {{c3::the value in dark mode}}.	acad::chakra-ui
In some occasions, you might want Chakra components to {{c1::look the same in both light and dark modes}}. To achieve this, {{c3::wrap the component}} in a {{c2::LightMode}} or {{c2::DarkMode}} component. 	acad::chakra-ui
if using {{c2::SSR/Static generation}} with {{c4::Nextjs}} and {{c4::Chakra}} {{c3::color mode}} together, {{c1::some additional boilerplate}} is required	acad::chakra-ui
{{c3::Chakra UI}}&nbsp; converts {{c2::theme tokens (colors, font sizes, stc)}} to {{c1::CSS variables}}.	acad::chakra-ui
"Chakra's {{c1::css variables}} are prefixed with {{c2::chakra-}}"	acad::chakra-ui
"<div class='c2-f'> This might generate CSS such as? </div><div class='c1-f'> How might this have been generated with Chakra? </div><br/>{{c1::<pre><code>&lt;Box color=""gray.100"" /&gt;</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::<pre><code>.css-box {    color: ""var(--chakra-colors-gray-100)"" }</code></pre>}}"	acad::chakra-ui
(based off the System UI Theme Specification) to have a style prop change based on {{c1::breakpoints}}, you can either pass an {{c2::array}}, with each value being {{c3::the one for that breakpoint}} (starting from {{c4::the unnamed smallest one}}) and {{c5::pass null}} to {{c6::skip breakpoints}} and thus avoid {{c6::generating unnecessary css}}, or pass an {{c2::object}} with keys with {{c7::the breakpoint names}} and the values as the relevant values	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (object syntax)? </div><br/>{{c1::<pre><code>&lt;Text fontSize={{ base: ""24px"", md: ""40px"", lg: ""56px"" }}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the font size at 24 px , have the md breakpoint be 40 px, and the lg and above be 56px}}"	acad::chakra-ui
"<div class='c2-f'> What is the array here saying? </div><div class='c1-f'> How might we say this in chakra UI (array syntax)? </div><br/>{{c1::<pre><code>&lt;Box bg=""red.200"" w={[300, 400, 500]}&gt; //...</code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::start the width at 300 px , have the sm breakpoint be 400 px, and the md and above be 500px}}"	acad::chakra-ui
if you want {{c1::base html elements}} (e.g. {{c1::button}}) to {{c2::accept style props styling}}, use {{c3::&lt;chakra.&lt;element&gt;}} (e.g. {{c3::&lt;chakra.button}})	acad::chakra-ui
the chakra {{c1::factory}} function <code>chakra()</code> takes {{c2::a react component}} (or {{c2::html tag}}) and optionally an argument of {{c3::props}}, and makes it into a {{c4::chakra style-props aware component}}. Since it uses <code>{{c5::emotion}}</code> under the hood, {{c2::the react component}} needs to {{c6::accept className as props}} or it will not work	acad::chakra-ui
"By using {{c1::ChakraProvider}} at the root of your application, we automatically render a {{c2::GlobalStyle}} component, which reads the styles defined in {{c3::theme.styles.global}} and {{c4::passes them}} to {{c5::emotion's Global component}} which is used to handle global style injection."	acad::chakra-ui
to set {{c3::global styles}} for things in chakra, use {{c4::theme.styles.global}}. There, every key is {{c1::a selector}}, and every property is a {{c2::set of declarations}}	acad::chakra-ui
The {{c1::layerStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
The {{c1::textStyles}} property of {{c1::theme}} allows you to {{c2::create readymade sets of styles for text}} that you can then {{c3::apply to any component you wish}}	acad::chakra-ui
{{c1::Themera}} is a web app to {{c2::generate chakra UI color schemes}} (there are also many others tho)	acad::chakra-ui
"{{c1::Chakra}}'s {{c3::default}} {{c2::theme}} (and {{c3::any other}} {{c2::theme}}) includes defaults for all the {{c4::System UI Theme Specification scales}}"	acad::chakra-ui
to customize styles (in a&nbsp;<b>consistent</b>&nbsp;way) in chakra, you broadly have three options: Customize the {{c1::theme tokens}}, {{c2::component styles}}, or {{c3::global styles}}	acad::chakra-ui
"the {{c1::colorScheme}} property of a {{c2::component}} takes a {{c3::color name}} (of the ones that define {{c4::palettes}}, in {{c5::<code>theme.colors</code>}}), it then uses {{c6::different weights}} for {{c7::different parts of itself}}<br/><div class=""sub""> <div class=""sub all-b"">If you give a Button component, for example, a colorScheme of ""red"", it uses the different palette ranges for its color and hover, disabled, active pseudo-classes.</div> </div>"	acad::chakra-ui
"chakra has {{c1::single}}-{{c2::part}} {{c3::components}} and {{c1::multi}}-{{c2::part}} {{c3::components}} (e.g. bootstrap has too, but doesn't call them that)"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div><br/>{{c1::<pre><code>&lt;Button&gt;My button&lt;/Button&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a single-part component}}"	acad::chakra-ui
"<div class='c2-f'> What kind of component is this? </div><div class='c1-f'> What might this look like? </div><br/>{{c1::<pre><code>&lt;Tabs&gt;   &lt;TabList&gt;     &lt;Tab&gt;Tab 1&lt;/Tab&gt;     &lt;Tab&gt;Tab 2&lt;/Tab&gt;   &lt;/TabList&gt;   &lt;TabPanels&gt;     &lt;TabPanel&gt;Tab 1&lt;/TabPanel&gt;     &lt;TabPanel&gt;Tab 2&lt;/TabPanel&gt;   &lt;/TabPanels&gt; &lt;/Tabs&gt; </code></pre>}}  <span class=""divider"">&lt;-&gt;</span> {{c2::a multi-part component}}"	acad::chakra-ui
chakra {{c5::components}} have a <code>{{c1::baseStyle}}</code> which can be varied based on different things, of which you define the <code>{{c3::sizes}}</code> and <code>{{c4::variants}}</code> {{c2::within the component itself}}	acad::chakra-ui
"to set a default <code>{{c1::size}}</code> or <code>{{c1::variant}}</code> of a component, use the <code>{{c2::defaultProps}}</code> key of theme.components.ComponentName<br/><div class=""sub""> <pre><code>const ComponentStyle = {   // style object for base or default style   baseStyle: {},   // styles for different sizes (""sm"", ""md"", ""lg"")   sizes: {},   // styles for different visual variants (""outline"", ""solid"")   variants: {},   // default values for `size` and `variant`   defaultProps: {     size: """",     variant: """",   }, }</code></pre> </div>"	acad::chakra-ui
"you customize components {{c1::globally}} by editing {{c2::the relevant component}} within <code>{{c3::theme.component}}</code><br/><div class=""sub""> <div class=""sub all-b""><pre><code>const theme = extendTheme({   components: {     Button: {       // 1. We can update the base styles       baseStyle: {         fontWeight: ""bold"", // Normally, it is ""semibold""       },       // 2. We can add a new button size or extend existing       sizes: {       //...</code></pre> </div> </div>"	acad::chakra-ui
"chakra highly suggest that instead of using a {{c1::single theme.js/ts file}}, you create {{c2::a /theme folder}} in its place.&nbsp;<br/><div class=""sub""> <pre><code>📁 theme   📄 index.js  # my main theme entrypoint   📄 styles.js  # all my global style overrides   📁 foundations     📄 borders.js  # all my border overrides   📁 components     📄 button.js  # all my button overrides</code></pre> <pre><code>/ theme/index.js import { extendTheme } from ""@chakra-ui/react"" // Global style overrides import styles from ""./styles"" // Foundational style overrides import borders from ""./foundations/borders"" // Component style overrides import Button from ""./components/button"" const overrides = {   styles,   borders,   // Other foundational style overrides go here   components: {     Button,     // Other components go here   }, } export default extendTheme(overrides)</code></pre> </div>"	acad::chakra-ui
"the {{c1::extendTheme}} function can take {{c2::multiple overrides}}, each {{c3::overriding the previous one}}. The {{c4::final}} arg may be {{c5::a base theme}}, otherwise {{c6::the default Chakra UI one is assumed}}<br><div class=""sub""> <div class=""sub all-b""><pre><code>const someTheme = extendTheme({    colors: {      brand: null   } } /* whoops, since we wrote that in permanent marker, let's just override that */, {   colors: {     brand: baseTheme.colors.red   } }/*, optionally some base theme */)</code></pre></div> </div>"	acad::chakra-ui
the <code>{{c1::withDefault}}{{c2::ColorScheme}}/{{c2::Size}}/{{c2::Variant}}/{{c2::Props}}</code> are passed to <code>extendTheme</code>, take an {{c4::object}} as an arg and apply a {{c3::default}} {{c3::colorScheme}}/{{c3::size}}/{{c3::variant}}/{{c3::some props}} to {{c5::all components}} or {{c6::those provided in the <code>components</code> array}}&nbsp;of the {{c4::object}}	acad::chakra-ui
the same mechanism that allows you to {{c1::customize built-in chakra components}} (i.e. setting things such as {{c2::baseStyle}}, {{c2::variant}}, {{c2::defaultProps}} etc. in {{c3::theme.component.somename}}) allows you to {{c4::create new chakra components}}, but you also need to {{c5::implement the react component}}	acad::chakra-ui
the <code>{{c1::__css}}</code> prop has {{c2::the same API}} as the <code>{{c3::sx}}</code> prop, but {{c4::lower priority}} -&gt; good to be {{c4::overridden&nbsp;}}	acad::chakra-ui
"Implementing a {{c12::custom chakra component}}: <pre><code>// all necessary imports function ComponentName(props) {   const { {{c1::size}}, {{c1::variant}}, {{c1::colorScheme}} /* all only if used */, {{c2::children}}, {{c3::...rest}} } = {{c4::props}};   const styles = {{c5::useStyleConfig}}(""ComponentName"" /* must be the same name as in {{c6::theme.components}} */, { {{c7::size}}, {{c7::variant}}, {{c7::colorScheme}} /* all only if used */}   return (     &lt;Box /* or something else */ {{c8::__css}}={{c9::{styles} }}  {{c10::{...rest}}}&gt;       // If {{c11::children}}, include them here somewhere //...</code></pre> "	acad::chakra-ui
for {{c1::multipart}} components, you need to specify the <code>{{c2::part}}</code> property when creating the <code>{{c3::theme.components}}</code> entry as well	acad::chakra-ui
for {{c1::multipart}} components, if we want to {{c2::pass on styles to <code>children</code>}}, we need to put them in a {{c3::&lt;StylesProvider value=}}, which we then retrieve via {{c4::the useStyles hook}} in {{c5::the children}}	acad::chakra-ui
the command-line interface for chakra is {{c1::chakra-cli}}, for now the {{c2::only thing}} it can do is {{c3::generate typescript typings for a theme}} via the {{c4::tokens}} subcommand	acad::chakra-ui
{{c1::baseStyle}}, {{c1::sizes}} and {{c1::variants}} of your {{c2::theme.components}} entry can also take a {{c3::function}} so you can {{c3::generate}} them based on the current {{c4::theme}}, {{c4::colorMode}} or {{c4::colorScheme}}	acad::chakra-ui
the {{c2::&lt;AspectRatio&gt;}} chakra component takes a {{c1::ratio}} prop to set the {{c3::aspect ratio}}	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-08-42-screenshot.png"">))((h:all;::<img src=""sm_2021-09-18--23-08-35-screenshot.png"">))the {{c2::&lt;Center&gt;}} chakra component {{c3::centers its child}}, given {{c4::a width}} and/or {{c4::height}}. it can also e.g. be used to {{c1::create a frame around something}}"	acad::chakra-ui
"((h:all;::<img src=""sm_2021-09-18--23-15-08-screenshot.png"">))&lt;{{c1::Circle}}&gt; and &lt;{{c1::Square}}&gt; are wrappers around &lt;{{c2::Center}}&gt; that only take {{c3::size}}"	acad::chakra-ui
{{c1::&lt;Container&gt;}}s by default {{c2::constrain the size of the content}} to {{c3::60ch}}, but can take the {{c4::maxW}} prop with the value {{c5::container.&lt;breakpoint&gt;}} to {{c2::constraine the content}} to that breakpoint instead. It can also center its content via the {{c6::centerContent}} property.	acad::chakra-ui
"{{c2::Sellars}}, a {{c3::20th}} century philosopher, criticisizes the ""{{c1::Myth of the Given}}"", which is the idea that that there are such {{c4::sense experiences}} that by {{c5::their mere occurrence}} give us {{c6::<b>knowledge</b>}} of the {{c4::sense experiences}} - which is a myth since {{c6::knowledge}} is expressed in {{c7::concepts / language}}, these are {{c8::necessary filters}}"	acad::phil
"According to the {{c3::myth of the given}}, {{c2::seeing a red triangle alone}} does not give us the {{c4::knowledge}} that I'm {{c5::having the sensation of seeing a red triangle}}, since the {{c6::concepts (red and triangle)}} and {{c6::language}} are also necessary for {{c1::that knowledge}}"	acad::phil
The <q>{{c3::myth of the given}}</q> is interested in {{c4::the gap between}} having the {{c1::sense-experience}} of seeing a red triangle and the {{c2::knowledge}} of seeing a red triangle	acad::phil
"What might we consider not knowing/understanding the term ""microagressions"" a form of? <span class=""divider"">-&gt;</span> {{c1::hermeneutical injustice}}"	acad::phil
"{{c1::coherentism}} is both {{c2::a theory of truth}} and {{c3::a theory of justification/knowledge}} (or families of theories of either)<br><div class=""sub""> distinguish this from e.g. causal theory / reliabilism, which both give a definition of knowledge with a replacement for the justification condition, or an updated account of justification, but are never theories of <b>truth</b> </div>"	acad::phil
the idea that {{c2::the infite regress of justification (regress argument)}} is {{c3::acceptable}} is sometimes called {{c1::infinitism}}	acad::phil
The {{c1::coherentist theory of justification}} characterizes {{c2::epistemic justification}} as depending on {{c3::being a member of a coherent set}}. 	acad::phil
{{c1::Reliabilism}} is a name for a set of theories either explaining {{c2::knowledge}} or {{c2::justification}} in terms of {{c5::the reliability of something}}, in the case of {{c3::process}} {{c1::reliabilism}} (by far the {{c4::most common}} variant) aquisition by {{c6::a reliable process}}.	acad::phil
a simple {{c1::reliabilist}} theory of {{c2::knowledge}} might look like: <ol> <li>{{c3::p is true (T)}}</li> <li>{{c4::S beliefs that p (B)}}</li> <li>{{c5::S’s belief that p was produced by a reliable cognitive process}}.</li> </ol>	acad::phil
A {{c1::causal theory}} of {{c2::knowledge}}/{{c2::justification}} is that {{c3::knowledge}}/{{c3::justification}} of a fact is merely {{c4::having a true belief}} that {{c5::was caused by that fact}}	acad::phil
<div>Simple {{c4::Causal Theory}} of {{c5::Knowledge}}:</div><div><i>S</i>&nbsp;knows that&nbsp;<i>p</i>&nbsp;iff</div><ol><li>{{c1::<i>p</i>&nbsp;is true;}}<br></li><li>{{c2::<i>S</i>&nbsp;believes that&nbsp;<i>p</i>;}}<br></li><li>{{c3::<i>S</i>’s belief that&nbsp;<i>p</i>&nbsp;is caused by the fact that&nbsp;<i>p</i>.}}<br></li></ol>	acad::phil
Both the {{c1::causal theory}} and r{{c2::eliabilism}} (and others besides) may be interpreted as giving an {{c3::updated account of justification}} or {{c4::replacing justification with a different criterion entirely}}, and thus {{c5::giving their own account of knowledge}}	acad::phil
Philosophy of {{c1::science}} has existed in some form for a long time, but really gained steam from {{c2::the beginning of the 20th century}}	acad::phil
The {{c1::Vienna Circle}} of {{c2::Logical Empiricism/Positivism}} was a group of {{c3::philosophers}}, {{c4::scientists}}, and {{c4::mathemtaticians}} who met regularly at {{c5::the university of vienna}} from {{c6::1924}} to {{c6::1936}}, and was chaired by {{c7::Moritz Schlick}}.	acad::phil
{{c1::analytic philosophy}}, which is oftain said to dominate in {{c2::the west}} and especially in {{c3::the anglosphere}}, is oftain said to mainly {{c4::contrast}} with {{c5::continental philosophy}}	acad::phil
The {{c1::linguistic turn}} is said to have brought {{c2::philosophy of language}} as well as {{c3::logic}} to the forefront of philosophy	acad::phil
Perhaps the main question/topic at the core of {{c2::philosophy of language}} has been {{c1::the nature of meaning}}	acad::phil
A {{c1::direct reference theory}} / {{c2::referential}} / {{c3::referentially realist}} theory of {{c4::meaning}} claims that {{c5::the meaning of a lexical unit}} lies in {{c6::what it points to in the world}}	acad::phil
"One of the problems of the {{c1::direct reference}} theory of meaning pertaining to {{c4::lack of good canditates for references}} is that there are clearly {{c2::lexical units}} that {{c3::don't refer (e.g. functional categories)}}"	acad::phil
"Under a {{c1::direct reference}} theory of meaning, the meaning of ""{{c2::Adolf Hitler}}"" is {{c3::the person Adolf Hitler}} Under a {{c1::direct reference}} theory of meaning, the meaning of ""{{c2::dog}}"" and ""{{c2::犬}}"" and ""{{c2::Hund}}"" is {{c3::a dog (all dogs?)}}"	acad::phil
One of the problems of the {{c1::direct reference}} theory of meaning pertaining to {{c5::lack of good canditates for references}} is what {{c2::names of nonexistent things}} (e.g. {{c3::Pegasus}}, {{c3::nobody}}) {{c4::might be referring to}}	acad::phil
One of the problems of the {{c1::direct reference}} theory of meaning pertaining to {{c4::lack of good canditates for references}} is what&nbsp;{{c2::the entity referenced}} by {{c3::(at least certain) predicates}} would be	acad::phil
"In response to the criticism that the {{c1::direct reference}} theory of meaning can't find a candidate for {{c2::references of (some) predicates}}, it might claim that {{c2::the reference of (these) predicates}} was {{c3::an abstract quality}}, thus {{c4::positing}} a huge amount of {{c3::abstract qualities}} (perhaps {{c5::undesirably}})<br/><div class=""sub""> i.e. Keiko is good =&gt; good references an entity that has a real existence called goodness or similar </div>"	acad::phil
"If the {{c1::direct reference}} theory of meaning claims that {{c2::the reference of predicates to be an abstract quality}}, then {{c4::the relation linking these qualities}} would {{c5::also need to be an abstract quality}}, and {{c3::so on}}, ending {{c3::in an regress}}<br/><div class=""sub""> A child of the 'generates odd references' problem </div>"	acad::phil
the {{c1::direct reference}} theory of meaning may be broadly said to have problems pertaining to {{c2::lack of good canditates for references}}, problems {{c3::of overgeneration}}, and problems {{c4::related to the difference of coextensional terms}}	acad::phil
One of the problems of the {{c1::direct reference}} theory of meaning pertaining to {{c2::lack of good canditates for references}} is the reference of things that {{c3::gain their meaning only in larger phrases}} (e.g. a {{c4::cahoot}})	acad::phil
"The simpler problem of {{c1::overgeneration}} (my term) of {{c2::the direct reference theory of meaning}} is that {{c3::lists of references}} (e.g. {{c3::Fred Berlin Tokyo house}}) don't {{c4::mean anything}}"	acad::phil
"The more complex problem of {{c1::overgeneration}} (my term) of {{c2::the direct reference theory of meaning}} is that {{c3::lists of references}} that {{c4::relate subjects and predicates}} don't mean anything without {{c5::the proper grammar}} (e.g. {{c6::Kokomi fatness}})&nbsp;"	acad::phil
"A singular term refers to exactly one thing. in contrast, a general term may refer to multiple things. Singular terms and general terms together make up the category of terms. The distincition of singular and general terms only makes sense in first-order logic. {{c1::Singular terms}} may be (unless {{c2::we have a theory which makes it not so}}) {{c3::definite or indefinte descriptions}}, {{c4::indexicals (if they refer to a single individual)}}, or {{c5::proper names}} {{c1::""Jane"", ""Winston Churchil"", ""the Queen of England"", ""the last department meeting but this one"", ""you"", ""this""}}  may be (under the right circumstances) examples of {{c2::singular terms}} {{c1::""dog"", ""brown""}}  could be examples for {{c2::general terms}}"	acad::phil
"Proplog<br/><p class=""cloze-group hide-if-inactive""><span class=""c1-cloze"">Propositional logic</span> may also be called <span class=""c2-cloze c3-scr"">propositional calculus</span> or, based <span class=""c3-cloze c4-scr"">on its relationship to 1st order logic</span>, <span class=""c4-cloze c3-scr"">zeroth-order logic</span> (other rare terms include <span class=""c5-cloze c4-scr c3-scr"">statement logic, sentential calculus/logic.</span> </p>  <p class=""cloze-group-children hide-if-inactive-children"">   <span class=""line""><span class=""c6-cloze"">propositions</span> are the things that <span class=""c7-cloze"">bear truth value</span>.</span>   <span class=""line""><span class=""c8-cloze"">A propositional variable</span> (e.g. <span class=""c8-cloze"">p, q, r</span>) <span class=""c13-cloze"">represents</span> <span class=""c9-cloze"">any possible atomic proposition</span>.</span>   <span class=""line""><span class=""c10-cloze"">a propositional formula</span> (e.g. <span class=""c10-cloze"">p AND q</span>) (also called <span class=""c14-cloze c10-scr c11-scr c12-scr"">sentence (tho only in proplog)</span>) is a <span class=""c11-cloze"">well-formed formula</span> that <span class=""c12-cloze"">consists of elements of the alphabet of a propositional logic</span> (that is <span class=""c12-cloze"">propositional variables, constants, and logical connectives</span>).</span>   <span class=""line""><span class=""c15-cloze"">a proposition</span> <span class=""c16-cloze"">expressed by</span> <span class=""c17-cloze"">a propositional constant</span> is <span class=""c18-cloze"">an atomic proposition</span>.</span>   <span class=""line""><span class=""c19-cloze"">a propositional constant</span> <span class=""c20-cloze"">expresses</span> <span class=""c21-cloze"">an atomic proposition</span>.</span></p>    <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">The <span class=""c22-cloze"">elements of the alphabet</span> of <span class=""c23-cloze"">a propositional logic</span> are the <span class=""c24-cloze"">propositional constants</span>, <span class=""c25-cloze"">propositional variables</span>, and <span class=""c26-cloze"">logical connectives</span>. </span>     <span class=""line""><span class=""c27-cloze"">propositional constants, variables and formulas all</span> <span class=""c28-cloze"">express/denote propositions</span>.</span>     <span class=""line""><span class=""c29-cloze"">Propositional constants, variables and formulas</span> as well as <span class=""c29-cloze"">logical connectives</span> are all <span class=""c30-cloze"">truth-functional.</span></span></p>      <p class=""cloze-group-children hide-if-inactive-children""><span class=""line""><span class=""c31-cloze"">Atomic propositions</span> might be things such as <span class=""c32-cloze"">""Grass is green""</span></span>&nbsp;<span class=""line""><span class=""c33-cloze"">propositional constants</span> might be things such as&nbsp;</span><span class=""line""><span class=""c34-cloze""><span class=""line"">p, q</span></span> <span class=""c35-cloze"">A propositional formula</span> might look something like <span class=""c36-cloze"">(p AND NOT q) IMPLIES (p OR q).</span></span></p>        <p class=""cloze-group-children hide-if-inactive-children""><span class=""line"">If <span class=""c37-cloze"">""Sam is awesome."" and ""Sam is cute.""</span> are <span class=""c38-cloze"">atomic propositions</span> <span class=""c39-cloze"">expressed by e.g. p and q</span>, then <span class=""c40-cloze"">p ∧ q</span> would be a <span class=""c41-cloze"">propositional formula</span> expressing the <span class=""c42-cloze"">non-atomic proposition</span> <span class=""c43-cloze"">""Sam is awesome and cute.""</span>         </span><span class=""line""><span class=""c44-cloze"">""Sam is awesome and cute.""</span> could be a proposition expressed by <span class=""c45-cloze"">a propositional variable or a propositional constant, w/o knowing the logic it's impossible to know.</span></span>         <span class=""line"">If ""Sam is awesome."" and ""Sam is cute."" are <span class=""c46-cloze"">all possible atomic propositions</span> , <span class=""c47-cloze"">a propositional varialble</span> would <span class=""c48-cloze"">range over all of them.</span></span></p>  <table class=""cloze-group-children hide-if-inactive-children"">   <thead>     <tr>       <th>Name</th>       <th>Convention</th>       <th>Location</th>     </tr>   </thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr>       <td><span class=""c49-cloze"">propositional constants</span></td>       <td><span class=""c50-cloze"">written in lowercase letters starting at p</span></td>     </tr>         <tr>       <td><span class=""c51-cloze"">propositional variables</span></td>       <td><span class=""c52-cloze""> written in uppercase letters starting at A</span></td>           <td><span class=""c53-cloze""> DE</span></td>     </tr>     <tr>       <td><span class=""c54-cloze"">propositional variables</span></td>       <td><span class=""c55-cloze""> written in lowercase letters starting at ϕ</span></td>       <td><span class=""c56-cloze""> EN</span></td>     </tr>   </tbody> </table>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}</span><br/><div class=""sub""> All only for the most classical of logics </div>"	acad::phil
A rejoinder to criticism of the {{c1::direct reference}} theory of meaning is to say it {{c2::at least holds}} for {{c3::singular terms}} - this does however not solve all problems.	acad::phil
"Puzzle 1 of {{c9::Frege's puzzles}}: Sentences of the form {{c1::X is Y}}, where X and Y {{c2::both refer to the same thing}} (e.g. {{c3::the evening star is the morning star}}, {{c3::Mark Twain is Samuel Langhorne Clemens}}), present {{c5::a puzzle}} to the {{c4::Direct Reference}} theory of meaning: In fact, these sentences seem to say no more than ""{{c6::X is X}}"", but also seem both {{c7::ampliative}} and {{c8::contingent}}.&nbsp;<br/><div class=""sub""> part of the coextensional term set of problems </div>"	acad::phil
"{{c1::Frege's puzzles}} are {{c2::two}} puzzles that question the theory of {{c3::direct reference}} (they can however also be applied to {{c4::deixis/indexicality}})"	acad::phil
{{c1::Deixis}} and {{c2::indexiciality}} refer to {{c4::nearly the same phenomenon}}, with the difference depending mostly on {{c5::the author}}. However, {{c1::deixis}} is generally more commonly used in {{c3::linguistics}}, and {{c2::indexicality}} in {{c3::philosophy}}.	acad::phil
"Puzzle 2 of {{c1::Frege's puzzles}}: <br>Under the {{c2::Direct Reference}} theory of meaning (or any other theory that holds that {{c2::terms are equal to the things they refer to}})<br>If {{c3::X and Y refer to the same thing}}<br>P {{c4::believes that X is Foo}}<br>-&gt; P {{c5::believes that Y is Foo}}<br>But {{c6::this not necessarily true.}}"	acad::phil
To the problem of the direct reference theory of meaning with reference to {{c1::nonexistent things}} (sometimes called (the problem of) {{c2::negative existentials}}), one may say that nonexistent things {{c3::nevertheless have a certain kind of existence}} (solution by {{c4::Meinong}})	acad::phil
The {{c1::universal quantifier}} is usually written&nbsp;{{c2::∀}}	acad::phil
The {{c1::existential quantifier}} is usually written&nbsp;{{c2::∃}}	acad::phil
"{{c1::Russel}}'s {{c2::Theory of Descriptions}} ({{c3::RTD}}) takes sentences of the form ""{{c4::The F is G}}"" (containing a predicate about a {{c9::definite description}}) and claims they actually express {{c5:: the underlying logical form}}:<br>{{c6::There is an F/at least one thing is F}}<br>{{c7::At most one thing is F}}<br>{{c8::Something that is F is G}} (or, via later authors: {{c8::Everything that is F is G}})<br/><div class=""sub""> there is a more rigorous formal logic version of this that I don't understand </div>"	acad::phil
Russels {{c1::Theory of Descriptions}} solves the {{c2::problem of negative existentials}} as well as {{c3::freges puzzles}}	acad::phil
"Russels {{c1::Theory of Descriptions}} would claim that the sentence ""{{c2::The present King of France is bald}}"" is {{c3::false}} because {{c4::1) ""There is a present King of France""}} is {{c5::false}}, but shouldn't the whole statement rather be {{c6::without truth value}} (via {{c7::Strawson}})"	acad::phil
Many {{c1::theories of language/meaning}}  separate the {{c2::surface form}} of a {{c5::sentence/expression}}, which is {{c3::how it is expressed}}, from the {{c2::logical form}}, which is {{c3::the underlying logically binding content}} (this is, however, not {{c4::uncontroversial}})	acad::phil
"For definite descriptions, Russels {{c1::Theory of Descriptions}} offers an account of the {{c2::logical form}} of sentences that have the {{c2::surface form}} ""{{c3::The F is G}}"""	acad::phil
"Another reply to Russels {{c1::Theory of Descriptions}} for {{c11::definite descriptions}} is that its logical form, when used on sentences that are {{c2::context-bound}} (e.g. {{c3::the table is covered with books}}) asserts that e.g. ""{{c4::At most one thing is a table}}"", which is {{c5::untrue}} ({{c6::there is more than one table in the universe}}). Russel may rejoin that {{c8::F}} (within the surface form ""The F is G"") is {{c7::actually elliptical}}, which {{c9::adds a lot of ballast to the underlying logical form}}, or {{c10::grant some kind of general restrictive context}}."	acad::phil
"A {{c1::definite description}} is roughly:&nbsp; (in {{c2::english}}) generally denoted by ""{{c2::the}}"" and tries to denote {{c3::a particular entity of some sort}}. If it succeeds in {{c4::denoting exactly one entity}}, it is known as {{c5::proper}}, if it fails in {{c4::denoting exactly one entity}}, it is known as {{c5::improper}}. It is a specific type of {{c6::singular term}}, unless {{c7::we have specific theoretical considerations such as russel's theory of descriptions}}."	acad::phil
"A {{c1::indefinite description}} is roughly:&nbsp; (in {{c2::english}}) generally denoted by ""{{c2::a(n)}}"" and denotes or tries to denote {{c3::an entity with no claim that there is merely one such entity}}"	acad::phil
"While Russells' {{c2::Theory of Descriptions}} deals with both {{c1::definite}} and {{c1::indefinite}} {{c1::descriptions}}, the {{c1::definite descriptions}} part is by far more famous"	acad::phil
"{{c1::Donnelan}} distinguishes two usages of a {{c2::definite description (generally within the context ""The F is G"")}}: {{c3::attributive}}, where the speaker says something like ""{{c5::Whatever is F is G}}"", and {{c4::referential}}, which expresses something like ""{{c6::This thing, which I believe to be F, is G}}"" (not formally logically correct formulation)"	acad::phil
"(the default position is that) The {{c3::attributive}} use of definite descriptions ""{{c3::Whatever is F is G}}"" {{c1::doesn't express anything}} if {{c2::there is no F}}<br/><div class=""sub""> The current King of France is bald just has no meaning </div>"	acad::phil
"(the default position is that) The {{c3::referential}} use of definite descriptions ""{{c3::This thing, which I believe to be F, is G}}"" {{c1::still says that the entity is G even}} if {{c2::there is no F}}<br/><div class=""sub""> e.g. ""Her husband is kind to her"" succeeds even if the person indicated is in fact merely her boyfriend. </div>"	acad::phil
"Donnellan would say that ""Her husband is kind to her"" would {{c3::hold true/ have a truth value}} even if {{c1::the person referred to is not her husband but her boyfriend}}, it being a {{c2::referential}} use of a definite descriptor"	acad::phil
"Donnellan would say that ""The current King of France is bald"" would {{c3::have no truth value}} if {{c1::there is no current king of france }}, it being a {{c2::attributive}} use of a definite descriptor"	acad::phil
"In looking at {{c4::reference}}, {{c1::Kripke}} distinguishes {{c2::speaker-reference}}, which is the thing {{c3::the speaker means to refer to}}, while the {{c2::semantic reference}} is the thing {{c3::it 'actually' refers to, fixed by linguistic facts etc.}}"	acad::phil
"much of the debate on reference consists in {{c1::what the 'actual referent' is}}, but it might suffice to just have {{c2::multiple types of referents}}"	acad::phil
"{{c1::Geach}} calls a {{c2::pronoun}} which seems to be {{c3::merely repeating what was just said}} ""a {{c4::pronoun of laziness}}""."	acad::phil
<q>The person that steals, suffers. They also have more stuff.</q>&nbsp;- Here, <q>{{c2::they}}</q> might be an example of a {{c1::pronoun of laziness}}.	acad::phil
Seing a {{c1::pronoun of laziness}} as {{c2::merely repeating the thing said}} works well for cases such as <q>{{c3::Anna gave her hat to Birgit}}, and {{c4::Claudia gave it to Darlene}}</q>, where {{c5::the thing repeated switches referent inbetween}}	acad::phil
In one way to distinguish definitions, {{c1::real}} definitions aim to {{c2::give some account of the nature of the definiendum}}, {{c1::nominal}} definitions aim to {{c2::give an account of the actual use of the word that represents the definiendum}}	acad::phil
{{c1::Haslanger}} suggests a type of definition/concetpual analysis called {{c2::ameliorative}} definition/conceptual analysis which is the project of arriving at a concept of F that one {{c3::should aim to get people to use}}, given {{c4::a particular set of (normative) goals}}.	acad::phil
An {{c1::ameliorative}} definition of woman might be one that is {{c2::most useful for combating gender injustice}} (following haslangers words: one {{c3::should get people to use}} given {{c4::one wants to combat gender injustice}})	acad::phil
{{c1::Sense}} and {{c2::reference}} (sometimes also {{c3::denotation}}) are the two ways {{c4::Frege}} distinguished in which way a {{c5::singular term}} has meaning. the {{c5::singular term}} {{c7::itself posesses}} the {{c1::sense}} , while {{c6::the thing the it refers to}} is the {{c2::reference}} (/{{c3::denotation}})	acad::phil
"{{c1::Frege's own}} solution to {{c2::freges puzzles}} was that while the {{c3::reference}} of both terms might have been {{c4::the same}}, the {{c3::sense}} wasn't"	acad::phil
"{{c5::Russel}}'s ""{{c1::Name Claim}}"" (a {{c6::descriptivist}} theory of proper names) is that {{c2::names}} are all {{c3::abbreviations}} of {{c4::definite descriptions}}"	acad::phil
"Russel's ""{{c1::Name Claim}}"" would be for example that&nbsp; '{{c2::Pegasus}}' is {{c3::just an abbreviation}} of '{{c4::the winged horse that did so and so. (or similar)}} '"	acad::phil
The {{c1::name claim}} has the problem that for any name X there should be a {{c2::particular description it is short for,}} but there is no good basis for saying {{c3::which facts should be included in this description}} (and depending on {{c4::which we include or exclude}}, {{c5::weird entailments}} result)	acad::phil
{{c1::Searle}} has presented a variant of {{c2::the name claim}}, the {{c9::Cluster Theory}}, (also a {{c10::descriptivist}} theory) where a {{c3::name}} is {{c4::associated with}} {{c5::a vague cluster of descriptions}}, the name refers to whatever object satisfies {{c6::a sufficent but vague and unspecified (and possibly weighted)}} {{c7::number of those descriptions}}. in essence, the {{c3::name}} is like {{c8::a peg on which to hang descriptions}}&nbsp;	acad::phil
In a simple sense, a {{c1::possible world}} is a world that {{c2::could have been}} if {{c3::the state of affairs was somehow different}}.	acad::phil
One of the main ways to bear out {{c1::modal logic}} is in terms of {{c2::possible worlds}}, perhaps most associated with {{c3::Kripke}}. The basic idea here is that a sentence may have {{c4::different truth values}} in {{c5::different possible worlds}}.	acad::phil
A term that {{c2::picks out the same thing}} in {{c3::all possible worlds}} {{c4::in which it exists}} is known as a {{c1::rigid designator}}.	acad::phil
A term that {{c2::may pick out different things}} in {{c3::other possible worlds}} is known as a {{c1::flaccid designator}} (sometimes also: {{c4::non-rigid designator}}, {{c5::connotative term}}).	acad::phil
{{c1::Kripke}} criticizes {{c2::Russels Name Claim}} and similar approaches because they make usually {{c3::ridgid descriptors}} such as {{c4::names}} into {{c5::flaccid descriptors}}	acad::phil
"Arguably, in the sentence ""{{c1::Triest is no Vienna}}"", {{c2::Triest}} is acting as {{c3::a reference}}, while {{c2::Vienna}} is acting as {{c3::some kind of description}}"	acad::phil
"Lycan paraphrases Kripke offering a test for if {{c1::a term is rigid}}: if the sentence ""{{c3::N might not have been N}}"" is {{c4::true}} it is {{c2::flaccid}}, else it is {{c2::rigid}}"	acad::phil
"Especially as a response to {{c1::frege's second puzzle}}, the distinction is made between terms that are {{c2::transparent}}, where {{c3::exchanging a term for one referring to the same entity}} does {{c4::not alter the truth value of the sentence}}, and terms that are {{c2::opaque}}, where {{c3::exchanging a term for one referring to the same identity}} does {{c4::alter the truth value of the sentence&nbsp;}}"	acad::phil
"The sentence ""Columbus believed that Castro's island was China"" is {{c2::true}} if ""{{c3::Castro's island}}"" is read {{c4::transparently}} and {{c2::false}} if ""{{c3::Castro's island}}"" is read {{c4::opaquely}} (since {{c1::Columbus would have had no idea of Castro)}}"	acad::phil
"some {{c1::Direct Reference}} (at least related to {{c2::singular terms}})&nbsp;theorists try to extricate themselves from {{c3::frege's second puzzle}} by arguing that {{c4::substituting in a belief statements doesn't change the truth value}}, since the relevant terms have {{c5::transparent}} readings, and that {{c6::the opaque reading is illusiory}} (which they need to argue but is somewhat implausible)"	acad::phil
"A {{c1::causal-historical theory}}&nbsp;is a theory of how {{c2::references}} work that argues {{c3::(the reference of) a name (or similar)}} is fixed by {{c4::an initial act of naming/'dubbing'/'baptism'}}, and this {{c7::reference}} is then {{c5::passed along via its usage}} along {{c6::a chain}} reaching to today"	acad::phil
A {{c1::causal-historical}} theory of references deals well with the problem of {{c2::ambiguous names}}, since different names will have {{c3::different}} {{c1::causal-historical}} {{c3::chains}} tying them to {{c4::precise referents}}	acad::phil
To avoid problems such as {{c1::naming a dog after Napoleon}}, {{c2::Kripke}} introduced the requirement to the {{c3::causal-historical theory}} that {{c4::the person must intend to use the reference in the same way}}	acad::phil
"The {{c1::Causal-Historical}} theory of reference ends up having problems with cases of {{c2::reference switcharoo}}. The classic example is ""{{c3::Two babies are born}} and {{c4::their parents name them}} {{c5::P and Q}}. however, {{c6::they are inadvertently switched without anyone knowing}}, so that {{c7::the baby originally named Q henceforth gets called by the name P}} (and {{c7::the reverse}})."" The CH theory would suggest that {{c8::P still refers to the baby originally named P}} via {{c9::the unbroken causal chain}}, {{c10::but that's clearly ridiculous}}."	acad::phil
To save the {{c1::Causal-Historical}} theory from cases such as {{c2::baby-switching}}, Devitt suggests {{c3::multiple grounding}}, where {{c4::not only}} the original occasion can ground a causal chain, and with {{c5::sufficient groundings for a different origin}}, {{c6::that chain prevails}}.	acad::phil
{{c2::Modality}} is about {{c3::the way things could (not) or must have been}}. It is contrasted with the {{c1::actual state of affairs.}}	acad::phil
"{{c1::semantic internalism}} is the view that {{c2::meaning (esp. of terms)}} is determined by {{c3::factors within the speaker}}, {{c1::semantic externalism}} is the view that {{c2::meaning (esp. of terms)}} is determined by {{c3::factors outside of the speaker, within the world}} (""{{c4::meanings just ain't in the head}}"")"	acad::phil
The {{c1::Twin Earth}} thought experiment was propsed by {{c2::Putnam}} for his argument for {{c3::semantic externalism}}	acad::phil
The {{c1::Twin Earth}} thought expriment: Imagine a {{c2::second earth}}, a {{c3::complete duplicate}} of our earth except for the fact that {{c4::there water means XYZ instead of H<sub>2</sub>O}}&nbsp;(it otherwise behaves {{c5::exactly the same way}}) (this is not a {{c6::possible world}}, it exists in the same universe as our earth). Imagine a person 鈴木さん and Twin鈴木さん. If 鈴木さん {{c7::says water}}, they {{c8::mean H<sub>2</sub>O}}, and if Twin鈴木さん {{c7::says water}}, they {{c8::mean XYZ}}. However, their {{c9::mental and bodily states are exactly the same}}. Therefore, {{c10::meaning must be external to the speaker}}.	acad::phil
"In philosophy, a {{c1::proper name}} is {{c2::a name}} which (in some way) {{c3::uniquely identifies its referent in the world}}<br/><div class=""sub""> this is at least similar to unique identifier </div>"	acad::phil
"{{c1::descriptivist}} theories of {{c2::proper names/reference}} contend that {{c3::the descriptive content}} {{c4::associated with}} a {{c5::name}} (or {{c5::the relevant use of the name}}) somehow {{c6::picks out its referent}}. <span class=""c1-scr c2-scr c3-scr c4-scr c5-scr c6-scr"">One of their main problems is that {{c7::they may pick out the wrong referent}} in a bunch of different scenarios.</span>"	acad::phil
"In law, philosophy, something {{c1::dispositive}} is {{c2::intending to/capable of/resulting in}} {{c3::final resolution/settling of a matter}}<br/><div class=""sub""> <a href=""https://www.encyclopedia.com/law/encyclopedias-almanacs-transcripts-and-maps/dispositive-fact"">https://www.encyclopedia.com/law/encyclopedias-almanacs-transcripts-and-maps/dispositive-fact</a> </div>"	acad::phil
"According to {{c1::John Locke}}'s {{c2::ideational theory}}, the {{c5::meanings}} of linguistic expressions/items are (that is, e.g. {{c4::express}} or {{c4::correspond to}}) {{c3::ideas in the mind}}. This theory {{c6::remains vague}} until it {{c7::specifies what exactly it means by ideas in the mind}}, and {{c8::which linguistic unit actually bears this meaning}}, and then runs into problems depending {{c9::on what is chosen}}. (Via Lycan) Addtionally, it has a hard time taking into account the {{c10::intersubjective}} nature of language."	acad::phil
The difference between {{c1::surface form}} and {{c1::logical form}} is similar to (though used in different contexts) to the difference between {{c2::actual sentence}} and {{c2::expressed proposition}}	acad::phil
"Given that we believe in them, a theory of language using {{c1::propositions}} (a '{{c1::propositional}} theory') might look something like: {{c2::Any sentence S}} {{c6::expresses}} {{c3::a proposition P}}; for two sentences to be {{c4::synonymous}} is for them to {{c5::express the same proposition}}; a sentence is {{c7::ambiguous}} if it {{c8::expresses two or more distinct propositions}}. What {{c9::bears truth or falsity}} are not {{c10::sentences}} but {{c10::propositions}}."	acad::phil
"In philosophy, a {{c1::razor}} is {{c4::a principle or rule of thumb}} that allows one to {{c2::eliminate (""shave off"")}} {{c3::unlikely explanations}} for a phenomenon"	acad::phil
"{{c1::Occam's razor}} is the razor that states ""{{c2::entities should not be multiplied beyond necessity}}"", sometimes inaccurately paraphrased as ""{{c3::the simplest explanation is usually the best one.}}"""	acad::phil
A {{c1::use theory}} of meaning is a theory that says the meaning of something (e.g. an expression) is constituted by {{c2::how it is used}}, or {{c2::would be used (by competent speakers, etc.)}}	acad::phil
{{c1::Wittgenstein}} argued that {{c3::the essence of language}} was {{c2::game-like}}	acad::phil
The way(s) in which {{c5::language can be like a game}} is/are {{c4::never defined precisely}}, as wittengstein believes it is {{c2::impossible}} to find anything more than a {{c3::family resemblance}} for these {{c1::language-games}}	acad::phil
In general, the {{c2::meaning}} of {{c3::expressions}} in a {{c1::language game}} are {{c4::the rules of their use}}: {{c5::when they can be said}}, {{c6::what an appropriate response is}}, etc.	acad::phil
examples for wittgensteinian {{c1::language games}} might be the {{c2::meeting-and-greeting language game, the wedding language game, the higher-arithmetic language game,}} etc.	acad::phil
"Wittgenstein offers the example of {{c1::the builder}} and {{c1::their assistant}}, whose language only has {{c2::four words/expressions}}, {{c3::""block"", ""pillar"", ""slab"", and ""beam""}}. When {{c4::the builder says ""block""}}, {{c5::the assistant brings a stone of the relevant shape}}, and so on. Wittgenstein says that while we might try to {{c6::analyze these into propositions etc.}}, the key here is that {{c7::""block"" etc. actually mean triggering the correct response in the assistant}}"	acad::phil
Where the Wittgensteinian theory of {{c2::language games}} has the most problems is how to explain {{c1::grammar, /r/BrandNewSentence,}} etc.	acad::phil
In philosophy, {{c1::inference}} is {{c2::reasoning from the truth of some statements to others}}, which can be {{c3::deductive}}, {{c3::inductive}}, or {{c3::abductive}} (and others, if there are other valid methods)	acad::phil
{{c1::Inferentialism}} is a family of theories of meaning that define the meaning of an expression via its {{c2::inferential relationship to other expressions}}. {{c3::Brandom}}, inspired by though in effect fairly far from {{c4::Wittgenstein}}, presents the {{c5::paradigm case}} of the {{c6::language-game of asserting}}, where the {{c7::meaning of a statement S}} is {{c8::the statements that could be given in support of S}} and {{c9::the statements that S could be given in support for}}.	acad::phil
"Grice: the {{c1::conventional implicature}} of ""{{c2::The die is green and heavy}}"" is {{c3::""The die is green"" (as well as ""The die is heavy"")}}"	acad::phil
"Grice's definition of conversational implicature:<br>A {{c1::speaker S}} has {{c2::conversationally implicated q}} iff<br>0) {{c3::they said p}}<br>1) {{c4::they are presumed to be observing the CP &amp; maxims}}<br>2) {{c5::supposing that q is required to make p consistent with 1)}}<br>3) {{c6::S thinks that the hearer can figure out that 2)}}<br>4) {{c7::S thinks that the hearer understands 3)}}"	acad::phil
"Grice's {{c1::working out schema}} is the {{c2::thought process}} that the {{c3::listener}} goes through to {{c4::figure out that there is a conversational implicature}}, and is more or less {{c5::the mirror image/inverse of his actual definition}}"	acad::phil
"Via grice's {{c1::definition}}, violating the {{c3::CP}} at the level {{c2::of what was said}} is {{c4::necessary}} to {{c5::conversationally implicate}}. However one can also {{c6::violate the CP}} but not {{c7::generate true conv. implicatures}}: either in a way that indicates {{c8::one is opting out of the CP completely}} (= {{c8::cancellability}}), or {{c9::without indicating that one is doing violating it}}, and thus (since the person still goes through {{c10::the working-out schema}}) {{c11::probably mislead the listener}}."	acad::phil
supposing that {{c5::a conv. impl. is required}} to {{c1::make the statement consistent}} with (what Davis calls) {{c2::the cooperative presumption}} is {{c3::the grounds for all conv. implicature}}, but how exactly the {{c4::consistent-making}} works is initially ambiguous. Into this gap Grice inserts his three types of conv. impl.:<br>1. supposition of {{c6::implicature makes statement consistent with CP}} (called {{c10::standard implicatures}})<br>2. explanation of {{c7::violation of maxim M by the fact that otherwise other maxim would have been violated}}<br>3. (if {{c8::very explicity violation of CP}} = {{c8::flouting}}) supposition {{c9::of something completely different makes statement consistent with CP}} (called {{c11::flouting implicatures}}) (obv very problematic)	acad::phil
"{{c1::Davis}} calls the part of Grice's definition of {{c3::conversational implicature}} where we {{c2::presume that S is observing the CP}} {{c4::the cooperative presumption}}"	acad::phil
"{{c1::Davis}} subjects Grice's account of {{c2::conversational implicature}} to {{c3::a exhaustive critique}}"	acad::phil
"{{c1::Davis}} calls the part of Grice's definition of {{c3::conversational implicature}} where {{c2::we say that S conv. implicating q is required to make p consistent with the CP}} {{c4::(the) determinacy (condition)}}"	acad::phil
{{c1::Davis}} calls the assuption, seemingly implicit in Grice, that {{c2::conversational implicatures must be capable of being worked out}} {{c3::the calculability assumption}}	acad::phil
"To explain why we don't just posit {{c1::conversational implicatures}} as {{c2::additional senses}} (or {{c2::different entities}}), {{c3::Grice's Razor}} is proffered: ceteris paribus it is {{c4::better to postulate}} {{c1::conversational implicatures}} rather than {{c2::senses}} (or {{c2::different entities}}) because they can be {{c5::derived from independently motivated psychosocial principles}}."	acad::phil
"Grices theory of conversational implicature takes as its {{c1::data}} {{c2::a set of implicatures/implications}}. Even if {{c3::we reject Grice's theory (in part or in whole)}}, the {{c4::existence}} of {{c5::the data}} as well as {{c5::some mechanism to derive these from the literal meaning}} can {{c6::hardly be in doubt}}."	acad::phil
A {{c1::tautology implicature}} (however this term is only used by {{c5::Davis and people who cite him}}) is where {{c2::a tautology}} implicates {{c2::something else besides the uninformative tautology itself}}, explained by grice via the {{c4::flouting}} (mechanism {{c4::3}}) of the {{c3::maxim of Quantity}}	acad::phil
"A {{c1::conjunction implicature}} (however this term is only used by {{c5::Davis and people who cite him}}) is where {{c2::two sentences connected by an conjunction}} implicates {{c2::these happening in temporal order}}, explained by grice via {{c3::the violation of the maxim of Manner (specifically the submaxim 'be orderly')}} via the mechanism in {{c4::1.}} ({{c4::supposition of implicature necessary to make consistent with CP}})"	acad::phil
"{{c1::""Some died""}} ⊐ {{c2::¬ ""All died""}} is an example of a {{c3::Quantity (both wide and narrow sense)/Scalar Implicature}}"	acad::phil
"{{c1::""War is war""}} ⊐ {{c2::""It is the nature of war that terrible things happen""}} is an example of a {{c3::Tautology Implicature}} (rare term)"	acad::phil
"{{c1::""Jane took off her trousers and went to bed""}} ⊐ {{c2::""Jane first took off her trousers and then went to bed""}} is an example of a {{c3::Conjunction Implicature}} (however this term is only used by {{c4::Davis and people who cite him}})"	acad::phil
"{{c1::Grice's theory of conventional implicature}}{{c2::has significant problems}} because applying it many sentences generate {{c3::more than one}}, often {{c3::contradictory}} implicatures (= {{c3::overgeneration}}), which are also often {{c4::contradictory to the actual real life implicatures}} (= {{c4::misgeneration}}), because {{c5::flouting}} doesn't work, because it presumes {{c6::cooperation as the only goal}}, contrary to {{c6::the many goals that people actually have}} (and perhaps other problems)"	acad::phil
"The maximum of quantity purports to be ""{{c1::be as informative as required}}."" However, there seems to be no reason why e.g. ""Some (are) P"" couldn't be ""as informative as is required"" (and thus no implicature would be predicted) in many circumstances where the implicature e.g.&nbsp;¬""All (are) P"" is generated. It seems necessary to postulate the maximum of quantity as ""be as informative as possible"", which then runs into challenges such as <br>1) ""Beyonce and Tinashe moved the piano"" where if one would have been able to say ""moved it together"", one would have been more informative and should have said it, and also if one would have been able to say ""moved it separately."", one would have been more informative and should have said it, therefore generating&nbsp;⊐⊐ ""Moved it seperately""&nbsp;∧ ""Moved it together"", which is a contradiction<br>2) ""Who won the game?"" ""Real Madrid"" -&gt; if one would have would have been able to be more informative, one should have said it -&gt; ⊐⊐ One does not know the final score, in which league Real Madrid plays, that Madrid is in Spain, etc."	acad::phil
"It is often said that one of the {{c2::central claims}} of {{c1::existentialism}} is that ""{{c4::existence precedes essence}}"" (coined by {{c3::Jean-Paul Satre}}), meaning something like ""{{c5::Existence comes first, and meaning ≈ essence is made later}}"""	acad::phil
{{c1::Mary Wollstonecraft}}, who lived in {{c2::the 2nd half of the 1700s}}, is often called {{c3::a proto-feminist}}, mainly due to her most well-known work <q>{{c4::A Vindication of the Rights of Woman}}</q>	acad::phil
As well as for her work, {{c1::Mary Wollstonecraft}} is often admired for her {{c2::unconventional personal relationships}}, which consisted of {{c3::two affairs}} and then {{c4::marrying a philosopher}}, after which she {{c5::gave birth to Mary (Wollstonecraft) Shelley}} and then {{c6::died due to complications}}	acad::phil
{{c1::Mary Wollstonecraft}} helped her sister Eliza {{c2::to leave her husband and infant}} after (probably) {{c3::postpartum depression}}, resulting in Eliza {{c4::escaping the situation}}, but also in {{c4::the social condemnation}} of her	acad::phil
{{c1::Mary Wollstonecraft}} had a close friendship with Jane Arden, valuing the {{c2::intellectual atmosphere}} and also saying <q>I have formed {{c3::romantic notions of friendship}} ... I am a little singular in my thoughts of {{c4::love and friendship}}; I must have {{c5::the first place or none}}.</q>	acad::phil
In general, Mary Wollstonecrafts {{c1::life}} was more {{c2::popular}} a subject than {{c3::her other writings}} (however some argue that this {{c4::may have been overstated}}) until the advent of {{c5::the feminist movement}}, then especially focusing on <q>{{c6::the Vindication of the Rights of Woman}}</q>	acad::phil
In philosophy, {{c1::presentism}} is the idea that {{c2::only the present}} (= n{{c2::either the past nor the future}}) {{c3::exists}}. It is most often classified under {{c4::ontology}}.	acad::phil
"a further {{c1::microinvalidation::one of the three types}} that {{c2::I'm suggesting}} is ""{{c3::denial of lived experience}}"" ({{c3::of x-ism}}) {{c1::Microaggressions}} are {{c2::brief}}, {{c2::everyday}} moments that {{c3::send denigrating messages}} to {{c4::stigmatized/marginalized group (the -value group of an ism)}}. While not explicitly one of the {{c1::8 themes}} of {{c2::microagressions}}, a further {{c3::microinvalidation}} that has been suggested is ""{{c4::denial of y-ism}}"", where {{c5::people deny the reality of the discrimination}} {{c1::DH Sue}} ({{c2::2007}}) laid out {{c3::8}} different {{c4::themes}} of {{c5::microagressions}}, which have {{c6::somewhat widely}} been used {{c1::DH Sue}} was mainly concerned with {{c2::race}}, but his {{c3::characterizations of microagressions}} have been also {{c4::been adopted in other discriminated-against(-value) communities}} {{c1::DW Sue}} ({{c2::2007}}), perhaps {{c3::the seminal work}} on {{c4::microagressions}}, describes {{c5::three typees}} of {{c4::microagressions}}: {{c6::Microinsult}}, which {{c9::demeans a person  (based on their marginalized indentity)}}, {{c7::Microassault}}, which {{c10::are designed to hurt the victim}}, and {{c8::Microinvalidations}}, which {{c11::nullify/negate the lived reality of a person}} One of the {{c1::8 microagressions}}, a type of {{c2::microinsult}} is ""{{c3::assumption of criminal status}}"", the presumption {{c4::that a person of the identity is criminal/dangerous/deviant}}. This is salient for {{c5::racism}}, but also strongly for {{c5::sanism/mentalism}}, and to a certain extent to {{c5::homophobia}} (and probably many others) One of the {{c1::8 themes}} of {{c2::microagressions}}, categorized as a {{c3::microinvalidation}}, are claims to be {{c4::color-blind}} ≈ ""{{c5::denial of individual racism}}"", claiming in essence {{c6::that there might be racism, but I'm not doing it}}. Analogously, we might define {{c4::x-blind}} ({{c4::gender-blind, etc.}}) ≈ ""{{c5::denial of individual y-ism}}"" claiming {{c6::that there might be y-ism, but I'm not doing it}}."	acad::phil
"{{c1::Standpoint theory}} has its deepest roots in {{c2::Hegel's master/slave dialectic}}, specifically that {{c3::the slave}} can gain {{c4::self-consciousness}} through {{c5::their fashioning of the world (done through labour for the master)}}"	acad::phil
{{c1::Lukacs}} idea of the {{c2::standpoint of the proletariat}} is the idea (as a {{c3::theoretical necessity}}, not an {{c3::empirical phenomenon}}) that {{c4::the proletariat have a superior startin point for understanding and thus changing class reality.}}	acad::phil
Since {{c1::standpoint theory}} is based on {{c2::lukacs}} idea of {{c3::the standpoint of the proletariat}}, a {{c4::standpoint}} here is not to be understood as {{c5::any old perspective}}, but {{c5::the perspective}} as {{c6::coming from the collective identity of a group}} (we might say {{c6::political consciousness}}), generally an {{c7::oppressed}} ( = {{c7::-value}}) group. Many {{c1::standpoint theorists argue}} that this {{c4::standpoint}} is {{c8::achieved through}} {{c9::the experience of collective political struggle}}.&nbsp;	acad::phil
"&nbsp;In general, {{c1::droids}} in star wars are denied {{c2::even the most basic 'human' rights}}. One of the angles to examine this from might be the perspecitve of {{c3::speciesism}}"	acad::phil
In general, {{c3::most terms from discussions of discrimination}} are {{c2::coined off of / inspired by terms pioneered}} in {{c1::a given discriminated-against group}}	acad::phil
{{c1::White fragility}}, coined by {{c2::Robin DiAngelo}} is the state in which having {{c3::race}} and/or {{c3::our possible racism/complicitness}} {{c4::mentioned}}, even {{c5::in a minor way}}, {{c6::triggers a deep defensive response}}. This reaction {{c7::functions (on a societal level if not consciously)}} to {{c8::silence mentioning of race}} and thus {{c8::maintain the current racial order}}.	acad::phil
{{c1::Ali Khalidi}} distinguishes theories of {{c2::the social construction of kinds}} based on whether the {{c3::subjects attitude}} towards the kind affects {{c4::kind existence (that is e.g. Whether rocks exist or not depends on us)}}, {{c5::kind membership (that is e.g. Whether this thing is a rock or not depends on us)}}, {{c6::both (Whether rocks exist and whether this thing is a rock both depends on us)}}, or {{c6::neither}}&nbsp;	acad::phil
"""{{c1::Critical Theory}}"" may be {{c2::a specific school of philosophy}} ({{c2::Horkheimer, Adorno, Habermas,}} etc.), or <span class=""c1-scr""> it may be {{c6::any sort of theory}} that is interested in {{c5::power structures}}, and especially {{c7::umasking hidden power structures}}&nbsp;and thus achieve ""{{c3::emancipation from slavery}}"" ({{c4::Horkheimer}})</span>"	acad::phil
"{{c3::dummys}} {{c1::are passed but never used}} ({{c3::dummys}} are {{c3::dummys}} because {{c1::they don't do anything}}), {{c3::fakes}} {{c1::have working implementations but use some shortcut}} ({{c3::fakes}} are {{c3::fakes}} because {{c1::they fake a part of the implementation}}), {{c4::stubs}} {{c2::use predefined answers}} ({{c4::stubs}} are&nbsp; {{c4::stubs}} because {{c2::they are method stubs}}), {{c4::mocks}} {{c2::make sure that the method was called on it properly}} ({{c4::mocks}} are {{c4::mocks}} because {{c2::they mock the method that was called on them till it behaves properly (no, I've got no idea here)}})"	acad::inf
{{c1::Grice}} says that  if {{c2::you can work out more than one implicature}}, the resulting implicature will be {{c3::a disjunction of such explanations}}. It is actually unclear whether this means {{c4::an inclusive or an exclusive disjunction.}}	acad::phil
"<q>{{c1::The Problem of Evil}}</q> is the question of {{c2::how to reconcile}} {{c3::the existence of evil/suffering}} with an {{c4::omnipotent}}, {{c4::omnibenevolent}} and {{c4::omniscient}} {{c5::God}}. A response <span class=""c1-scr"">that seeks to {{c6::justify <span class=""c5-scr"">god</span> in relation to the problem of evil}}</span> is known as a <span class=""c11-scr"">{{c7::theodicy}}</span>, for example <span class=""c6-scr"">{{c8::Leibniz}}'s claim that {{c9::the existing world is ""the best of all possible worlds""}}</span>. <span class=""c6-scr"">A more limited response that {{c10::only seeks to prove that <span class=""c2-scr c3-scr c4-scr"">there are possible ways to reconcile the existence of evil with omnipotence/benevolence/niscience</span>}}</span> is sometimes known as a <span class=""c7-scr"">{{c11::defense}}</span>."	acad::phil
"A {{c1::Theodicy}} may be {{c2::any <span class=""c3-scr"">justification</span> of a deity or their attributes}}, but specifically may refer to the <span class=""c1-scr"">theodicy</span> {{c3::<span class=""c2-scr"">justifying god contra the problem of evil</span>}}."	acad::phil
"<p><q>{{c1::Pascal’s Wager}}</q> is the name given to an argument by <span class=""c1-scr"">{{c2::Blaise Pascal}}</span> for {{c3::believing, or for at least taking steps to believe, in God}}. (in fact, <span class=""c1-scr"">{{c2::pascal}}</span> actually presents {{c4::three}} possible <span class=""c1-scr"">wager</span>-like arguments, of which only the final one is acutally called {{c1::pascals wager}}.</p> <p class=""c1-scr c2-scr c3-scr c4-scr"">It argues that it is {{c5::rational}} to live {{c6::as though God exists and (seek to) believe in God}}. If {{c7::God does not exist}}, such a person will have {{c7::only a finite loss (some pleasures, luxury, etc.)}}, whereas if {{c7::God does exist}}, one will have {{c7::infinite gains (as represented by eternity in Heaven)}} (and {{c7::avoid infinite losses (eternity in Hell)}}).</p> <p class=""c1-scr c2-scr c3-scr c4-scr c5-scr"">The perhaps most commonly cited objection, besides the fact that {{c8::it isn't really a proof of god at all}}, is the {{c9::argument from inauthentic belief}}, that {{c10::god would not be satisified with belief that was mrere calculation}}.</p>"	acad::phil
"<br>---<br>   §§ In espanso, the global config key <code>((c:1;::backend))</code> specifies ((c:5;::how the insertion takes place)) §<br> §§ The global config key ((c:6;::backend)) of espanso takes the values <code>((c:2;::Clipboard))</code> = work like ((c:4;::pasting)), <code>((c:3;::Inject))</code> = work like ((c:4;::keypresses)), or <code>Auto</code> (linux only) §<br> §§ In espanso, the global config key <code>((c:7;::auto_restart))</code> specifies ((c:8;::whether espando should restart on config change)) §<br> ===<br> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::espanso
"When using {{c1::espanso forms}}, {{c2::ctrl (yes, really) enter}} to {{c3::submit on mac}} <p>To {{c1::expand on simple forms}}, you can specify the <code>{{c2::form_fields}}</code> key, which has an object which takes {{c3::the relevant <code>field_name</code> as keys}} (so <code class=""c3-scr"">{{c4::form_fields: {field_name: {...}}</code>).</p> <p class=""c1-scr c2-scr c3-scr c4-scr "">This then takes {{c5::a <code>type</code>}} (so <code class=""c5-scr"">{{c6::form_fields: {field_name: {type: ...}}</code>), which if not specified defaults to {{c7::text}}.</p>  <p class=""c1-scr c2-scr c3-scr c4-scr c5-scr c6-scr c7-scr c8-scr"">Other <code>type</code>s include <code>{{c8::choice}}</code> for {{c9::a &lt;select&gt; equivalent}}, <code>{{c10::list}}</code> for {{c11::a list box (&lt;select size=""whatever""&gt; equivalent)}}. <span class=""c8-scr c9-scr c10-scr c11-scr"">Both of these take&nbsp;</span>{{c12::<code>values</code> for a list of values (e.g. <code>values: [""first choice"", ""second choice""]</code>}}`</p><br><br>---<br> <pre><code data-codetype=""yaml"">  - trigger: "":greet""     form: |       Hey {{name}},       {{text}}       Happy Birthday!     form_fields:       text:         multiline: true</code></pre> ===<br> <div class=""c1-f""> form_fields key for what? </div><br>to specify that {{c1::a text form field of espanso should be multiline}}, specify {{c2::<code>multiline: true</code>}} for that field (<span class=""c1-scr c2-scr"">so <code>{{c3::form_fields: { field_name:}} {{c4::{ multiline: true ...}}</code></span>)<br><br>---<br> <pre><code>  - trigger: "":greet""     form: |       Hey {{name}},       {{text}}       Happy Birthday!     form_fields:       text:         multiline: true</code></pre> ===<br> <br>---<br>   §§ Espanso features ((c:1;::forms)) to ((c:2;::query for user input)). ((s:1-2;::In it's simplest form, this is implemented by ((c:3;::a key <code>form</code>)) that features a ((c:4;::string)) with ((c:5;::fields specified as {{field_name}})) )) §<br> ===<br> <br>---<br> <pre><code> - trigger: "":greet""     form: |       Hey {{name}},       Happy Birthday!</code></pre> ===<br> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}</span>"	acad::espanso
"Each mapping in the matches sequence can have {{c1::variables}} inserted into it. <span class=""c1-scr"">These are indicated like so {{c2::{{foo}&#8203;} }}. They are defined by the <code>{{c3::vars}}</code> property, specifically, <span class=""c2-scr c3-scr"">the {{c4::name we refer to them with within the {{}​} }} is defined by the <code>{{c5::name}}</code> property, and {{c6::what kind of variable they are}} is defined by the <code>{{c7::type}}</code> property. if the {{c8::type itself can be further configured}}, we do that {{c9::within the <code>params</code> property}}.</span></span><br/><br>---<br> <pre><code>- trigger: "":nested""   replace: ""This is a {{output}} match""   vars:     - name: output       type: match       params:         trigger: "":one""</code></pre> ===<br>"	acad::espanso
"Passwords<br><table>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td><span class=""c1-cloze""><code>pass backup</code></span></td></tr>     <tr><td><span class=""c2-cloze""><code>pass anki-main</code></span></td></tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}</span>"	acad::inf
"<table>   <tbody>     <tr>       <th>P</th>       <th>Q</th>       <th><span class=""c13-cloze"">P ∨ Q</span></th>     </tr>     <tr>       <td><span class=""c1-cloze c1-4-scr"">W</span></td>       <td><span class=""c5-cloze c5-8-scr"">W</span></td>       <td><span class=""c9-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c2-cloze c1-4-scr"">W</span></td>       <td><span class=""c6-cloze c5-8-scr"">F</span></td>       <td><span class=""c10-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c3-cloze c1-4-scr"">F</span></td>       <td><span class=""c7-cloze c5-8-scr"">W</span></td>       <td><span class=""c11-cloze c9-12-scr"">W</span></td>     </tr>     <tr>       <td><span class=""c4-cloze c1-4-scr"">F</span></td>       <td><span class=""c8-cloze c5-8-scr"">F</span></td>       <td><span class=""c12-cloze c9-12-scr"">F</span></td>     </tr>   </tbody> </table> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}</span>"	acad::log
"<table>   <tbody>     <tr>       <td>P</td>       <td>{{c1::¬P}}</td>     </tr>     <tr>       <td>W</td>       <td>{{c2::F}}</td>     </tr>     <tr>       <td>F</td>       <td>{{c2::W}}</td>     </tr>   </tbody> </table>   <img src=""sm_tmp1rbymdyv.png"">"	acad::log
"<svg version=""1.0"" x=""0.00000000"" y=""0.00000000"" width=""600.00000"" height=""600.00000"" id=""svg2"" xmlns=""http://www.w3.org/2000/svg"" xmlns:svg=""http://www.w3.org/2000/svg"" xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"" xmlns:cc=""http://creativecommons.org/ns#"" xmlns:dc=""http://purl.org/dc/elements/1.1/"">     <g inkscape:groupmode=""layer"" id=""layer7"" inkscape:label=""p4"" style=""display:inline"">       <path sodipodi:type=""arc"" style=""opacity:1;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" id=""path2408"" sodipodi:cx=""187"" sodipodi:cy=""113"" sodipodi:rx=""119"" sodipodi:ry=""119"" d=""M 307 113 A 119 119 0 1 1  67,113 A 119 119 0 1 1  307 113 z"" transform=""matrix(1,0,0,1,95,171)""></path>    </g>    <g style=""display:inline"" id=""layer3""></g>    <g style=""display:inline"" id=""layer4""></g>    <g inkscape:groupmode=""layer"" id=""layer1"" inkscape:label=""p3"" style=""display:inline"">       <g id=""g2362"" transform=""matrix(0.695009,0,0,0.683713,94.00027,94.69452)"">          <path d=""M 264.65488,281.35479 L 307.55343,299.12392 L 307.53867,299.13003 L 83.172594,392.06566 L 264.65488,281.35479"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8773""></path>          <path d=""M 290.16697,342.94635 L 307.9361,300.0478 L 307.92135,300.05391 L 83.555271,392.98954 L 290.16697,342.94635"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8775""></path>          <path d=""M 351.75849,317.43427 L 308.85994,299.66514 L 308.8747,299.65903 L 533.24078,206.7234 L 351.75849,317.43427"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8779""></path>          <path d=""M 290.16693,342.94611 L 307.93606,300.04756 L 307.94217,300.06232 L 400.8778,524.4284 L 290.16693,342.94611"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8787""></path>          <path d=""M 351.75849,317.43402 L 308.85994,299.66489 L 308.86605,299.67964 L 401.80168,524.04572 L 351.75849,317.43402"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8789""></path>          <path d=""M 326.24641,255.8425 L 308.47728,298.74105 L 308.47117,298.72629 L 215.53554,74.360214 L 326.24641,255.8425"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path8793""></path>          <path d=""M 264.65485,281.3546 L 307.5534,299.12373 L 307.53864,299.12984 L 83.172563,392.06547 L 264.65485,281.3546"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1397""></path>          <path d=""M 290.16693,342.94637 L 307.93606,300.04782 L 307.94217,300.06258 L 400.8778,524.42866 L 290.16693,342.94637"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1405""></path>          <g id=""g2356"">             <path id=""path8781"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 326.2464,255.84271 L 308.47727,298.74126 L 308.49202,298.73515 L 532.8581,205.79952 L 326.2464,255.84271"">             </path>             <path id=""path8795"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 264.65485,281.35459 L 307.5534,299.12372 L 307.54729,299.10897 L 214.61166,74.742891 L 264.65485,281.35459"">             </path>             <path id=""path1399"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 290.16694,342.94616 L 307.93607,300.04761 L 307.92132,300.05372 L 83.55524,392.98935 L 290.16694,342.94616"">             </path>             <path id=""path1407"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 351.75849,317.43428 L 308.85994,299.66515 L 308.86605,299.6799 L 401.80168,524.04598 L 351.75849,317.43428"">             </path>          </g>       </g>       <g style=""display:inline"" id=""g2377"" transform=""matrix(0.491446,-0.491446,0.483458,0.483458,11.99521,306.1165)"">          <path d=""M 264.65488,281.35479 L 307.55343,299.12392 L 307.53867,299.13003 L 83.172594,392.06566 L 264.65488,281.35479"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2379""></path>          <path d=""M 290.16697,342.94635 L 307.9361,300.0478 L 307.92135,300.05391 L 83.555271,392.98954 L 290.16697,342.94635"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2381""></path>          <path d=""M 351.75849,317.43427 L 308.85994,299.66514 L 308.8747,299.65903 L 533.24078,206.7234 L 351.75849,317.43427"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2383""></path>          <path d=""M 290.16693,342.94611 L 307.93606,300.04756 L 307.94217,300.06232 L 400.8778,524.4284 L 290.16693,342.94611"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2385""></path>          <path d=""M 351.75849,317.43402 L 308.85994,299.66489 L 308.86605,299.67964 L 401.80168,524.04572 L 351.75849,317.43402"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2387""></path>          <path d=""M 326.24641,255.8425 L 308.47728,298.74105 L 308.47117,298.72629 L 215.53554,74.360214 L 326.24641,255.8425"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2389""></path>          <path d=""M 264.65485,281.3546 L 307.5534,299.12373 L 307.53864,299.12984 L 83.172563,392.06547 L 264.65485,281.3546"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2391""></path>          <path d=""M 290.16693,342.94637 L 307.93606,300.04782 L 307.94217,300.06258 L 400.8778,524.42866 L 290.16693,342.94637"" style=""fill:#e1e1e1;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.0000006;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path2393""></path>          <g id=""g2395"">             <path id=""path2397"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 326.2464,255.84271 L 308.47727,298.74126 L 308.49202,298.73515 L 532.8581,205.79952 L 326.2464,255.84271"">             </path>             <path id=""path2399"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 264.65485,281.35459 L 307.5534,299.12372 L 307.54729,299.10897 L 214.61166,74.742891 L 264.65485,281.35459"">             </path>             <path id=""path2401"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 290.16694,342.94616 L 307.93607,300.04761 L 307.92132,300.05372 L 83.55524,392.98935 L 290.16694,342.94616"">             </path>             <path id=""path2403"" style=""fill:#b4b4b4;fill-opacity:1;fill-rule:evenodd;stroke:#b4b4b4;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" d=""M 351.75849,317.43428 L 308.85994,299.66515 L 308.86605,299.6799 L 401.80168,524.04598 L 351.75849,317.43428"">             </path>          </g>       </g>    </g>    <g inkscape:groupmode=""layer"" id=""layer6"" inkscape:label=""p2"" style=""display:inline"">       <g style=""display:inline"" id=""g1536"" transform=""translate(-55.8718,-38.60234)"">          <path d=""M 316.93813,337.99683 L 363.37116,337.99683 L 363.35986,338.00812 L 191.63751,509.73048 L 316.93813,337.99683"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1538""></path>          <path d=""M 364.07826,385.13697 L 364.07826,338.70394 L 364.06697,338.71523 L 192.34461,510.43759 L 364.07826,385.13697"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1540""></path>          <path d=""M 411.21837,337.99687 L 364.78534,337.99687 L 364.79664,337.98558 L 536.51899,166.26322 L 411.21837,337.99687"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1542""></path>          <path d=""M 364.07824,290.85673 L 364.07824,337.28976 L 364.08953,337.27847 L 535.81189,165.55611 L 364.07824,290.85673"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1544""></path>          <path d=""M 364.07813,385.13677 L 364.07813,338.70374 L 364.08942,338.71504 L 535.81178,510.43739 L 364.07813,385.13677"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1546""></path>          <path d=""M 411.21827,337.99664 L 364.78524,337.99664 L 364.79653,338.00793 L 536.51889,509.73029 L 411.21827,337.99664"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1548""></path>          <path d=""M 364.07817,290.85653 L 364.07817,337.28956 L 364.06688,337.27826 L 192.34452,165.55591 L 364.07817,290.85653"" style=""fill:#c2c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#c2c2c2;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1550""></path>          <path d=""M 316.93803,337.99666 L 363.37106,337.99666 L 363.35977,337.98537 L 191.63741,166.26301 L 316.93803,337.99666"" style=""fill:#999999;fill-opacity:1;fill-rule:evenodd;stroke:#999999;stroke-width:1.00000036;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"" id=""path1552""></path>       </g>    </g>    <g inkscape:groupmode=""layer"" id=""layer2"" inkscape:label=""podstawowa"" style=""display:inline"">       <path id=""path2122"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85736,266.28355 32.8331,32.8331 -0.016,0 -242.85201,0 210.03488,-32.8331""></path>       <path id=""path5805"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85736,332.94975 32.8331,-32.8331 -0.016,0 -242.85201,0 210.03488,32.8331""></path>       <path id=""path8724"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52353,332.9498 -32.8331,-32.8331 0.016,0 242.85201,0 -210.03488,32.8331""></path>       <path id=""path8726"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52353,266.2836 -32.8331,32.8331 0.016,0 242.85201,0 -210.03488,-32.8331""></path>       <path id=""path8740"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.85734,332.94973 32.8331,-32.8331 0,0.016 0,242.85201 -32.8331,-210.03488""></path>       <path id=""path8742"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 340.52354,332.94973 -32.8331,-32.8331 0,0.016 0,242.85201 32.8331,-210.03488""></path>       <path id=""path8748"" style=""fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline"" d=""m 273.8573,266.28357 32.8331,32.8331 0,-0.016 0,-242.85201 -32.8331,210.03488""></path>       <path id=""path8746"" style=""fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;display:inline;opacity:1"" d=""m 340.5235,266.28357 -32.8331,32.8331 0,-0.016 0,-242.85201 32.8331,210.03488""></path>    </g>    <g inkscape:groupmode=""layer"" id=""layer5"" inkscape:label=""napisy"" style=""display:inline"">       <g transform=""matrix(-0.70710678,0.70710678,-0.70710678,-0.70710678,739.59568,296.41206)"" id=""g3743"">          <path id=""path3745"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3747""></path>       </g>        <g id=""g3715"">          <g id=""g3705"">             <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3687""></path>             <path id=""path3703"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">             </path>          </g>          <g transform=""matrix(0,-1,1,0,6.6734312,606.91101)"" id=""g3709"">             <path id=""path3711"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">             </path>             <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3713""></path>          </g>       </g>       <g id=""g3725"" transform=""matrix(-1,0,0,-1,614.63471,600.00469)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3727""></path>          <path id=""path3729"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>       <g transform=""matrix(0,1,-1,0,609.00414,-7.599862)"" id=""g3731"">          <path id=""path3733"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3735""></path>       </g>       <g id=""g3749"" transform=""matrix(-0.70710678,-0.70710678,0.70710678,-0.70710678,311.06458,730.81323)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3751""></path>          <path id=""path3753"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>       <g transform=""matrix(0.70710678,-0.70710678,0.70710678,0.70710678,-123.33659,302.24244)"" id=""g3755"">          <path id=""path3757"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" id=""path3759""></path>       </g>       <g id=""g3761"" transform=""matrix(0.70710678,0.70710678,-0.70710678,0.70710678,305.47563,-132.15873)"">          <path style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" d=""m 340.86581,139.07293 -11.14703,58.09234 0,0"" id=""path3763""></path>          <path id=""path3765"" d=""m 284.61725,197.16527 -11.14703,-58.09234 0,0"" style=""fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"">          </path>       </g>        <foreignObject x=""326"" y=""97""><span class=""c1-cloze"">NbE</span></foreignObject>       <foreignObject x=""366"" y=""110""><span class=""c2-cloze"">NNE</span></foreignObject>       <foreignObject y=""126"" x=""399""><span class=""c3-cloze"">NEbN</span></foreignObject>       <foreignObject y=""197"" x=""468""><span class=""c4-cloze"">NEbE</span></foreignObject>       <foreignObject y=""235"" x=""468""><span class=""c5-cloze"">ENE</span></foreignObject>       <foreignObject x=""482"" y=""268""><span class=""c6-cloze"">EbN</span></foreignObject>       <foreignObject x=""486"" y=""340""><span class=""c7-cloze"">EbS</span></foreignObject>       <foreignObject x=""486"" y=""380""><span class=""c8-cloze"">ESE</span></foreignObject>       <foreignObject y=""414"" x=""462""><span class=""c9-cloze"">SEbE</span></foreignObject>       <foreignObject y=""462"" x=""392""><span class=""c10-cloze"">SEbS</span></foreignObject>       <foreignObject y=""470"" x=""360""><span class=""c11-cloze"">SSE</span></foreignObject>       <foreignObject x=""336"" y=""501""><span class=""c12-cloze"">SbE</span></foreignObject>       <foreignObject x=""253"" y=""502""><span class=""c13-cloze"">SbW</span></foreignObject>       <foreignObject y=""456"" x=""181""><span class=""c14-cloze"">SWbS</span></foreignObject>       <foreignObject y=""480"" x=""225""><span class=""c15-cloze"">SSW</span></foreignObject>       <foreignObject y=""413"" x=""102""><span class=""c16-cloze"">SWbW</span></foreignObject>       <foreignObject x=""96"" y=""346""><span class=""c17-cloze"">WbS</span></foreignObject>       <foreignObject x=""96"" y=""370""><span class=""c18-cloze"">WSW</span></foreignObject>       <foreignObject x=""90"" y=""273""><span class=""c19-cloze"">WbN</span></foreignObject>       <foreignObject y=""198"" x=""120""><span class=""c20-cloze"">NWbW</span></foreignObject>       <foreignObject y=""230"" x=""110""><span class=""c21-cloze"">WNW</span></foreignObject>       <foreignObject y=""151"" x=""180""><span class=""c22-cloze"">NWbN</span></foreignObject>       <foreignObject x=""210"" y=""120""><span class=""c23-cloze"">NNW</span></foreignObject>       <foreignObject x=""252"" y=""104""><span class=""c24-cloze"">NbW</span></foreignObject>       <foreignObject x=""289"" y=""42""><span class=""c25-cloze"">N</span></foreignObject>       <foreignObject x=""554"" y=""307""><span class=""c26-cloze"">E</span></foreignObject>       <foreignObject x=""297"" y=""575""><span class=""c27-cloze"">S</span></foreignObject>       <foreignObject x=""19"" y=""311""><span class=""c28-cloze"">W</span></foreignObject>       <foreignObject x=""71"" y=""118""><span class=""c29-cloze"">NW</span></foreignObject>       <foreignObject x=""486"" y=""121""><span class=""c30-cloze"">NE</span></foreignObject>       <foreignObject x=""479"" y=""505""><span class=""c31-cloze"">SE</span></foreignObject>       <foreignObject x=""67"" y=""516""><span class=""c32-cloze"">SW</span></foreignObject>    </g> </svg> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}</span>"	acad::log
"<br>---<br>   §§ A ((c:42;::job)) in computing is ((c:43;::a thing to do)), generally ((c:44;::scheduled)), and generally ((c:45;::in the background without intervention)). §<br> §§ ((c:46;::Batch job)) is r((c:47;::oughly synonymous)) to ((c:48;::job)), though it ((c:49;::more strongly implies)) ((c:50;::the scheduled)) and ((c:50;::in the background without intervention)) parts, and also the idea of ((c:51;::there being quite a few things to process)). §<br> §§ ((c:52;::Batch processing)) is ((c:53;::processing (batch) jobs)). §<br> §§ A ((c:54;::set of jobs to be run together)) in ((c:55;::a certain order)) is ((c:56;::a job stream)). §<br> §§ A ((c:57;::job)) in computing ((c:59;::consists of)) ((c:58;::one or more tasks/steps)). §<br> §§ A ((c:60;::job scheduler)) is an application for ((c:61;::controlling)) ((c:61;::the scheduling)) of ((c:61;::the execution)) of ((c:62;::jobs)) (which is ((c:63;::unattended)), ((c:63;::in the&nbsp; background))). §<br> §§ The ((c:64;::job queue)) is ((c:65;::where tasks are put)), and is what ((c:66;::the job scheduler manages)). §<br> ===<br>  <br>---<br>   §§ ((c:67;::cron)) and ((c:67;::at)) are ((c:68;::job schedulers)) for unix-likes. §<br> §§ ((c:69;::cron)) is for ((c:70;::scheduling repeated tasks)), while ((c:69;::at)) is for ((c:70;::scheduling one-time tasks)). §<br> ===<br>  <br>---<br> §§ the ((c:71;::job scheduler cron)) is ((c:72;::configured by)) ((c:73;::a crontab file)). §<br> §§ the ((c:74;::crontab)) is interacted with by ((c:75;::the crontab command)). §<br> §§ In cron, ((c:76;::each job)) is defined by ((c:77;::a line in the crontab)), which consists of ((c:78;::times to execute a command)), and ((c:79;::a command itself)). §<br> <pre><code>crontab-line ::= (((c:95;::&lt;time-specifier&gt; &lt;time-specifier&gt; &lt;time-specifier&gt; &lt;time-specifier&gt; &lt;time-specifier&gt;))((c:96;::|&lt;time-keyword&gt;))) ((c:97;::&lt;command&gt;)) ((c:98;::time-specifier)) ::= ((c:93;::* ||)) ((c:94;::&lt;time-list&gt;)) ((c:99;::time-list)) ::= ((c:91;::&lt;time-item&gt;))((c:92;::{,&lt;time-item&gt;})) ((c:100;::time-item)) ::= ((c:88;::&lt;time&gt;-&lt;time&gt;))((c:89;::||(&lt;time&gt;|*)/&lt;time&gt;))((c:90;::||&lt;time&gt;))</code></pre> ===<br>  <table class=""cloze-group hide-if-inactive"">   <thead>     <tr><th>cron time item</th>     <th>refers to</th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:36;::*))</td> <td>((c:37;::all relevant time units))</td></tr> <tr><td>((c:38;::&lt;n&gt;-&lt;m&gt;))</td> <td>((c:39;::specifies a range of times n-m))</td></tr> <tr><td>((c:40;::*/&lt;n&gt;))</td> <td>((c:41;::every nth unit))</td></tr>   </tbody> </table>  <table class=""compact"">   <tbody>     <tr>       <td>*</td>       <td>*</td>       <td>*</td>       <td>*</td>       <td>*</td>       <td>&lt;command to execute&gt;</td>     </tr>     <tr>       <td>((c:36;s:all;::minute (0-59)))</td>       <td>((c:37;s:all;::hour (0-23)))</td>       <td>((c:33;s:all;::day of month (1-31)))</td>       <td>((c:34;s:all;::month (1-12)))</td>       <td>((c:35;s:all;::day of week (0-6) (Sunday is 0)))</td>     </tr>   </tbody> </table>  <br>---<br>   §§ By default, ((c:80;::the output)) of ((c:81;::a cron job)) gets ((c:82;::sent to your email)). §<br> §§ To ((c:83;::change the email)) ((c:84;::cron output gets sent to)), specify ((c:85;::MAILTO=somemail.)) §<br> §§ To ((c:86;::change where)) cron output ((c:86;::goes)), ((c:87;::redirect it as per usual)). §<br> ===<br>  <table class=""cloze-group hide-if-inactive"">   <thead>     <tr><th>crontab job line example</th>     <th>does</th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:1;::<code>@reboot [command]</code>))</td> <td>((c:2;::every time your computer reboots))</td></tr> <tr><td>((c:3;::<code>30 2 * * * [command]</code>))</td> <td>((c:4;::every day at 2:30 am))</td></tr> <tr><td>((c:5;::<code>15 * * * * [command]</code>))</td> <td>((c:6;::every hour (at :15)))</td></tr> <tr><td>((c:7;::<code>0,10,20 * * * * [command]</code>))</td> <td>((c:8;::every hour at :00, :10, :20))</td></tr> <tr><td>((c:9;::<code>0 5-10 * * * [command]</code>))</td> <td>((c:10;::every day at every hour between 5 and 10))</td></tr> <tr><td>((c:11;::<code>0 0 2 * * [command]</code>))</td> <td>((c:12;::every month on the 2nd at 00:00))</td></tr> <tr><td>((c:13;::<code>0 * * * 1 [command]</code>))</td> <td>((c:14;::every hour, but only on mondays))</td></tr> <tr><td>((c:15;::<code>0 * * * * [command]</code>))</td> <td>((c:16;::every hour (at :00)))</td></tr> <tr><td>((c:17;::<code>*/5 * * * * [command]</code>))</td> <td>((c:18;::12 times an hour (every 5 minutes)))</td></tr> <tr><td>((c:19;::<code>* * * * * [command]</code>))</td> <td>((c:20;::every minute always))</td></tr>   </tbody> </table>  <table class=""cloze-group hide-if-inactive"">   <thead>     <tr><th><code>crontab</code> option</th>     <th>does</th>   </tr></thead>   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:21;::<code>-r</code>))</td> <td>((c:22;::empty the crontab))</td></tr> <tr><td>((c:23;::<code>-l</code>))</td> <td>((c:24;::contents of crontab))</td></tr> <tr><td>((c:25;::<code>-e</code>))</td> <td>((c:26;::edit the crontab))</td></tr>   </tbody> </table>  <table class=""cloze-group hide-if-inactive"">   <tbody class=""cloze-group-children hide-if-inactive-children"">     <tr><td>((c:27;::<code>atrm</code>))</td> <td>((c:28;::remove at jobs))</td></tr> <tr><td>((c:29;::<code>atq</code>))</td> <td>((c:30;::list at jobs))</td></tr> <tr><td>((c:31;::<code>at</code>))</td> <td>((c:32;::add an at job))</td></tr>   </tbody> </table>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}</span>"	acad::inf
"<div class=""cloze-group-children hide-if-inactive-children""><p>A <span class=""c1-cloze"">rule of inference/inference rule</span> is a <span class=""c2-cloze"">Schlussregel</span> in german.</p> <p>A <span class=""c3-cloze"">rule of inference/inference rule</span>&nbsp;is something that <span class=""c4-cloze c5-scr"">takes premises</span> and <span class=""c5-cloze c4-scr"">returns a conclusion</span>. More generally, it is a function from sets of formulae to other formulae. It is sometimes restricted to valid inference rules, and sometimes not.</p></div> The conclusion in a rule of inference/inference rule or argument is often indicated by {{c1::∴}}. <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}</span>"	acad::log
For something to be {{c1::truth-functional}} if {{c2::the truth of the resulting formula}} is {{c3::dependent only}} on {{c4::the truth of the constituent parts.}}	acad::log
"<p class=""cloze-group hide-if-inactive"">A <span class=""c1-cloze"">logic</span> is a <span class=""c2-cloze"">formal system.</span> </p><div class=""cloze-group hide-if-inactive""><span class=""c3-cloze"">Formal systems</span> have roughly the following structure: <pre><code><span class=""c4-cloze"">A formal language</span> <span class=""c5-cloze"">An inference system</span>   <span class=""c6-cloze"">A set of axioms</span>   <span class=""c7-cloze"">A set of inference rules</span> <span class=""c8-cloze"">A semantics</span></code></pre></div> <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}</span>"	acad::log
UNRESOLVED: First-order logic—also known as {{c1::predicate logic}}, quantificational logic, and first-order predicate calculus  the logical form of an argument is called argument form.	acad::log
"<table class=""blank-canvas"">   <tbody>     <tr>       <td colspan=""7"">         <table>           <tbody>             <tr><td>depth</td> <td><span class=""c1-cloze"">0</span></td></tr>             <tr><td>height</td> <td><span class=""c2-cloze"">3</span></td></tr>           </tbody>         </table>       </td>     </tr>     <tr>       <td colspan=""3"">         <table>           <tbody>             <tr><td>depth</td> <td><span class=""c3-cloze"">1</span></td></tr>             <tr><td>height</td> <td><span class=""c4-cloze"">1</span></td></tr>           </tbody>         </table>       </td>       <td></td>       <td colspan=""3"">          <table>           <tbody>             <tr><td>depth</td> <td><span class=""c5-cloze"">1</span></td></tr>             <tr><td>height</td> <td><span class=""c6-cloze"">2</span></td></tr>           </tbody>         </table>       </td>     </tr>     <tr>       <td>         <table>           <tbody>             <tr><td>depth</td> <td><span class=""c7-cloze"">2</span></td></tr>             <tr><td>height</td> <td><span class=""c8-cloze"">0</span></td></tr>           </tbody>         </table>       </td>       <td></td>       <td>         <table>           <tbody>             <tr><td>depth</td> <td><span class=""c9-cloze"">2</span></td></tr>             <tr><td>height</td> <td><span class=""cs0-cloze"">0</span></td></tr>           </tbody>         </table>       </td>       <td></td>       <td></td>       <td></td>       <td>         <table>           <tbody>             <tr><td>depth</td> <td><span class=""cs1-cloze"">2</span></td></tr>             <tr><td>height</td> <td><span class=""cs2-cloze"">1</span></td></tr>           </tbody>         </table>       </td>     </tr>     <tr>       <td colspan=""5""></td>       <td>         <table>           <tbody>             <tr><td>depth</td> <td><span class=""cs3-cloze"">3</span></td></tr>             <tr><td>height</td> <td><span class=""cs4-cloze"">0</span></td></tr>           </tbody>         </table>       </td>     </tr>   </tbody> </table>  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}</span>"	acad::inf
"#! Who Lives, Who Dies, Who Tells Your Story (extract of beginning)  !&gt; ⟮c1;sb;Let me tell you what I wish I’d known ⟯ !&gt; ⟮c+;sb;When I was young and dreamed of glory ⟯ !&gt; ⟮c+;sb;You have no control:⟯ !&gt; ⟮c+;sb;Who lives ⟯ !&gt; ⟮c+;sb;Who dies ⟯ !&gt; ⟮c+;sb;Who tells your story?⟯  #! Non-Stop (extract)  !&gt; ⟮c7;sb;Alexander joins forces with James Madison and John Jay to write a series⟯ !&gt; ⟮c+;sb;of essays defending the new United States Constitution,⟯ !&gt; ⟮c+;sb;entitled The Federalist Papers.⟯ !&gt; ⟮c+;sb;The plan was to write a total of twenty-five essays,⟯ !&gt; ⟮c+;sb;the work divided evenly among the three men. In the end,⟯ !&gt; ⟮c+;sb;they wrote eighty-five essays,⟯ !&gt; ⟮c+;sb;in the span of six months. John Jay got sick after writing five.⟯ !&gt; ⟮c+;sb;James Madison wrote twenty-nine. Hamilton wrote the other fifty-one!⟯  #! Alexander Hamilton  !AARON BURR !&gt; ⟮c15;sb;How does a bastard, orphan, son of a whore and a⟯ !&gt; ⟮c+;sb;Scotsman, dropped in the middle of a forgotten⟯ !&gt; ⟮c+;sb;Spot in the Caribbean by Providence, impoverished, in squalor⟯ !&gt; ⟮c+;sb;Grow up to be a hero and a scholar?⟯  !JOHN LAURENS !&gt; ⟮c+;sb;The ten-dollar Founding Father without a father⟯ !&gt; ⟮c+;sb;Got a lot farther by workin’ a lot harder⟯ !&gt; ⟮c+;sb;By bein’ a lot smarter⟯ !&gt; ⟮c+;sb;By bein’ a self-starter⟯ !&gt; ⟮c+;sb;By fourteen, they placed him in charge of a trading charter⟯  !THOMAS JEFFERSON !&gt; ⟮c+;sb;And every day while slaves were being slaughtered and carted⟯ !&gt; ⟮c+;sb;Away across the waves, he struggled and kept his guard up⟯ !&gt; ⟮c+;sb;Inside, he was longing for something to be a part of⟯ !&gt; ⟮c+;sb;The brother was ready to beg, steal, borrow, or barter⟯  !JAMES MADISON !&gt; ⟮c+;sb;Then a hurricane came, and devastation reigned⟯ !&gt; ⟮c+;sb;Our man saw his future drip, drippin’ down the drain⟯ !&gt; ⟮c+;sb;Put a pencil to his temple, connected it to his brain⟯ !&gt; ⟮c+;sb;And he wrote his first refrain, a testament to his pain⟯  !BURR !&gt; ⟮c+;sb;Well the word got around, they said, “This kid is insane, man!”⟯ !&gt; ⟮c+;sb;Took up a collection just to send him to the mainland⟯ !&gt; ⟮c+;sb;“Get your education, don’t forget from whence you came, and⟯ !&gt; ⟮c+;sb;The world’s gonna know your name! What’s your name, man?""⟯  !ALEXANDER HAMILTON !&gt; ⟮c+;sb;Alexander Hamilton⟯ !&gt; ⟮c+;sb;My name is Alexander Hamilton⟯ !&gt; ⟮c+;sb;And there’s a million things I haven’t done⟯ !&gt; ⟮c+;sb;But just you wait, just you wait⟯  !ELIZA HAMILTON !&gt; ⟮c+;sb;When he was ten, his father split, full of it, debt-ridden⟯ !&gt; ⟮c+;sb;Two years later, see Alex and his mother, bed-ridden⟯ !&gt; ⟮c+;sb;Half-dead, sittin’ in their own sick⟯ !&gt; ⟮c+;sb;The scent thick⟯  !COMPANY !&gt; ⟮c+;sb;And Alex got better but his mother went quick⟯  !GEORGE WASHINGTON and (COMPANY) !&gt; ⟮c+;sb;Moved in with a cousin, the cousin committed suicide⟯ !&gt; ⟮c+;sb;Left him with nothin’ but ruined pride, somethin’ new inside⟯ !&gt; ⟮c+;sb;A voice saying ""(Alex) you gotta fend for yourself""⟯ !&gt; ⟮c+;sb;He started retreatin’ and readin’ every treatise on the shelf⟯  !BURR and (COMPANY) !&gt; ⟮c+;sb;There would’ve been nothin’ left to do⟯ !&gt; ⟮c+;sb;For someone less astute⟯ !&gt; ⟮c+;sb;He would’ve been dead or destitute⟯ !&gt; ⟮c+;sb;Without a cent of restitution⟯ !&gt; ⟮c+;sb;Started workin’, clerkin’ for his late mother’s landlord⟯ !&gt; ⟮c+;sb;Tradin’ sugar cane and rum and other things he can’t afford⟯ !&gt; ⟮c+;sb;(Scammin’) for every book he can get his hands on⟯ !&gt; ⟮c+;sb;(Plannin’) for the future, see him now as he stands on (oooh⟯) !&gt; ⟮c+;sb;The bow of a ship headed for a new land⟯ !&gt; ⟮c+;sb;In New York you can be a new man⟯  !COMPANY and (HAMILTON) !&gt; ⟮c+;sb;In New York you can be a new man (Just you wait⟯) !&gt; ⟮c+;sb;In New York you can be a new man (Just you wait⟯) !&gt; ⟮c+;sb;In New York you can be a new man⟯  !WOMEN !&gt; ⟮c+;sb;In New York⟯  !MEN !&gt; ⟮c+;sb;New York⟯  !HAMILTON !&gt; ⟮c+;sb;Just you wait⟯  !COMPANY and (COMPANY) !&gt; ⟮c+;sb;Alexander Hamilton (Alexander Hamilton⟯) !&gt; ⟮c+;sb;We are waiting in the wings for you (waiting in the wings for you⟯) !&gt; ⟮c+;sb;You could never back down⟯ !&gt; ⟮c+;sb;You never learned to take your time⟯ !&gt; ⟮c+;sb;Oh, Alexander Hamilton (Alexander Hamilton⟯) !&gt; ⟮c+;sb;When America sings for you⟯ !&gt; ⟮c+;sb;Will they know what you overcame?⟯ !&gt; ⟮c+;sb;Will they know you rewrote the game?⟯ !&gt; ⟮c+;sb;The world will never be the same, oh⟯  !BURR and (COMPANY) !&gt; ⟮c+;sb;The ship is in the harbor now, see if you can spot him(Just you wait⟯) !&gt; ⟮c+;sb;Another immigrant comin’ up from the bottom(Just you wait⟯) !&gt; ⟮c+;sb;His enemies destroyed his rep, America forgot him⟯  !MULLIGAN/MADISON AND LAFAYETTE/JEFFERSON !&gt; ⟮c+;sb;We fought with him⟯  !LAURENS/PHILLIP !&gt; ⟮c+;sb;Me? I died for him⟯  !WASHINGTON !&gt; ⟮c+;sb;Me? I trusted him⟯  !ANGELICA SCHUYLER, ELIZA, MARIA REYNOLDS !&gt; ⟮c+;sb;Me? I loved him⟯  !BURR !&gt; ⟮c+;sb;And me? I’m the damn fool that shot him⟯  !COMPANY !&gt; ⟮c+;sb;There’s a million things I haven’t done⟯ !&gt; ⟮c+;sb;But just you wait⟯  !BURR !&gt; ⟮c+;sb;What’s your name, man?⟯  !HAMILTON &amp; COMPANY !&gt; ⟮c+;sb;Alexander Hamilton!⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}</span>"	misc::text-by-heart::hamilton
"#! To be or not to be  !&gt; ⟮c1;sb;To be, or not to be, that is the question:⟯ !&gt; ⟮c2;sb;Whether 'tis nobler in the mind to suffer⟯ !&gt; ⟮c3;sb;The slings and arrows of outrageous fortune,⟯ !&gt; ⟮c4;sb;Or to take Arms against a Sea of troubles,⟯ !&gt; ⟮c5;sb;And by opposing end them: to die, to sleep⟯ !&gt; ⟮c6;sb;No more; and by a sleep, to say we end⟯ !&gt; ⟮c7;sb;The heart-ache, and the thousand natural shocks⟯ !&gt; ⟮c8;sb;That Flesh is heir to? 'Tis a consummation⟯ !&gt; ⟮c9;sb;Devoutly to be wished. To die, to sleep,⟯ !&gt; ⟮c10;sb;To sleep, perchance to Dream; aye, there's the rub,⟯ !&gt; ⟮c11;sb;For in that sleep of death, what dreams may come,⟯ !&gt; ⟮c12;sb;When we have shuffled off this mortal coil,⟯ !&gt; ⟮c13;sb;Must give us pause. There's the respect⟯ !&gt; ⟮c14;sb;That makes Calamity of so long life:⟯ !&gt; ⟮c15;sb;For who would bear the Whips and Scorns of time,⟯ !&gt; ⟮c16;sb;The Oppressor's wrong, the proud man's Contumely,⟯ !&gt; ⟮c17;sb;The pangs of dispised Love, the Law’s delay,⟯ !&gt; ⟮c18;sb;The insolence of Office, and the spurns⟯ !&gt; ⟮c19;sb;That patient merit of th'unworthy takes,⟯ !&gt; ⟮c20;sb;When he himself might his Quietus make⟯ !&gt; ⟮c21;sb;With a bare Bodkin? Who would Fardels bear, [F: these Fardels]⟯ !&gt; ⟮c22;sb;To grunt and sweat under a weary life,⟯ !&gt; ⟮c23;sb;But that the dread of something after death,⟯ !&gt; ⟮c24;sb;The undiscovered country, from whose bourn⟯ !&gt; ⟮c25;sb;No traveller returns, puzzles the will,⟯ !&gt; ⟮c26;sb;And makes us rather bear those ills we have,⟯ !&gt; ⟮c27;sb;Than fly to others that we know not of?⟯ !&gt; ⟮c28;sb;Thus conscience does make cowards of us all,⟯ !&gt; ⟮c29;sb;And thus the native hue of Resolution⟯ !&gt; ⟮c30;sb;Is sicklied o'er, with the pale cast of Thought,⟯ !&gt; ⟮c31;sb;And enterprises of great pitch and moment, [F: pith]⟯ !&gt; ⟮c32;sb;With this regard their Currents turn awry, [F: away]⟯ !&gt; ⟮c33;sb;And lose the name of Action.⟯  #! Thou knowst the mask of night...  !&gt; ⟮c34;sb;Thou know’st the mask of night is on my face,⟯ !&gt; ⟮c35;sb;Else would a maiden blush bepaint my cheek⟯ !&gt; ⟮c36;sb;For that which thou hast heard me speak tonight.⟯ !&gt; ⟮c37;sb;Fain would I dwell on form. Fain, fain deny⟯ !&gt; ⟮c38;sb;What I have spoke. But farewell compliment!⟯ !&gt; ⟮c39;sb;Dost thou love me? I know thou wilt say “ay,”⟯ !&gt; ⟮c40;sb;And I will take thy word. Yet if thou swear’st⟯ !&gt; ⟮c41;sb;Thou mayst prove false. At lovers' perjuries,⟯ !&gt; ⟮c42;sb;They say, Jove laughs. O gentle Romeo,⟯ !&gt; ⟮c43;sb;If thou dost love, pronounce it faithfully.⟯ !&gt; ⟮c44;sb;Or if thou think’st I am too quickly won,⟯ !&gt; ⟮c45;sb;I’ll frown and be perverse and say thee nay,⟯ !&gt; ⟮c46;sb;So thou wilt woo. But else, not for the world.⟯ !&gt; ⟮c47;sb;In truth, fair Montague, I am too fond,⟯ !&gt; ⟮c48;sb;And therefore thou mayst think my 'havior light.⟯ !&gt; ⟮c49;sb;But trust me, gentleman, I’ll prove more true⟯ !&gt; ⟮c50;sb;Than those that have more coying to be strange.⟯ !&gt; ⟮c51;sb;I should have been more strange, I must confess,⟯ !&gt; ⟮c52;sb;But that thou overheard’st, ere I was 'ware,⟯ !&gt; ⟮c53;sb;My true love’s passion. Therefore pardon me,⟯ !&gt; ⟮c54;sb;105And not impute this yielding to light love,⟯ !&gt; ⟮c55;sb;Which the dark night hath so discovered.⟯  #! The Merchant of Venice: Act III, Scene 1, Shylock Monologue  !&gt; ⟮c56;sb;To bait fish withal: if it will feed nothing else,⟯ !&gt; ⟮c57;sb;it will feed my revenge. He hath disgraced me, ⟯ !&gt; ⟮c58;sb;and hindered me half a million; laughed at my losses,⟯ !&gt; ⟮c59;sb;mocked at my gains, scorned my nation, ⟯ !&gt; ⟮c60;sb;thwarted my bargains, cooled my friends, ⟯ !&gt; ⟮c61;sb;heated mine enemies; and what's his reason? ⟯ !&gt; ⟮c62;sb;I am a Jew. Hath not a Jew eyes? ⟯ !&gt; ⟮c63;sb;hath not a Jew hands, organs, dimensions, senses, affections, passions? ⟯ !&gt; ⟮c64;sb;fed with the same food, hurt with the same weapons, ⟯ !&gt; ⟮c65;sb;subject to the same diseases, healed by the same means,⟯ !&gt; ⟮c66;sb;warmed and cooled by the same winter and summer, as⟯ !&gt; ⟮c67;sb;a Christian is? If you prick us, do we not bleed?⟯ !&gt; ⟮c68;sb;if you tickle us, do we not laugh? ⟯ !&gt; ⟮c69;sb;if you poison us, do we not die? ⟯ !&gt; ⟮c70;sb;and if you wrong us, shall we not revenge? ⟯ !&gt; ⟮c71;sb;If we are like you in the rest, we will resemble you in that. ⟯ !&gt; ⟮c72;sb;If a Jew wrong a Christian, what is his humility? Revenge. ⟯ !&gt; ⟮c73;sb;If a Christian wrong a Jew, what should his sufferance be, ⟯ !&gt; ⟮c74;sb;by Christian example? Why, revenge. ⟯ !&gt; ⟮c75;sb;The villany you teach me, I will execute, ⟯ !&gt; ⟮c76;sb;and it shall go hard but I will better the instruction.⟯  #! The Merchant of Venice, Act 1 Scene 3, Shylocks Monologue  !&gt; ⟮c77;sb;Signior Antonio, many a time and oft⟯ !&gt; ⟮c78;sb;In the Rialto you have rated me⟯ !&gt; ⟮c79;sb;About my moneys and my usances:⟯ !&gt; ⟮c80;sb;Still have I borne it with a patient shrug,⟯ !&gt; ⟮c81;sb;For sufferance is the badge of all our tribe.⟯ !&gt; ⟮c82;sb;You call me misbeliever, cut-throat dog,⟯ !&gt; ⟮c83;sb;And spit upon my Jewish gaberdine,⟯ !&gt; ⟮c84;sb;And all for use of that which is mine own.⟯ !&gt; ⟮c85;sb;Well then, it now appears you need my help:⟯ !&gt; ⟮c86;sb;Go to, then; you come to me, and you say⟯ !&gt; ⟮c87;sb;'Shylock, we would have moneys:' you say so;⟯ !&gt; ⟮c88;sb;You, that did void your rheum upon my beard⟯ !&gt; ⟮c89;sb;And foot me as you spurn a stranger cur⟯ !&gt; ⟮c90;sb;Over your threshold: moneys is your suit⟯ !&gt; ⟮c91;sb;What should I say to you? Should I not say⟯ !&gt; ⟮c92;sb;'Hath a dog money? is it possible⟯ !&gt; ⟮c93;sb;A cur can lend three thousand ducats?' Or⟯ !&gt; ⟮c94;sb;Shall I bend low and in a bondman's key,⟯ !&gt; ⟮c95;sb;With bated breath and whispering humbleness, Say this;⟯ !&gt; ⟮c96;sb;'Fair sir, you spit on me on Wednesday last;⟯ !&gt; ⟮c97;sb;You spurn'd me such a day; another time⟯ !&gt; ⟮c98;sb;You call'd me dog; and for these courtesies⟯ !&gt; ⟮c99;sb;I'll lend you thus much moneys'?⟯  #! Tomorrow, and tomorrow, and tomorrow (from Macbeth, spoken by Macbeth)  !&gt; ⟮c100;sb;Tomorrow, and tomorrow, and tomorrow,⟯ !&gt; ⟮c101;sb;Creeps in this petty pace from day to day,⟯ !&gt; ⟮c102;sb;To the last syllable of recorded time;⟯ !&gt; ⟮c103;sb;And all our yesterdays have lighted fools⟯ !&gt; ⟮c104;sb;The way to dusty death. Out, out, brief candle!⟯ !&gt; ⟮c105;sb;Life's but a walking shadow, a poor player,⟯ !&gt; ⟮c106;sb;That struts and frets his hour upon the stage,⟯ !&gt; ⟮c107;sb;And then is heard no more. It is a tale⟯ !&gt; ⟮c108;sb;Told by an idiot, full of sound and fury,⟯ !&gt; ⟮c109;sb;Signifying nothing.⟯  #! Once more unto the breach!  !&gt; ⟮c110;sb;Once more unto the breach, dear friends, once more;⟯ !&gt; ⟮c111;sb;Or close the wall up with our English dead.⟯ !&gt; ⟮c112;sb;In peace there's nothing so becomes a man⟯ !&gt; ⟮c113;sb;As modest stillness and humility:⟯ !&gt; ⟮c114;sb;But when the blast of war blows in our ears,⟯ !&gt; ⟮c115;sb;Then imitate the action of the tiger;⟯ !&gt; ⟮c116;sb;Stiffen the sinews, summon up the blood,⟯ !&gt; ⟮c117;sb;Disguise fair nature with hard-favour'd rage;⟯ !&gt; ⟮c118;sb;Then lend the eye a terrible aspect;⟯ !&gt; ⟮c119;sb;Let pry through the portage of the head⟯ !&gt; ⟮c120;sb;Like the brass cannon; let the brow o'erwhelm it⟯ !&gt; ⟮c121;sb;As fearfully as doth a galled rock⟯ !&gt; ⟮c122;sb;O'erhang and jutty his confounded base,⟯ !&gt; ⟮c123;sb;Swill'd with the wild and wasteful ocean.⟯ !&gt; ⟮c124;sb;Now set the teeth and stretch the nostril wide,⟯ !&gt; ⟮c125;sb;Hold hard the breath and bend up every spirit⟯ !&gt; ⟮c126;sb;To his full height. On, on, you noblest English.⟯ !&gt; ⟮c127;sb;Whose blood is fet from fathers of war-proof!⟯ !&gt; ⟮c128;sb;Fathers that, like so many Alexanders,⟯ !&gt; ⟮c129;sb;Have in these parts from morn till even fought⟯ !&gt; ⟮c130;sb;And sheathed their swords for lack of argument:⟯ !&gt; ⟮c131;sb;Dishonour not your mothers; now attest⟯ !&gt; ⟮c132;sb;That those whom you call'd fathers did beget you.⟯ !&gt; ⟮c133;sb;Be copy now to men of grosser blood,⟯ !&gt; ⟮c134;sb;And teach them how to war. And you, good yeoman,⟯ !&gt; ⟮c135;sb;Whose limbs were made in England, show us here⟯ !&gt; ⟮c136;sb;The mettle of your pasture; let us swear⟯ !&gt; ⟮c137;sb;That you are worth your breeding; which I doubt not;⟯ !&gt; ⟮c138;sb;For there is none of you so mean and base,⟯ !&gt; ⟮c139;sb;That hath not noble lustre in your eyes.⟯ !&gt; ⟮c140;sb;I see you stand like greyhounds in the slips,⟯ !&gt; ⟮c141;sb;Straining upon the start. The game's afoot:⟯ !&gt; ⟮c142;sb;Follow your spirit, and upon this charge⟯ !&gt; ⟮c143;sb;Cry 'God for Harry, England, and Saint George!'⟯  #! Do Not Go Gentle into that Good Night  !&gt; ⟮c144;sb;Do not go gentle into that good night⟯ !&gt; ⟮c145;sb;Old age should burn and rave at close of day;⟯ !&gt; ⟮c146;sb;Rage, rage against the dying of the light.⟯ !&gt; ⟮c147;sb;Though wise men at their end know dark is right,⟯ !&gt; ⟮c148;sb;Because their words had forked no lightning they⟯ !&gt; ⟮c149;sb;Do not go gentle into that good night.⟯ !&gt; ⟮c150;sb;Good men, the last wave by, crying how bright⟯ !&gt; ⟮c151;sb;Their frail deeds might have danced in a green bay,⟯ !&gt; ⟮c152;sb;Rage, rage against the dying of the light.⟯ !&gt; ⟮c153;sb;Wild men who caught and sang the sun in flight,⟯ !&gt; ⟮c154;sb;And learn, too late, they grieved it on its way,⟯ !&gt; ⟮c155;sb;Do not go gentle into that good night.⟯ !&gt; ⟮c156;sb;Grave men, near death, who see with blinding sight⟯ !&gt; ⟮c157;sb;Blind eyes could blaze like meteors and be gay,⟯ !&gt; ⟮c158;sb;Rage, rage against the dying of the light.⟯ !&gt; ⟮c159;sb;And you, my father, there on the sad height,⟯ !&gt; ⟮c160;sb;Curse, bless, me now with your fierce tears, I pray.⟯ !&gt; ⟮c161;sb;Do not go gentle into that good night.⟯ !&gt; ⟮c162;sb;Rage, rage against the dying of the light.⟯  #! Friends, Romans, Countrymen  !&gt; ⟮c163;sb;Friends, Romans, countrymen, lend me your ears;⟯ !&gt; ⟮c164;sb;I come to bury Caesar, not to praise him.⟯ !&gt; ⟮c165;sb;The evil that men do lives after them;⟯ !&gt; ⟮c166;sb;The good is oft interred with their bones;⟯ !&gt; ⟮c167;sb;So let it be with Caesar. The noble Brutus⟯ !&gt; ⟮c168;sb;Hath told you Caesar was ambitious:⟯ !&gt; ⟮c169;sb;If it were so, it was a grievous fault,⟯ !&gt; ⟮c170;sb;And grievously hath Caesar answer’d it.⟯ !&gt; ⟮c171;sb;Here, under leave of Brutus and the rest–⟯ !&gt; ⟮c172;sb;For Brutus is an honourable man;⟯ !&gt; ⟮c173;sb;So are they all, all honourable men–⟯ !&gt; ⟮c174;sb;Come I to speak in Caesar’s funeral.⟯ !&gt; ⟮c175;sb;He was my friend, faithful and just to me:⟯ !&gt; ⟮c176;sb;But Brutus says he was ambitious;⟯ !&gt; ⟮c177;sb;And Brutus is an honourable man.⟯ !&gt; ⟮c178;sb;He hath brought many captives home to Rome⟯ !&gt; ⟮c179;sb;Whose ransoms did the general coffers fill:⟯ !&gt; ⟮c180;sb;Did this in Caesar seem ambitious?⟯ !&gt; ⟮c181;sb;When that the poor have cried, Caesar hath wept:⟯ !&gt; ⟮c182;sb;Ambition should be made of sterner stuff:⟯ !&gt; ⟮c183;sb;Yet Brutus says he was ambitious;⟯ !&gt; ⟮c184;sb;And Brutus is an honourable man.⟯ !&gt; ⟮c185;sb;You all did see that on the Lupercal⟯ !&gt; ⟮c186;sb;I thrice presented him a kingly crown,⟯ !&gt; ⟮c187;sb;Which he did thrice refuse: was this ambition?⟯ !&gt; ⟮c188;sb;Yet Brutus says he was ambitious;⟯ !&gt; ⟮c189;sb;And, sure, he is an honourable man.⟯ !&gt; ⟮c190;sb;I speak not to disprove what Brutus spoke,⟯ !&gt; ⟮c191;sb;But here I am to speak what I do know.⟯ !&gt; ⟮c192;sb;You all did love him once, not without cause:⟯ !&gt; ⟮c193;sb;What cause withholds you then, to mourn for him?⟯ !&gt; ⟮c194;sb;O judgment! thou art fled to brutish beasts,⟯ !&gt; ⟮c195;sb;And men have lost their reason. Bear with me;⟯ !&gt; ⟮c196;sb;My heart is in the coffin there with Caesar,⟯ !&gt; ⟮c197;sb;And I must pause till it come back to me.⟯  #! tidbits  !&gt; ⟮c198;It is too rash, too unadvised, too sudden,⟯ ⟮c199;Too like the lightning, which doth cease to be⟯ ⟮c200;Ere one can say “It lightens.”⟯    !&gt; ⟮c201;My bounty is as boundless as the sea,⟯  ⟮c202;My love as deep. The more I give to thee,⟯ ⟮c203;The more I have, for both are infinite.⟯    !&gt; Marc Anthony after Caesars murder: Cry... ⟮c204;'Havoc!,' and let slip the dogs of war.⟯    !&gt; ⟮c205;It was the nightingale, and not the lark⟯, ⟮c206;that pierced the fearful hollow of thine ear;⟯    !&gt; ⟮c207;There are more things in heaven and earth, Horatio,⟯ ⟮c208;than are dreamt of in your philosophy⟯.   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}{{c190::}}{{c191::}}{{c192::}}{{c193::}}{{c194::}}{{c195::}}{{c196::}}{{c197::}}{{c198::}}{{c199::}}{{c200::}}{{c201::}}{{c202::}}{{c203::}}{{c204::}}{{c205::}}{{c206::}}{{c207::}}{{c208::}}</span>"	misc::text-by-heart::shakespeare
"#! de  ##! Prometheus (Goethe)  !&gt; ⟮c1;sb;Bedecke deinen Himmel, Zeus,⟯ !&gt; ⟮c2;sb;Mit Wolkendunst,⟯ !&gt; ⟮c3;sb;Und übe, dem Knaben gleich,⟯ !&gt; ⟮c4;sb;Der Disteln köpft,⟯ !&gt; ⟮c5;sb;An Eichen dich und Bergeshöhn;⟯ !&gt; ⟮c6;sb;Musst mir meine Erde⟯ !&gt; ⟮c7;sb;Doch lassen stehn⟯ !&gt; ⟮c8;sb;Und meine Hütte, die du nicht gebaut,⟯ !&gt; ⟮c9;sb;Und meinen Herd,⟯ !&gt; ⟮c10;sb;Um dessen Glut⟯ !&gt; ⟮c11;sb;Du mich beneidest.⟯  !&gt; ⟮c12;sb;Ich kenne nichts Ärmeres⟯ !&gt; ⟮c13;sb;Unter der Sonn' als euch, Götter!⟯ !&gt; ⟮c14;sb;Ihr nähret kümmerlich⟯ !&gt; ⟮c15;sb;Von Opfersteuern⟯ !&gt; ⟮c16;sb;Und Gebetshauch⟯ !&gt; ⟮c17;sb;Eure Majestät,⟯ !&gt; ⟮c18;sb;Und darbtet, wären⟯ !&gt; ⟮c19;sb;Nicht Kinder und Bettler⟯ !&gt; ⟮c20;sb;Hoffnungsvolle Toren.⟯  !&gt; ⟮c21;sb;Da ich ein Kind war,⟯ !&gt; ⟮c22;sb;Nicht wusste wo aus noch ein,⟯ !&gt; ⟮c23;sb;Kehrt' ich mein verirrtes Auge⟯ !&gt; ⟮c24;sb;Zur Sonne, als wenn drüber wär'⟯ !&gt; ⟮c25;sb;Ein Ohr, zu hören meine Klage,⟯ !&gt; ⟮c26;sb;Ein Herz, wie mein's,⟯ !&gt; ⟮c27;sb;Sich des Bedrängten zu erbarmen.⟯  !&gt; ⟮c28;sb;Wer half mir⟯ !&gt; ⟮c29;sb;Wider der Titanen Übermut?⟯ !&gt; ⟮c30;sb;Wer rettete vom Tode mich,⟯ !&gt; ⟮c31;sb;Von Sklaverei?⟯ !&gt; ⟮c32;sb;Hast du nicht alles selbst vollendet,⟯ !&gt; ⟮c33;sb;Heilig glühend Herz?⟯ !&gt; ⟮c34;sb;Und glühtest jung und gut,⟯ !&gt; ⟮c35;sb;Betrogen, Rettungsdank⟯ !&gt; ⟮c36;sb;Dem Schlafenden da droben?⟯  !&gt; ⟮c37;sb;Ich dich ehren? Wofür?⟯ !&gt; ⟮c38;sb;Hast du die Schmerzen gelindert⟯ !&gt; ⟮c39;sb;Je des Beladenen?⟯ !&gt; ⟮c40;sb;Hast du die Tränen gestillet⟯ !&gt; ⟮c41;sb;Je des Geängsteten?⟯ !&gt; ⟮c42;sb;Hat nicht mich zum Manne geschmiedet⟯ !&gt; ⟮c43;sb;Die allmächtige Zeit⟯ !&gt; ⟮c44;sb;Und das ewige Schicksal,⟯ !&gt; ⟮c45;sb;Meine Herrn und deine?⟯  !&gt; ⟮c46;sb;Wähntest du etwa,⟯ !&gt; ⟮c47;sb;Ich sollte das Leben hassen,⟯ !&gt; ⟮c48;sb;In Wüsten fliehen,⟯ !&gt; ⟮c49;sb;Weil nicht alle⟯ !&gt; ⟮c50;sb;Blütenträume reiften?⟯  !&gt; ⟮c51;sb;Hier sitz' ich, forme Menschen⟯ !&gt; ⟮c52;sb;Nach meinem Bilde,⟯ !&gt; ⟮c53;sb;Ein Geschlecht, das mir gleich sei,⟯ !&gt; ⟮c54;sb;Zu leiden, zu weinen,⟯ !&gt; ⟮sb;Zu ⟮c55;genießen⟯ ⟮c56;und zu freuen sich,⟯⟯ !&gt; ⟮c57;sb;Und dein nicht zu achten,⟯ !&gt; ⟮c58;sb;Wie ich!⟯  #! ja  ##! Man'yōshū vol. 11, verse 2514 - 2513  !&gt; ⟮c59;sb;A faint clap of thunder⟯ !&gt; ⟮c60;sb;Clouded skies⟯ !&gt; ⟮c61;sb;Perhaps rain comes⟯ !&gt; ⟮c62;sb;If so, will you stay here with me?⟯  !&gt; ⟮c63;sb;A faint clap of thunder⟯ !&gt; ⟮c64;sb;Even if rain comes not⟯ !&gt; ⟮c65;sb;I will stay here⟯ !&gt; ⟮c66;sb;Together with you⟯  #! en  ##! Warming Her Pearls (by Carol Ann Duffy)  !&gt; ⟮c67;sb;Next to my own skin, her pearls. My mistress⟯ !&gt; ⟮c68;sb;bids me wear them, warm them, until evening⟯ !&gt; ⟮c69;sb;when I'll brush her hair. At six, I place them⟯ !&gt; ⟮c70;sb;round her cool, white throat. All day I think of her,⟯  !&gt; ⟮c71;sb;resting in the Yellow Room, contemplating silk⟯ !&gt; ⟮c72;sb;or taffeta, which gown tonight? She fans herself⟯ !&gt; ⟮c73;sb;whilst I work willingly, my slow heat entering⟯ !&gt; ⟮c74;sb;each pearl. Slack on my neck, her rope.⟯  !&gt; ⟮c75;sb;She's beautiful. I dream about her⟯ !&gt; ⟮c76;sb;in my attic bed; picture her dancing⟯ !&gt; ⟮c77;sb;with tall men, puzzled by my faint, persistent scent⟯ !&gt; ⟮c78;sb;beneath her French perfume, her milky stones.⟯  !&gt; ⟮c79;sb;I dust her shoulders with a rabbit's foot,⟯ !&gt; ⟮c80;sb;watch the soft blush seep through her skin⟯ !&gt; ⟮c81;sb;like an indolent sigh. In her looking-glass⟯ !&gt; ⟮c82;sb;my red lips part as though I want to speak.⟯  !&gt; ⟮c83;sb;Full moon. Her carriage brings her home. I see⟯ !&gt; ⟮c84;sb;her every movement in my head.... Undressing,⟯ !&gt; ⟮c85;sb;taking off her jewels, her slim hand reaching⟯ !&gt; ⟮c86;sb;for the case, slipping naked into bed, the way⟯  !&gt; ⟮c87;sb;she always does.... And I lie here awake,⟯ !&gt; ⟮c88;sb;knowing the pearls are cooling even now⟯ !&gt; ⟮c89;sb;in the room where my mistress sleeps. All night⟯ !&gt; ⟮c90;sb;I feel their absence and I burn.⟯  ##! 『 Not Waving but Drowning 』 Stevie Smith 1972  !&gt; ⟮c91;sb;Nobody heard him, the dead man,   ⟯ !&gt; ⟮c92;sb;But still he lay moaning:⟯ !&gt; ⟮c93;sb;I was much further out than you thought   ⟯ !&gt; ⟮c94;sb;And not waving but drowning.⟯  !&gt; ⟮c95;sb;Poor chap, he always loved larking⟯ !&gt; ⟮c96;sb;And now he’s dead⟯ !&gt; ⟮c97;sb;It must have been too cold for him his heart gave way,   ⟯ !&gt; ⟮c98;sb;They said.⟯  !&gt; ⟮c99;sb;Oh, no no no, it was too cold always   ⟯ !&gt; ⟮c100;sb;(Still the dead one lay moaning)   ⟯ !&gt; ⟮c101;sb;I was much too far out all my life   ⟯ !&gt; ⟮c102;sb;And not waving but drowning.⟯  ##! Helen of Troy Does Countertop Dancing (by Margaret Atwood)  !&gt; ⟮c103;sb;The world is full of women⟯ !&gt; ⟮c104;sb;who'd tell me I should be ashamed of myself⟯ !&gt; ⟮c105;sb;if they had the chance. Quit dancing.⟯ !&gt; ⟮c106;sb;Get some self-respect⟯ !&gt; ⟮c107;sb;and a day job.⟯ !&gt; ⟮c108;sb;Right. And minimum wage,⟯ !&gt; ⟮c109;sb;and varicose veins, just standing⟯ !&gt; ⟮c110;sb;in one place for eight hours⟯ !&gt; ⟮c111;sb;behind a glass counter⟯ !&gt; ⟮c112;sb;bundled up to the neck, instead of⟯ !&gt; ⟮c113;sb;naked as a meat sandwich.⟯ !&gt; ⟮c114;sb;Selling gloves, or something.⟯ !&gt; ⟮c115;sb;Instead of what I do sell.⟯ !&gt; ⟮c116;sb;You have to have talent⟯ !&gt; ⟮c117;sb;to peddle a thing so nebulous⟯ !&gt; ⟮c118;sb;and without material form.⟯ !&gt; ⟮c119;sb;Exploited, they'd say. Yes, any way⟯ !&gt; ⟮c120;sb;you cut it, but I've a choice⟯ !&gt; ⟮c121;sb;of how, and I'll take the money.⟯  !&gt; ⟮c122;sb;I do give value.⟯ !&gt; ⟮c123;sb;Like preachers, I sell vision,⟯ !&gt; ⟮c124;sb;like perfume ads, desire⟯ !&gt; ⟮c125;sb;or its facsimile. Like jokes⟯ !&gt; ⟮c126;sb;or war, it's all in the timing.⟯ !&gt; ⟮c127;sb;I sell men back their worse suspicions:⟯ !&gt; ⟮c128;sb;that everything's for sale,⟯ !&gt; ⟮c129;sb;and piecemeal. They gaze at me and see⟯ !&gt; ⟮c130;sb;a chain-saw murder just before it happens,⟯ !&gt; ⟮c131;sb;when thigh, ass, inkblot, crevice, tit, and nipple⟯ !&gt; ⟮c132;sb;are still connected.⟯ !&gt; ⟮c133;sb;Such hatred leaps in them,⟯ !&gt; ⟮c134;sb;my beery worshippers! That, or a bleary⟯ !&gt; ⟮c135;sb;hopeless love. Seeing the rows of heads⟯ !&gt; ⟮c136;sb;and upturned eyes, imploring⟯ !&gt; ⟮c137;sb;but ready to snap at my ankles,⟯ !&gt; ⟮c138;sb;I understand floods and earthquakes, and the urge⟯ !&gt; ⟮c139;sb;to step on ants. I keep the beat,⟯ !&gt; ⟮c140;sb;and dance for them because⟯ !&gt; ⟮c141;sb;they can't. The music smells like foxes,⟯ !&gt; ⟮c142;sb;crisp as heated metal⟯ !&gt; ⟮c143;sb;searing the nostrils⟯ !&gt; ⟮c144;sb;or humid as August, hazy and languorous⟯ !&gt; ⟮c145;sb;as a looted city the day after,⟯ !&gt; ⟮c146;sb;when all the rape's been done⟯ !&gt; ⟮c147;sb;already, and the killing,⟯ !&gt; ⟮c148;sb;and the survivors wander around⟯ !&gt; ⟮c149;sb;looking for garbage⟯ !&gt; ⟮c150;sb;to eat, and there's only a bleak exhaustion.⟯ !&gt; ⟮c151;sb;Speaking of which, it's the smiling⟯ !&gt; ⟮c152;sb;tires me out the most.⟯ !&gt; ⟮c153;sb;This, and the pretence⟯ !&gt; ⟮c154;sb;that I can't hear them.⟯ !&gt; ⟮c155;sb;And I can't, because I'm after all⟯ !&gt; ⟮c156;sb;a foreigner to them.⟯ !&gt; ⟮c157;sb;The speech here is all warty gutturals,⟯ !&gt; ⟮c158;sb;obvious as a slab of ham,⟯ !&gt; ⟮c159;sb;but I come from the province of the gods⟯ !&gt; ⟮c160;sb;where meanings are lilting and oblique.⟯ !&gt; ⟮c161;sb;I don't let on to everyone,⟯ !&gt; ⟮c162;sb;but lean close, and I'll whisper:⟯ !&gt; ⟮c163;sb;My mother was raped by a holy swan.⟯ !&gt; ⟮c164;sb;You believe that? You can take me out to dinner.⟯ !&gt; ⟮c165;sb;That's what we tell all the husbands.⟯ !&gt; ⟮c166;sb;There sure are a lot of dangerous birds around.⟯  !&gt; ⟮c167;sb;Not that anyone here⟯ !&gt; ⟮c168;sb;but you would understand.⟯ !&gt; ⟮c169;sb;The rest of them would like to watch me⟯ !&gt; ⟮c170;sb;and feel nothing. Reduce me to components⟯ !&gt; ⟮c171;sb;as in a clock factory or abattoir.⟯ !&gt; ⟮c172;sb;Crush out the mystery.⟯ !&gt; ⟮c173;sb;Wall me up alive⟯ !&gt; ⟮c174;sb;in my own body.⟯ !&gt; ⟮c175;sb;They'd like to see through me,⟯ !&gt; ⟮c176;sb;but nothing is more opaque⟯ !&gt; ⟮c177;sb;than absolute transparency.⟯ !&gt; ⟮c178;sb;Look--my feet don't hit the marble!⟯ !&gt; ⟮c179;sb;Like breath or a balloon, I'm rising,⟯ !&gt; ⟮c180;sb;I hover six inches in the air⟯ !&gt; ⟮c181;sb;in my blazing swan-egg of light.⟯ !&gt; ⟮c182;sb;You think I'm not a goddess?⟯ !&gt; ⟮c183;sb;Try me.⟯ !&gt; ⟮c184;sb;This is a torch song.⟯ !&gt; ⟮c185;sb;Touch me and you'll burn.⟯  ##! Extract from Meditations in an Emergency  !&gt; ⟮c186;sb;I can't even enjoy a blade of grass ⟯ !&gt; ⟮c187;sb;unless I know there's a subway handy,⟯ !&gt; ⟮c188;sb;or a record store ⟯ !&gt; ⟮c189;sb;or some other sign that people do not totally regret life.⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}{{c72::}}{{c73::}}{{c74::}}{{c75::}}{{c76::}}{{c77::}}{{c78::}}{{c79::}}{{c80::}}{{c81::}}{{c82::}}{{c83::}}{{c84::}}{{c85::}}{{c86::}}{{c87::}}{{c88::}}{{c89::}}{{c90::}}{{c91::}}{{c92::}}{{c93::}}{{c94::}}{{c95::}}{{c96::}}{{c97::}}{{c98::}}{{c99::}}{{c100::}}{{c101::}}{{c102::}}{{c103::}}{{c104::}}{{c105::}}{{c106::}}{{c107::}}{{c108::}}{{c109::}}{{c110::}}{{c111::}}{{c112::}}{{c113::}}{{c114::}}{{c115::}}{{c116::}}{{c117::}}{{c118::}}{{c119::}}{{c120::}}{{c121::}}{{c122::}}{{c123::}}{{c124::}}{{c125::}}{{c126::}}{{c127::}}{{c128::}}{{c129::}}{{c130::}}{{c131::}}{{c132::}}{{c133::}}{{c134::}}{{c135::}}{{c136::}}{{c137::}}{{c138::}}{{c139::}}{{c140::}}{{c141::}}{{c142::}}{{c143::}}{{c144::}}{{c145::}}{{c146::}}{{c147::}}{{c148::}}{{c149::}}{{c150::}}{{c151::}}{{c152::}}{{c153::}}{{c154::}}{{c155::}}{{c156::}}{{c157::}}{{c158::}}{{c159::}}{{c160::}}{{c161::}}{{c162::}}{{c163::}}{{c164::}}{{c165::}}{{c166::}}{{c167::}}{{c168::}}{{c169::}}{{c170::}}{{c171::}}{{c172::}}{{c173::}}{{c174::}}{{c175::}}{{c176::}}{{c177::}}{{c178::}}{{c179::}}{{c180::}}{{c181::}}{{c182::}}{{c183::}}{{c184::}}{{c185::}}{{c186::}}{{c187::}}{{c188::}}{{c189::}}</span>"	misc::text-by-heart::poetry
"#! The Serenity Prayer  !&gt; ⟮c1;sb;God, grant me the serenity to accept the things I cannot change,⟯ !&gt; ⟮c2;sb;courage to change the things I can,⟯ !&gt; ⟮c3;sb;and wisdom to know the difference.⟯  #! Símon Bolivar's conclusion about the americas  Simon Bolivars Letter near the end of his life: 1. ⟮c4;sb;America is ungovernable.⟯ 2. ⟮c5;sb;He who serves revolution plows the sea.⟯ 3. ⟮c6;sb;The only thing one can do in America is emigrate.⟯ 4. ⟮c7;sb;This country will first fall into the hands of the unbridled crowd and then pass imperceptibly to tyrants of all colors and races.⟯ 5. ⟮c8;sb;Devoured by all crimes and extinguished by ferocity, the Europeans will not even deign to conquer us.⟯ 6. ⟮c9;sb;If it is possible for one part of the world to return to primitive chaos, it is America.⟯  #! John Chivington, 1864, about indians  !&gt; ⟮c10;sb;I have come to kill Indians,⟯ !&gt; ⟮c11;sb;and believe it is right and honorable to use⟯ !&gt; ⟮c12;sb;any means under God's heaven to kill Indians.⟯ !&gt; ⟮c13;sb;Kill and scalp all, big and little; nits make lice!⟯  #! Gettysburg Address (1863)  !&gt; ⟮c14;sb;Four score and seven years ago our fathers brought forth on this continent,⟯ !&gt; ⟮c15;sb;a new nation, conceived in Liberty⟯,  !&gt; ⟮c16;sb;and dedicated to the proposition that all men are created equal.⟯  !&gt; ⟮c17;sb;Now we are engaged in a great civil war,⟯ !&gt; ⟮c18;sb;testing whether that nation,⟯ !&gt; ⟮c19;sb;or any nation so conceived and so dedicated,⟯ !&gt; ⟮c20;sb;can long endure.⟯ !&gt; ⟮c21;sb;We are met on a great battle-field of that war.⟯ !&gt; ⟮c22;sb;We have come to dedicate a portion of that field, as a final resting place⟯ !&gt; ⟮c23;sb;for those who here gave their lives that that nation might live.⟯ !&gt; ⟮c24;sb;It is altogether fitting and proper that we should do this. ⟯  !&gt; ⟮c25;sb;But, in a larger sense,⟯ !&gt; ⟮c26;sb;we can not dedicate—⟯ !&gt; ⟮c27;sb;we can not consecrate—⟯ !&gt; ⟮c28;sb;we can not hallow—this ground. ⟯ !&gt; ⟮c29;sb;The brave men, living and dead, ⟯ !&gt; ⟮c30;sb;who struggled here, have consecrated it, ⟯ !&gt; ⟮c31;sb;far above our poor power to add or detract. ⟯ !&gt; ⟮c32;sb;The world will little note, nor long remember what we say here, ⟯ !&gt; ⟮c33;sb;but it can never forget what they did here. ⟯ !&gt; ⟮c34;sb;It is for us, the living, rather, ⟯ !&gt; ⟮c35;sb;to be dedicated here to the unfinished work ⟯ !&gt; ⟮c36;sb;which they who fought here have thus far so nobly advanced.⟯ !&gt; ⟮c37;sb;It is rather for us to be here dedicated to the great task remaining before us—⟯ !&gt; ⟮c38;sb;that from these honored dead we take increased devotion⟯ !&gt; ⟮c39;sb;to that cause for which they gave the last full measure of devotion—⟯ !&gt; ⟮c40;sb;that we here highly resolve that these dead shall not have died in vain—⟯ !&gt; ⟮c41;sb;that this nation, under God,⟯ !&gt; ⟮c42;sb;shall have a new birth of freedom—⟯ !&gt; ⟮c43;sb;and that government of the people,⟯ !&gt; ⟮c44;sb;by the people,⟯ !&gt; ⟮c45;sb;for the people,⟯ !&gt; ⟮c46;sb;shall not perish from the earth.⟯ ^there are multiple versions, this is the 'canonical' one, although probably not the one he actually delivered  #! misc  !&gt; the papal legate after the first conquest during the crusade against the cathars: ⟮c47;Kill them all, let God sort them out.⟯ / ⟮c48;Kill them all. God will know his own.⟯   !&gt; Antonio José de Sucre to Simón Bolívar, after his exile: ⟮c49;Goodbye, my general. Take as a measure of my fondness these flowing tears.⟯   !&gt; After his trial, ⟮c50;Gallileo⟯ supposedly said: ⟮c51;And yet it moves!⟯   !&gt; ⟮c52;Tell me, what is it you plan to do⟯ ⟮c53;with your one wild and precious life?⟯   !&gt; ⟮c54;I was supposed to be the one⟯ ⟮c55;to fill your dark soul with light⟯!   !&gt; The personal motto of ⟮c56;Cesare Borgia⟯ (supposedly, though finding a source is hard) was: (in Latin) ⟮c57;Aut Caesar, aut nihil.⟯ / (in English)⟮c58;(Either) Caesar or nothing.⟯   <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}</span>"	misc::text-by-heart::prayers,-speeches,-quotes
"#! Braiding  ##! Three-Strand Braiding  1. ⟮c1;sb;<img src=""sm__3strandbraid1.jpg"">⟯ 2. ⟮c2;sb;<img src=""sm__3strandbraid2.jpg"">⟯ 3. ⟮c3;sb;<img src=""sm__3strandbraid3.jpg"">⟯ 4. ⟮c4;sb;<img src=""sm__3strandbraid4.jpg"">⟯ 5. ⟮c5;sb;<img src=""sm__3strandbraid5.jpg"">⟯ 6. ⟮c6;sb;<img src=""sm__3strandbraid6.jpg"">⟯ 7. ⟮c7;sb;<img src=""sm__3strandbraid7.jpg"">⟯ 8. ⟮c8;sb;<img src=""sm__3strandbraid8.jpg"">⟯ 9. ⟮c9;sb;<img src=""sm__3strandbraid9.jpg"">⟯ 10. ⟮c10;sb;<img src=""sm__3strandbraid10.jpg"">⟯  #! around appendages  ##! any  ###! Lark's Head Single Collumn Tie  1. ⟮c11;sb;<img src=""sm_Screenshot 2019-09-24 at 17.15.05.jpg"">⟯ 2. ⟮c12;sb;<img src=""sm_Screenshot 2019-09-24 at 17.15.10.jpg"">⟯ 3. ⟮c13;sb;<img src=""sm_Screenshot 2019-09-24 at 17.15.34.jpg"">⟯ 4. ⟮c14;sb;<img src=""sm_Screenshot 2019-09-24 at 17.16.03.jpg"">⟯ 5. ⟮c15;sb;<img src=""sm_Screenshot 2019-09-24 at 17.16.08.jpg"">⟯ 6. ⟮c16;sb;<img src=""sm_Screenshot 2019-09-24 at 17.16.20.jpg"">⟯ 7. ⟮c17;sb;<img src=""sm_Screenshot 2019-09-24 at 17.16.31.jpg"">⟯  ###! ⟮c18;sb;Loop-chain leash⟯  1. ⟮c19;sb;<img src=""sm_Neck-Lead-02.jpg"">⟯ 2. ⟮c20;sb;<img src=""sm_Neck-Lead-03.jpg"">⟯ 3. ⟮c21;sb;<img src=""sm_Neck-Lead-04.jpg"">⟯ 4. ⟮c22;sb;<img src=""sm_Neck-Lead-05.jpg"">⟯ 5. ⟮c23;sb;<img src=""sm_Neck-Lead-06.jpg"">⟯ 6. ⟮c24;sb;<img src=""sm_Neck-Lead-07.jpg"">⟯ 7. ⟮c25;sb;<img src=""sm_Neck-Lead-08.jpg"">⟯ 8. ⟮c26;sb;<img src=""sm_Neck-Lead-09.jpg"">⟯ 9. ⟮c27;sb;<img src=""sm_Neck-Lead-10.jpg"">⟯ 10. ⟮c28;sb;<img src=""sm_Neck-Lead-11.jpg"">⟯ 11. ⟮c29;sb;<img src=""sm_Neck-Lead-12.jpg"">⟯  ##! hair  ###! ⟮c30;uh∞;Hair tie⟯  1. ⟮c31;sb;<img src=""sm_Prusik-Hair-Tie-05.jpg"">⟯ 2. ⟮c32;sb;<img src=""sm_Prusik-Hair-Tie-06.jpg"">⟯ 3. ⟮c33;sb;<img src=""sm_Prusik-Hair-Tie-07.jpg"">⟯ 4. ⟮c34;sb;<img src=""sm_Prusik-Hair-Tie-08.jpg"">⟯  #! two ends together  ##! ⟮c35;Square Knot⟯  1. ⟮c36;sb;<img src=""sm_Square-Knot-01.jpg"">⟯ 2. ⟮c37;sb;<img src=""sm_Square-Knot-02.jpg"">⟯ 3. ⟮c38;sb;<img src=""sm_Square-Knot-03.jpg"">⟯ 4. ⟮c39;sb;<img src=""sm_Square-Knot-04.jpg"">⟯  ##! ⟮c40;Surgeons Knot⟯  1. ⟮c41;sb;<img src=""sm_Surgeons-Knot-01.jpg"">⟯ 2. ⟮c42;sb;<img src=""sm_Surgeons-Knot-02.jpg"">⟯ 3. ⟮c43;sb;<img src=""sm_Surgeons-Knot-03.jpg"">⟯ 4. ⟮c44;sb;<img src=""sm_Surgeons-Knot-04.jpg"">⟯  ##! Double Coin Knot  1. ⟮c45;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.14.png"">⟯ 2. ⟮c46;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.26.png"">⟯ 3. ⟮c47;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.30.jpg"">⟯ 4. ⟮c48;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.33.jpg"">⟯ 5. ⟮c49;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.36.jpg"">⟯ 6. ⟮c50;sb;<img src=""sm_Screenshot 2019-09-24 at 17.11.41.jpg"">⟯  #! Prusik  ##! ⟮c51;Prusik shackle⟯  1. ⟮c52;sb;<img src=""sm_Prusik-Shackle-01.jpg"">⟯ 2. ⟮c53;sb;<img src=""sm_Prusik-Shackle-02.jpg"">⟯ 3. ⟮c54;sb;<img src=""sm_Prusik-Shackle-04.jpg"">⟯ 4. ⟮c55;sb;<img src=""sm_Prusik-Shackle-05.jpg"">⟯  ##! ⟮c56;Prusik Cuffs⟯  1. ⟮c57;sb;<img src=""sm_Prusik-Handcuffs-01.jpg"">⟯ 2. ⟮c58;sb;<img src=""sm_Prusik-Handcuffs-03.jpg"">⟯ 3. ⟮c59;sb;<img src=""sm_Prusik-Handcuffs-06.jpg"">⟯ 4. ⟮c60;sb;<img src=""sm_Prusik-Handcuffs-08.jpg"">⟯  ##! ⟮c61;Prusic head⟯  1. ⟮c62;sb;<img src=""sm_Prusik-Head-1-01.jpg"">⟯ 2. ⟮c63;sb;<img src=""sm_Prusik-Head-1-03.jpg"">⟯ 3. ⟮c64;sb;<img src=""sm_Prusik-Head-1-04.jpg"">⟯ 4. ⟮c65;sb;<img src=""sm_Prusik-Head-1-05.jpg"">⟯ 5. ⟮c66;sb;<img src=""sm_Prusik-Head-1-06.jpg"">⟯ 6. ⟮c67;sb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯ 7. ⟮c68;sb;<img src=""sm_Prusik-Head-1-07.jpg"">⟯  #! misc  flex-container:⟮ha;<img src=""sm_Screenshot 2020-06-30 at 21.28.32.jpg"">⟯⟮ha;<img src=""sm_Screenshot 2019-08-19 at 01.13.22.jpg"">⟯   For the '⟮c69;many wrap⟯' technique for shortening cables, you start with ⟮c70;an overhand knot⟯ and then ⟮c71;Just continue wrapping⟯  <span class=""cloze-dump"">{{c1::}}{{c2::}}{{c3::}}{{c4::}}{{c5::}}{{c6::}}{{c7::}}{{c8::}}{{c9::}}{{c10::}}{{c11::}}{{c12::}}{{c13::}}{{c14::}}{{c15::}}{{c16::}}{{c17::}}{{c18::}}{{c19::}}{{c20::}}{{c21::}}{{c22::}}{{c23::}}{{c24::}}{{c25::}}{{c26::}}{{c27::}}{{c28::}}{{c29::}}{{c30::}}{{c31::}}{{c32::}}{{c33::}}{{c34::}}{{c35::}}{{c36::}}{{c37::}}{{c38::}}{{c39::}}{{c40::}}{{c41::}}{{c42::}}{{c43::}}{{c44::}}{{c45::}}{{c46::}}{{c47::}}{{c48::}}{{c49::}}{{c50::}}{{c51::}}{{c52::}}{{c53::}}{{c54::}}{{c55::}}{{c56::}}{{c57::}}{{c58::}}{{c59::}}{{c60::}}{{c61::}}{{c62::}}{{c63::}}{{c64::}}{{c65::}}{{c66::}}{{c67::}}{{c68::}}{{c69::}}{{c70::}}{{c71::}}</span>"	misc::knots